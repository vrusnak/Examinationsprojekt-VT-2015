
ExProjektPingisVicMic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e0c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00088e0c  00088e0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008d8  20070000  00088e14  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a36c  200708d8  000896f0  000188d8  2**3
                  ALLOC
  4 .stack        00002004  2007ac44  00093a5c  000188d8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000188d8  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018901  2**0
                  CONTENTS, READONLY
  7 .debug_info   00039b26  00000000  00000000  00018972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ab52  00000000  00000000  00052498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014ddc  00000000  00000000  0005cfea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001858  00000000  00000000  00071dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001038  00000000  00000000  00073620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a1d9  00000000  00000000  00074658  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d772  00000000  00000000  0008e831  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006ab9f  00000000  00000000  000abfa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000036d8  00000000  00000000  00116b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cc48 	.word	0x2007cc48
   80004:	000825bd 	.word	0x000825bd
   80008:	000825b9 	.word	0x000825b9
   8000c:	000825b9 	.word	0x000825b9
   80010:	000825b9 	.word	0x000825b9
   80014:	000825b9 	.word	0x000825b9
   80018:	000825b9 	.word	0x000825b9
	...
   8002c:	000808d5 	.word	0x000808d5
   80030:	000825b9 	.word	0x000825b9
   80034:	00000000 	.word	0x00000000
   80038:	00080951 	.word	0x00080951
   8003c:	0008098d 	.word	0x0008098d
   80040:	000825b9 	.word	0x000825b9
   80044:	000825b9 	.word	0x000825b9
   80048:	000825b9 	.word	0x000825b9
   8004c:	000825b9 	.word	0x000825b9
   80050:	000825b9 	.word	0x000825b9
   80054:	000825b9 	.word	0x000825b9
   80058:	000825b9 	.word	0x000825b9
   8005c:	000825b9 	.word	0x000825b9
   80060:	000825b9 	.word	0x000825b9
   80064:	000825b9 	.word	0x000825b9
   80068:	00000000 	.word	0x00000000
   8006c:	00082429 	.word	0x00082429
   80070:	0008243d 	.word	0x0008243d
   80074:	00082451 	.word	0x00082451
   80078:	00082465 	.word	0x00082465
	...
   80084:	000825b9 	.word	0x000825b9
   80088:	000825b9 	.word	0x000825b9
   8008c:	000825b9 	.word	0x000825b9
   80090:	000825b9 	.word	0x000825b9
   80094:	000825b9 	.word	0x000825b9
   80098:	000825b9 	.word	0x000825b9
   8009c:	000825b9 	.word	0x000825b9
   800a0:	000825b9 	.word	0x000825b9
   800a4:	00000000 	.word	0x00000000
   800a8:	000825b9 	.word	0x000825b9
   800ac:	000825b9 	.word	0x000825b9
   800b0:	000825b9 	.word	0x000825b9
   800b4:	000825b9 	.word	0x000825b9
   800b8:	000825b9 	.word	0x000825b9
   800bc:	000825b9 	.word	0x000825b9
   800c0:	000825b9 	.word	0x000825b9
   800c4:	000825b9 	.word	0x000825b9
   800c8:	000825b9 	.word	0x000825b9
   800cc:	000825b9 	.word	0x000825b9
   800d0:	000825b9 	.word	0x000825b9
   800d4:	000825b9 	.word	0x000825b9
   800d8:	000825b9 	.word	0x000825b9
   800dc:	000825b9 	.word	0x000825b9
   800e0:	000825b9 	.word	0x000825b9
   800e4:	000825b9 	.word	0x000825b9
   800e8:	000825b9 	.word	0x000825b9
   800ec:	000825b9 	.word	0x000825b9
   800f0:	000825b9 	.word	0x000825b9

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00088e14 	.word	0x00088e14
   80110:	00088e17 	.word	0x00088e17
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00088e14 	.word	0x00088e14
   8013c:	00088e14 	.word	0x00088e14
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	200708d8 	.word	0x200708d8
   80164:	00000000 	.word	0x00000000
   80168:	00088e14 	.word	0x00088e14

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00088e14 	.word	0x00088e14
   80198:	200708dc 	.word	0x200708dc
   8019c:	00088e14 	.word	0x00088e14
   801a0:	00000000 	.word	0x00000000

000801a4 <InitADC>:

/************************************************************************/
/* Configuration of AD-converter. */
/************************************************************************/
void InitADC(void)
{
   801a4:	b538      	push	{r3, r4, r5, lr}
	/* Configure power management of ADC timer clock */
	pmc_enable_periph_clk(ID_ADC);
   801a6:	2025      	movs	r0, #37	; 0x25
   801a8:	4b0e      	ldr	r3, [pc, #56]	; (801e4 <InitADC+0x40>)
   801aa:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8); //	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);
   801ac:	4c0e      	ldr	r4, [pc, #56]	; (801e8 <InitADC+0x44>)
   801ae:	4620      	mov	r0, r4
   801b0:	490e      	ldr	r1, [pc, #56]	; (801ec <InitADC+0x48>)
   801b2:	4a0f      	ldr	r2, [pc, #60]	; (801f0 <InitADC+0x4c>)
   801b4:	2308      	movs	r3, #8
   801b6:	4d0f      	ldr	r5, [pc, #60]	; (801f4 <InitADC+0x50>)
   801b8:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   801ba:	4620      	mov	r0, r4
   801bc:	2100      	movs	r1, #0
   801be:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   801c2:	2301      	movs	r3, #1
   801c4:	4d0c      	ldr	r5, [pc, #48]	; (801f8 <InitADC+0x54>)
   801c6:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_10);
   801c8:	4620      	mov	r0, r4
   801ca:	2110      	movs	r1, #16
   801cc:	4b0b      	ldr	r3, [pc, #44]	; (801fc <InitADC+0x58>)
   801ce:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);
   801d0:	4620      	mov	r0, r4
   801d2:	210a      	movs	r1, #10
   801d4:	4b0a      	ldr	r3, [pc, #40]	; (80200 <InitADC+0x5c>)
   801d6:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   801d8:	4620      	mov	r0, r4
   801da:	2100      	movs	r1, #0
   801dc:	460a      	mov	r2, r1
   801de:	4b09      	ldr	r3, [pc, #36]	; (80204 <InitADC+0x60>)
   801e0:	4798      	blx	r3
   801e2:	bd38      	pop	{r3, r4, r5, pc}
   801e4:	00082561 	.word	0x00082561
   801e8:	400c0000 	.word	0x400c0000
   801ec:	0a037a00 	.word	0x0a037a00
   801f0:	000f4240 	.word	0x000f4240
   801f4:	00080269 	.word	0x00080269
   801f8:	000802bd 	.word	0x000802bd
   801fc:	0008029d 	.word	0x0008029d
   80200:	000802e5 	.word	0x000802e5
   80204:	000802ad 	.word	0x000802ad

00080208 <ReadFanValue>:

/************************************************************************/
/* Returns a value from channel 10 on the analogue input. */
/************************************************************************/
uint32_t ReadFanValue(void)
{
   80208:	b510      	push	{r4, lr}
	uint32_t currSensorValue;
	adc_start(ADC);
   8020a:	4c04      	ldr	r4, [pc, #16]	; (8021c <ReadFanValue+0x14>)
   8020c:	4620      	mov	r0, r4
   8020e:	4b04      	ldr	r3, [pc, #16]	; (80220 <ReadFanValue+0x18>)
   80210:	4798      	blx	r3
	currSensorValue = adc_get_channel_value(ADC, ADC_CHANNEL_10);
   80212:	4620      	mov	r0, r4
   80214:	210a      	movs	r1, #10
   80216:	4b03      	ldr	r3, [pc, #12]	; (80224 <ReadFanValue+0x1c>)
   80218:	4798      	blx	r3
	return currSensorValue;
   8021a:	bd10      	pop	{r4, pc}
   8021c:	400c0000 	.word	0x400c0000
   80220:	000802dd 	.word	0x000802dd
   80224:	000802f1 	.word	0x000802f1

00080228 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8022c:	460c      	mov	r4, r1
   8022e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80230:	b960      	cbnz	r0, 8024c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80232:	2a00      	cmp	r2, #0
   80234:	dd0e      	ble.n	80254 <_read+0x2c>
   80236:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80238:	4e09      	ldr	r6, [pc, #36]	; (80260 <_read+0x38>)
   8023a:	4d0a      	ldr	r5, [pc, #40]	; (80264 <_read+0x3c>)
   8023c:	6830      	ldr	r0, [r6, #0]
   8023e:	4621      	mov	r1, r4
   80240:	682b      	ldr	r3, [r5, #0]
   80242:	4798      	blx	r3
		ptr++;
   80244:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80246:	42bc      	cmp	r4, r7
   80248:	d1f8      	bne.n	8023c <_read+0x14>
   8024a:	e006      	b.n	8025a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8024c:	f04f 30ff 	mov.w	r0, #4294967295
   80250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80254:	2000      	movs	r0, #0
   80256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8025a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80260:	2007ac3c 	.word	0x2007ac3c
   80264:	2007ac0c 	.word	0x2007ac0c

00080268 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80268:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8026a:	2401      	movs	r4, #1
   8026c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8026e:	2400      	movs	r4, #0
   80270:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80272:	f240 2502 	movw	r5, #514	; 0x202
   80276:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8027a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8027e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80282:	6845      	ldr	r5, [r0, #4]
   80284:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80286:	0052      	lsls	r2, r2, #1
   80288:	fbb1 f1f2 	udiv	r1, r1, r2
   8028c:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8028e:	022d      	lsls	r5, r5, #8
   80290:	b2ad      	uxth	r5, r5
   80292:	432b      	orrs	r3, r5
   80294:	6043      	str	r3, [r0, #4]
	return 0;
}
   80296:	4620      	mov	r0, r4
   80298:	bc30      	pop	{r4, r5}
   8029a:	4770      	bx	lr

0008029c <adc_set_resolution>:
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
//p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   8029c:	6843      	ldr	r3, [r0, #4]
   8029e:	f023 0310 	bic.w	r3, r3, #16
   802a2:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   802a4:	6843      	ldr	r3, [r0, #4]
   802a6:	4319      	orrs	r1, r3
   802a8:	6041      	str	r1, [r0, #4]
   802aa:	4770      	bx	lr

000802ac <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   802ac:	6843      	ldr	r3, [r0, #4]
   802ae:	4319      	orrs	r1, r3
   802b0:	01d2      	lsls	r2, r2, #7
   802b2:	b2d3      	uxtb	r3, r2
   802b4:	4319      	orrs	r1, r3
   802b6:	6041      	str	r1, [r0, #4]
   802b8:	4770      	bx	lr
   802ba:	bf00      	nop

000802bc <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   802bc:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802be:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   802c0:	4322      	orrs	r2, r4
   802c2:	0609      	lsls	r1, r1, #24
   802c4:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   802c8:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802ca:	071b      	lsls	r3, r3, #28
   802cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   802d0:	431a      	orrs	r2, r3
   802d2:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   802d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   802d8:	4770      	bx	lr
   802da:	bf00      	nop

000802dc <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   802dc:	2302      	movs	r3, #2
   802de:	6003      	str	r3, [r0, #0]
   802e0:	4770      	bx	lr
   802e2:	bf00      	nop

000802e4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   802e4:	2301      	movs	r3, #1
   802e6:	fa03 f101 	lsl.w	r1, r3, r1
   802ea:	6101      	str	r1, [r0, #16]
   802ec:	4770      	bx	lr
   802ee:	bf00      	nop

000802f0 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   802f0:	290f      	cmp	r1, #15
   802f2:	d803      	bhi.n	802fc <adc_get_channel_value+0xc>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   802f4:	3114      	adds	r1, #20
   802f6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   802fa:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   802fc:	2000      	movs	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   802fe:	4770      	bx	lr

00080300 <setupUART>:
#include "SerialUART.h"

/************************************************************************/
/* Configuration of the UART. */
/************************************************************************/
void setupUART(void){
   80300:	b530      	push	{r4, r5, lr}
   80302:	b085      	sub	sp, #20
	pio_configure(PINS_UART_PIO, PINS_UART_TYPE, PINS_UART_MASK, PIO_DEFAULT);
   80304:	4c12      	ldr	r4, [pc, #72]	; (80350 <setupUART+0x50>)
   80306:	4620      	mov	r0, r4
   80308:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8030c:	f44f 7240 	mov.w	r2, #768	; 0x300
   80310:	2300      	movs	r3, #0
   80312:	4d10      	ldr	r5, [pc, #64]	; (80354 <setupUART+0x54>)
   80314:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART);
   80316:	2008      	movs	r0, #8
   80318:	4b0f      	ldr	r3, [pc, #60]	; (80358 <setupUART+0x58>)
   8031a:	4798      	blx	r3
	const sam_uart_opt_t uart0_settings = { sysclk_get_cpu_hz(), CONF_UART_BAUDRATE, UART_MR_PAR_NO };
   8031c:	4b0f      	ldr	r3, [pc, #60]	; (8035c <setupUART+0x5c>)
   8031e:	9301      	str	r3, [sp, #4]
   80320:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80324:	9302      	str	r3, [sp, #8]
   80326:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8032a:	9303      	str	r3, [sp, #12]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   8032c:	f44f 7380 	mov.w	r3, #256	; 0x100
   80330:	6663      	str	r3, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80332:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80334:	6263      	str	r3, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80336:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   8033a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   8033c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   80340:	6723      	str	r3, [r4, #112]	; 0x70
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
	uart_init(UART, &uart0_settings);
   80342:	4807      	ldr	r0, [pc, #28]	; (80360 <setupUART+0x60>)
   80344:	a901      	add	r1, sp, #4
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <setupUART+0x64>)
   80348:	4798      	blx	r3
}
   8034a:	b005      	add	sp, #20
   8034c:	bd30      	pop	{r4, r5, pc}
   8034e:	bf00      	nop
   80350:	400e0e00 	.word	0x400e0e00
   80354:	000821cd 	.word	0x000821cd
   80358:	00082561 	.word	0x00082561
   8035c:	0501bd00 	.word	0x0501bd00
   80360:	400e0800 	.word	0x400e0800
   80364:	00081fcd 	.word	0x00081fcd

00080368 <readByte>:
}

/************************************************************************/
/* Get and return a binary value. */
/************************************************************************/
uint8_t readByte(void){
   80368:	b500      	push	{lr}
   8036a:	b083      	sub	sp, #12
	uint8_t value;
	uart_read(CONF_UART, &value);
   8036c:	4804      	ldr	r0, [pc, #16]	; (80380 <readByte+0x18>)
   8036e:	f10d 0107 	add.w	r1, sp, #7
   80372:	4b04      	ldr	r3, [pc, #16]	; (80384 <readByte+0x1c>)
   80374:	4798      	blx	r3
	return value;
}
   80376:	f89d 0007 	ldrb.w	r0, [sp, #7]
   8037a:	b003      	add	sp, #12
   8037c:	f85d fb04 	ldr.w	pc, [sp], #4
   80380:	400e0800 	.word	0x400e0800
   80384:	00082019 	.word	0x00082019

00080388 <isRXReady>:

/************************************************************************/
/* Check if reciever side of UART is ready. */
/************************************************************************/
uint32_t isRXReady(void){
	return UART->UART_SR & UART_SR_RXRDY;
   80388:	4b02      	ldr	r3, [pc, #8]	; (80394 <isRXReady+0xc>)
   8038a:	6958      	ldr	r0, [r3, #20]
}
   8038c:	f000 0001 	and.w	r0, r0, #1
   80390:	4770      	bx	lr
   80392:	bf00      	nop
   80394:	400e0800 	.word	0x400e0800

00080398 <waitRXReady>:

/************************************************************************/
/* Wait for reciever side of UART to be ready. */
/************************************************************************/
uint32_t waitRXReady(void){
	while (!(UART->UART_SR & UART_SR_RXRDY));
   80398:	4a03      	ldr	r2, [pc, #12]	; (803a8 <waitRXReady+0x10>)
   8039a:	6953      	ldr	r3, [r2, #20]
   8039c:	f013 0f01 	tst.w	r3, #1
   803a0:	d0fb      	beq.n	8039a <waitRXReady+0x2>
	return 1;
}
   803a2:	2001      	movs	r0, #1
   803a4:	4770      	bx	lr
   803a6:	bf00      	nop
   803a8:	400e0800 	.word	0x400e0800

000803ac <readDouble>:

double readDouble(void){
   803ac:	b500      	push	{lr}
   803ae:	b085      	sub	sp, #20
	double result = 0.0;
	char str[10] ={0};
   803b0:	2300      	movs	r3, #0
   803b2:	9301      	str	r3, [sp, #4]
   803b4:	9302      	str	r3, [sp, #8]
   803b6:	f8ad 300c 	strh.w	r3, [sp, #12]
	scanf("%s", str);
   803ba:	4805      	ldr	r0, [pc, #20]	; (803d0 <readDouble+0x24>)
   803bc:	a901      	add	r1, sp, #4
   803be:	4b05      	ldr	r3, [pc, #20]	; (803d4 <readDouble+0x28>)
   803c0:	4798      	blx	r3
	result = atof(str);
   803c2:	a801      	add	r0, sp, #4
   803c4:	4b04      	ldr	r3, [pc, #16]	; (803d8 <readDouble+0x2c>)
   803c6:	4798      	blx	r3

	return result;
   803c8:	b005      	add	sp, #20
   803ca:	f85d fb04 	ldr.w	pc, [sp], #4
   803ce:	bf00      	nop
   803d0:	00088a20 	.word	0x00088a20
   803d4:	0008338d 	.word	0x0008338d
   803d8:	000832cd 	.word	0x000832cd

000803dc <InitPIN40>:

/************************************************************************/
/* Initiation of digital pin 40 on the Arduino Due board. */
/************************************************************************/
void InitPIN40(void)
{
   803dc:	b538      	push	{r3, r4, r5, lr}
	pwmPIN40.channel = PWM_CHANNEL_3;
   803de:	490c      	ldr	r1, [pc, #48]	; (80410 <InitPIN40+0x34>)
   803e0:	2403      	movs	r4, #3
   803e2:	600c      	str	r4, [r1, #0]
	pwmPIN40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   803e4:	220b      	movs	r2, #11
   803e6:	604a      	str	r2, [r1, #4]
	pwmPIN40.ul_duty = 0;
   803e8:	2200      	movs	r2, #0
   803ea:	60ca      	str	r2, [r1, #12]
	pwmPIN40.ul_period = 100;
   803ec:	2264      	movs	r2, #100	; 0x64
   803ee:	610a      	str	r2, [r1, #16]
	pwm_channel_init(PWM, &pwmPIN40);
   803f0:	4d08      	ldr	r5, [pc, #32]	; (80414 <InitPIN40+0x38>)
   803f2:	4628      	mov	r0, r5
   803f4:	4b08      	ldr	r3, [pc, #32]	; (80418 <InitPIN40+0x3c>)
   803f6:	4798      	blx	r3
	pio_set_peripheral(PIOC, PIO_PERIPH_B, PIO_PC8B_PWML3);
   803f8:	4808      	ldr	r0, [pc, #32]	; (8041c <InitPIN40+0x40>)
   803fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803fe:	f44f 7280 	mov.w	r2, #256	; 0x100
   80402:	4b07      	ldr	r3, [pc, #28]	; (80420 <InitPIN40+0x44>)
   80404:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80406:	4628      	mov	r0, r5
   80408:	4621      	mov	r1, r4
   8040a:	4b06      	ldr	r3, [pc, #24]	; (80424 <InitPIN40+0x48>)
   8040c:	4798      	blx	r3
   8040e:	bd38      	pop	{r3, r4, r5, pc}
   80410:	2007ac10 	.word	0x2007ac10
   80414:	40094000 	.word	0x40094000
   80418:	00081e8d 	.word	0x00081e8d
   8041c:	400e1200 	.word	0x400e1200
   80420:	00082131 	.word	0x00082131
   80424:	00081fb5 	.word	0x00081fb5

00080428 <InitPWM>:
pwm_channel_t pwmPIN40;

/************************************************************************/
/* Configuration of the Pulse Width Modulation (PWM). */
/************************************************************************/
void InitPWM(void){
   80428:	b510      	push	{r4, lr}
   8042a:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_PWM);
   8042c:	2024      	movs	r0, #36	; 0x24
   8042e:	4b0a      	ldr	r3, [pc, #40]	; (80458 <InitPWM+0x30>)
   80430:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   80432:	4c0a      	ldr	r4, [pc, #40]	; (8045c <InitPWM+0x34>)
   80434:	4620      	mov	r0, r4
   80436:	2103      	movs	r1, #3
   80438:	4b09      	ldr	r3, [pc, #36]	; (80460 <InitPWM+0x38>)
   8043a:	4798      	blx	r3
	
	pwm_clock_t clock_setting = {
   8043c:	4b09      	ldr	r3, [pc, #36]	; (80464 <InitPWM+0x3c>)
   8043e:	9301      	str	r3, [sp, #4]
   80440:	2300      	movs	r3, #0
   80442:	9302      	str	r3, [sp, #8]
   80444:	4b08      	ldr	r3, [pc, #32]	; (80468 <InitPWM+0x40>)
   80446:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000 * 1000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   80448:	4620      	mov	r0, r4
   8044a:	a901      	add	r1, sp, #4
   8044c:	4b07      	ldr	r3, [pc, #28]	; (8046c <InitPWM+0x44>)
   8044e:	4798      	blx	r3
	
	InitPIN40();
   80450:	4b07      	ldr	r3, [pc, #28]	; (80470 <InitPWM+0x48>)
   80452:	4798      	blx	r3
}
   80454:	b004      	add	sp, #16
   80456:	bd10      	pop	{r4, pc}
   80458:	00082561 	.word	0x00082561
   8045c:	40094000 	.word	0x40094000
   80460:	00081fc1 	.word	0x00081fc1
   80464:	000f4240 	.word	0x000f4240
   80468:	0501bd00 	.word	0x0501bd00
   8046c:	00081e4d 	.word	0x00081e4d
   80470:	000803dd 	.word	0x000803dd

00080474 <CalcFanValue>:

/************************************************************************/
/* Calculation of the output value. */
/************************************************************************/
void CalcFanValue(uint32_t dutyCycle)
{
   80474:	b508      	push	{r3, lr}
   80476:	2864      	cmp	r0, #100	; 0x64
   80478:	bf34      	ite	cc
   8047a:	4602      	movcc	r2, r0
   8047c:	2264      	movcs	r2, #100	; 0x64
	{
		dutyCycle=100;
	}
	if(dutyCycle <= 100 && dutyCycle >=0)
	{
		pwm_channel_update_duty(PWM, &pwmPIN40, dutyCycle);
   8047e:	4802      	ldr	r0, [pc, #8]	; (80488 <CalcFanValue+0x14>)
   80480:	4902      	ldr	r1, [pc, #8]	; (8048c <CalcFanValue+0x18>)
   80482:	4b03      	ldr	r3, [pc, #12]	; (80490 <CalcFanValue+0x1c>)
   80484:	4798      	blx	r3
   80486:	bd08      	pop	{r3, pc}
   80488:	40094000 	.word	0x40094000
   8048c:	2007ac10 	.word	0x2007ac10
   80490:	00081f91 	.word	0x00081f91

00080494 <SetDesiredValue>:
/************************************************************************/
/* Setup for default values. */
/************************************************************************/
void SetDesiredValue(uint32_t value)
{
	switch(value)
   80494:	3814      	subs	r0, #20
   80496:	2814      	cmp	r0, #20
   80498:	d824      	bhi.n	804e4 <SetDesiredValue+0x50>
   8049a:	e8df f000 	tbb	[pc, r0]
   8049e:	230b      	.short	0x230b
   804a0:	10232323 	.word	0x10232323
   804a4:	23232323 	.word	0x23232323
   804a8:	23232315 	.word	0x23232315
   804ac:	23231a23 	.word	0x23231a23
   804b0:	2323      	.short	0x2323
   804b2:	1f          	.byte	0x1f
   804b3:	00          	.byte	0x00
	{
		case 20:
		desiredValue = DISTANCE_20;
   804b4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   804b8:	4b0b      	ldr	r3, [pc, #44]	; (804e8 <SetDesiredValue+0x54>)
   804ba:	601a      	str	r2, [r3, #0]
		break;
   804bc:	4770      	bx	lr
		case 25:
		desiredValue =  DISTANCE_25;
   804be:	f44f 72c8 	mov.w	r2, #400	; 0x190
   804c2:	4b09      	ldr	r3, [pc, #36]	; (804e8 <SetDesiredValue+0x54>)
   804c4:	601a      	str	r2, [r3, #0]
		break;
   804c6:	4770      	bx	lr
		case 30:
		desiredValue = DISTANCE_30;
   804c8:	f44f 72be 	mov.w	r2, #380	; 0x17c
   804cc:	4b06      	ldr	r3, [pc, #24]	; (804e8 <SetDesiredValue+0x54>)
   804ce:	601a      	str	r2, [r3, #0]
		break;
   804d0:	4770      	bx	lr
		case 35:
		desiredValue = DISTANCE_35;
   804d2:	f44f 72af 	mov.w	r2, #350	; 0x15e
   804d6:	4b04      	ldr	r3, [pc, #16]	; (804e8 <SetDesiredValue+0x54>)
   804d8:	601a      	str	r2, [r3, #0]
		break;
   804da:	4770      	bx	lr
		case 40:
		desiredValue = DISTANCE_40;
   804dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   804e0:	4b01      	ldr	r3, [pc, #4]	; (804e8 <SetDesiredValue+0x54>)
   804e2:	601a      	str	r2, [r3, #0]
   804e4:	4770      	bx	lr
   804e6:	bf00      	nop
   804e8:	200708f4 	.word	0x200708f4
   804ec:	00000000 	.word	0x00000000

000804f0 <taskModulate>:

/************************************************************************/
/* Task that handle the regulation process of the actuator. */
/************************************************************************/
void taskModulate(void *p)
{
   804f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804f4:	b087      	sub	sp, #28
	portTickType xLastWakeTime;
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   804f6:	4b5e      	ldr	r3, [pc, #376]	; (80670 <taskModulate+0x180>)
   804f8:	4798      	blx	r3
   804fa:	9005      	str	r0, [sp, #20]

			if(count = 10)
			{
				for(int i = 1; i<11; i++)
				{
					currSensorValue = currSensorValue + ReadFanValue();
   804fc:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 806d4 <taskModulate+0x1e4>
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
	for(;;)
	{
		xSampleTime = (portTickType)samplingTimeMS;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80500:	a805      	add	r0, sp, #20
   80502:	2132      	movs	r1, #50	; 0x32
   80504:	4b5b      	ldr	r3, [pc, #364]	; (80674 <taskModulate+0x184>)
   80506:	4798      	blx	r3
		
		if(flag == 0)
   80508:	4b5b      	ldr	r3, [pc, #364]	; (80678 <taskModulate+0x188>)
   8050a:	781b      	ldrb	r3, [r3, #0]
   8050c:	b953      	cbnz	r3, 80524 <taskModulate+0x34>
		{
			ready = 0;
   8050e:	2000      	movs	r0, #0
   80510:	4b5a      	ldr	r3, [pc, #360]	; (8067c <taskModulate+0x18c>)
   80512:	6018      	str	r0, [r3, #0]
			
			error = 0;
   80514:	4b5a      	ldr	r3, [pc, #360]	; (80680 <taskModulate+0x190>)
   80516:	6018      	str	r0, [r3, #0]
			prevError = 0;
   80518:	4b5a      	ldr	r3, [pc, #360]	; (80684 <taskModulate+0x194>)
   8051a:	6018      	str	r0, [r3, #0]
			w = 0;
   8051c:	4b5a      	ldr	r3, [pc, #360]	; (80688 <taskModulate+0x198>)
   8051e:	6018      	str	r0, [r3, #0]

			CalcFanValue(0);
   80520:	4b5a      	ldr	r3, [pc, #360]	; (8068c <taskModulate+0x19c>)
   80522:	4798      	blx	r3
		}
		
		if(flag == 1 && ready == 0)
   80524:	4b54      	ldr	r3, [pc, #336]	; (80678 <taskModulate+0x188>)
   80526:	781b      	ldrb	r3, [r3, #0]
   80528:	2b01      	cmp	r3, #1
   8052a:	d1e9      	bne.n	80500 <taskModulate+0x10>
   8052c:	4b53      	ldr	r3, [pc, #332]	; (8067c <taskModulate+0x18c>)
   8052e:	681b      	ldr	r3, [r3, #0]
   80530:	b9eb      	cbnz	r3, 8056e <taskModulate+0x7e>
		{
			waitRXReady();
   80532:	4c57      	ldr	r4, [pc, #348]	; (80690 <taskModulate+0x1a0>)
   80534:	47a0      	blx	r4
			kp = readDouble();
   80536:	4d57      	ldr	r5, [pc, #348]	; (80694 <taskModulate+0x1a4>)
   80538:	47a8      	blx	r5
   8053a:	4b57      	ldr	r3, [pc, #348]	; (80698 <taskModulate+0x1a8>)
   8053c:	e9c3 0100 	strd	r0, r1, [r3]
			
			waitRXReady();
   80540:	47a0      	blx	r4
			ki = readDouble();
   80542:	47a8      	blx	r5
   80544:	4b55      	ldr	r3, [pc, #340]	; (8069c <taskModulate+0x1ac>)
   80546:	e9c3 0100 	strd	r0, r1, [r3]
			
			waitRXReady();
   8054a:	47a0      	blx	r4
			kd = readDouble();
   8054c:	47a8      	blx	r5
   8054e:	4b54      	ldr	r3, [pc, #336]	; (806a0 <taskModulate+0x1b0>)
   80550:	e9c3 0100 	strd	r0, r1, [r3]

			waitRXReady();
   80554:	47a0      	blx	r4
			SetDesiredValue(readByte());
   80556:	4b53      	ldr	r3, [pc, #332]	; (806a4 <taskModulate+0x1b4>)
   80558:	4798      	blx	r3
   8055a:	4b53      	ldr	r3, [pc, #332]	; (806a8 <taskModulate+0x1b8>)
   8055c:	4798      	blx	r3
			
			ready = 1;
   8055e:	2201      	movs	r2, #1
   80560:	4b46      	ldr	r3, [pc, #280]	; (8067c <taskModulate+0x18c>)
   80562:	601a      	str	r2, [r3, #0]

		}
		
		if(flag == 1 && ready == 1)
   80564:	4b44      	ldr	r3, [pc, #272]	; (80678 <taskModulate+0x188>)
   80566:	781b      	ldrb	r3, [r3, #0]
   80568:	4293      	cmp	r3, r2
   8056a:	d004      	beq.n	80576 <taskModulate+0x86>
   8056c:	e7c8      	b.n	80500 <taskModulate+0x10>
   8056e:	4b43      	ldr	r3, [pc, #268]	; (8067c <taskModulate+0x18c>)
   80570:	681b      	ldr	r3, [r3, #0]
   80572:	2b01      	cmp	r3, #1
   80574:	d1c4      	bne.n	80500 <taskModulate+0x10>
		{
			int32_t currSensorValue = 0;
			int32_t SensorValue;

			if(count = 10)
   80576:	240a      	movs	r4, #10
   80578:	4b4c      	ldr	r3, [pc, #304]	; (806ac <taskModulate+0x1bc>)
   8057a:	601c      	str	r4, [r3, #0]

		}
		
		if(flag == 1 && ready == 1)
		{
			int32_t currSensorValue = 0;
   8057c:	2500      	movs	r5, #0

			if(count = 10)
			{
				for(int i = 1; i<11; i++)
				{
					currSensorValue = currSensorValue + ReadFanValue();
   8057e:	47d8      	blx	fp
   80580:	4405      	add	r5, r0
			int32_t currSensorValue = 0;
			int32_t SensorValue;

			if(count = 10)
			{
				for(int i = 1; i<11; i++)
   80582:	3c01      	subs	r4, #1
   80584:	d1fb      	bne.n	8057e <taskModulate+0x8e>
				{
					currSensorValue = currSensorValue + ReadFanValue();
				}
				SensorValue = currSensorValue/10;
   80586:	4b4a      	ldr	r3, [pc, #296]	; (806b0 <taskModulate+0x1c0>)
   80588:	fb83 2905 	smull	r2, r9, r3, r5
   8058c:	17ed      	asrs	r5, r5, #31
   8058e:	ebc5 09a9 	rsb	r9, r5, r9, asr #2
				count = 0;
   80592:	2200      	movs	r2, #0
   80594:	4b45      	ldr	r3, [pc, #276]	; (806ac <taskModulate+0x1bc>)
   80596:	601a      	str	r2, [r3, #0]
			{
				SensorValue = ReadFanValue();
				count = count + 1;
			}
			
			error = desiredValue - SensorValue;
   80598:	4b46      	ldr	r3, [pc, #280]	; (806b4 <taskModulate+0x1c4>)
   8059a:	681e      	ldr	r6, [r3, #0]
   8059c:	ebc9 0606 	rsb	r6, r9, r6
   805a0:	4b37      	ldr	r3, [pc, #220]	; (80680 <taskModulate+0x190>)
   805a2:	601e      	str	r6, [r3, #0]

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
   805a4:	4b38      	ldr	r3, [pc, #224]	; (80688 <taskModulate+0x198>)
   805a6:	f8d3 a000 	ldr.w	sl, [r3]
	double proportionalPart;
	double integralPart;
	double derivingPart;
	int32_t signal;
	
	proportionalPart = (double)currErr;
   805aa:	f8df 812c 	ldr.w	r8, [pc, #300]	; 806d8 <taskModulate+0x1e8>
   805ae:	4630      	mov	r0, r6
   805b0:	47c0      	blx	r8
   805b2:	e9cd 0100 	strd	r0, r1, [sp]
				count = count + 1;
			}
			
			error = desiredValue - SensorValue;

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
   805b6:	4b33      	ldr	r3, [pc, #204]	; (80684 <taskModulate+0x194>)
	double derivingPart;
	int32_t signal;
	
	proportionalPart = (double)currErr;
	integralPart = (double)sumErr * (sampTime/k_i);
	derivingPart = ((double)currErr - (double)prevErr) * (k_d / sampTime);
   805b8:	6818      	ldr	r0, [r3, #0]
   805ba:	47c0      	blx	r8
   805bc:	4602      	mov	r2, r0
   805be:	460b      	mov	r3, r1
   805c0:	e9dd 0100 	ldrd	r0, r1, [sp]
   805c4:	4c3c      	ldr	r4, [pc, #240]	; (806b8 <taskModulate+0x1c8>)
   805c6:	47a0      	blx	r4
   805c8:	4604      	mov	r4, r0
   805ca:	460d      	mov	r5, r1
   805cc:	4b34      	ldr	r3, [pc, #208]	; (806a0 <taskModulate+0x1b0>)
   805ce:	e9d3 0100 	ldrd	r0, r1, [r3]
   805d2:	a325      	add	r3, pc, #148	; (adr r3, 80668 <taskModulate+0x178>)
   805d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   805d8:	4f38      	ldr	r7, [pc, #224]	; (806bc <taskModulate+0x1cc>)
   805da:	47b8      	blx	r7
   805dc:	4602      	mov	r2, r0
   805de:	460b      	mov	r3, r1
   805e0:	4f37      	ldr	r7, [pc, #220]	; (806c0 <taskModulate+0x1d0>)
   805e2:	4620      	mov	r0, r4
   805e4:	4629      	mov	r1, r5
   805e6:	47b8      	blx	r7
   805e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double integralPart;
	double derivingPart;
	int32_t signal;
	
	proportionalPart = (double)currErr;
	integralPart = (double)sumErr * (sampTime/k_i);
   805ec:	4650      	mov	r0, sl
   805ee:	47c0      	blx	r8
   805f0:	4604      	mov	r4, r0
   805f2:	460d      	mov	r5, r1
   805f4:	a11c      	add	r1, pc, #112	; (adr r1, 80668 <taskModulate+0x178>)
   805f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   805fa:	4b28      	ldr	r3, [pc, #160]	; (8069c <taskModulate+0x1ac>)
   805fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   80600:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 806bc <taskModulate+0x1cc>
   80604:	47e0      	blx	ip
   80606:	4602      	mov	r2, r0
   80608:	460b      	mov	r3, r1
   8060a:	4620      	mov	r0, r4
   8060c:	4629      	mov	r1, r5
   8060e:	47b8      	blx	r7
   80610:	4602      	mov	r2, r0
   80612:	460b      	mov	r3, r1
	derivingPart = ((double)currErr - (double)prevErr) * (k_d / sampTime);
	signal = k_p * (proportionalPart + integralPart + derivingPart);
   80614:	4c2b      	ldr	r4, [pc, #172]	; (806c4 <taskModulate+0x1d4>)
   80616:	e9dd 0100 	ldrd	r0, r1, [sp]
   8061a:	47a0      	blx	r4
   8061c:	4602      	mov	r2, r0
   8061e:	460b      	mov	r3, r1
   80620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   80624:	47a0      	blx	r4
   80626:	4b1c      	ldr	r3, [pc, #112]	; (80698 <taskModulate+0x1a8>)
   80628:	e9d3 2300 	ldrd	r2, r3, [r3]
   8062c:	47b8      	blx	r7
   8062e:	4b26      	ldr	r3, [pc, #152]	; (806c8 <taskModulate+0x1d8>)
   80630:	4798      	blx	r3
			
			error = desiredValue - SensorValue;

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
			
			if (finalU < 0)
   80632:	2800      	cmp	r0, #0
   80634:	db02      	blt.n	8063c <taskModulate+0x14c>
				count = count + 1;
			}
			
			error = desiredValue - SensorValue;

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
   80636:	4b25      	ldr	r3, [pc, #148]	; (806cc <taskModulate+0x1dc>)
   80638:	6018      	str	r0, [r3, #0]
   8063a:	e002      	b.n	80642 <taskModulate+0x152>
			
			if (finalU < 0)
			{
				finalU = 0;
   8063c:	2200      	movs	r2, #0
   8063e:	4b23      	ldr	r3, [pc, #140]	; (806cc <taskModulate+0x1dc>)
   80640:	601a      	str	r2, [r3, #0]
			//if(error < 0)
			//{
			//w=0;
			//}
			
			prevError = error;
   80642:	4b10      	ldr	r3, [pc, #64]	; (80684 <taskModulate+0x194>)
   80644:	601e      	str	r6, [r3, #0]
			w = w + prevError;
   80646:	4456      	add	r6, sl
   80648:	4b0f      	ldr	r3, [pc, #60]	; (80688 <taskModulate+0x198>)
   8064a:	601e      	str	r6, [r3, #0]
			
			CalcFanValue(finalU);
   8064c:	4c1f      	ldr	r4, [pc, #124]	; (806cc <taskModulate+0x1dc>)
   8064e:	6820      	ldr	r0, [r4, #0]
   80650:	4b0e      	ldr	r3, [pc, #56]	; (8068c <taskModulate+0x19c>)
   80652:	4798      	blx	r3
			setInfo(finalU, SensorValue, error);
   80654:	6820      	ldr	r0, [r4, #0]
   80656:	4649      	mov	r1, r9
   80658:	4b09      	ldr	r3, [pc, #36]	; (80680 <taskModulate+0x190>)
   8065a:	681a      	ldr	r2, [r3, #0]
   8065c:	4b1c      	ldr	r3, [pc, #112]	; (806d0 <taskModulate+0x1e0>)
   8065e:	4798      	blx	r3
   80660:	e74e      	b.n	80500 <taskModulate+0x10>
   80662:	bf00      	nop
   80664:	f3af 8000 	nop.w
   80668:	9999999a 	.word	0x9999999a
   8066c:	3fa99999 	.word	0x3fa99999
   80670:	00081371 	.word	0x00081371
   80674:	000815b9 	.word	0x000815b9
   80678:	2007097c 	.word	0x2007097c
   8067c:	20070918 	.word	0x20070918
   80680:	20070900 	.word	0x20070900
   80684:	200708f8 	.word	0x200708f8
   80688:	20070904 	.word	0x20070904
   8068c:	00080475 	.word	0x00080475
   80690:	00080399 	.word	0x00080399
   80694:	000803ad 	.word	0x000803ad
   80698:	20070920 	.word	0x20070920
   8069c:	20070910 	.word	0x20070910
   806a0:	20070908 	.word	0x20070908
   806a4:	00080369 	.word	0x00080369
   806a8:	00080495 	.word	0x00080495
   806ac:	200708fc 	.word	0x200708fc
   806b0:	66666667 	.word	0x66666667
   806b4:	200708f4 	.word	0x200708f4
   806b8:	00082ae5 	.word	0x00082ae5
   806bc:	000830a1 	.word	0x000830a1
   806c0:	00082e4d 	.word	0x00082e4d
   806c4:	00082ae9 	.word	0x00082ae9
   806c8:	00083271 	.word	0x00083271
   806cc:	20070928 	.word	0x20070928
   806d0:	000807d5 	.word	0x000807d5
   806d4:	00080209 	.word	0x00080209
   806d8:	00082d81 	.word	0x00082d81
   806dc:	f3af 8000 	nop.w

000806e0 <ShiftControlSignalBuffer>:

/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftControlSignalBuffer(void)
{
   806e0:	4b04      	ldr	r3, [pc, #16]	; (806f4 <ShiftControlSignalBuffer+0x14>)
   806e2:	f103 014c 	add.w	r1, r3, #76	; 0x4c
	for(int i = 0; i<SIZE-1; i++)
	{
		circBuffertControlSignal[i] = circBuffertControlSignal[i+1];
   806e6:	685a      	ldr	r2, [r3, #4]
   806e8:	f843 2b04 	str.w	r2, [r3], #4
/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftControlSignalBuffer(void)
{
	for(int i = 0; i<SIZE-1; i++)
   806ec:	428b      	cmp	r3, r1
   806ee:	d1fa      	bne.n	806e6 <ShiftControlSignalBuffer+0x6>
	{
		circBuffertControlSignal[i] = circBuffertControlSignal[i+1];
	}
}
   806f0:	4770      	bx	lr
   806f2:	bf00      	nop
   806f4:	200709d0 	.word	0x200709d0

000806f8 <ShiftActualValueBuffer>:

/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftActualValueBuffer(void)
{
   806f8:	4b04      	ldr	r3, [pc, #16]	; (8070c <ShiftActualValueBuffer+0x14>)
   806fa:	f103 014c 	add.w	r1, r3, #76	; 0x4c
	for(int i = 0; i<SIZE-1; i++)
	{
		circBuffertActualValue[i] = circBuffertActualValue[i+1];
   806fe:	685a      	ldr	r2, [r3, #4]
   80700:	f843 2b04 	str.w	r2, [r3], #4
/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftActualValueBuffer(void)
{
	for(int i = 0; i<SIZE-1; i++)
   80704:	428b      	cmp	r3, r1
   80706:	d1fa      	bne.n	806fe <ShiftActualValueBuffer+0x6>
	{
		circBuffertActualValue[i] = circBuffertActualValue[i+1];
	}
}
   80708:	4770      	bx	lr
   8070a:	bf00      	nop
   8070c:	20070980 	.word	0x20070980

00080710 <taskSendToMatlab>:

/************************************************************************/
/* Task that handle the communication to an from a serial port. */
/************************************************************************/
void taskSendToMatlab(void *p)
{
   80710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80714:	b083      	sub	sp, #12
	portTickType xLastWakeTime;
	portTickType xSampleTime;
	
	xSampleTime = 50;
	xLastWakeTime = xTaskGetTickCount();
   80716:	4b16      	ldr	r3, [pc, #88]	; (80770 <taskSendToMatlab+0x60>)
   80718:	4798      	blx	r3
   8071a:	9001      	str	r0, [sp, #4]
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   8071c:	4d15      	ldr	r5, [pc, #84]	; (80774 <taskSendToMatlab+0x64>)
		
		if(flag == 0)
   8071e:	4c16      	ldr	r4, [pc, #88]	; (80778 <taskSendToMatlab+0x68>)
		{
			if (isRXReady())
   80720:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80798 <taskSendToMatlab+0x88>
			{
				if(readByte() == 1 || readByte() == 0)
   80724:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8079c <taskSendToMatlab+0x8c>
	
	xSampleTime = 50;
	xLastWakeTime = xTaskGetTickCount();
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80728:	a801      	add	r0, sp, #4
   8072a:	2132      	movs	r1, #50	; 0x32
   8072c:	47a8      	blx	r5
		
		if(flag == 0)
   8072e:	7823      	ldrb	r3, [r4, #0]
   80730:	b943      	cbnz	r3, 80744 <taskSendToMatlab+0x34>
		{
			if (isRXReady())
   80732:	47c0      	blx	r8
   80734:	b130      	cbz	r0, 80744 <taskSendToMatlab+0x34>
			{
				if(readByte() == 1 || readByte() == 0)
   80736:	47c8      	blx	r9
   80738:	2801      	cmp	r0, #1
   8073a:	d001      	beq.n	80740 <taskSendToMatlab+0x30>
   8073c:	47c8      	blx	r9
   8073e:	b908      	cbnz	r0, 80744 <taskSendToMatlab+0x34>
				{
					flag = readByte();
   80740:	47c8      	blx	r9
   80742:	7020      	strb	r0, [r4, #0]
				}
			}
		}
		
		if(flag == 1)
   80744:	7823      	ldrb	r3, [r4, #0]
   80746:	2b01      	cmp	r3, #1
   80748:	d1ee      	bne.n	80728 <taskSendToMatlab+0x18>
		{
			printf("%d\n", circBuffertControlSignal[0]);
   8074a:	4f0c      	ldr	r7, [pc, #48]	; (8077c <taskSendToMatlab+0x6c>)
   8074c:	4638      	mov	r0, r7
   8074e:	4b0c      	ldr	r3, [pc, #48]	; (80780 <taskSendToMatlab+0x70>)
   80750:	6819      	ldr	r1, [r3, #0]
   80752:	4e0c      	ldr	r6, [pc, #48]	; (80784 <taskSendToMatlab+0x74>)
   80754:	47b0      	blx	r6
			printf("%d\n", circBuffertActualValue[0]);
   80756:	4638      	mov	r0, r7
   80758:	4b0b      	ldr	r3, [pc, #44]	; (80788 <taskSendToMatlab+0x78>)
   8075a:	6819      	ldr	r1, [r3, #0]
   8075c:	47b0      	blx	r6
			printf("%d\n", circBuffertError[0]);
   8075e:	4638      	mov	r0, r7
   80760:	4b0a      	ldr	r3, [pc, #40]	; (8078c <taskSendToMatlab+0x7c>)
   80762:	6819      	ldr	r1, [r3, #0]
   80764:	47b0      	blx	r6
			ShiftControlSignalBuffer();
   80766:	4b0a      	ldr	r3, [pc, #40]	; (80790 <taskSendToMatlab+0x80>)
   80768:	4798      	blx	r3
			ShiftActualValueBuffer();
   8076a:	4b0a      	ldr	r3, [pc, #40]	; (80794 <taskSendToMatlab+0x84>)
   8076c:	4798      	blx	r3
   8076e:	e7db      	b.n	80728 <taskSendToMatlab+0x18>
   80770:	00081371 	.word	0x00081371
   80774:	000815b9 	.word	0x000815b9
   80778:	2007097c 	.word	0x2007097c
   8077c:	00088a24 	.word	0x00088a24
   80780:	200709d0 	.word	0x200709d0
   80784:	0008334d 	.word	0x0008334d
   80788:	20070980 	.word	0x20070980
   8078c:	2007092c 	.word	0x2007092c
   80790:	000806e1 	.word	0x000806e1
   80794:	000806f9 	.word	0x000806f9
   80798:	00080389 	.word	0x00080389
   8079c:	00080369 	.word	0x00080369

000807a0 <findVacantPositionActualValue>:

/************************************************************************/
/* Return the first vacant position in the array. */
/************************************************************************/
int32_t findVacantPositionActualValue(void)
{
   807a0:	b508      	push	{r3, lr}
	for(int i = 0; i<SIZE; i++)
	{
		if(circBuffertActualValue[i] == 0)
   807a2:	4b0a      	ldr	r3, [pc, #40]	; (807cc <findVacantPositionActualValue+0x2c>)
   807a4:	6818      	ldr	r0, [r3, #0]
   807a6:	b178      	cbz	r0, 807c8 <findVacantPositionActualValue+0x28>
		{
			return i;
		}
		if(circBuffertActualValue[SIZE] != 0)
   807a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
   807aa:	b940      	cbnz	r0, 807be <findVacantPositionActualValue+0x1e>
   807ac:	461a      	mov	r2, r3
/************************************************************************/
/* Return the first vacant position in the array. */
/************************************************************************/
int32_t findVacantPositionActualValue(void)
{
	for(int i = 0; i<SIZE; i++)
   807ae:	2301      	movs	r3, #1
	{
		if(circBuffertActualValue[i] == 0)
   807b0:	f852 1f04 	ldr.w	r1, [r2, #4]!
   807b4:	b139      	cbz	r1, 807c6 <findVacantPositionActualValue+0x26>
/************************************************************************/
/* Return the first vacant position in the array. */
/************************************************************************/
int32_t findVacantPositionActualValue(void)
{
	for(int i = 0; i<SIZE; i++)
   807b6:	3301      	adds	r3, #1
   807b8:	2b14      	cmp	r3, #20
   807ba:	d1f9      	bne.n	807b0 <findVacantPositionActualValue+0x10>
   807bc:	bd08      	pop	{r3, pc}
		{
			return i;
		}
		if(circBuffertActualValue[SIZE] != 0)
		{
			ShiftActualValueBuffer();
   807be:	4b04      	ldr	r3, [pc, #16]	; (807d0 <findVacantPositionActualValue+0x30>)
   807c0:	4798      	blx	r3
			return SIZE;
   807c2:	2014      	movs	r0, #20
   807c4:	bd08      	pop	{r3, pc}
   807c6:	4618      	mov	r0, r3
		}
	}
	return 0;
}
   807c8:	bd08      	pop	{r3, pc}
   807ca:	bf00      	nop
   807cc:	20070980 	.word	0x20070980
   807d0:	000806f9 	.word	0x000806f9

000807d4 <setInfo>:

/************************************************************************/
/* Set values for the controlsignal, sensor and the current error. */
/************************************************************************/
void setInfo(int32_t controlSignal, int32_t actualValue, int32_t error)
{
   807d4:	b538      	push	{r3, r4, r5, lr}
   807d6:	460d      	mov	r5, r1
   807d8:	4614      	mov	r4, r2
   807da:	2864      	cmp	r0, #100	; 0x64
   807dc:	bfa8      	it	ge
   807de:	2064      	movge	r0, #100	; 0x64
	if(controlSignal>100)
	{
		controlSignal=100;
	}
	circBuffertControlSignal[0] = controlSignal;
   807e0:	4b04      	ldr	r3, [pc, #16]	; (807f4 <setInfo+0x20>)
   807e2:	6018      	str	r0, [r3, #0]
	circBuffertActualValue[findVacantPositionActualValue()] = actualValue;
   807e4:	4b04      	ldr	r3, [pc, #16]	; (807f8 <setInfo+0x24>)
   807e6:	4798      	blx	r3
   807e8:	4b04      	ldr	r3, [pc, #16]	; (807fc <setInfo+0x28>)
   807ea:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	circBuffertError[0] = error;
   807ee:	4b04      	ldr	r3, [pc, #16]	; (80800 <setInfo+0x2c>)
   807f0:	601c      	str	r4, [r3, #0]
   807f2:	bd38      	pop	{r3, r4, r5, pc}
   807f4:	200709d0 	.word	0x200709d0
   807f8:	000807a1 	.word	0x000807a1
   807fc:	20070980 	.word	0x20070980
   80800:	2007092c 	.word	0x2007092c

00080804 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80804:	f100 0308 	add.w	r3, r0, #8
   80808:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8080a:	f04f 32ff 	mov.w	r2, #4294967295
   8080e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80810:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80812:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80814:	2300      	movs	r3, #0
   80816:	6003      	str	r3, [r0, #0]
   80818:	4770      	bx	lr
   8081a:	bf00      	nop

0008081c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8081c:	2300      	movs	r3, #0
   8081e:	6103      	str	r3, [r0, #16]
   80820:	4770      	bx	lr
   80822:	bf00      	nop

00080824 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80824:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80826:	685a      	ldr	r2, [r3, #4]
   80828:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8082a:	6842      	ldr	r2, [r0, #4]
   8082c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8082e:	685a      	ldr	r2, [r3, #4]
   80830:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80832:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80834:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80836:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80838:	6803      	ldr	r3, [r0, #0]
   8083a:	3301      	adds	r3, #1
   8083c:	6003      	str	r3, [r0, #0]
   8083e:	4770      	bx	lr

00080840 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80840:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80842:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80844:	f1b4 3fff 	cmp.w	r4, #4294967295
   80848:	d101      	bne.n	8084e <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8084a:	6903      	ldr	r3, [r0, #16]
   8084c:	e00a      	b.n	80864 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8084e:	f100 0308 	add.w	r3, r0, #8
   80852:	68c2      	ldr	r2, [r0, #12]
   80854:	6812      	ldr	r2, [r2, #0]
   80856:	4294      	cmp	r4, r2
   80858:	d304      	bcc.n	80864 <vListInsert+0x24>
   8085a:	685b      	ldr	r3, [r3, #4]
   8085c:	685a      	ldr	r2, [r3, #4]
   8085e:	6812      	ldr	r2, [r2, #0]
   80860:	4294      	cmp	r4, r2
   80862:	d2fa      	bcs.n	8085a <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80864:	685a      	ldr	r2, [r3, #4]
   80866:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80868:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8086a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8086c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8086e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80870:	6803      	ldr	r3, [r0, #0]
   80872:	3301      	adds	r3, #1
   80874:	6003      	str	r3, [r0, #0]
}
   80876:	f85d 4b04 	ldr.w	r4, [sp], #4
   8087a:	4770      	bx	lr

0008087c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8087c:	6843      	ldr	r3, [r0, #4]
   8087e:	6882      	ldr	r2, [r0, #8]
   80880:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80882:	6883      	ldr	r3, [r0, #8]
   80884:	6842      	ldr	r2, [r0, #4]
   80886:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80888:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8088a:	685a      	ldr	r2, [r3, #4]
   8088c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8088e:	bf04      	itt	eq
   80890:	6882      	ldreq	r2, [r0, #8]
   80892:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80894:	2200      	movs	r2, #0
   80896:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80898:	681a      	ldr	r2, [r3, #0]
   8089a:	3a01      	subs	r2, #1
   8089c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8089e:	6818      	ldr	r0, [r3, #0]
}
   808a0:	4770      	bx	lr
   808a2:	bf00      	nop

000808a4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   808a4:	4803      	ldr	r0, [pc, #12]	; (808b4 <prvPortStartFirstTask+0x10>)
   808a6:	6800      	ldr	r0, [r0, #0]
   808a8:	6800      	ldr	r0, [r0, #0]
   808aa:	f380 8808 	msr	MSP, r0
   808ae:	b662      	cpsie	i
   808b0:	df00      	svc	0
   808b2:	bf00      	nop
   808b4:	e000ed08 	.word	0xe000ed08

000808b8 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   808b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   808bc:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   808c0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   808c4:	2300      	movs	r3, #0
   808c6:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   808ca:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   808ce:	3840      	subs	r0, #64	; 0x40
   808d0:	4770      	bx	lr
   808d2:	bf00      	nop

000808d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   808d4:	4b06      	ldr	r3, [pc, #24]	; (808f0 <pxCurrentTCBConst2>)
   808d6:	6819      	ldr	r1, [r3, #0]
   808d8:	6808      	ldr	r0, [r1, #0]
   808da:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808de:	f380 8809 	msr	PSP, r0
   808e2:	f04f 0000 	mov.w	r0, #0
   808e6:	f380 8811 	msr	BASEPRI, r0
   808ea:	f04e 0e0d 	orr.w	lr, lr, #13
   808ee:	4770      	bx	lr

000808f0 <pxCurrentTCBConst2>:
   808f0:	2007aae4 	.word	0x2007aae4

000808f4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   808f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   808f8:	4b01      	ldr	r3, [pc, #4]	; (80900 <vPortYieldFromISR+0xc>)
   808fa:	601a      	str	r2, [r3, #0]
   808fc:	4770      	bx	lr
   808fe:	bf00      	nop
   80900:	e000ed04 	.word	0xe000ed04

00080904 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80904:	f3ef 8011 	mrs	r0, BASEPRI
   80908:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8090c:	f381 8811 	msr	BASEPRI, r1
   80910:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80912:	2000      	movs	r0, #0

00080914 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80914:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80916:	4b03      	ldr	r3, [pc, #12]	; (80924 <vPortEnterCritical+0x10>)
   80918:	4798      	blx	r3
	uxCriticalNesting++;
   8091a:	4b03      	ldr	r3, [pc, #12]	; (80928 <vPortEnterCritical+0x14>)
   8091c:	681a      	ldr	r2, [r3, #0]
   8091e:	3201      	adds	r2, #1
   80920:	601a      	str	r2, [r3, #0]
   80922:	bd08      	pop	{r3, pc}
   80924:	00080905 	.word	0x00080905
   80928:	20070000 	.word	0x20070000

0008092c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8092c:	f380 8811 	msr	BASEPRI, r0
   80930:	4770      	bx	lr
   80932:	bf00      	nop

00080934 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80934:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80936:	4a04      	ldr	r2, [pc, #16]	; (80948 <vPortExitCritical+0x14>)
   80938:	6813      	ldr	r3, [r2, #0]
   8093a:	3b01      	subs	r3, #1
   8093c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8093e:	b913      	cbnz	r3, 80946 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80940:	2000      	movs	r0, #0
   80942:	4b02      	ldr	r3, [pc, #8]	; (8094c <vPortExitCritical+0x18>)
   80944:	4798      	blx	r3
   80946:	bd08      	pop	{r3, pc}
   80948:	20070000 	.word	0x20070000
   8094c:	0008092d 	.word	0x0008092d

00080950 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80950:	f3ef 8009 	mrs	r0, PSP
   80954:	4b0c      	ldr	r3, [pc, #48]	; (80988 <pxCurrentTCBConst>)
   80956:	681a      	ldr	r2, [r3, #0]
   80958:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8095c:	6010      	str	r0, [r2, #0]
   8095e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80962:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80966:	f380 8811 	msr	BASEPRI, r0
   8096a:	f000 feaf 	bl	816cc <vTaskSwitchContext>
   8096e:	f04f 0000 	mov.w	r0, #0
   80972:	f380 8811 	msr	BASEPRI, r0
   80976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8097a:	6819      	ldr	r1, [r3, #0]
   8097c:	6808      	ldr	r0, [r1, #0]
   8097e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80982:	f380 8809 	msr	PSP, r0
   80986:	4770      	bx	lr

00080988 <pxCurrentTCBConst>:
   80988:	2007aae4 	.word	0x2007aae4

0008098c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8098c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8098e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80992:	4b05      	ldr	r3, [pc, #20]	; (809a8 <SysTick_Handler+0x1c>)
   80994:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80996:	4b05      	ldr	r3, [pc, #20]	; (809ac <SysTick_Handler+0x20>)
   80998:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8099a:	4b05      	ldr	r3, [pc, #20]	; (809b0 <SysTick_Handler+0x24>)
   8099c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8099e:	2000      	movs	r0, #0
   809a0:	4b04      	ldr	r3, [pc, #16]	; (809b4 <SysTick_Handler+0x28>)
   809a2:	4798      	blx	r3
   809a4:	bd08      	pop	{r3, pc}
   809a6:	bf00      	nop
   809a8:	e000ed04 	.word	0xe000ed04
   809ac:	00080905 	.word	0x00080905
   809b0:	00081391 	.word	0x00081391
   809b4:	0008092d 	.word	0x0008092d

000809b8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   809b8:	4a03      	ldr	r2, [pc, #12]	; (809c8 <vPortSetupTimerInterrupt+0x10>)
   809ba:	4b04      	ldr	r3, [pc, #16]	; (809cc <vPortSetupTimerInterrupt+0x14>)
   809bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   809be:	2207      	movs	r2, #7
   809c0:	3b04      	subs	r3, #4
   809c2:	601a      	str	r2, [r3, #0]
   809c4:	4770      	bx	lr
   809c6:	bf00      	nop
   809c8:	0001481f 	.word	0x0001481f
   809cc:	e000e014 	.word	0xe000e014

000809d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   809d0:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   809d2:	4b09      	ldr	r3, [pc, #36]	; (809f8 <xPortStartScheduler+0x28>)
   809d4:	681a      	ldr	r2, [r3, #0]
   809d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   809da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   809dc:	681a      	ldr	r2, [r3, #0]
   809de:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   809e2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   809e4:	4b05      	ldr	r3, [pc, #20]	; (809fc <xPortStartScheduler+0x2c>)
   809e6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   809e8:	2400      	movs	r4, #0
   809ea:	4b05      	ldr	r3, [pc, #20]	; (80a00 <xPortStartScheduler+0x30>)
   809ec:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   809ee:	4b05      	ldr	r3, [pc, #20]	; (80a04 <xPortStartScheduler+0x34>)
   809f0:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   809f2:	4620      	mov	r0, r4
   809f4:	bd10      	pop	{r4, pc}
   809f6:	bf00      	nop
   809f8:	e000ed20 	.word	0xe000ed20
   809fc:	000809b9 	.word	0x000809b9
   80a00:	20070000 	.word	0x20070000
   80a04:	000808a5 	.word	0x000808a5

00080a08 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80a08:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80a0a:	4a13      	ldr	r2, [pc, #76]	; (80a58 <prvInsertBlockIntoFreeList+0x50>)
   80a0c:	6813      	ldr	r3, [r2, #0]
   80a0e:	4283      	cmp	r3, r0
   80a10:	d201      	bcs.n	80a16 <prvInsertBlockIntoFreeList+0xe>
   80a12:	461a      	mov	r2, r3
   80a14:	e7fa      	b.n	80a0c <prvInsertBlockIntoFreeList+0x4>
   80a16:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80a18:	6854      	ldr	r4, [r2, #4]
   80a1a:	1915      	adds	r5, r2, r4
   80a1c:	4285      	cmp	r5, r0
   80a1e:	d103      	bne.n	80a28 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80a20:	6868      	ldr	r0, [r5, #4]
   80a22:	4404      	add	r4, r0
   80a24:	6054      	str	r4, [r2, #4]
   80a26:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80a28:	6842      	ldr	r2, [r0, #4]
   80a2a:	1884      	adds	r4, r0, r2
   80a2c:	42a3      	cmp	r3, r4
   80a2e:	d10c      	bne.n	80a4a <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80a30:	4c0a      	ldr	r4, [pc, #40]	; (80a5c <prvInsertBlockIntoFreeList+0x54>)
   80a32:	6824      	ldr	r4, [r4, #0]
   80a34:	429c      	cmp	r4, r3
   80a36:	d006      	beq.n	80a46 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80a38:	685b      	ldr	r3, [r3, #4]
   80a3a:	441a      	add	r2, r3
   80a3c:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80a3e:	680b      	ldr	r3, [r1, #0]
   80a40:	681b      	ldr	r3, [r3, #0]
   80a42:	6003      	str	r3, [r0, #0]
   80a44:	e002      	b.n	80a4c <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80a46:	6003      	str	r3, [r0, #0]
   80a48:	e000      	b.n	80a4c <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80a4a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80a4c:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80a4e:	bf18      	it	ne
   80a50:	6008      	strne	r0, [r1, #0]
	}
}
   80a52:	bc30      	pop	{r4, r5}
   80a54:	4770      	bx	lr
   80a56:	bf00      	nop
   80a58:	2007aa24 	.word	0x2007aa24
   80a5c:	2007aa20 	.word	0x2007aa20

00080a60 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80a60:	b538      	push	{r3, r4, r5, lr}
   80a62:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80a64:	4b28      	ldr	r3, [pc, #160]	; (80b08 <pvPortMalloc+0xa8>)
   80a66:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80a68:	4b28      	ldr	r3, [pc, #160]	; (80b0c <pvPortMalloc+0xac>)
   80a6a:	681b      	ldr	r3, [r3, #0]
   80a6c:	b99b      	cbnz	r3, 80a96 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80a6e:	4a28      	ldr	r2, [pc, #160]	; (80b10 <pvPortMalloc+0xb0>)
   80a70:	4b28      	ldr	r3, [pc, #160]	; (80b14 <pvPortMalloc+0xb4>)
   80a72:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80a74:	2100      	movs	r1, #0
   80a76:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80a78:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80a7c:	1898      	adds	r0, r3, r2
   80a7e:	4d23      	ldr	r5, [pc, #140]	; (80b0c <pvPortMalloc+0xac>)
   80a80:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80a82:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80a86:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80a88:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80a8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80a8c:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80a8e:	4b22      	ldr	r3, [pc, #136]	; (80b18 <pvPortMalloc+0xb8>)
   80a90:	681a      	ldr	r2, [r3, #0]
   80a92:	3a10      	subs	r2, #16
   80a94:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80a96:	2c00      	cmp	r4, #0
   80a98:	d02d      	beq.n	80af6 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80a9a:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80a9e:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80aa2:	bf1c      	itt	ne
   80aa4:	f022 0207 	bicne.w	r2, r2, #7
   80aa8:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80aaa:	1e51      	subs	r1, r2, #1
   80aac:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80ab0:	4299      	cmp	r1, r3
   80ab2:	d822      	bhi.n	80afa <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80ab4:	4916      	ldr	r1, [pc, #88]	; (80b10 <pvPortMalloc+0xb0>)
   80ab6:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80ab8:	6863      	ldr	r3, [r4, #4]
   80aba:	429a      	cmp	r2, r3
   80abc:	d904      	bls.n	80ac8 <pvPortMalloc+0x68>
   80abe:	6823      	ldr	r3, [r4, #0]
   80ac0:	b113      	cbz	r3, 80ac8 <pvPortMalloc+0x68>
   80ac2:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80ac4:	461c      	mov	r4, r3
   80ac6:	e7f7      	b.n	80ab8 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80ac8:	4b10      	ldr	r3, [pc, #64]	; (80b0c <pvPortMalloc+0xac>)
   80aca:	681b      	ldr	r3, [r3, #0]
   80acc:	429c      	cmp	r4, r3
   80ace:	d016      	beq.n	80afe <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80ad0:	680d      	ldr	r5, [r1, #0]
   80ad2:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80ad4:	6823      	ldr	r3, [r4, #0]
   80ad6:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80ad8:	6863      	ldr	r3, [r4, #4]
   80ada:	1a9b      	subs	r3, r3, r2
   80adc:	2b20      	cmp	r3, #32
   80ade:	d904      	bls.n	80aea <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80ae0:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80ae2:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80ae4:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80ae6:	4b0d      	ldr	r3, [pc, #52]	; (80b1c <pvPortMalloc+0xbc>)
   80ae8:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80aea:	4b0b      	ldr	r3, [pc, #44]	; (80b18 <pvPortMalloc+0xb8>)
   80aec:	681a      	ldr	r2, [r3, #0]
   80aee:	6861      	ldr	r1, [r4, #4]
   80af0:	1a52      	subs	r2, r2, r1
   80af2:	601a      	str	r2, [r3, #0]
   80af4:	e004      	b.n	80b00 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80af6:	2500      	movs	r5, #0
   80af8:	e002      	b.n	80b00 <pvPortMalloc+0xa0>
   80afa:	2500      	movs	r5, #0
   80afc:	e000      	b.n	80b00 <pvPortMalloc+0xa0>
   80afe:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80b00:	4b07      	ldr	r3, [pc, #28]	; (80b20 <pvPortMalloc+0xc0>)
   80b02:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80b04:	4628      	mov	r0, r5
   80b06:	bd38      	pop	{r3, r4, r5, pc}
   80b08:	00081361 	.word	0x00081361
   80b0c:	2007aa20 	.word	0x2007aa20
   80b10:	2007aa24 	.word	0x2007aa24
   80b14:	20070a20 	.word	0x20070a20
   80b18:	20070004 	.word	0x20070004
   80b1c:	00080a09 	.word	0x00080a09
   80b20:	000814b1 	.word	0x000814b1

00080b24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80b24:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80b26:	4604      	mov	r4, r0
   80b28:	b168      	cbz	r0, 80b46 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80b2a:	4b07      	ldr	r3, [pc, #28]	; (80b48 <vPortFree+0x24>)
   80b2c:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80b2e:	4b07      	ldr	r3, [pc, #28]	; (80b4c <vPortFree+0x28>)
   80b30:	6819      	ldr	r1, [r3, #0]
   80b32:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80b36:	440a      	add	r2, r1
   80b38:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80b3a:	f1a4 0010 	sub.w	r0, r4, #16
   80b3e:	4b04      	ldr	r3, [pc, #16]	; (80b50 <vPortFree+0x2c>)
   80b40:	4798      	blx	r3
		}
		xTaskResumeAll();
   80b42:	4b04      	ldr	r3, [pc, #16]	; (80b54 <vPortFree+0x30>)
   80b44:	4798      	blx	r3
   80b46:	bd10      	pop	{r4, pc}
   80b48:	00081361 	.word	0x00081361
   80b4c:	20070004 	.word	0x20070004
   80b50:	00080a09 	.word	0x00080a09
   80b54:	000814b1 	.word	0x000814b1

00080b58 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80b58:	b510      	push	{r4, lr}
   80b5a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80b5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b5e:	b93b      	cbnz	r3, 80b70 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b60:	6803      	ldr	r3, [r0, #0]
   80b62:	bb1b      	cbnz	r3, 80bac <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80b64:	6840      	ldr	r0, [r0, #4]
   80b66:	4b13      	ldr	r3, [pc, #76]	; (80bb4 <prvCopyDataToQueue+0x5c>)
   80b68:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80b6a:	2300      	movs	r3, #0
   80b6c:	6063      	str	r3, [r4, #4]
   80b6e:	e01d      	b.n	80bac <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80b70:	b96a      	cbnz	r2, 80b8e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80b72:	6880      	ldr	r0, [r0, #8]
   80b74:	461a      	mov	r2, r3
   80b76:	4b10      	ldr	r3, [pc, #64]	; (80bb8 <prvCopyDataToQueue+0x60>)
   80b78:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80b7a:	68a2      	ldr	r2, [r4, #8]
   80b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80b7e:	4413      	add	r3, r2
   80b80:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80b82:	6862      	ldr	r2, [r4, #4]
   80b84:	4293      	cmp	r3, r2
   80b86:	d311      	bcc.n	80bac <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80b88:	6823      	ldr	r3, [r4, #0]
   80b8a:	60a3      	str	r3, [r4, #8]
   80b8c:	e00e      	b.n	80bac <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80b8e:	68c0      	ldr	r0, [r0, #12]
   80b90:	461a      	mov	r2, r3
   80b92:	4b09      	ldr	r3, [pc, #36]	; (80bb8 <prvCopyDataToQueue+0x60>)
   80b94:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80b96:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80b98:	4252      	negs	r2, r2
   80b9a:	68e3      	ldr	r3, [r4, #12]
   80b9c:	4413      	add	r3, r2
   80b9e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80ba0:	6821      	ldr	r1, [r4, #0]
   80ba2:	428b      	cmp	r3, r1
   80ba4:	d202      	bcs.n	80bac <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80ba6:	6863      	ldr	r3, [r4, #4]
   80ba8:	441a      	add	r2, r3
   80baa:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80bac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80bae:	3301      	adds	r3, #1
   80bb0:	63a3      	str	r3, [r4, #56]	; 0x38
   80bb2:	bd10      	pop	{r4, pc}
   80bb4:	000819e5 	.word	0x000819e5
   80bb8:	000833cd 	.word	0x000833cd

00080bbc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80bbc:	b538      	push	{r3, r4, r5, lr}
   80bbe:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80bc0:	6805      	ldr	r5, [r0, #0]
   80bc2:	b15d      	cbz	r5, 80bdc <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80bc4:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80bc6:	68c4      	ldr	r4, [r0, #12]
   80bc8:	4414      	add	r4, r2
   80bca:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80bcc:	6840      	ldr	r0, [r0, #4]
   80bce:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80bd0:	bf28      	it	cs
   80bd2:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80bd4:	4608      	mov	r0, r1
   80bd6:	68d9      	ldr	r1, [r3, #12]
   80bd8:	4b01      	ldr	r3, [pc, #4]	; (80be0 <prvCopyDataFromQueue+0x24>)
   80bda:	4798      	blx	r3
   80bdc:	bd38      	pop	{r3, r4, r5, pc}
   80bde:	bf00      	nop
   80be0:	000833cd 	.word	0x000833cd

00080be4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80be6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80be8:	4b1d      	ldr	r3, [pc, #116]	; (80c60 <prvUnlockQueue+0x7c>)
   80bea:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80bec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80bee:	2b00      	cmp	r3, #0
   80bf0:	dd12      	ble.n	80c18 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80bf4:	b183      	cbz	r3, 80c18 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80bf6:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80bfa:	4d1a      	ldr	r5, [pc, #104]	; (80c64 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80bfc:	4f1a      	ldr	r7, [pc, #104]	; (80c68 <prvUnlockQueue+0x84>)
   80bfe:	e001      	b.n	80c04 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c02:	b14b      	cbz	r3, 80c18 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c04:	4630      	mov	r0, r6
   80c06:	47a8      	blx	r5
   80c08:	b100      	cbz	r0, 80c0c <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80c0a:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80c0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c0e:	3b01      	subs	r3, #1
   80c10:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80c12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c14:	2b00      	cmp	r3, #0
   80c16:	dcf3      	bgt.n	80c00 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80c18:	f04f 33ff 	mov.w	r3, #4294967295
   80c1c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80c1e:	4b13      	ldr	r3, [pc, #76]	; (80c6c <prvUnlockQueue+0x88>)
   80c20:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80c22:	4b0f      	ldr	r3, [pc, #60]	; (80c60 <prvUnlockQueue+0x7c>)
   80c24:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80c26:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c28:	2b00      	cmp	r3, #0
   80c2a:	dd12      	ble.n	80c52 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c2c:	6923      	ldr	r3, [r4, #16]
   80c2e:	b183      	cbz	r3, 80c52 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80c30:	f104 0610 	add.w	r6, r4, #16
   80c34:	4d0b      	ldr	r5, [pc, #44]	; (80c64 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   80c36:	4f0c      	ldr	r7, [pc, #48]	; (80c68 <prvUnlockQueue+0x84>)
   80c38:	e001      	b.n	80c3e <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c3a:	6923      	ldr	r3, [r4, #16]
   80c3c:	b14b      	cbz	r3, 80c52 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80c3e:	4630      	mov	r0, r6
   80c40:	47a8      	blx	r5
   80c42:	b100      	cbz	r0, 80c46 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   80c44:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80c46:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c48:	3b01      	subs	r3, #1
   80c4a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80c4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c4e:	2b00      	cmp	r3, #0
   80c50:	dcf3      	bgt.n	80c3a <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80c52:	f04f 33ff 	mov.w	r3, #4294967295
   80c56:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80c58:	4b04      	ldr	r3, [pc, #16]	; (80c6c <prvUnlockQueue+0x88>)
   80c5a:	4798      	blx	r3
   80c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c5e:	bf00      	nop
   80c60:	00080915 	.word	0x00080915
   80c64:	00081801 	.word	0x00081801
   80c68:	00081931 	.word	0x00081931
   80c6c:	00080935 	.word	0x00080935

00080c70 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80c70:	b538      	push	{r3, r4, r5, lr}
   80c72:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   80c74:	4604      	mov	r4, r0
   80c76:	b918      	cbnz	r0, 80c80 <xQueueGenericReset+0x10>
   80c78:	4b16      	ldr	r3, [pc, #88]	; (80cd4 <xQueueGenericReset+0x64>)
   80c7a:	4798      	blx	r3
   80c7c:	bf00      	nop
   80c7e:	e7fd      	b.n	80c7c <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   80c80:	4b15      	ldr	r3, [pc, #84]	; (80cd8 <xQueueGenericReset+0x68>)
   80c82:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80c84:	6823      	ldr	r3, [r4, #0]
   80c86:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80c88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80c8a:	fb00 f002 	mul.w	r0, r0, r2
   80c8e:	1819      	adds	r1, r3, r0
   80c90:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80c92:	2100      	movs	r1, #0
   80c94:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80c96:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80c98:	1a82      	subs	r2, r0, r2
   80c9a:	4413      	add	r3, r2
   80c9c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80c9e:	f04f 33ff 	mov.w	r3, #4294967295
   80ca2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80ca4:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80ca6:	b955      	cbnz	r5, 80cbe <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80ca8:	6923      	ldr	r3, [r4, #16]
   80caa:	b17b      	cbz	r3, 80ccc <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80cac:	f104 0010 	add.w	r0, r4, #16
   80cb0:	4b0a      	ldr	r3, [pc, #40]	; (80cdc <xQueueGenericReset+0x6c>)
   80cb2:	4798      	blx	r3
   80cb4:	2801      	cmp	r0, #1
   80cb6:	d109      	bne.n	80ccc <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80cb8:	4b09      	ldr	r3, [pc, #36]	; (80ce0 <xQueueGenericReset+0x70>)
   80cba:	4798      	blx	r3
   80cbc:	e006      	b.n	80ccc <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80cbe:	f104 0010 	add.w	r0, r4, #16
   80cc2:	4d08      	ldr	r5, [pc, #32]	; (80ce4 <xQueueGenericReset+0x74>)
   80cc4:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80cc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80cca:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80ccc:	4b06      	ldr	r3, [pc, #24]	; (80ce8 <xQueueGenericReset+0x78>)
   80cce:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80cd0:	2001      	movs	r0, #1
   80cd2:	bd38      	pop	{r3, r4, r5, pc}
   80cd4:	00080905 	.word	0x00080905
   80cd8:	00080915 	.word	0x00080915
   80cdc:	00081801 	.word	0x00081801
   80ce0:	000808f5 	.word	0x000808f5
   80ce4:	00080805 	.word	0x00080805
   80ce8:	00080935 	.word	0x00080935

00080cec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80cee:	460d      	mov	r5, r1
   80cf0:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80cf2:	4606      	mov	r6, r0
   80cf4:	b188      	cbz	r0, 80d1a <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80cf6:	2050      	movs	r0, #80	; 0x50
   80cf8:	4b0e      	ldr	r3, [pc, #56]	; (80d34 <xQueueGenericCreate+0x48>)
   80cfa:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80cfc:	4604      	mov	r4, r0
   80cfe:	b160      	cbz	r0, 80d1a <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80d00:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80d04:	3001      	adds	r0, #1
   80d06:	4b0b      	ldr	r3, [pc, #44]	; (80d34 <xQueueGenericCreate+0x48>)
   80d08:	4798      	blx	r3
   80d0a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80d0c:	b940      	cbnz	r0, 80d20 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80d0e:	4620      	mov	r0, r4
   80d10:	4b09      	ldr	r3, [pc, #36]	; (80d38 <xQueueGenericCreate+0x4c>)
   80d12:	4798      	blx	r3
   80d14:	e001      	b.n	80d1a <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80d16:	bf00      	nop
   80d18:	e7fd      	b.n	80d16 <xQueueGenericCreate+0x2a>
   80d1a:	4b08      	ldr	r3, [pc, #32]	; (80d3c <xQueueGenericCreate+0x50>)
   80d1c:	4798      	blx	r3
   80d1e:	e7fa      	b.n	80d16 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80d20:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80d22:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80d24:	4620      	mov	r0, r4
   80d26:	2101      	movs	r1, #1
   80d28:	4b05      	ldr	r3, [pc, #20]	; (80d40 <xQueueGenericCreate+0x54>)
   80d2a:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80d2c:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80d30:	4620      	mov	r0, r4
   80d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d34:	00080a61 	.word	0x00080a61
   80d38:	00080b25 	.word	0x00080b25
   80d3c:	00080905 	.word	0x00080905
   80d40:	00080c71 	.word	0x00080c71

00080d44 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d48:	b085      	sub	sp, #20
   80d4a:	468a      	mov	sl, r1
   80d4c:	9201      	str	r2, [sp, #4]
   80d4e:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80d50:	4604      	mov	r4, r0
   80d52:	b918      	cbnz	r0, 80d5c <xQueueGenericSend+0x18>
   80d54:	4b36      	ldr	r3, [pc, #216]	; (80e30 <xQueueGenericSend+0xec>)
   80d56:	4798      	blx	r3
   80d58:	bf00      	nop
   80d5a:	e7fd      	b.n	80d58 <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d5c:	b909      	cbnz	r1, 80d62 <xQueueGenericSend+0x1e>
   80d5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d60:	b91b      	cbnz	r3, 80d6a <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80d62:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d64:	4e33      	ldr	r6, [pc, #204]	; (80e34 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80d66:	4d34      	ldr	r5, [pc, #208]	; (80e38 <xQueueGenericSend+0xf4>)
   80d68:	e003      	b.n	80d72 <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d6a:	4b31      	ldr	r3, [pc, #196]	; (80e30 <xQueueGenericSend+0xec>)
   80d6c:	4798      	blx	r3
   80d6e:	bf00      	nop
   80d70:	e7fd      	b.n	80d6e <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d72:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80d74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80d78:	429a      	cmp	r2, r3
   80d7a:	d212      	bcs.n	80da2 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80d7c:	4620      	mov	r0, r4
   80d7e:	4651      	mov	r1, sl
   80d80:	465a      	mov	r2, fp
   80d82:	4b2e      	ldr	r3, [pc, #184]	; (80e3c <xQueueGenericSend+0xf8>)
   80d84:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d88:	b13b      	cbz	r3, 80d9a <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80d8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d8e:	4b2c      	ldr	r3, [pc, #176]	; (80e40 <xQueueGenericSend+0xfc>)
   80d90:	4798      	blx	r3
   80d92:	2801      	cmp	r0, #1
   80d94:	d101      	bne.n	80d9a <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80d96:	4b2b      	ldr	r3, [pc, #172]	; (80e44 <xQueueGenericSend+0x100>)
   80d98:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80d9a:	4b27      	ldr	r3, [pc, #156]	; (80e38 <xQueueGenericSend+0xf4>)
   80d9c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80d9e:	2001      	movs	r0, #1
   80da0:	e043      	b.n	80e2a <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80da2:	9b01      	ldr	r3, [sp, #4]
   80da4:	b91b      	cbnz	r3, 80dae <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80da6:	4b24      	ldr	r3, [pc, #144]	; (80e38 <xQueueGenericSend+0xf4>)
   80da8:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80daa:	2000      	movs	r0, #0
   80dac:	e03d      	b.n	80e2a <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   80dae:	b91f      	cbnz	r7, 80db8 <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80db0:	a802      	add	r0, sp, #8
   80db2:	4b25      	ldr	r3, [pc, #148]	; (80e48 <xQueueGenericSend+0x104>)
   80db4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   80db6:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80db8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80dba:	4b24      	ldr	r3, [pc, #144]	; (80e4c <xQueueGenericSend+0x108>)
   80dbc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80dbe:	47b0      	blx	r6
   80dc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80dc6:	bf04      	itt	eq
   80dc8:	2300      	moveq	r3, #0
   80dca:	6463      	streq	r3, [r4, #68]	; 0x44
   80dcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80dce:	f1b3 3fff 	cmp.w	r3, #4294967295
   80dd2:	bf04      	itt	eq
   80dd4:	2300      	moveq	r3, #0
   80dd6:	64a3      	streq	r3, [r4, #72]	; 0x48
   80dd8:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80dda:	a802      	add	r0, sp, #8
   80ddc:	a901      	add	r1, sp, #4
   80dde:	4b1c      	ldr	r3, [pc, #112]	; (80e50 <xQueueGenericSend+0x10c>)
   80de0:	4798      	blx	r3
   80de2:	b9e0      	cbnz	r0, 80e1e <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80de4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80de6:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80dea:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80dee:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80df0:	45c1      	cmp	r9, r8
   80df2:	d10e      	bne.n	80e12 <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80df4:	f104 0010 	add.w	r0, r4, #16
   80df8:	9901      	ldr	r1, [sp, #4]
   80dfa:	4b16      	ldr	r3, [pc, #88]	; (80e54 <xQueueGenericSend+0x110>)
   80dfc:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80dfe:	4620      	mov	r0, r4
   80e00:	4b15      	ldr	r3, [pc, #84]	; (80e58 <xQueueGenericSend+0x114>)
   80e02:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80e04:	4b15      	ldr	r3, [pc, #84]	; (80e5c <xQueueGenericSend+0x118>)
   80e06:	4798      	blx	r3
   80e08:	2800      	cmp	r0, #0
   80e0a:	d1b2      	bne.n	80d72 <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   80e0c:	4b0d      	ldr	r3, [pc, #52]	; (80e44 <xQueueGenericSend+0x100>)
   80e0e:	4798      	blx	r3
   80e10:	e7af      	b.n	80d72 <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80e12:	4620      	mov	r0, r4
   80e14:	4b10      	ldr	r3, [pc, #64]	; (80e58 <xQueueGenericSend+0x114>)
   80e16:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80e18:	4b10      	ldr	r3, [pc, #64]	; (80e5c <xQueueGenericSend+0x118>)
   80e1a:	4798      	blx	r3
   80e1c:	e7a9      	b.n	80d72 <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80e1e:	4620      	mov	r0, r4
   80e20:	4b0d      	ldr	r3, [pc, #52]	; (80e58 <xQueueGenericSend+0x114>)
   80e22:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80e24:	4b0d      	ldr	r3, [pc, #52]	; (80e5c <xQueueGenericSend+0x118>)
   80e26:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80e28:	2000      	movs	r0, #0
		}
	}
}
   80e2a:	b005      	add	sp, #20
   80e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e30:	00080905 	.word	0x00080905
   80e34:	00080915 	.word	0x00080915
   80e38:	00080935 	.word	0x00080935
   80e3c:	00080b59 	.word	0x00080b59
   80e40:	00081801 	.word	0x00081801
   80e44:	000808f5 	.word	0x000808f5
   80e48:	00081885 	.word	0x00081885
   80e4c:	00081361 	.word	0x00081361
   80e50:	000818ad 	.word	0x000818ad
   80e54:	0008175d 	.word	0x0008175d
   80e58:	00080be5 	.word	0x00080be5
   80e5c:	000814b1 	.word	0x000814b1

00080e60 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e64:	460e      	mov	r6, r1
   80e66:	4615      	mov	r5, r2
   80e68:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80e6a:	4604      	mov	r4, r0
   80e6c:	b918      	cbnz	r0, 80e76 <xQueueGenericSendFromISR+0x16>
   80e6e:	4b1c      	ldr	r3, [pc, #112]	; (80ee0 <xQueueGenericSendFromISR+0x80>)
   80e70:	4798      	blx	r3
   80e72:	bf00      	nop
   80e74:	e7fd      	b.n	80e72 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e76:	b929      	cbnz	r1, 80e84 <xQueueGenericSendFromISR+0x24>
   80e78:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80e7a:	b11b      	cbz	r3, 80e84 <xQueueGenericSendFromISR+0x24>
   80e7c:	4b18      	ldr	r3, [pc, #96]	; (80ee0 <xQueueGenericSendFromISR+0x80>)
   80e7e:	4798      	blx	r3
   80e80:	bf00      	nop
   80e82:	e7fd      	b.n	80e80 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80e84:	4b16      	ldr	r3, [pc, #88]	; (80ee0 <xQueueGenericSendFromISR+0x80>)
   80e86:	4798      	blx	r3
   80e88:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80e8e:	429a      	cmp	r2, r3
   80e90:	d218      	bcs.n	80ec4 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80e92:	4620      	mov	r0, r4
   80e94:	4631      	mov	r1, r6
   80e96:	4642      	mov	r2, r8
   80e98:	4b12      	ldr	r3, [pc, #72]	; (80ee4 <xQueueGenericSendFromISR+0x84>)
   80e9a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80e9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ea2:	d10a      	bne.n	80eba <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80ea6:	b17b      	cbz	r3, 80ec8 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80ea8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80eac:	4b0e      	ldr	r3, [pc, #56]	; (80ee8 <xQueueGenericSendFromISR+0x88>)
   80eae:	4798      	blx	r3
   80eb0:	b160      	cbz	r0, 80ecc <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80eb2:	b16d      	cbz	r5, 80ed0 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80eb4:	2401      	movs	r4, #1
   80eb6:	602c      	str	r4, [r5, #0]
   80eb8:	e00b      	b.n	80ed2 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80eba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ebc:	3301      	adds	r3, #1
   80ebe:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80ec0:	2401      	movs	r4, #1
   80ec2:	e006      	b.n	80ed2 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80ec4:	2400      	movs	r4, #0
   80ec6:	e004      	b.n	80ed2 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80ec8:	2401      	movs	r4, #1
   80eca:	e002      	b.n	80ed2 <xQueueGenericSendFromISR+0x72>
   80ecc:	2401      	movs	r4, #1
   80ece:	e000      	b.n	80ed2 <xQueueGenericSendFromISR+0x72>
   80ed0:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80ed2:	4638      	mov	r0, r7
   80ed4:	4b05      	ldr	r3, [pc, #20]	; (80eec <xQueueGenericSendFromISR+0x8c>)
   80ed6:	4798      	blx	r3

	return xReturn;
}
   80ed8:	4620      	mov	r0, r4
   80eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ede:	bf00      	nop
   80ee0:	00080905 	.word	0x00080905
   80ee4:	00080b59 	.word	0x00080b59
   80ee8:	00081801 	.word	0x00081801
   80eec:	0008092d 	.word	0x0008092d

00080ef0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ef4:	b085      	sub	sp, #20
   80ef6:	4689      	mov	r9, r1
   80ef8:	9201      	str	r2, [sp, #4]
   80efa:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80efc:	4604      	mov	r4, r0
   80efe:	b918      	cbnz	r0, 80f08 <xQueueGenericReceive+0x18>
   80f00:	4b44      	ldr	r3, [pc, #272]	; (81014 <xQueueGenericReceive+0x124>)
   80f02:	4798      	blx	r3
   80f04:	bf00      	nop
   80f06:	e7fd      	b.n	80f04 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80f08:	b909      	cbnz	r1, 80f0e <xQueueGenericReceive+0x1e>
   80f0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f0c:	b92b      	cbnz	r3, 80f1a <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80f0e:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80f10:	4e41      	ldr	r6, [pc, #260]	; (81018 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80f12:	f8df b134 	ldr.w	fp, [pc, #308]	; 81048 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80f16:	4d41      	ldr	r5, [pc, #260]	; (8101c <xQueueGenericReceive+0x12c>)
   80f18:	e003      	b.n	80f22 <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80f1a:	4b3e      	ldr	r3, [pc, #248]	; (81014 <xQueueGenericReceive+0x124>)
   80f1c:	4798      	blx	r3
   80f1e:	bf00      	nop
   80f20:	e7fd      	b.n	80f1e <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80f22:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80f24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f26:	2b00      	cmp	r3, #0
   80f28:	d028      	beq.n	80f7c <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80f2a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80f2c:	4620      	mov	r0, r4
   80f2e:	4649      	mov	r1, r9
   80f30:	4b3b      	ldr	r3, [pc, #236]	; (81020 <xQueueGenericReceive+0x130>)
   80f32:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80f34:	f1ba 0f00 	cmp.w	sl, #0
   80f38:	d112      	bne.n	80f60 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f3c:	3b01      	subs	r3, #1
   80f3e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f40:	6823      	ldr	r3, [r4, #0]
   80f42:	b913      	cbnz	r3, 80f4a <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80f44:	4b37      	ldr	r3, [pc, #220]	; (81024 <xQueueGenericReceive+0x134>)
   80f46:	4798      	blx	r3
   80f48:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80f4a:	6923      	ldr	r3, [r4, #16]
   80f4c:	b193      	cbz	r3, 80f74 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80f4e:	f104 0010 	add.w	r0, r4, #16
   80f52:	4b35      	ldr	r3, [pc, #212]	; (81028 <xQueueGenericReceive+0x138>)
   80f54:	4798      	blx	r3
   80f56:	2801      	cmp	r0, #1
   80f58:	d10c      	bne.n	80f74 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   80f5a:	4b34      	ldr	r3, [pc, #208]	; (8102c <xQueueGenericReceive+0x13c>)
   80f5c:	4798      	blx	r3
   80f5e:	e009      	b.n	80f74 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80f60:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80f64:	b133      	cbz	r3, 80f74 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80f66:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f6a:	4b2f      	ldr	r3, [pc, #188]	; (81028 <xQueueGenericReceive+0x138>)
   80f6c:	4798      	blx	r3
   80f6e:	b108      	cbz	r0, 80f74 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80f70:	4b2e      	ldr	r3, [pc, #184]	; (8102c <xQueueGenericReceive+0x13c>)
   80f72:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80f74:	4b29      	ldr	r3, [pc, #164]	; (8101c <xQueueGenericReceive+0x12c>)
   80f76:	4798      	blx	r3
				return pdPASS;
   80f78:	2001      	movs	r0, #1
   80f7a:	e048      	b.n	8100e <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80f7c:	9b01      	ldr	r3, [sp, #4]
   80f7e:	b91b      	cbnz	r3, 80f88 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80f80:	4b26      	ldr	r3, [pc, #152]	; (8101c <xQueueGenericReceive+0x12c>)
   80f82:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80f84:	2000      	movs	r0, #0
   80f86:	e042      	b.n	8100e <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   80f88:	b917      	cbnz	r7, 80f90 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80f8a:	a802      	add	r0, sp, #8
   80f8c:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80f8e:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80f90:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80f92:	4b27      	ldr	r3, [pc, #156]	; (81030 <xQueueGenericReceive+0x140>)
   80f94:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80f96:	47b0      	blx	r6
   80f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f9e:	bf04      	itt	eq
   80fa0:	2300      	moveq	r3, #0
   80fa2:	6463      	streq	r3, [r4, #68]	; 0x44
   80fa4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80faa:	bf04      	itt	eq
   80fac:	2300      	moveq	r3, #0
   80fae:	64a3      	streq	r3, [r4, #72]	; 0x48
   80fb0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80fb2:	a802      	add	r0, sp, #8
   80fb4:	a901      	add	r1, sp, #4
   80fb6:	4b1f      	ldr	r3, [pc, #124]	; (81034 <xQueueGenericReceive+0x144>)
   80fb8:	4798      	blx	r3
   80fba:	bb10      	cbnz	r0, 81002 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80fbc:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80fbe:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80fc2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80fc4:	f1b8 0f00 	cmp.w	r8, #0
   80fc8:	d115      	bne.n	80ff6 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80fca:	6823      	ldr	r3, [r4, #0]
   80fcc:	b923      	cbnz	r3, 80fd8 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   80fce:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80fd0:	6860      	ldr	r0, [r4, #4]
   80fd2:	4b19      	ldr	r3, [pc, #100]	; (81038 <xQueueGenericReceive+0x148>)
   80fd4:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80fd6:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80fd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80fdc:	9901      	ldr	r1, [sp, #4]
   80fde:	4b17      	ldr	r3, [pc, #92]	; (8103c <xQueueGenericReceive+0x14c>)
   80fe0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80fe2:	4620      	mov	r0, r4
   80fe4:	4b16      	ldr	r3, [pc, #88]	; (81040 <xQueueGenericReceive+0x150>)
   80fe6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80fe8:	4b16      	ldr	r3, [pc, #88]	; (81044 <xQueueGenericReceive+0x154>)
   80fea:	4798      	blx	r3
   80fec:	2800      	cmp	r0, #0
   80fee:	d198      	bne.n	80f22 <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   80ff0:	4b0e      	ldr	r3, [pc, #56]	; (8102c <xQueueGenericReceive+0x13c>)
   80ff2:	4798      	blx	r3
   80ff4:	e795      	b.n	80f22 <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80ff6:	4620      	mov	r0, r4
   80ff8:	4b11      	ldr	r3, [pc, #68]	; (81040 <xQueueGenericReceive+0x150>)
   80ffa:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80ffc:	4b11      	ldr	r3, [pc, #68]	; (81044 <xQueueGenericReceive+0x154>)
   80ffe:	4798      	blx	r3
   81000:	e78f      	b.n	80f22 <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81002:	4620      	mov	r0, r4
   81004:	4b0e      	ldr	r3, [pc, #56]	; (81040 <xQueueGenericReceive+0x150>)
   81006:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81008:	4b0e      	ldr	r3, [pc, #56]	; (81044 <xQueueGenericReceive+0x154>)
   8100a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8100c:	2000      	movs	r0, #0
		}
	}
}
   8100e:	b005      	add	sp, #20
   81010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81014:	00080905 	.word	0x00080905
   81018:	00080915 	.word	0x00080915
   8101c:	00080935 	.word	0x00080935
   81020:	00080bbd 	.word	0x00080bbd
   81024:	0008193d 	.word	0x0008193d
   81028:	00081801 	.word	0x00081801
   8102c:	000808f5 	.word	0x000808f5
   81030:	00081361 	.word	0x00081361
   81034:	000818ad 	.word	0x000818ad
   81038:	00081969 	.word	0x00081969
   8103c:	0008175d 	.word	0x0008175d
   81040:	00080be5 	.word	0x00080be5
   81044:	000814b1 	.word	0x000814b1
   81048:	00081885 	.word	0x00081885

0008104c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   8104c:	b538      	push	{r3, r4, r5, lr}
   8104e:	4604      	mov	r4, r0
   81050:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81052:	4b0d      	ldr	r3, [pc, #52]	; (81088 <vQueueWaitForMessageRestricted+0x3c>)
   81054:	4798      	blx	r3
   81056:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81058:	f1b3 3fff 	cmp.w	r3, #4294967295
   8105c:	bf04      	itt	eq
   8105e:	2300      	moveq	r3, #0
   81060:	6463      	streq	r3, [r4, #68]	; 0x44
   81062:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81064:	f1b3 3fff 	cmp.w	r3, #4294967295
   81068:	bf04      	itt	eq
   8106a:	2300      	moveq	r3, #0
   8106c:	64a3      	streq	r3, [r4, #72]	; 0x48
   8106e:	4b07      	ldr	r3, [pc, #28]	; (8108c <vQueueWaitForMessageRestricted+0x40>)
   81070:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81072:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81074:	b923      	cbnz	r3, 81080 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81076:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8107a:	4629      	mov	r1, r5
   8107c:	4b04      	ldr	r3, [pc, #16]	; (81090 <vQueueWaitForMessageRestricted+0x44>)
   8107e:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81080:	4620      	mov	r0, r4
   81082:	4b04      	ldr	r3, [pc, #16]	; (81094 <vQueueWaitForMessageRestricted+0x48>)
   81084:	4798      	blx	r3
   81086:	bd38      	pop	{r3, r4, r5, pc}
   81088:	00080915 	.word	0x00080915
   8108c:	00080935 	.word	0x00080935
   81090:	000817bd 	.word	0x000817bd
   81094:	00080be5 	.word	0x00080be5

00081098 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81098:	b510      	push	{r4, lr}
   8109a:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   8109c:	4b0e      	ldr	r3, [pc, #56]	; (810d8 <prvAddCurrentTaskToDelayedList+0x40>)
   8109e:	681b      	ldr	r3, [r3, #0]
   810a0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   810a2:	4b0e      	ldr	r3, [pc, #56]	; (810dc <prvAddCurrentTaskToDelayedList+0x44>)
   810a4:	681b      	ldr	r3, [r3, #0]
   810a6:	4298      	cmp	r0, r3
   810a8:	d207      	bcs.n	810ba <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   810aa:	4b0d      	ldr	r3, [pc, #52]	; (810e0 <prvAddCurrentTaskToDelayedList+0x48>)
   810ac:	6818      	ldr	r0, [r3, #0]
   810ae:	4b0a      	ldr	r3, [pc, #40]	; (810d8 <prvAddCurrentTaskToDelayedList+0x40>)
   810b0:	6819      	ldr	r1, [r3, #0]
   810b2:	3104      	adds	r1, #4
   810b4:	4b0b      	ldr	r3, [pc, #44]	; (810e4 <prvAddCurrentTaskToDelayedList+0x4c>)
   810b6:	4798      	blx	r3
   810b8:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   810ba:	4b0b      	ldr	r3, [pc, #44]	; (810e8 <prvAddCurrentTaskToDelayedList+0x50>)
   810bc:	6818      	ldr	r0, [r3, #0]
   810be:	4b06      	ldr	r3, [pc, #24]	; (810d8 <prvAddCurrentTaskToDelayedList+0x40>)
   810c0:	6819      	ldr	r1, [r3, #0]
   810c2:	3104      	adds	r1, #4
   810c4:	4b07      	ldr	r3, [pc, #28]	; (810e4 <prvAddCurrentTaskToDelayedList+0x4c>)
   810c6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   810c8:	4b08      	ldr	r3, [pc, #32]	; (810ec <prvAddCurrentTaskToDelayedList+0x54>)
   810ca:	681b      	ldr	r3, [r3, #0]
   810cc:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   810ce:	bf3c      	itt	cc
   810d0:	4b06      	ldrcc	r3, [pc, #24]	; (810ec <prvAddCurrentTaskToDelayedList+0x54>)
   810d2:	601c      	strcc	r4, [r3, #0]
   810d4:	bd10      	pop	{r4, pc}
   810d6:	bf00      	nop
   810d8:	2007aae4 	.word	0x2007aae4
   810dc:	2007ab00 	.word	0x2007ab00
   810e0:	2007ab04 	.word	0x2007ab04
   810e4:	00080841 	.word	0x00080841
   810e8:	2007aa44 	.word	0x2007aa44
   810ec:	20070008 	.word	0x20070008

000810f0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   810f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810f4:	460e      	mov	r6, r1
   810f6:	4617      	mov	r7, r2
   810f8:	469a      	mov	sl, r3
   810fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   810fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81100:	4681      	mov	r9, r0
   81102:	b918      	cbnz	r0, 8110c <xTaskGenericCreate+0x1c>
   81104:	4b62      	ldr	r3, [pc, #392]	; (81290 <xTaskGenericCreate+0x1a0>)
   81106:	4798      	blx	r3
   81108:	bf00      	nop
   8110a:	e7fd      	b.n	81108 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   8110c:	2d04      	cmp	r5, #4
   8110e:	d903      	bls.n	81118 <xTaskGenericCreate+0x28>
   81110:	4b5f      	ldr	r3, [pc, #380]	; (81290 <xTaskGenericCreate+0x1a0>)
   81112:	4798      	blx	r3
   81114:	bf00      	nop
   81116:	e7fd      	b.n	81114 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81118:	204c      	movs	r0, #76	; 0x4c
   8111a:	4b5e      	ldr	r3, [pc, #376]	; (81294 <xTaskGenericCreate+0x1a4>)
   8111c:	4798      	blx	r3

	if( pxNewTCB != NULL )
   8111e:	4604      	mov	r4, r0
   81120:	2800      	cmp	r0, #0
   81122:	f000 80b1 	beq.w	81288 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81126:	f1b8 0f00 	cmp.w	r8, #0
   8112a:	f040 80a9 	bne.w	81280 <xTaskGenericCreate+0x190>
   8112e:	00b8      	lsls	r0, r7, #2
   81130:	4b58      	ldr	r3, [pc, #352]	; (81294 <xTaskGenericCreate+0x1a4>)
   81132:	4798      	blx	r3
   81134:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81136:	b918      	cbnz	r0, 81140 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81138:	4620      	mov	r0, r4
   8113a:	4b57      	ldr	r3, [pc, #348]	; (81298 <xTaskGenericCreate+0x1a8>)
   8113c:	4798      	blx	r3
   8113e:	e0a3      	b.n	81288 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81140:	21a5      	movs	r1, #165	; 0xa5
   81142:	00ba      	lsls	r2, r7, #2
   81144:	4b55      	ldr	r3, [pc, #340]	; (8129c <xTaskGenericCreate+0x1ac>)
   81146:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81148:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   8114c:	3f01      	subs	r7, #1
   8114e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81150:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81154:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81158:	f104 0034 	add.w	r0, r4, #52	; 0x34
   8115c:	4631      	mov	r1, r6
   8115e:	220a      	movs	r2, #10
   81160:	4b4f      	ldr	r3, [pc, #316]	; (812a0 <xTaskGenericCreate+0x1b0>)
   81162:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81164:	2300      	movs	r3, #0
   81166:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   8116a:	2d04      	cmp	r5, #4
   8116c:	bf34      	ite	cc
   8116e:	462e      	movcc	r6, r5
   81170:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81172:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81174:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81176:	1d27      	adds	r7, r4, #4
   81178:	4638      	mov	r0, r7
   8117a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 812ec <xTaskGenericCreate+0x1fc>
   8117e:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81180:	f104 0018 	add.w	r0, r4, #24
   81184:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81186:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81188:	f1c6 0605 	rsb	r6, r6, #5
   8118c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8118e:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81190:	4658      	mov	r0, fp
   81192:	4649      	mov	r1, r9
   81194:	4652      	mov	r2, sl
   81196:	4b43      	ldr	r3, [pc, #268]	; (812a4 <xTaskGenericCreate+0x1b4>)
   81198:	4798      	blx	r3
   8119a:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   8119c:	f010 0f07 	tst.w	r0, #7
   811a0:	d003      	beq.n	811aa <xTaskGenericCreate+0xba>
   811a2:	4b3b      	ldr	r3, [pc, #236]	; (81290 <xTaskGenericCreate+0x1a0>)
   811a4:	4798      	blx	r3
   811a6:	bf00      	nop
   811a8:	e7fd      	b.n	811a6 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   811aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   811ac:	b103      	cbz	r3, 811b0 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   811ae:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   811b0:	4b3d      	ldr	r3, [pc, #244]	; (812a8 <xTaskGenericCreate+0x1b8>)
   811b2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   811b4:	4b3d      	ldr	r3, [pc, #244]	; (812ac <xTaskGenericCreate+0x1bc>)
   811b6:	681a      	ldr	r2, [r3, #0]
   811b8:	3201      	adds	r2, #1
   811ba:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   811bc:	4b3c      	ldr	r3, [pc, #240]	; (812b0 <xTaskGenericCreate+0x1c0>)
   811be:	681b      	ldr	r3, [r3, #0]
   811c0:	bb2b      	cbnz	r3, 8120e <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   811c2:	4b3b      	ldr	r3, [pc, #236]	; (812b0 <xTaskGenericCreate+0x1c0>)
   811c4:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   811c6:	4b39      	ldr	r3, [pc, #228]	; (812ac <xTaskGenericCreate+0x1bc>)
   811c8:	681b      	ldr	r3, [r3, #0]
   811ca:	2b01      	cmp	r3, #1
   811cc:	d129      	bne.n	81222 <xTaskGenericCreate+0x132>
   811ce:	4e39      	ldr	r6, [pc, #228]	; (812b4 <xTaskGenericCreate+0x1c4>)
   811d0:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   811d4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 812b8 <xTaskGenericCreate+0x1c8>
   811d8:	4630      	mov	r0, r6
   811da:	47c0      	blx	r8
   811dc:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   811de:	454e      	cmp	r6, r9
   811e0:	d1fa      	bne.n	811d8 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   811e2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 812f0 <xTaskGenericCreate+0x200>
   811e6:	4648      	mov	r0, r9
   811e8:	4e33      	ldr	r6, [pc, #204]	; (812b8 <xTaskGenericCreate+0x1c8>)
   811ea:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   811ec:	f8df 8104 	ldr.w	r8, [pc, #260]	; 812f4 <xTaskGenericCreate+0x204>
   811f0:	4640      	mov	r0, r8
   811f2:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   811f4:	4831      	ldr	r0, [pc, #196]	; (812bc <xTaskGenericCreate+0x1cc>)
   811f6:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   811f8:	4831      	ldr	r0, [pc, #196]	; (812c0 <xTaskGenericCreate+0x1d0>)
   811fa:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   811fc:	4831      	ldr	r0, [pc, #196]	; (812c4 <xTaskGenericCreate+0x1d4>)
   811fe:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81200:	4b31      	ldr	r3, [pc, #196]	; (812c8 <xTaskGenericCreate+0x1d8>)
   81202:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81206:	4b31      	ldr	r3, [pc, #196]	; (812cc <xTaskGenericCreate+0x1dc>)
   81208:	f8c3 8000 	str.w	r8, [r3]
   8120c:	e009      	b.n	81222 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8120e:	4b30      	ldr	r3, [pc, #192]	; (812d0 <xTaskGenericCreate+0x1e0>)
   81210:	681b      	ldr	r3, [r3, #0]
   81212:	b933      	cbnz	r3, 81222 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81214:	4b26      	ldr	r3, [pc, #152]	; (812b0 <xTaskGenericCreate+0x1c0>)
   81216:	681b      	ldr	r3, [r3, #0]
   81218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8121a:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   8121c:	bf24      	itt	cs
   8121e:	4b24      	ldrcs	r3, [pc, #144]	; (812b0 <xTaskGenericCreate+0x1c0>)
   81220:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81222:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81224:	4a2b      	ldr	r2, [pc, #172]	; (812d4 <xTaskGenericCreate+0x1e4>)
   81226:	6812      	ldr	r2, [r2, #0]
   81228:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8122a:	bf84      	itt	hi
   8122c:	4a29      	ldrhi	r2, [pc, #164]	; (812d4 <xTaskGenericCreate+0x1e4>)
   8122e:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81230:	4a29      	ldr	r2, [pc, #164]	; (812d8 <xTaskGenericCreate+0x1e8>)
   81232:	6811      	ldr	r1, [r2, #0]
   81234:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   81236:	3101      	adds	r1, #1
   81238:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   8123a:	4a28      	ldr	r2, [pc, #160]	; (812dc <xTaskGenericCreate+0x1ec>)
   8123c:	6812      	ldr	r2, [r2, #0]
   8123e:	4293      	cmp	r3, r2
   81240:	bf84      	itt	hi
   81242:	4a26      	ldrhi	r2, [pc, #152]	; (812dc <xTaskGenericCreate+0x1ec>)
   81244:	6013      	strhi	r3, [r2, #0]
   81246:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8124a:	481a      	ldr	r0, [pc, #104]	; (812b4 <xTaskGenericCreate+0x1c4>)
   8124c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81250:	4639      	mov	r1, r7
   81252:	4b23      	ldr	r3, [pc, #140]	; (812e0 <xTaskGenericCreate+0x1f0>)
   81254:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81256:	4b23      	ldr	r3, [pc, #140]	; (812e4 <xTaskGenericCreate+0x1f4>)
   81258:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   8125a:	4b1d      	ldr	r3, [pc, #116]	; (812d0 <xTaskGenericCreate+0x1e0>)
   8125c:	681b      	ldr	r3, [r3, #0]
   8125e:	b14b      	cbz	r3, 81274 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81260:	4b13      	ldr	r3, [pc, #76]	; (812b0 <xTaskGenericCreate+0x1c0>)
   81262:	681b      	ldr	r3, [r3, #0]
   81264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81266:	429d      	cmp	r5, r3
   81268:	d907      	bls.n	8127a <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   8126a:	4b1f      	ldr	r3, [pc, #124]	; (812e8 <xTaskGenericCreate+0x1f8>)
   8126c:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   8126e:	2001      	movs	r0, #1
   81270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81274:	2001      	movs	r0, #1
   81276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8127a:	2001      	movs	r0, #1
   8127c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81280:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81284:	4640      	mov	r0, r8
   81286:	e75b      	b.n	81140 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81288:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   8128c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81290:	00080905 	.word	0x00080905
   81294:	00080a61 	.word	0x00080a61
   81298:	00080b25 	.word	0x00080b25
   8129c:	000833df 	.word	0x000833df
   812a0:	00083525 	.word	0x00083525
   812a4:	000808b9 	.word	0x000808b9
   812a8:	00080915 	.word	0x00080915
   812ac:	2007ab24 	.word	0x2007ab24
   812b0:	2007aae4 	.word	0x2007aae4
   812b4:	2007aa7c 	.word	0x2007aa7c
   812b8:	00080805 	.word	0x00080805
   812bc:	2007aae8 	.word	0x2007aae8
   812c0:	2007aa50 	.word	0x2007aa50
   812c4:	2007aa30 	.word	0x2007aa30
   812c8:	2007aa44 	.word	0x2007aa44
   812cc:	2007ab04 	.word	0x2007ab04
   812d0:	2007aa48 	.word	0x2007aa48
   812d4:	2007ab28 	.word	0x2007ab28
   812d8:	2007ab08 	.word	0x2007ab08
   812dc:	2007aa78 	.word	0x2007aa78
   812e0:	00080825 	.word	0x00080825
   812e4:	00080935 	.word	0x00080935
   812e8:	000808f5 	.word	0x000808f5
   812ec:	0008081d 	.word	0x0008081d
   812f0:	2007ab0c 	.word	0x2007ab0c
   812f4:	2007aa64 	.word	0x2007aa64

000812f8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   812f8:	b510      	push	{r4, lr}
   812fa:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   812fc:	2300      	movs	r3, #0
   812fe:	9300      	str	r3, [sp, #0]
   81300:	9301      	str	r3, [sp, #4]
   81302:	9302      	str	r3, [sp, #8]
   81304:	9303      	str	r3, [sp, #12]
   81306:	480e      	ldr	r0, [pc, #56]	; (81340 <vTaskStartScheduler+0x48>)
   81308:	490e      	ldr	r1, [pc, #56]	; (81344 <vTaskStartScheduler+0x4c>)
   8130a:	2282      	movs	r2, #130	; 0x82
   8130c:	4c0e      	ldr	r4, [pc, #56]	; (81348 <vTaskStartScheduler+0x50>)
   8130e:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81310:	2801      	cmp	r0, #1
   81312:	d10e      	bne.n	81332 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   81314:	4b0d      	ldr	r3, [pc, #52]	; (8134c <vTaskStartScheduler+0x54>)
   81316:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81318:	2801      	cmp	r0, #1
   8131a:	d10a      	bne.n	81332 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   8131c:	4b0c      	ldr	r3, [pc, #48]	; (81350 <vTaskStartScheduler+0x58>)
   8131e:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81320:	2201      	movs	r2, #1
   81322:	4b0c      	ldr	r3, [pc, #48]	; (81354 <vTaskStartScheduler+0x5c>)
   81324:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81326:	2200      	movs	r2, #0
   81328:	4b0b      	ldr	r3, [pc, #44]	; (81358 <vTaskStartScheduler+0x60>)
   8132a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8132c:	4b0b      	ldr	r3, [pc, #44]	; (8135c <vTaskStartScheduler+0x64>)
   8132e:	4798      	blx	r3
   81330:	e004      	b.n	8133c <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81332:	b918      	cbnz	r0, 8133c <vTaskStartScheduler+0x44>
   81334:	4b06      	ldr	r3, [pc, #24]	; (81350 <vTaskStartScheduler+0x58>)
   81336:	4798      	blx	r3
   81338:	bf00      	nop
   8133a:	e7fd      	b.n	81338 <vTaskStartScheduler+0x40>
}
   8133c:	b004      	add	sp, #16
   8133e:	bd10      	pop	{r4, pc}
   81340:	00081649 	.word	0x00081649
   81344:	00088a3c 	.word	0x00088a3c
   81348:	000810f1 	.word	0x000810f1
   8134c:	00081add 	.word	0x00081add
   81350:	00080905 	.word	0x00080905
   81354:	2007aa48 	.word	0x2007aa48
   81358:	2007ab00 	.word	0x2007ab00
   8135c:	000809d1 	.word	0x000809d1

00081360 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81360:	4b02      	ldr	r3, [pc, #8]	; (8136c <vTaskSuspendAll+0xc>)
   81362:	681a      	ldr	r2, [r3, #0]
   81364:	3201      	adds	r2, #1
   81366:	601a      	str	r2, [r3, #0]
   81368:	4770      	bx	lr
   8136a:	bf00      	nop
   8136c:	2007aafc 	.word	0x2007aafc

00081370 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81370:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81372:	4b04      	ldr	r3, [pc, #16]	; (81384 <xTaskGetTickCount+0x14>)
   81374:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81376:	4b04      	ldr	r3, [pc, #16]	; (81388 <xTaskGetTickCount+0x18>)
   81378:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   8137a:	4b04      	ldr	r3, [pc, #16]	; (8138c <xTaskGetTickCount+0x1c>)
   8137c:	4798      	blx	r3

	return xTicks;
}
   8137e:	4620      	mov	r0, r4
   81380:	bd10      	pop	{r4, pc}
   81382:	bf00      	nop
   81384:	00080915 	.word	0x00080915
   81388:	2007ab00 	.word	0x2007ab00
   8138c:	00080935 	.word	0x00080935

00081390 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81394:	4b3a      	ldr	r3, [pc, #232]	; (81480 <vTaskIncrementTick+0xf0>)
   81396:	681b      	ldr	r3, [r3, #0]
   81398:	2b00      	cmp	r3, #0
   8139a:	d16b      	bne.n	81474 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   8139c:	4b39      	ldr	r3, [pc, #228]	; (81484 <vTaskIncrementTick+0xf4>)
   8139e:	681a      	ldr	r2, [r3, #0]
   813a0:	3201      	adds	r2, #1
   813a2:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   813a4:	681b      	ldr	r3, [r3, #0]
   813a6:	bb03      	cbnz	r3, 813ea <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   813a8:	4b37      	ldr	r3, [pc, #220]	; (81488 <vTaskIncrementTick+0xf8>)
   813aa:	681b      	ldr	r3, [r3, #0]
   813ac:	681b      	ldr	r3, [r3, #0]
   813ae:	b11b      	cbz	r3, 813b8 <vTaskIncrementTick+0x28>
   813b0:	4b36      	ldr	r3, [pc, #216]	; (8148c <vTaskIncrementTick+0xfc>)
   813b2:	4798      	blx	r3
   813b4:	bf00      	nop
   813b6:	e7fd      	b.n	813b4 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   813b8:	4b33      	ldr	r3, [pc, #204]	; (81488 <vTaskIncrementTick+0xf8>)
   813ba:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   813bc:	4a34      	ldr	r2, [pc, #208]	; (81490 <vTaskIncrementTick+0x100>)
   813be:	6810      	ldr	r0, [r2, #0]
   813c0:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   813c2:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   813c4:	4a33      	ldr	r2, [pc, #204]	; (81494 <vTaskIncrementTick+0x104>)
   813c6:	6811      	ldr	r1, [r2, #0]
   813c8:	3101      	adds	r1, #1
   813ca:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   813cc:	681b      	ldr	r3, [r3, #0]
   813ce:	681b      	ldr	r3, [r3, #0]
   813d0:	b923      	cbnz	r3, 813dc <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   813d2:	f04f 32ff 	mov.w	r2, #4294967295
   813d6:	4b30      	ldr	r3, [pc, #192]	; (81498 <vTaskIncrementTick+0x108>)
   813d8:	601a      	str	r2, [r3, #0]
   813da:	e006      	b.n	813ea <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   813dc:	4b2a      	ldr	r3, [pc, #168]	; (81488 <vTaskIncrementTick+0xf8>)
   813de:	681b      	ldr	r3, [r3, #0]
   813e0:	68db      	ldr	r3, [r3, #12]
   813e2:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   813e4:	685a      	ldr	r2, [r3, #4]
   813e6:	4b2c      	ldr	r3, [pc, #176]	; (81498 <vTaskIncrementTick+0x108>)
   813e8:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   813ea:	4b26      	ldr	r3, [pc, #152]	; (81484 <vTaskIncrementTick+0xf4>)
   813ec:	681a      	ldr	r2, [r3, #0]
   813ee:	4b2a      	ldr	r3, [pc, #168]	; (81498 <vTaskIncrementTick+0x108>)
   813f0:	681b      	ldr	r3, [r3, #0]
   813f2:	429a      	cmp	r2, r3
   813f4:	d342      	bcc.n	8147c <vTaskIncrementTick+0xec>
   813f6:	4b24      	ldr	r3, [pc, #144]	; (81488 <vTaskIncrementTick+0xf8>)
   813f8:	681b      	ldr	r3, [r3, #0]
   813fa:	681b      	ldr	r3, [r3, #0]
   813fc:	b14b      	cbz	r3, 81412 <vTaskIncrementTick+0x82>
   813fe:	4b22      	ldr	r3, [pc, #136]	; (81488 <vTaskIncrementTick+0xf8>)
   81400:	681b      	ldr	r3, [r3, #0]
   81402:	68db      	ldr	r3, [r3, #12]
   81404:	68dc      	ldr	r4, [r3, #12]
   81406:	6863      	ldr	r3, [r4, #4]
   81408:	4a1e      	ldr	r2, [pc, #120]	; (81484 <vTaskIncrementTick+0xf4>)
   8140a:	6812      	ldr	r2, [r2, #0]
   8140c:	4293      	cmp	r3, r2
   8140e:	d913      	bls.n	81438 <vTaskIncrementTick+0xa8>
   81410:	e00e      	b.n	81430 <vTaskIncrementTick+0xa0>
   81412:	f04f 32ff 	mov.w	r2, #4294967295
   81416:	4b20      	ldr	r3, [pc, #128]	; (81498 <vTaskIncrementTick+0x108>)
   81418:	601a      	str	r2, [r3, #0]
   8141a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8141e:	4b1a      	ldr	r3, [pc, #104]	; (81488 <vTaskIncrementTick+0xf8>)
   81420:	681b      	ldr	r3, [r3, #0]
   81422:	68db      	ldr	r3, [r3, #12]
   81424:	68dc      	ldr	r4, [r3, #12]
   81426:	6863      	ldr	r3, [r4, #4]
   81428:	4a16      	ldr	r2, [pc, #88]	; (81484 <vTaskIncrementTick+0xf4>)
   8142a:	6812      	ldr	r2, [r2, #0]
   8142c:	4293      	cmp	r3, r2
   8142e:	d907      	bls.n	81440 <vTaskIncrementTick+0xb0>
   81430:	4a19      	ldr	r2, [pc, #100]	; (81498 <vTaskIncrementTick+0x108>)
   81432:	6013      	str	r3, [r2, #0]
   81434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81438:	4e18      	ldr	r6, [pc, #96]	; (8149c <vTaskIncrementTick+0x10c>)
   8143a:	4f19      	ldr	r7, [pc, #100]	; (814a0 <vTaskIncrementTick+0x110>)
   8143c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 814ac <vTaskIncrementTick+0x11c>
   81440:	1d25      	adds	r5, r4, #4
   81442:	4628      	mov	r0, r5
   81444:	47b0      	blx	r6
   81446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81448:	b113      	cbz	r3, 81450 <vTaskIncrementTick+0xc0>
   8144a:	f104 0018 	add.w	r0, r4, #24
   8144e:	47b0      	blx	r6
   81450:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81452:	683a      	ldr	r2, [r7, #0]
   81454:	4293      	cmp	r3, r2
   81456:	bf88      	it	hi
   81458:	603b      	strhi	r3, [r7, #0]
   8145a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   8145e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81462:	4629      	mov	r1, r5
   81464:	4b0f      	ldr	r3, [pc, #60]	; (814a4 <vTaskIncrementTick+0x114>)
   81466:	4798      	blx	r3
   81468:	4b07      	ldr	r3, [pc, #28]	; (81488 <vTaskIncrementTick+0xf8>)
   8146a:	681b      	ldr	r3, [r3, #0]
   8146c:	681b      	ldr	r3, [r3, #0]
   8146e:	2b00      	cmp	r3, #0
   81470:	d1d5      	bne.n	8141e <vTaskIncrementTick+0x8e>
   81472:	e7ce      	b.n	81412 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81474:	4b0c      	ldr	r3, [pc, #48]	; (814a8 <vTaskIncrementTick+0x118>)
   81476:	681a      	ldr	r2, [r3, #0]
   81478:	3201      	adds	r2, #1
   8147a:	601a      	str	r2, [r3, #0]
   8147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81480:	2007aafc 	.word	0x2007aafc
   81484:	2007ab00 	.word	0x2007ab00
   81488:	2007aa44 	.word	0x2007aa44
   8148c:	00080905 	.word	0x00080905
   81490:	2007ab04 	.word	0x2007ab04
   81494:	2007aae0 	.word	0x2007aae0
   81498:	20070008 	.word	0x20070008
   8149c:	0008087d 	.word	0x0008087d
   814a0:	2007aa78 	.word	0x2007aa78
   814a4:	00080825 	.word	0x00080825
   814a8:	2007aa2c 	.word	0x2007aa2c
   814ac:	2007aa7c 	.word	0x2007aa7c

000814b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   814b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   814b4:	4b31      	ldr	r3, [pc, #196]	; (8157c <xTaskResumeAll+0xcc>)
   814b6:	681b      	ldr	r3, [r3, #0]
   814b8:	b91b      	cbnz	r3, 814c2 <xTaskResumeAll+0x12>
   814ba:	4b31      	ldr	r3, [pc, #196]	; (81580 <xTaskResumeAll+0xd0>)
   814bc:	4798      	blx	r3
   814be:	bf00      	nop
   814c0:	e7fd      	b.n	814be <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   814c2:	4b30      	ldr	r3, [pc, #192]	; (81584 <xTaskResumeAll+0xd4>)
   814c4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   814c6:	4b2d      	ldr	r3, [pc, #180]	; (8157c <xTaskResumeAll+0xcc>)
   814c8:	681a      	ldr	r2, [r3, #0]
   814ca:	3a01      	subs	r2, #1
   814cc:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   814ce:	681b      	ldr	r3, [r3, #0]
   814d0:	2b00      	cmp	r3, #0
   814d2:	d148      	bne.n	81566 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   814d4:	4b2c      	ldr	r3, [pc, #176]	; (81588 <xTaskResumeAll+0xd8>)
   814d6:	681b      	ldr	r3, [r3, #0]
   814d8:	2b00      	cmp	r3, #0
   814da:	d046      	beq.n	8156a <xTaskResumeAll+0xba>
   814dc:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   814de:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 815b4 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   814e2:	4f2a      	ldr	r7, [pc, #168]	; (8158c <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   814e4:	4e2a      	ldr	r6, [pc, #168]	; (81590 <xTaskResumeAll+0xe0>)
   814e6:	e01d      	b.n	81524 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   814e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   814ec:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   814ee:	f104 0018 	add.w	r0, r4, #24
   814f2:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   814f4:	f104 0904 	add.w	r9, r4, #4
   814f8:	4648      	mov	r0, r9
   814fa:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   814fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   814fe:	6832      	ldr	r2, [r6, #0]
   81500:	4293      	cmp	r3, r2
   81502:	bf88      	it	hi
   81504:	6033      	strhi	r3, [r6, #0]
   81506:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8150a:	4822      	ldr	r0, [pc, #136]	; (81594 <xTaskResumeAll+0xe4>)
   8150c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81510:	4649      	mov	r1, r9
   81512:	4b21      	ldr	r3, [pc, #132]	; (81598 <xTaskResumeAll+0xe8>)
   81514:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81516:	4b21      	ldr	r3, [pc, #132]	; (8159c <xTaskResumeAll+0xec>)
   81518:	681b      	ldr	r3, [r3, #0]
   8151a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   8151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   8151e:	429a      	cmp	r2, r3
   81520:	bf28      	it	cs
   81522:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81524:	f8d8 3000 	ldr.w	r3, [r8]
   81528:	2b00      	cmp	r3, #0
   8152a:	d1dd      	bne.n	814e8 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8152c:	4b1c      	ldr	r3, [pc, #112]	; (815a0 <xTaskResumeAll+0xf0>)
   8152e:	681b      	ldr	r3, [r3, #0]
   81530:	b163      	cbz	r3, 8154c <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81532:	4b1b      	ldr	r3, [pc, #108]	; (815a0 <xTaskResumeAll+0xf0>)
   81534:	681b      	ldr	r3, [r3, #0]
   81536:	b17b      	cbz	r3, 81558 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81538:	4d1a      	ldr	r5, [pc, #104]	; (815a4 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   8153a:	4c19      	ldr	r4, [pc, #100]	; (815a0 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   8153c:	47a8      	blx	r5
						--uxMissedTicks;
   8153e:	6823      	ldr	r3, [r4, #0]
   81540:	3b01      	subs	r3, #1
   81542:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81544:	6823      	ldr	r3, [r4, #0]
   81546:	2b00      	cmp	r3, #0
   81548:	d1f8      	bne.n	8153c <xTaskResumeAll+0x8c>
   8154a:	e005      	b.n	81558 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   8154c:	2d01      	cmp	r5, #1
   8154e:	d003      	beq.n	81558 <xTaskResumeAll+0xa8>
   81550:	4b15      	ldr	r3, [pc, #84]	; (815a8 <xTaskResumeAll+0xf8>)
   81552:	681b      	ldr	r3, [r3, #0]
   81554:	2b01      	cmp	r3, #1
   81556:	d10a      	bne.n	8156e <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81558:	2200      	movs	r2, #0
   8155a:	4b13      	ldr	r3, [pc, #76]	; (815a8 <xTaskResumeAll+0xf8>)
   8155c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   8155e:	4b13      	ldr	r3, [pc, #76]	; (815ac <xTaskResumeAll+0xfc>)
   81560:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81562:	2401      	movs	r4, #1
   81564:	e004      	b.n	81570 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81566:	2400      	movs	r4, #0
   81568:	e002      	b.n	81570 <xTaskResumeAll+0xc0>
   8156a:	2400      	movs	r4, #0
   8156c:	e000      	b.n	81570 <xTaskResumeAll+0xc0>
   8156e:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81570:	4b0f      	ldr	r3, [pc, #60]	; (815b0 <xTaskResumeAll+0x100>)
   81572:	4798      	blx	r3

	return xAlreadyYielded;
}
   81574:	4620      	mov	r0, r4
   81576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8157a:	bf00      	nop
   8157c:	2007aafc 	.word	0x2007aafc
   81580:	00080905 	.word	0x00080905
   81584:	00080915 	.word	0x00080915
   81588:	2007ab24 	.word	0x2007ab24
   8158c:	0008087d 	.word	0x0008087d
   81590:	2007aa78 	.word	0x2007aa78
   81594:	2007aa7c 	.word	0x2007aa7c
   81598:	00080825 	.word	0x00080825
   8159c:	2007aae4 	.word	0x2007aae4
   815a0:	2007aa2c 	.word	0x2007aa2c
   815a4:	00081391 	.word	0x00081391
   815a8:	2007ab20 	.word	0x2007ab20
   815ac:	000808f5 	.word	0x000808f5
   815b0:	00080935 	.word	0x00080935
   815b4:	2007aae8 	.word	0x2007aae8

000815b8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   815b8:	b538      	push	{r3, r4, r5, lr}
   815ba:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   815bc:	4605      	mov	r5, r0
   815be:	b918      	cbnz	r0, 815c8 <vTaskDelayUntil+0x10>
   815c0:	4b19      	ldr	r3, [pc, #100]	; (81628 <vTaskDelayUntil+0x70>)
   815c2:	4798      	blx	r3
   815c4:	bf00      	nop
   815c6:	e7fd      	b.n	815c4 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   815c8:	b919      	cbnz	r1, 815d2 <vTaskDelayUntil+0x1a>
   815ca:	4b17      	ldr	r3, [pc, #92]	; (81628 <vTaskDelayUntil+0x70>)
   815cc:	4798      	blx	r3
   815ce:	bf00      	nop
   815d0:	e7fd      	b.n	815ce <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   815d2:	4b16      	ldr	r3, [pc, #88]	; (8162c <vTaskDelayUntil+0x74>)
   815d4:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   815d6:	682b      	ldr	r3, [r5, #0]
   815d8:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   815da:	4a15      	ldr	r2, [pc, #84]	; (81630 <vTaskDelayUntil+0x78>)
   815dc:	6812      	ldr	r2, [r2, #0]
   815de:	4293      	cmp	r3, r2
   815e0:	d907      	bls.n	815f2 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   815e2:	42a3      	cmp	r3, r4
   815e4:	d91c      	bls.n	81620 <vTaskDelayUntil+0x68>
   815e6:	4b12      	ldr	r3, [pc, #72]	; (81630 <vTaskDelayUntil+0x78>)
   815e8:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   815ea:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   815ec:	429c      	cmp	r4, r3
   815ee:	d90f      	bls.n	81610 <vTaskDelayUntil+0x58>
   815f0:	e006      	b.n	81600 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   815f2:	42a3      	cmp	r3, r4
   815f4:	d812      	bhi.n	8161c <vTaskDelayUntil+0x64>
   815f6:	4b0e      	ldr	r3, [pc, #56]	; (81630 <vTaskDelayUntil+0x78>)
   815f8:	681b      	ldr	r3, [r3, #0]
   815fa:	429c      	cmp	r4, r3
   815fc:	d80e      	bhi.n	8161c <vTaskDelayUntil+0x64>
   815fe:	e00f      	b.n	81620 <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81600:	4b0c      	ldr	r3, [pc, #48]	; (81634 <vTaskDelayUntil+0x7c>)
   81602:	6818      	ldr	r0, [r3, #0]
   81604:	3004      	adds	r0, #4
   81606:	4b0c      	ldr	r3, [pc, #48]	; (81638 <vTaskDelayUntil+0x80>)
   81608:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8160a:	4620      	mov	r0, r4
   8160c:	4b0b      	ldr	r3, [pc, #44]	; (8163c <vTaskDelayUntil+0x84>)
   8160e:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81610:	4b0b      	ldr	r3, [pc, #44]	; (81640 <vTaskDelayUntil+0x88>)
   81612:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81614:	b930      	cbnz	r0, 81624 <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   81616:	4b0b      	ldr	r3, [pc, #44]	; (81644 <vTaskDelayUntil+0x8c>)
   81618:	4798      	blx	r3
   8161a:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8161c:	602c      	str	r4, [r5, #0]
   8161e:	e7ef      	b.n	81600 <vTaskDelayUntil+0x48>
   81620:	602c      	str	r4, [r5, #0]
   81622:	e7f5      	b.n	81610 <vTaskDelayUntil+0x58>
   81624:	bd38      	pop	{r3, r4, r5, pc}
   81626:	bf00      	nop
   81628:	00080905 	.word	0x00080905
   8162c:	00081361 	.word	0x00081361
   81630:	2007ab00 	.word	0x2007ab00
   81634:	2007aae4 	.word	0x2007aae4
   81638:	0008087d 	.word	0x0008087d
   8163c:	00081099 	.word	0x00081099
   81640:	000814b1 	.word	0x000814b1
   81644:	000808f5 	.word	0x000808f5

00081648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81648:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8164a:	4d15      	ldr	r5, [pc, #84]	; (816a0 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   8164c:	4e15      	ldr	r6, [pc, #84]	; (816a4 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   8164e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 816c8 <prvIdleTask+0x80>
   81652:	e01c      	b.n	8168e <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81654:	4b14      	ldr	r3, [pc, #80]	; (816a8 <prvIdleTask+0x60>)
   81656:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81658:	4b14      	ldr	r3, [pc, #80]	; (816ac <prvIdleTask+0x64>)
   8165a:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   8165c:	4b14      	ldr	r3, [pc, #80]	; (816b0 <prvIdleTask+0x68>)
   8165e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81660:	b1ac      	cbz	r4, 8168e <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81662:	4b14      	ldr	r3, [pc, #80]	; (816b4 <prvIdleTask+0x6c>)
   81664:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81666:	4b11      	ldr	r3, [pc, #68]	; (816ac <prvIdleTask+0x64>)
   81668:	68db      	ldr	r3, [r3, #12]
   8166a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8166c:	1d20      	adds	r0, r4, #4
   8166e:	4b12      	ldr	r3, [pc, #72]	; (816b8 <prvIdleTask+0x70>)
   81670:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81672:	4b12      	ldr	r3, [pc, #72]	; (816bc <prvIdleTask+0x74>)
   81674:	681a      	ldr	r2, [r3, #0]
   81676:	3a01      	subs	r2, #1
   81678:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   8167a:	682b      	ldr	r3, [r5, #0]
   8167c:	3b01      	subs	r3, #1
   8167e:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81680:	4b0f      	ldr	r3, [pc, #60]	; (816c0 <prvIdleTask+0x78>)
   81682:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81684:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81686:	4f0f      	ldr	r7, [pc, #60]	; (816c4 <prvIdleTask+0x7c>)
   81688:	47b8      	blx	r7
		vPortFree( pxTCB );
   8168a:	4620      	mov	r0, r4
   8168c:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8168e:	682b      	ldr	r3, [r5, #0]
   81690:	2b00      	cmp	r3, #0
   81692:	d1df      	bne.n	81654 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81694:	6833      	ldr	r3, [r6, #0]
   81696:	2b01      	cmp	r3, #1
   81698:	d9f9      	bls.n	8168e <prvIdleTask+0x46>
			{
				taskYIELD();
   8169a:	47c0      	blx	r8
   8169c:	e7f7      	b.n	8168e <prvIdleTask+0x46>
   8169e:	bf00      	nop
   816a0:	2007aa4c 	.word	0x2007aa4c
   816a4:	2007aa7c 	.word	0x2007aa7c
   816a8:	00081361 	.word	0x00081361
   816ac:	2007aa50 	.word	0x2007aa50
   816b0:	000814b1 	.word	0x000814b1
   816b4:	00080915 	.word	0x00080915
   816b8:	0008087d 	.word	0x0008087d
   816bc:	2007ab24 	.word	0x2007ab24
   816c0:	00080935 	.word	0x00080935
   816c4:	00080b25 	.word	0x00080b25
   816c8:	000808f5 	.word	0x000808f5

000816cc <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   816cc:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   816ce:	4b1d      	ldr	r3, [pc, #116]	; (81744 <vTaskSwitchContext+0x78>)
   816d0:	681b      	ldr	r3, [r3, #0]
   816d2:	b95b      	cbnz	r3, 816ec <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   816d4:	4b1c      	ldr	r3, [pc, #112]	; (81748 <vTaskSwitchContext+0x7c>)
   816d6:	681b      	ldr	r3, [r3, #0]
   816d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816dc:	009b      	lsls	r3, r3, #2
   816de:	4a1b      	ldr	r2, [pc, #108]	; (8174c <vTaskSwitchContext+0x80>)
   816e0:	58d3      	ldr	r3, [r2, r3]
   816e2:	b9cb      	cbnz	r3, 81718 <vTaskSwitchContext+0x4c>
   816e4:	4b18      	ldr	r3, [pc, #96]	; (81748 <vTaskSwitchContext+0x7c>)
   816e6:	681b      	ldr	r3, [r3, #0]
   816e8:	b953      	cbnz	r3, 81700 <vTaskSwitchContext+0x34>
   816ea:	e005      	b.n	816f8 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   816ec:	2201      	movs	r2, #1
   816ee:	4b18      	ldr	r3, [pc, #96]	; (81750 <vTaskSwitchContext+0x84>)
   816f0:	601a      	str	r2, [r3, #0]
   816f2:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   816f4:	681a      	ldr	r2, [r3, #0]
   816f6:	b92a      	cbnz	r2, 81704 <vTaskSwitchContext+0x38>
   816f8:	4b16      	ldr	r3, [pc, #88]	; (81754 <vTaskSwitchContext+0x88>)
   816fa:	4798      	blx	r3
   816fc:	bf00      	nop
   816fe:	e7fd      	b.n	816fc <vTaskSwitchContext+0x30>
   81700:	4b11      	ldr	r3, [pc, #68]	; (81748 <vTaskSwitchContext+0x7c>)
   81702:	4912      	ldr	r1, [pc, #72]	; (8174c <vTaskSwitchContext+0x80>)
   81704:	681a      	ldr	r2, [r3, #0]
   81706:	3a01      	subs	r2, #1
   81708:	601a      	str	r2, [r3, #0]
   8170a:	681a      	ldr	r2, [r3, #0]
   8170c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81710:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81714:	2a00      	cmp	r2, #0
   81716:	d0ed      	beq.n	816f4 <vTaskSwitchContext+0x28>
   81718:	4b0b      	ldr	r3, [pc, #44]	; (81748 <vTaskSwitchContext+0x7c>)
   8171a:	681b      	ldr	r3, [r3, #0]
   8171c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81720:	4a0a      	ldr	r2, [pc, #40]	; (8174c <vTaskSwitchContext+0x80>)
   81722:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81726:	685a      	ldr	r2, [r3, #4]
   81728:	6852      	ldr	r2, [r2, #4]
   8172a:	605a      	str	r2, [r3, #4]
   8172c:	f103 0108 	add.w	r1, r3, #8
   81730:	428a      	cmp	r2, r1
   81732:	bf04      	itt	eq
   81734:	6852      	ldreq	r2, [r2, #4]
   81736:	605a      	streq	r2, [r3, #4]
   81738:	685b      	ldr	r3, [r3, #4]
   8173a:	68da      	ldr	r2, [r3, #12]
   8173c:	4b06      	ldr	r3, [pc, #24]	; (81758 <vTaskSwitchContext+0x8c>)
   8173e:	601a      	str	r2, [r3, #0]
   81740:	bd08      	pop	{r3, pc}
   81742:	bf00      	nop
   81744:	2007aafc 	.word	0x2007aafc
   81748:	2007aa78 	.word	0x2007aa78
   8174c:	2007aa7c 	.word	0x2007aa7c
   81750:	2007ab20 	.word	0x2007ab20
   81754:	00080905 	.word	0x00080905
   81758:	2007aae4 	.word	0x2007aae4

0008175c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   8175c:	b538      	push	{r3, r4, r5, lr}
   8175e:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81760:	b918      	cbnz	r0, 8176a <vTaskPlaceOnEventList+0xe>
   81762:	4b0e      	ldr	r3, [pc, #56]	; (8179c <vTaskPlaceOnEventList+0x40>)
   81764:	4798      	blx	r3
   81766:	bf00      	nop
   81768:	e7fd      	b.n	81766 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8176a:	4d0d      	ldr	r5, [pc, #52]	; (817a0 <vTaskPlaceOnEventList+0x44>)
   8176c:	6829      	ldr	r1, [r5, #0]
   8176e:	3118      	adds	r1, #24
   81770:	4b0c      	ldr	r3, [pc, #48]	; (817a4 <vTaskPlaceOnEventList+0x48>)
   81772:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81774:	6828      	ldr	r0, [r5, #0]
   81776:	3004      	adds	r0, #4
   81778:	4b0b      	ldr	r3, [pc, #44]	; (817a8 <vTaskPlaceOnEventList+0x4c>)
   8177a:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8177c:	f1b4 3fff 	cmp.w	r4, #4294967295
   81780:	d105      	bne.n	8178e <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81782:	6829      	ldr	r1, [r5, #0]
   81784:	4809      	ldr	r0, [pc, #36]	; (817ac <vTaskPlaceOnEventList+0x50>)
   81786:	3104      	adds	r1, #4
   81788:	4b09      	ldr	r3, [pc, #36]	; (817b0 <vTaskPlaceOnEventList+0x54>)
   8178a:	4798      	blx	r3
   8178c:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8178e:	4b09      	ldr	r3, [pc, #36]	; (817b4 <vTaskPlaceOnEventList+0x58>)
   81790:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81792:	4420      	add	r0, r4
   81794:	4b08      	ldr	r3, [pc, #32]	; (817b8 <vTaskPlaceOnEventList+0x5c>)
   81796:	4798      	blx	r3
   81798:	bd38      	pop	{r3, r4, r5, pc}
   8179a:	bf00      	nop
   8179c:	00080905 	.word	0x00080905
   817a0:	2007aae4 	.word	0x2007aae4
   817a4:	00080841 	.word	0x00080841
   817a8:	0008087d 	.word	0x0008087d
   817ac:	2007aa30 	.word	0x2007aa30
   817b0:	00080825 	.word	0x00080825
   817b4:	2007ab00 	.word	0x2007ab00
   817b8:	00081099 	.word	0x00081099

000817bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   817bc:	b538      	push	{r3, r4, r5, lr}
   817be:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   817c0:	b918      	cbnz	r0, 817ca <vTaskPlaceOnEventListRestricted+0xe>
   817c2:	4b09      	ldr	r3, [pc, #36]	; (817e8 <vTaskPlaceOnEventListRestricted+0x2c>)
   817c4:	4798      	blx	r3
   817c6:	bf00      	nop
   817c8:	e7fd      	b.n	817c6 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   817ca:	4c08      	ldr	r4, [pc, #32]	; (817ec <vTaskPlaceOnEventListRestricted+0x30>)
   817cc:	6821      	ldr	r1, [r4, #0]
   817ce:	3118      	adds	r1, #24
   817d0:	4b07      	ldr	r3, [pc, #28]	; (817f0 <vTaskPlaceOnEventListRestricted+0x34>)
   817d2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   817d4:	6820      	ldr	r0, [r4, #0]
   817d6:	3004      	adds	r0, #4
   817d8:	4b06      	ldr	r3, [pc, #24]	; (817f4 <vTaskPlaceOnEventListRestricted+0x38>)
   817da:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   817dc:	4b06      	ldr	r3, [pc, #24]	; (817f8 <vTaskPlaceOnEventListRestricted+0x3c>)
   817de:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   817e0:	4428      	add	r0, r5
   817e2:	4b06      	ldr	r3, [pc, #24]	; (817fc <vTaskPlaceOnEventListRestricted+0x40>)
   817e4:	4798      	blx	r3
   817e6:	bd38      	pop	{r3, r4, r5, pc}
   817e8:	00080905 	.word	0x00080905
   817ec:	2007aae4 	.word	0x2007aae4
   817f0:	00080825 	.word	0x00080825
   817f4:	0008087d 	.word	0x0008087d
   817f8:	2007ab00 	.word	0x2007ab00
   817fc:	00081099 	.word	0x00081099

00081800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81800:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81802:	68c3      	ldr	r3, [r0, #12]
   81804:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81806:	b91c      	cbnz	r4, 81810 <xTaskRemoveFromEventList+0x10>
   81808:	4b16      	ldr	r3, [pc, #88]	; (81864 <xTaskRemoveFromEventList+0x64>)
   8180a:	4798      	blx	r3
   8180c:	bf00      	nop
   8180e:	e7fd      	b.n	8180c <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81810:	f104 0518 	add.w	r5, r4, #24
   81814:	4628      	mov	r0, r5
   81816:	4b14      	ldr	r3, [pc, #80]	; (81868 <xTaskRemoveFromEventList+0x68>)
   81818:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8181a:	4b14      	ldr	r3, [pc, #80]	; (8186c <xTaskRemoveFromEventList+0x6c>)
   8181c:	681b      	ldr	r3, [r3, #0]
   8181e:	b99b      	cbnz	r3, 81848 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81820:	1d25      	adds	r5, r4, #4
   81822:	4628      	mov	r0, r5
   81824:	4b10      	ldr	r3, [pc, #64]	; (81868 <xTaskRemoveFromEventList+0x68>)
   81826:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8182a:	4a11      	ldr	r2, [pc, #68]	; (81870 <xTaskRemoveFromEventList+0x70>)
   8182c:	6812      	ldr	r2, [r2, #0]
   8182e:	4293      	cmp	r3, r2
   81830:	bf84      	itt	hi
   81832:	4a0f      	ldrhi	r2, [pc, #60]	; (81870 <xTaskRemoveFromEventList+0x70>)
   81834:	6013      	strhi	r3, [r2, #0]
   81836:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8183a:	480e      	ldr	r0, [pc, #56]	; (81874 <xTaskRemoveFromEventList+0x74>)
   8183c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81840:	4629      	mov	r1, r5
   81842:	4b0d      	ldr	r3, [pc, #52]	; (81878 <xTaskRemoveFromEventList+0x78>)
   81844:	4798      	blx	r3
   81846:	e003      	b.n	81850 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81848:	480c      	ldr	r0, [pc, #48]	; (8187c <xTaskRemoveFromEventList+0x7c>)
   8184a:	4629      	mov	r1, r5
   8184c:	4b0a      	ldr	r3, [pc, #40]	; (81878 <xTaskRemoveFromEventList+0x78>)
   8184e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81850:	4b0b      	ldr	r3, [pc, #44]	; (81880 <xTaskRemoveFromEventList+0x80>)
   81852:	681b      	ldr	r3, [r3, #0]
   81854:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81858:	4298      	cmp	r0, r3
   8185a:	bf34      	ite	cc
   8185c:	2000      	movcc	r0, #0
   8185e:	2001      	movcs	r0, #1
   81860:	bd38      	pop	{r3, r4, r5, pc}
   81862:	bf00      	nop
   81864:	00080905 	.word	0x00080905
   81868:	0008087d 	.word	0x0008087d
   8186c:	2007aafc 	.word	0x2007aafc
   81870:	2007aa78 	.word	0x2007aa78
   81874:	2007aa7c 	.word	0x2007aa7c
   81878:	00080825 	.word	0x00080825
   8187c:	2007aae8 	.word	0x2007aae8
   81880:	2007aae4 	.word	0x2007aae4

00081884 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81884:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81886:	b918      	cbnz	r0, 81890 <vTaskSetTimeOutState+0xc>
   81888:	4b05      	ldr	r3, [pc, #20]	; (818a0 <vTaskSetTimeOutState+0x1c>)
   8188a:	4798      	blx	r3
   8188c:	bf00      	nop
   8188e:	e7fd      	b.n	8188c <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81890:	4a04      	ldr	r2, [pc, #16]	; (818a4 <vTaskSetTimeOutState+0x20>)
   81892:	6812      	ldr	r2, [r2, #0]
   81894:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81896:	4a04      	ldr	r2, [pc, #16]	; (818a8 <vTaskSetTimeOutState+0x24>)
   81898:	6812      	ldr	r2, [r2, #0]
   8189a:	6042      	str	r2, [r0, #4]
   8189c:	bd08      	pop	{r3, pc}
   8189e:	bf00      	nop
   818a0:	00080905 	.word	0x00080905
   818a4:	2007aae0 	.word	0x2007aae0
   818a8:	2007ab00 	.word	0x2007ab00

000818ac <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   818ac:	b538      	push	{r3, r4, r5, lr}
   818ae:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   818b0:	4604      	mov	r4, r0
   818b2:	b918      	cbnz	r0, 818bc <xTaskCheckForTimeOut+0x10>
   818b4:	4b18      	ldr	r3, [pc, #96]	; (81918 <xTaskCheckForTimeOut+0x6c>)
   818b6:	4798      	blx	r3
   818b8:	bf00      	nop
   818ba:	e7fd      	b.n	818b8 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   818bc:	b919      	cbnz	r1, 818c6 <xTaskCheckForTimeOut+0x1a>
   818be:	4b16      	ldr	r3, [pc, #88]	; (81918 <xTaskCheckForTimeOut+0x6c>)
   818c0:	4798      	blx	r3
   818c2:	bf00      	nop
   818c4:	e7fd      	b.n	818c2 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   818c6:	4b15      	ldr	r3, [pc, #84]	; (8191c <xTaskCheckForTimeOut+0x70>)
   818c8:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   818ca:	682b      	ldr	r3, [r5, #0]
   818cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   818d0:	d019      	beq.n	81906 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   818d2:	4a13      	ldr	r2, [pc, #76]	; (81920 <xTaskCheckForTimeOut+0x74>)
   818d4:	6811      	ldr	r1, [r2, #0]
   818d6:	6822      	ldr	r2, [r4, #0]
   818d8:	428a      	cmp	r2, r1
   818da:	d004      	beq.n	818e6 <xTaskCheckForTimeOut+0x3a>
   818dc:	4a11      	ldr	r2, [pc, #68]	; (81924 <xTaskCheckForTimeOut+0x78>)
   818de:	6811      	ldr	r1, [r2, #0]
   818e0:	6862      	ldr	r2, [r4, #4]
   818e2:	428a      	cmp	r2, r1
   818e4:	d911      	bls.n	8190a <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   818e6:	4a0f      	ldr	r2, [pc, #60]	; (81924 <xTaskCheckForTimeOut+0x78>)
   818e8:	6811      	ldr	r1, [r2, #0]
   818ea:	6862      	ldr	r2, [r4, #4]
   818ec:	1a89      	subs	r1, r1, r2
   818ee:	428b      	cmp	r3, r1
   818f0:	d90d      	bls.n	8190e <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   818f2:	490c      	ldr	r1, [pc, #48]	; (81924 <xTaskCheckForTimeOut+0x78>)
   818f4:	6809      	ldr	r1, [r1, #0]
   818f6:	1a52      	subs	r2, r2, r1
   818f8:	4413      	add	r3, r2
   818fa:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   818fc:	4620      	mov	r0, r4
   818fe:	4b0a      	ldr	r3, [pc, #40]	; (81928 <xTaskCheckForTimeOut+0x7c>)
   81900:	4798      	blx	r3
			xReturn = pdFALSE;
   81902:	2400      	movs	r4, #0
   81904:	e004      	b.n	81910 <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81906:	2400      	movs	r4, #0
   81908:	e002      	b.n	81910 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8190a:	2401      	movs	r4, #1
   8190c:	e000      	b.n	81910 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   8190e:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81910:	4b06      	ldr	r3, [pc, #24]	; (8192c <xTaskCheckForTimeOut+0x80>)
   81912:	4798      	blx	r3

	return xReturn;
}
   81914:	4620      	mov	r0, r4
   81916:	bd38      	pop	{r3, r4, r5, pc}
   81918:	00080905 	.word	0x00080905
   8191c:	00080915 	.word	0x00080915
   81920:	2007aae0 	.word	0x2007aae0
   81924:	2007ab00 	.word	0x2007ab00
   81928:	00081885 	.word	0x00081885
   8192c:	00080935 	.word	0x00080935

00081930 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81930:	2201      	movs	r2, #1
   81932:	4b01      	ldr	r3, [pc, #4]	; (81938 <vTaskMissedYield+0x8>)
   81934:	601a      	str	r2, [r3, #0]
   81936:	4770      	bx	lr
   81938:	2007ab20 	.word	0x2007ab20

0008193c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   8193c:	4b01      	ldr	r3, [pc, #4]	; (81944 <xTaskGetCurrentTaskHandle+0x8>)
   8193e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81940:	4770      	bx	lr
   81942:	bf00      	nop
   81944:	2007aae4 	.word	0x2007aae4

00081948 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81948:	4b05      	ldr	r3, [pc, #20]	; (81960 <xTaskGetSchedulerState+0x18>)
   8194a:	681b      	ldr	r3, [r3, #0]
   8194c:	b133      	cbz	r3, 8195c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8194e:	4b05      	ldr	r3, [pc, #20]	; (81964 <xTaskGetSchedulerState+0x1c>)
   81950:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81952:	2b00      	cmp	r3, #0
   81954:	bf14      	ite	ne
   81956:	2002      	movne	r0, #2
   81958:	2001      	moveq	r0, #1
   8195a:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   8195c:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8195e:	4770      	bx	lr
   81960:	2007aa48 	.word	0x2007aa48
   81964:	2007aafc 	.word	0x2007aafc

00081968 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81968:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8196a:	4604      	mov	r4, r0
   8196c:	2800      	cmp	r0, #0
   8196e:	d02e      	beq.n	819ce <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81970:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81972:	4a17      	ldr	r2, [pc, #92]	; (819d0 <vTaskPriorityInherit+0x68>)
   81974:	6812      	ldr	r2, [r2, #0]
   81976:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81978:	4293      	cmp	r3, r2
   8197a:	d228      	bcs.n	819ce <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   8197c:	4a14      	ldr	r2, [pc, #80]	; (819d0 <vTaskPriorityInherit+0x68>)
   8197e:	6812      	ldr	r2, [r2, #0]
   81980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81982:	f1c2 0205 	rsb	r2, r2, #5
   81986:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81988:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8198c:	4a11      	ldr	r2, [pc, #68]	; (819d4 <vTaskPriorityInherit+0x6c>)
   8198e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81992:	6942      	ldr	r2, [r0, #20]
   81994:	429a      	cmp	r2, r3
   81996:	d116      	bne.n	819c6 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81998:	1d05      	adds	r5, r0, #4
   8199a:	4628      	mov	r0, r5
   8199c:	4b0e      	ldr	r3, [pc, #56]	; (819d8 <vTaskPriorityInherit+0x70>)
   8199e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   819a0:	4b0b      	ldr	r3, [pc, #44]	; (819d0 <vTaskPriorityInherit+0x68>)
   819a2:	681b      	ldr	r3, [r3, #0]
   819a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   819a6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   819a8:	4a0c      	ldr	r2, [pc, #48]	; (819dc <vTaskPriorityInherit+0x74>)
   819aa:	6812      	ldr	r2, [r2, #0]
   819ac:	4293      	cmp	r3, r2
   819ae:	bf84      	itt	hi
   819b0:	4a0a      	ldrhi	r2, [pc, #40]	; (819dc <vTaskPriorityInherit+0x74>)
   819b2:	6013      	strhi	r3, [r2, #0]
   819b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   819b8:	4806      	ldr	r0, [pc, #24]	; (819d4 <vTaskPriorityInherit+0x6c>)
   819ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   819be:	4629      	mov	r1, r5
   819c0:	4b07      	ldr	r3, [pc, #28]	; (819e0 <vTaskPriorityInherit+0x78>)
   819c2:	4798      	blx	r3
   819c4:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   819c6:	4b02      	ldr	r3, [pc, #8]	; (819d0 <vTaskPriorityInherit+0x68>)
   819c8:	681b      	ldr	r3, [r3, #0]
   819ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   819cc:	62c3      	str	r3, [r0, #44]	; 0x2c
   819ce:	bd38      	pop	{r3, r4, r5, pc}
   819d0:	2007aae4 	.word	0x2007aae4
   819d4:	2007aa7c 	.word	0x2007aa7c
   819d8:	0008087d 	.word	0x0008087d
   819dc:	2007aa78 	.word	0x2007aa78
   819e0:	00080825 	.word	0x00080825

000819e4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   819e4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   819e6:	4604      	mov	r4, r0
   819e8:	b1d0      	cbz	r0, 81a20 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   819ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   819ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
   819ee:	429a      	cmp	r2, r3
   819f0:	d016      	beq.n	81a20 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   819f2:	1d05      	adds	r5, r0, #4
   819f4:	4628      	mov	r0, r5
   819f6:	4b0b      	ldr	r3, [pc, #44]	; (81a24 <vTaskPriorityDisinherit+0x40>)
   819f8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   819fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   819fc:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   819fe:	f1c3 0205 	rsb	r2, r3, #5
   81a02:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81a04:	4a08      	ldr	r2, [pc, #32]	; (81a28 <vTaskPriorityDisinherit+0x44>)
   81a06:	6812      	ldr	r2, [r2, #0]
   81a08:	4293      	cmp	r3, r2
   81a0a:	bf84      	itt	hi
   81a0c:	4a06      	ldrhi	r2, [pc, #24]	; (81a28 <vTaskPriorityDisinherit+0x44>)
   81a0e:	6013      	strhi	r3, [r2, #0]
   81a10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a14:	4805      	ldr	r0, [pc, #20]	; (81a2c <vTaskPriorityDisinherit+0x48>)
   81a16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81a1a:	4629      	mov	r1, r5
   81a1c:	4b04      	ldr	r3, [pc, #16]	; (81a30 <vTaskPriorityDisinherit+0x4c>)
   81a1e:	4798      	blx	r3
   81a20:	bd38      	pop	{r3, r4, r5, pc}
   81a22:	bf00      	nop
   81a24:	0008087d 	.word	0x0008087d
   81a28:	2007aa78 	.word	0x2007aa78
   81a2c:	2007aa7c 	.word	0x2007aa7c
   81a30:	00080825 	.word	0x00080825

00081a34 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81a34:	b510      	push	{r4, lr}
   81a36:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81a38:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81a3a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81a3c:	4291      	cmp	r1, r2
   81a3e:	d80a      	bhi.n	81a56 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81a40:	1ad2      	subs	r2, r2, r3
   81a42:	6981      	ldr	r1, [r0, #24]
   81a44:	428a      	cmp	r2, r1
   81a46:	d211      	bcs.n	81a6c <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81a48:	4b0a      	ldr	r3, [pc, #40]	; (81a74 <prvInsertTimerInActiveList+0x40>)
   81a4a:	6818      	ldr	r0, [r3, #0]
   81a4c:	1d21      	adds	r1, r4, #4
   81a4e:	4b0a      	ldr	r3, [pc, #40]	; (81a78 <prvInsertTimerInActiveList+0x44>)
   81a50:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81a52:	2000      	movs	r0, #0
   81a54:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81a56:	429a      	cmp	r2, r3
   81a58:	d201      	bcs.n	81a5e <prvInsertTimerInActiveList+0x2a>
   81a5a:	4299      	cmp	r1, r3
   81a5c:	d208      	bcs.n	81a70 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81a5e:	4b07      	ldr	r3, [pc, #28]	; (81a7c <prvInsertTimerInActiveList+0x48>)
   81a60:	6818      	ldr	r0, [r3, #0]
   81a62:	1d21      	adds	r1, r4, #4
   81a64:	4b04      	ldr	r3, [pc, #16]	; (81a78 <prvInsertTimerInActiveList+0x44>)
   81a66:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81a68:	2000      	movs	r0, #0
   81a6a:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81a6c:	2001      	movs	r0, #1
   81a6e:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81a70:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81a72:	bd10      	pop	{r4, pc}
   81a74:	2007ab60 	.word	0x2007ab60
   81a78:	00080841 	.word	0x00080841
   81a7c:	2007ab2c 	.word	0x2007ab2c

00081a80 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81a80:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81a82:	4b0d      	ldr	r3, [pc, #52]	; (81ab8 <prvCheckForValidListAndQueue+0x38>)
   81a84:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81a86:	4b0d      	ldr	r3, [pc, #52]	; (81abc <prvCheckForValidListAndQueue+0x3c>)
   81a88:	681b      	ldr	r3, [r3, #0]
   81a8a:	b98b      	cbnz	r3, 81ab0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81a8c:	4d0c      	ldr	r5, [pc, #48]	; (81ac0 <prvCheckForValidListAndQueue+0x40>)
   81a8e:	4628      	mov	r0, r5
   81a90:	4e0c      	ldr	r6, [pc, #48]	; (81ac4 <prvCheckForValidListAndQueue+0x44>)
   81a92:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81a94:	4c0c      	ldr	r4, [pc, #48]	; (81ac8 <prvCheckForValidListAndQueue+0x48>)
   81a96:	4620      	mov	r0, r4
   81a98:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81a9a:	4b0c      	ldr	r3, [pc, #48]	; (81acc <prvCheckForValidListAndQueue+0x4c>)
   81a9c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81a9e:	4b0c      	ldr	r3, [pc, #48]	; (81ad0 <prvCheckForValidListAndQueue+0x50>)
   81aa0:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81aa2:	2005      	movs	r0, #5
   81aa4:	210c      	movs	r1, #12
   81aa6:	2200      	movs	r2, #0
   81aa8:	4b0a      	ldr	r3, [pc, #40]	; (81ad4 <prvCheckForValidListAndQueue+0x54>)
   81aaa:	4798      	blx	r3
   81aac:	4b03      	ldr	r3, [pc, #12]	; (81abc <prvCheckForValidListAndQueue+0x3c>)
   81aae:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81ab0:	4b09      	ldr	r3, [pc, #36]	; (81ad8 <prvCheckForValidListAndQueue+0x58>)
   81ab2:	4798      	blx	r3
   81ab4:	bd70      	pop	{r4, r5, r6, pc}
   81ab6:	bf00      	nop
   81ab8:	00080915 	.word	0x00080915
   81abc:	2007ab5c 	.word	0x2007ab5c
   81ac0:	2007ab30 	.word	0x2007ab30
   81ac4:	00080805 	.word	0x00080805
   81ac8:	2007ab44 	.word	0x2007ab44
   81acc:	2007ab2c 	.word	0x2007ab2c
   81ad0:	2007ab60 	.word	0x2007ab60
   81ad4:	00080ced 	.word	0x00080ced
   81ad8:	00080935 	.word	0x00080935

00081adc <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81adc:	b510      	push	{r4, lr}
   81ade:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81ae0:	4b0b      	ldr	r3, [pc, #44]	; (81b10 <xTimerCreateTimerTask+0x34>)
   81ae2:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81ae4:	4b0b      	ldr	r3, [pc, #44]	; (81b14 <xTimerCreateTimerTask+0x38>)
   81ae6:	681b      	ldr	r3, [r3, #0]
   81ae8:	b163      	cbz	r3, 81b04 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81aea:	2304      	movs	r3, #4
   81aec:	9300      	str	r3, [sp, #0]
   81aee:	2300      	movs	r3, #0
   81af0:	9301      	str	r3, [sp, #4]
   81af2:	9302      	str	r3, [sp, #8]
   81af4:	9303      	str	r3, [sp, #12]
   81af6:	4808      	ldr	r0, [pc, #32]	; (81b18 <xTimerCreateTimerTask+0x3c>)
   81af8:	4908      	ldr	r1, [pc, #32]	; (81b1c <xTimerCreateTimerTask+0x40>)
   81afa:	f44f 7282 	mov.w	r2, #260	; 0x104
   81afe:	4c08      	ldr	r4, [pc, #32]	; (81b20 <xTimerCreateTimerTask+0x44>)
   81b00:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81b02:	b918      	cbnz	r0, 81b0c <xTimerCreateTimerTask+0x30>
   81b04:	4b07      	ldr	r3, [pc, #28]	; (81b24 <xTimerCreateTimerTask+0x48>)
   81b06:	4798      	blx	r3
   81b08:	bf00      	nop
   81b0a:	e7fd      	b.n	81b08 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81b0c:	b004      	add	sp, #16
   81b0e:	bd10      	pop	{r4, pc}
   81b10:	00081a81 	.word	0x00081a81
   81b14:	2007ab5c 	.word	0x2007ab5c
   81b18:	00081c31 	.word	0x00081c31
   81b1c:	00088a48 	.word	0x00088a48
   81b20:	000810f1 	.word	0x000810f1
   81b24:	00080905 	.word	0x00080905

00081b28 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81b28:	b510      	push	{r4, lr}
   81b2a:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81b2c:	4c0f      	ldr	r4, [pc, #60]	; (81b6c <xTimerGenericCommand+0x44>)
   81b2e:	6824      	ldr	r4, [r4, #0]
   81b30:	b1c4      	cbz	r4, 81b64 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81b32:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81b34:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81b36:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81b38:	b96b      	cbnz	r3, 81b56 <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81b3a:	4b0d      	ldr	r3, [pc, #52]	; (81b70 <xTimerGenericCommand+0x48>)
   81b3c:	4798      	blx	r3
   81b3e:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81b40:	4b0a      	ldr	r3, [pc, #40]	; (81b6c <xTimerGenericCommand+0x44>)
   81b42:	6818      	ldr	r0, [r3, #0]
   81b44:	a901      	add	r1, sp, #4
   81b46:	bf07      	ittee	eq
   81b48:	9a06      	ldreq	r2, [sp, #24]
   81b4a:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81b4c:	2200      	movne	r2, #0
   81b4e:	4613      	movne	r3, r2
   81b50:	4c08      	ldr	r4, [pc, #32]	; (81b74 <xTimerGenericCommand+0x4c>)
   81b52:	47a0      	blx	r4
   81b54:	e007      	b.n	81b66 <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81b56:	4620      	mov	r0, r4
   81b58:	a901      	add	r1, sp, #4
   81b5a:	461a      	mov	r2, r3
   81b5c:	2300      	movs	r3, #0
   81b5e:	4c06      	ldr	r4, [pc, #24]	; (81b78 <xTimerGenericCommand+0x50>)
   81b60:	47a0      	blx	r4
   81b62:	e000      	b.n	81b66 <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81b64:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81b66:	b004      	add	sp, #16
   81b68:	bd10      	pop	{r4, pc}
   81b6a:	bf00      	nop
   81b6c:	2007ab5c 	.word	0x2007ab5c
   81b70:	00081949 	.word	0x00081949
   81b74:	00080d45 	.word	0x00080d45
   81b78:	00080e61 	.word	0x00080e61

00081b7c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81b80:	b082      	sub	sp, #8
   81b82:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81b84:	4b22      	ldr	r3, [pc, #136]	; (81c10 <prvSampleTimeNow+0x94>)
   81b86:	4798      	blx	r3
   81b88:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81b8a:	4b22      	ldr	r3, [pc, #136]	; (81c14 <prvSampleTimeNow+0x98>)
   81b8c:	681b      	ldr	r3, [r3, #0]
   81b8e:	4298      	cmp	r0, r3
   81b90:	d234      	bcs.n	81bfc <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81b92:	4e21      	ldr	r6, [pc, #132]	; (81c18 <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81b94:	4f21      	ldr	r7, [pc, #132]	; (81c1c <prvSampleTimeNow+0xa0>)
   81b96:	e024      	b.n	81be2 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b98:	68da      	ldr	r2, [r3, #12]
   81b9a:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b9e:	68db      	ldr	r3, [r3, #12]
   81ba0:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81ba2:	1d25      	adds	r5, r4, #4
   81ba4:	4628      	mov	r0, r5
   81ba6:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81baa:	4620      	mov	r0, r4
   81bac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81bae:	69e3      	ldr	r3, [r4, #28]
   81bb0:	2b01      	cmp	r3, #1
   81bb2:	d116      	bne.n	81be2 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81bb4:	69a3      	ldr	r3, [r4, #24]
   81bb6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81bb8:	4553      	cmp	r3, sl
   81bba:	d906      	bls.n	81bca <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81bbc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81bbe:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81bc0:	6830      	ldr	r0, [r6, #0]
   81bc2:	4629      	mov	r1, r5
   81bc4:	4b16      	ldr	r3, [pc, #88]	; (81c20 <prvSampleTimeNow+0xa4>)
   81bc6:	4798      	blx	r3
   81bc8:	e00b      	b.n	81be2 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81bca:	2300      	movs	r3, #0
   81bcc:	9300      	str	r3, [sp, #0]
   81bce:	4620      	mov	r0, r4
   81bd0:	4619      	mov	r1, r3
   81bd2:	4652      	mov	r2, sl
   81bd4:	4c13      	ldr	r4, [pc, #76]	; (81c24 <prvSampleTimeNow+0xa8>)
   81bd6:	47a0      	blx	r4
				configASSERT( xResult );
   81bd8:	b918      	cbnz	r0, 81be2 <prvSampleTimeNow+0x66>
   81bda:	4b13      	ldr	r3, [pc, #76]	; (81c28 <prvSampleTimeNow+0xac>)
   81bdc:	4798      	blx	r3
   81bde:	bf00      	nop
   81be0:	e7fd      	b.n	81bde <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81be2:	6833      	ldr	r3, [r6, #0]
   81be4:	681a      	ldr	r2, [r3, #0]
   81be6:	2a00      	cmp	r2, #0
   81be8:	d1d6      	bne.n	81b98 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81bea:	4a10      	ldr	r2, [pc, #64]	; (81c2c <prvSampleTimeNow+0xb0>)
   81bec:	6811      	ldr	r1, [r2, #0]
   81bee:	480a      	ldr	r0, [pc, #40]	; (81c18 <prvSampleTimeNow+0x9c>)
   81bf0:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   81bf2:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81bf4:	2301      	movs	r3, #1
   81bf6:	f8c9 3000 	str.w	r3, [r9]
   81bfa:	e002      	b.n	81c02 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81bfc:	2300      	movs	r3, #0
   81bfe:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81c02:	4b04      	ldr	r3, [pc, #16]	; (81c14 <prvSampleTimeNow+0x98>)
   81c04:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81c08:	4640      	mov	r0, r8
   81c0a:	b002      	add	sp, #8
   81c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81c10:	00081371 	.word	0x00081371
   81c14:	2007ab58 	.word	0x2007ab58
   81c18:	2007ab2c 	.word	0x2007ab2c
   81c1c:	0008087d 	.word	0x0008087d
   81c20:	00080841 	.word	0x00080841
   81c24:	00081b29 	.word	0x00081b29
   81c28:	00080905 	.word	0x00080905
   81c2c:	2007ab60 	.word	0x2007ab60

00081c30 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81c34:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81c36:	4d4d      	ldr	r5, [pc, #308]	; (81d6c <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81c38:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81d9c <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81c3c:	4b4c      	ldr	r3, [pc, #304]	; (81d70 <prvTimerTask+0x140>)
   81c3e:	681b      	ldr	r3, [r3, #0]
   81c40:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81c42:	2a00      	cmp	r2, #0
   81c44:	f000 8087 	beq.w	81d56 <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c48:	68db      	ldr	r3, [r3, #12]
   81c4a:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81c4c:	4b49      	ldr	r3, [pc, #292]	; (81d74 <prvTimerTask+0x144>)
   81c4e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c50:	a803      	add	r0, sp, #12
   81c52:	4b49      	ldr	r3, [pc, #292]	; (81d78 <prvTimerTask+0x148>)
   81c54:	4798      	blx	r3
   81c56:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c58:	9b03      	ldr	r3, [sp, #12]
   81c5a:	2b00      	cmp	r3, #0
   81c5c:	d130      	bne.n	81cc0 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81c5e:	4286      	cmp	r6, r0
   81c60:	d824      	bhi.n	81cac <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   81c62:	4b46      	ldr	r3, [pc, #280]	; (81d7c <prvTimerTask+0x14c>)
   81c64:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c66:	4b42      	ldr	r3, [pc, #264]	; (81d70 <prvTimerTask+0x140>)
   81c68:	681b      	ldr	r3, [r3, #0]
   81c6a:	68db      	ldr	r3, [r3, #12]
   81c6c:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81c6e:	1d20      	adds	r0, r4, #4
   81c70:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c72:	69e3      	ldr	r3, [r4, #28]
   81c74:	2b01      	cmp	r3, #1
   81c76:	d114      	bne.n	81ca2 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81c78:	69a1      	ldr	r1, [r4, #24]
   81c7a:	4620      	mov	r0, r4
   81c7c:	4431      	add	r1, r6
   81c7e:	463a      	mov	r2, r7
   81c80:	4633      	mov	r3, r6
   81c82:	4f3f      	ldr	r7, [pc, #252]	; (81d80 <prvTimerTask+0x150>)
   81c84:	47b8      	blx	r7
   81c86:	2801      	cmp	r0, #1
   81c88:	d10b      	bne.n	81ca2 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81c8a:	2300      	movs	r3, #0
   81c8c:	9300      	str	r3, [sp, #0]
   81c8e:	4620      	mov	r0, r4
   81c90:	4619      	mov	r1, r3
   81c92:	4632      	mov	r2, r6
   81c94:	4e3b      	ldr	r6, [pc, #236]	; (81d84 <prvTimerTask+0x154>)
   81c96:	47b0      	blx	r6
			configASSERT( xResult );
   81c98:	b918      	cbnz	r0, 81ca2 <prvTimerTask+0x72>
   81c9a:	4b3b      	ldr	r3, [pc, #236]	; (81d88 <prvTimerTask+0x158>)
   81c9c:	4798      	blx	r3
   81c9e:	bf00      	nop
   81ca0:	e7fd      	b.n	81c9e <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81ca4:	4620      	mov	r0, r4
   81ca6:	4798      	blx	r3
   81ca8:	e00c      	b.n	81cc4 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81caa:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81cac:	6828      	ldr	r0, [r5, #0]
   81cae:	1bf1      	subs	r1, r6, r7
   81cb0:	4b36      	ldr	r3, [pc, #216]	; (81d8c <prvTimerTask+0x15c>)
   81cb2:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81cb4:	4b31      	ldr	r3, [pc, #196]	; (81d7c <prvTimerTask+0x14c>)
   81cb6:	4798      	blx	r3
   81cb8:	b920      	cbnz	r0, 81cc4 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81cba:	4b35      	ldr	r3, [pc, #212]	; (81d90 <prvTimerTask+0x160>)
   81cbc:	4798      	blx	r3
   81cbe:	e001      	b.n	81cc4 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81cc0:	4b2e      	ldr	r3, [pc, #184]	; (81d7c <prvTimerTask+0x14c>)
   81cc2:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81cc4:	a802      	add	r0, sp, #8
   81cc6:	4b2c      	ldr	r3, [pc, #176]	; (81d78 <prvTimerTask+0x148>)
   81cc8:	4798      	blx	r3
   81cca:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81ccc:	4e31      	ldr	r6, [pc, #196]	; (81d94 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81cce:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81d80 <prvTimerTask+0x150>
   81cd2:	e038      	b.n	81d46 <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81cd4:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81cd6:	b11c      	cbz	r4, 81ce0 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81cd8:	6961      	ldr	r1, [r4, #20]
   81cda:	b109      	cbz	r1, 81ce0 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81cdc:	1d20      	adds	r0, r4, #4
   81cde:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81ce0:	9903      	ldr	r1, [sp, #12]
   81ce2:	2902      	cmp	r1, #2
   81ce4:	d01f      	beq.n	81d26 <prvTimerTask+0xf6>
   81ce6:	2903      	cmp	r1, #3
   81ce8:	d02a      	beq.n	81d40 <prvTimerTask+0x110>
   81cea:	2900      	cmp	r1, #0
   81cec:	d12b      	bne.n	81d46 <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81cee:	9b04      	ldr	r3, [sp, #16]
   81cf0:	69a1      	ldr	r1, [r4, #24]
   81cf2:	4620      	mov	r0, r4
   81cf4:	4419      	add	r1, r3
   81cf6:	463a      	mov	r2, r7
   81cf8:	47c8      	blx	r9
   81cfa:	2801      	cmp	r0, #1
   81cfc:	d123      	bne.n	81d46 <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81d00:	4620      	mov	r0, r4
   81d02:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81d04:	69e3      	ldr	r3, [r4, #28]
   81d06:	2b01      	cmp	r3, #1
   81d08:	d11d      	bne.n	81d46 <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81d0a:	69a2      	ldr	r2, [r4, #24]
   81d0c:	2300      	movs	r3, #0
   81d0e:	9300      	str	r3, [sp, #0]
   81d10:	4620      	mov	r0, r4
   81d12:	4619      	mov	r1, r3
   81d14:	9c04      	ldr	r4, [sp, #16]
   81d16:	4422      	add	r2, r4
   81d18:	4c1a      	ldr	r4, [pc, #104]	; (81d84 <prvTimerTask+0x154>)
   81d1a:	47a0      	blx	r4
						configASSERT( xResult );
   81d1c:	b998      	cbnz	r0, 81d46 <prvTimerTask+0x116>
   81d1e:	4b1a      	ldr	r3, [pc, #104]	; (81d88 <prvTimerTask+0x158>)
   81d20:	4798      	blx	r3
   81d22:	bf00      	nop
   81d24:	e7fd      	b.n	81d22 <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81d26:	9904      	ldr	r1, [sp, #16]
   81d28:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81d2a:	b919      	cbnz	r1, 81d34 <prvTimerTask+0x104>
   81d2c:	4b16      	ldr	r3, [pc, #88]	; (81d88 <prvTimerTask+0x158>)
   81d2e:	4798      	blx	r3
   81d30:	bf00      	nop
   81d32:	e7fd      	b.n	81d30 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81d34:	4620      	mov	r0, r4
   81d36:	4439      	add	r1, r7
   81d38:	463a      	mov	r2, r7
   81d3a:	463b      	mov	r3, r7
   81d3c:	47c8      	blx	r9
   81d3e:	e002      	b.n	81d46 <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81d40:	4620      	mov	r0, r4
   81d42:	4b15      	ldr	r3, [pc, #84]	; (81d98 <prvTimerTask+0x168>)
   81d44:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81d46:	6828      	ldr	r0, [r5, #0]
   81d48:	a903      	add	r1, sp, #12
   81d4a:	2200      	movs	r2, #0
   81d4c:	4613      	mov	r3, r2
   81d4e:	47b0      	blx	r6
   81d50:	2800      	cmp	r0, #0
   81d52:	d1bf      	bne.n	81cd4 <prvTimerTask+0xa4>
   81d54:	e772      	b.n	81c3c <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81d56:	4b07      	ldr	r3, [pc, #28]	; (81d74 <prvTimerTask+0x144>)
   81d58:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81d5a:	a803      	add	r0, sp, #12
   81d5c:	4b06      	ldr	r3, [pc, #24]	; (81d78 <prvTimerTask+0x148>)
   81d5e:	4798      	blx	r3
   81d60:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81d62:	9b03      	ldr	r3, [sp, #12]
   81d64:	2b00      	cmp	r3, #0
   81d66:	d0a0      	beq.n	81caa <prvTimerTask+0x7a>
   81d68:	e7aa      	b.n	81cc0 <prvTimerTask+0x90>
   81d6a:	bf00      	nop
   81d6c:	2007ab5c 	.word	0x2007ab5c
   81d70:	2007ab2c 	.word	0x2007ab2c
   81d74:	00081361 	.word	0x00081361
   81d78:	00081b7d 	.word	0x00081b7d
   81d7c:	000814b1 	.word	0x000814b1
   81d80:	00081a35 	.word	0x00081a35
   81d84:	00081b29 	.word	0x00081b29
   81d88:	00080905 	.word	0x00080905
   81d8c:	0008104d 	.word	0x0008104d
   81d90:	000808f5 	.word	0x000808f5
   81d94:	00080ef1 	.word	0x00080ef1
   81d98:	00080b25 	.word	0x00080b25
   81d9c:	0008087d 	.word	0x0008087d

00081da0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81da4:	460e      	mov	r6, r1
   81da6:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81da8:	3801      	subs	r0, #1
   81daa:	2802      	cmp	r0, #2
   81dac:	d80f      	bhi.n	81dce <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   81dae:	b192      	cbz	r2, 81dd6 <_write+0x36>
   81db0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81db2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 81df0 <_write+0x50>
   81db6:	4f0d      	ldr	r7, [pc, #52]	; (81dec <_write+0x4c>)
   81db8:	f8d8 0000 	ldr.w	r0, [r8]
   81dbc:	5d31      	ldrb	r1, [r6, r4]
   81dbe:	683b      	ldr	r3, [r7, #0]
   81dc0:	4798      	blx	r3
   81dc2:	2800      	cmp	r0, #0
   81dc4:	db0a      	blt.n	81ddc <_write+0x3c>
			return -1;
		}
		++nChars;
   81dc6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81dc8:	42a5      	cmp	r5, r4
   81dca:	d1f5      	bne.n	81db8 <_write+0x18>
   81dcc:	e00a      	b.n	81de4 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81dce:	f04f 30ff 	mov.w	r0, #4294967295
   81dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   81dd6:	2000      	movs	r0, #0
   81dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81ddc:	f04f 30ff 	mov.w	r0, #4294967295
   81de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   81de4:	4620      	mov	r0, r4
	}
	return nChars;
}
   81de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81dea:	bf00      	nop
   81dec:	2007ac38 	.word	0x2007ac38
   81df0:	2007ac3c 	.word	0x2007ac3c

00081df4 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   81df4:	b4f0      	push	{r4, r5, r6, r7}
   81df6:	b08c      	sub	sp, #48	; 0x30
   81df8:	4607      	mov	r7, r0
   81dfa:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81dfc:	ac01      	add	r4, sp, #4
   81dfe:	4d12      	ldr	r5, [pc, #72]	; (81e48 <pwm_clocks_generate+0x54>)
   81e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81e08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81e0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81e10:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   81e12:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81e14:	f852 4f04 	ldr.w	r4, [r2, #4]!
   81e18:	fbb6 f4f4 	udiv	r4, r6, r4
   81e1c:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81e20:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   81e24:	d903      	bls.n	81e2e <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   81e26:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81e28:	2b0b      	cmp	r3, #11
   81e2a:	d1f3      	bne.n	81e14 <pwm_clocks_generate+0x20>
   81e2c:	e004      	b.n	81e38 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81e2e:	2b0a      	cmp	r3, #10
   81e30:	d805      	bhi.n	81e3e <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   81e32:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   81e36:	e004      	b.n	81e42 <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81e38:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81e3c:	e001      	b.n	81e42 <pwm_clocks_generate+0x4e>
   81e3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   81e42:	b00c      	add	sp, #48	; 0x30
   81e44:	bcf0      	pop	{r4, r5, r6, r7}
   81e46:	4770      	bx	lr
   81e48:	00088a50 	.word	0x00088a50

00081e4c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81e4c:	b570      	push	{r4, r5, r6, lr}
   81e4e:	4606      	mov	r6, r0
   81e50:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81e52:	6808      	ldr	r0, [r1, #0]
   81e54:	b140      	cbz	r0, 81e68 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   81e56:	6889      	ldr	r1, [r1, #8]
   81e58:	4b0b      	ldr	r3, [pc, #44]	; (81e88 <pwm_init+0x3c>)
   81e5a:	4798      	blx	r3
   81e5c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81e62:	4298      	cmp	r0, r3
   81e64:	d101      	bne.n	81e6a <pwm_init+0x1e>
   81e66:	e00e      	b.n	81e86 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81e68:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81e6a:	6860      	ldr	r0, [r4, #4]
   81e6c:	b140      	cbz	r0, 81e80 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81e6e:	68a1      	ldr	r1, [r4, #8]
   81e70:	4b05      	ldr	r3, [pc, #20]	; (81e88 <pwm_init+0x3c>)
   81e72:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   81e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81e78:	4298      	cmp	r0, r3
   81e7a:	d004      	beq.n	81e86 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   81e7c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81e80:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81e82:	2000      	movs	r0, #0
   81e84:	bd70      	pop	{r4, r5, r6, pc}
}
   81e86:	bd70      	pop	{r4, r5, r6, pc}
   81e88:	00081df5 	.word	0x00081df5

00081e8c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81e8c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   81e8e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81e90:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81e92:	684a      	ldr	r2, [r1, #4]
   81e94:	f002 020f 	and.w	r2, r2, #15
   81e98:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   81e9a:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81e9c:	432c      	orrs	r4, r5
   81e9e:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81ea0:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81ea4:	7d8a      	ldrb	r2, [r1, #22]
   81ea6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   81eaa:	7dca      	ldrb	r2, [r1, #23]
   81eac:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81eb0:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81eb2:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   81eb6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   81eba:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   81ebe:	68cc      	ldr	r4, [r1, #12]
   81ec0:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   81ec4:	690c      	ldr	r4, [r1, #16]
   81ec6:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81eca:	7d8a      	ldrb	r2, [r1, #22]
   81ecc:	b13a      	cbz	r2, 81ede <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   81ece:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   81ed0:	8b4a      	ldrh	r2, [r1, #26]
   81ed2:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   81ed6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   81eda:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   81ede:	6c85      	ldr	r5, [r0, #72]	; 0x48
   81ee0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   81ee4:	409a      	lsls	r2, r3
   81ee6:	43d2      	mvns	r2, r2
   81ee8:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   81eea:	7fce      	ldrb	r6, [r1, #31]
   81eec:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   81eee:	7f8c      	ldrb	r4, [r1, #30]
   81ef0:	409c      	lsls	r4, r3
   81ef2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   81ef6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   81ef8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   81efa:	6c44      	ldr	r4, [r0, #68]	; 0x44
   81efc:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   81efe:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81f02:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   81f04:	f891 4020 	ldrb.w	r4, [r1, #32]
   81f08:	409c      	lsls	r4, r3
   81f0a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   81f0e:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81f10:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   81f12:	2201      	movs	r2, #1
   81f14:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   81f16:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81f1a:	b11c      	cbz	r4, 81f24 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   81f1c:	6a04      	ldr	r4, [r0, #32]
   81f1e:	4314      	orrs	r4, r2
   81f20:	6204      	str	r4, [r0, #32]
   81f22:	e003      	b.n	81f2c <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81f24:	6a04      	ldr	r4, [r0, #32]
   81f26:	ea24 0402 	bic.w	r4, r4, r2
   81f2a:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81f2c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81f30:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81f32:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81f34:	bf0c      	ite	eq
   81f36:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81f38:	4394      	bicne	r4, r2
   81f3a:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81f3c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81f40:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81f42:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81f44:	bf0c      	ite	eq
   81f46:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81f4a:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81f4e:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81f50:	2b03      	cmp	r3, #3
   81f52:	d80c      	bhi.n	81f6e <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81f54:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   81f56:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81f58:	22ff      	movs	r2, #255	; 0xff
   81f5a:	409a      	lsls	r2, r3
   81f5c:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81f60:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81f64:	fa01 f303 	lsl.w	r3, r1, r3
   81f68:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81f6a:	66c3      	str	r3, [r0, #108]	; 0x6c
   81f6c:	e00c      	b.n	81f88 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   81f6e:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81f70:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81f72:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81f74:	22ff      	movs	r2, #255	; 0xff
   81f76:	409a      	lsls	r2, r3
   81f78:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81f7c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81f80:	fa01 f303 	lsl.w	r3, r1, r3
   81f84:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81f86:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81f88:	2000      	movs	r0, #0
   81f8a:	bc70      	pop	{r4, r5, r6}
   81f8c:	4770      	bx	lr
   81f8e:	bf00      	nop

00081f90 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81f90:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   81f92:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   81f94:	690b      	ldr	r3, [r1, #16]
   81f96:	4293      	cmp	r3, r2
   81f98:	d306      	bcc.n	81fa8 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   81f9a:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   81f9c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81fa0:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   81fa4:	2000      	movs	r0, #0
   81fa6:	e001      	b.n	81fac <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   81fa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   81fac:	f85d 4b04 	ldr.w	r4, [sp], #4
   81fb0:	4770      	bx	lr
   81fb2:	bf00      	nop

00081fb4 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81fb4:	2301      	movs	r3, #1
   81fb6:	fa03 f101 	lsl.w	r1, r3, r1
   81fba:	6041      	str	r1, [r0, #4]
   81fbc:	4770      	bx	lr
   81fbe:	bf00      	nop

00081fc0 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81fc0:	2301      	movs	r3, #1
   81fc2:	fa03 f101 	lsl.w	r1, r3, r1
   81fc6:	6081      	str	r1, [r0, #8]
   81fc8:	4770      	bx	lr
   81fca:	bf00      	nop

00081fcc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81fcc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81fce:	23ac      	movs	r3, #172	; 0xac
   81fd0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81fd2:	680a      	ldr	r2, [r1, #0]
   81fd4:	684b      	ldr	r3, [r1, #4]
   81fd6:	fbb2 f3f3 	udiv	r3, r2, r3
   81fda:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81fdc:	1e5c      	subs	r4, r3, #1
   81fde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81fe2:	4294      	cmp	r4, r2
   81fe4:	d80a      	bhi.n	81ffc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81fe6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81fe8:	688b      	ldr	r3, [r1, #8]
   81fea:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81fec:	f240 2302 	movw	r3, #514	; 0x202
   81ff0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81ff4:	2350      	movs	r3, #80	; 0x50
   81ff6:	6003      	str	r3, [r0, #0]

	return 0;
   81ff8:	2000      	movs	r0, #0
   81ffa:	e000      	b.n	81ffe <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81ffc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
   82002:	4770      	bx	lr

00082004 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82004:	6943      	ldr	r3, [r0, #20]
   82006:	f013 0f02 	tst.w	r3, #2
   8200a:	d002      	beq.n	82012 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8200c:	61c1      	str	r1, [r0, #28]
	return 0;
   8200e:	2000      	movs	r0, #0
   82010:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   82012:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   82014:	4770      	bx	lr
   82016:	bf00      	nop

00082018 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82018:	6943      	ldr	r3, [r0, #20]
   8201a:	f013 0f01 	tst.w	r3, #1
   8201e:	d003      	beq.n	82028 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82020:	6983      	ldr	r3, [r0, #24]
   82022:	700b      	strb	r3, [r1, #0]
	return 0;
   82024:	2000      	movs	r0, #0
   82026:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   82028:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   8202a:	4770      	bx	lr

0008202c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8202c:	6943      	ldr	r3, [r0, #20]
   8202e:	f013 0f02 	tst.w	r3, #2
   82032:	d004      	beq.n	8203e <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82034:	f3c1 0108 	ubfx	r1, r1, #0, #9
   82038:	61c1      	str	r1, [r0, #28]
	return 0;
   8203a:	2000      	movs	r0, #0
   8203c:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8203e:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   82040:	4770      	bx	lr
   82042:	bf00      	nop

00082044 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82044:	6943      	ldr	r3, [r0, #20]
   82046:	f013 0f01 	tst.w	r3, #1
   8204a:	d005      	beq.n	82058 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8204c:	6983      	ldr	r3, [r0, #24]
   8204e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   82052:	600b      	str	r3, [r1, #0]

	return 0;
   82054:	2000      	movs	r0, #0
   82056:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   82058:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8205a:	4770      	bx	lr

0008205c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8205c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8205e:	480e      	ldr	r0, [pc, #56]	; (82098 <sysclk_init+0x3c>)
   82060:	4b0e      	ldr	r3, [pc, #56]	; (8209c <sysclk_init+0x40>)
   82062:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82064:	2000      	movs	r0, #0
   82066:	213e      	movs	r1, #62	; 0x3e
   82068:	4b0d      	ldr	r3, [pc, #52]	; (820a0 <sysclk_init+0x44>)
   8206a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8206c:	4c0d      	ldr	r4, [pc, #52]	; (820a4 <sysclk_init+0x48>)
   8206e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82070:	2800      	cmp	r0, #0
   82072:	d0fc      	beq.n	8206e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82074:	4b0c      	ldr	r3, [pc, #48]	; (820a8 <sysclk_init+0x4c>)
   82076:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82078:	4a0c      	ldr	r2, [pc, #48]	; (820ac <sysclk_init+0x50>)
   8207a:	4b0d      	ldr	r3, [pc, #52]	; (820b0 <sysclk_init+0x54>)
   8207c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8207e:	4c0d      	ldr	r4, [pc, #52]	; (820b4 <sysclk_init+0x58>)
   82080:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82082:	2800      	cmp	r0, #0
   82084:	d0fc      	beq.n	82080 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82086:	2010      	movs	r0, #16
   82088:	4b0b      	ldr	r3, [pc, #44]	; (820b8 <sysclk_init+0x5c>)
   8208a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8208c:	4b0b      	ldr	r3, [pc, #44]	; (820bc <sysclk_init+0x60>)
   8208e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82090:	4801      	ldr	r0, [pc, #4]	; (82098 <sysclk_init+0x3c>)
   82092:	4b02      	ldr	r3, [pc, #8]	; (8209c <sysclk_init+0x40>)
   82094:	4798      	blx	r3
   82096:	bd10      	pop	{r4, pc}
   82098:	0501bd00 	.word	0x0501bd00
   8209c:	00082789 	.word	0x00082789
   820a0:	000824dd 	.word	0x000824dd
   820a4:	00082531 	.word	0x00082531
   820a8:	00082541 	.word	0x00082541
   820ac:	200d3f01 	.word	0x200d3f01
   820b0:	400e0600 	.word	0x400e0600
   820b4:	00082551 	.word	0x00082551
   820b8:	00082479 	.word	0x00082479
   820bc:	0008266d 	.word	0x0008266d

000820c0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   820c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   820c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   820c6:	4b13      	ldr	r3, [pc, #76]	; (82114 <board_init+0x54>)
   820c8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   820ca:	200b      	movs	r0, #11
   820cc:	4c12      	ldr	r4, [pc, #72]	; (82118 <board_init+0x58>)
   820ce:	47a0      	blx	r4
   820d0:	200c      	movs	r0, #12
   820d2:	47a0      	blx	r4
   820d4:	200d      	movs	r0, #13
   820d6:	47a0      	blx	r4
   820d8:	200e      	movs	r0, #14
   820da:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   820dc:	203b      	movs	r0, #59	; 0x3b
   820de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820e2:	4c0e      	ldr	r4, [pc, #56]	; (8211c <board_init+0x5c>)
   820e4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   820e6:	2055      	movs	r0, #85	; 0x55
   820e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820ec:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   820ee:	2056      	movs	r0, #86	; 0x56
   820f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   820f6:	2068      	movs	r0, #104	; 0x68
   820f8:	4909      	ldr	r1, [pc, #36]	; (82120 <board_init+0x60>)
   820fa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   820fc:	205c      	movs	r0, #92	; 0x5c
   820fe:	4909      	ldr	r1, [pc, #36]	; (82124 <board_init+0x64>)
   82100:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82102:	4809      	ldr	r0, [pc, #36]	; (82128 <board_init+0x68>)
   82104:	f44f 7140 	mov.w	r1, #768	; 0x300
   82108:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8210c:	4b07      	ldr	r3, [pc, #28]	; (8212c <board_init+0x6c>)
   8210e:	4798      	blx	r3
   82110:	bd10      	pop	{r4, pc}
   82112:	bf00      	nop
   82114:	400e1a50 	.word	0x400e1a50
   82118:	00082561 	.word	0x00082561
   8211c:	0008225d 	.word	0x0008225d
   82120:	28000079 	.word	0x28000079
   82124:	28000001 	.word	0x28000001
   82128:	400e0e00 	.word	0x400e0e00
   8212c:	00082331 	.word	0x00082331

00082130 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82130:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82132:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82136:	d016      	beq.n	82166 <pio_set_peripheral+0x36>
   82138:	d804      	bhi.n	82144 <pio_set_peripheral+0x14>
   8213a:	b1c1      	cbz	r1, 8216e <pio_set_peripheral+0x3e>
   8213c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82140:	d00a      	beq.n	82158 <pio_set_peripheral+0x28>
   82142:	e013      	b.n	8216c <pio_set_peripheral+0x3c>
   82144:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82148:	d011      	beq.n	8216e <pio_set_peripheral+0x3e>
   8214a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8214e:	d00e      	beq.n	8216e <pio_set_peripheral+0x3e>
   82150:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82154:	d10a      	bne.n	8216c <pio_set_peripheral+0x3c>
   82156:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82158:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8215a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8215c:	400b      	ands	r3, r1
   8215e:	ea23 0302 	bic.w	r3, r3, r2
   82162:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82164:	e002      	b.n	8216c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82166:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82168:	4313      	orrs	r3, r2
   8216a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8216c:	6042      	str	r2, [r0, #4]
   8216e:	4770      	bx	lr

00082170 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82170:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82172:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82176:	bf14      	ite	ne
   82178:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8217a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8217c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82180:	bf14      	ite	ne
   82182:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82184:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82186:	f012 0f02 	tst.w	r2, #2
   8218a:	d002      	beq.n	82192 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8218c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82190:	e004      	b.n	8219c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82192:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82196:	bf18      	it	ne
   82198:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8219c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8219e:	6001      	str	r1, [r0, #0]
   821a0:	4770      	bx	lr
   821a2:	bf00      	nop

000821a4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   821a4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   821a6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821a8:	9c01      	ldr	r4, [sp, #4]
   821aa:	b10c      	cbz	r4, 821b0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   821ac:	6641      	str	r1, [r0, #100]	; 0x64
   821ae:	e000      	b.n	821b2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821b0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   821b2:	b10b      	cbz	r3, 821b8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   821b4:	6501      	str	r1, [r0, #80]	; 0x50
   821b6:	e000      	b.n	821ba <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   821b8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   821ba:	b10a      	cbz	r2, 821c0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   821bc:	6301      	str	r1, [r0, #48]	; 0x30
   821be:	e000      	b.n	821c2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   821c0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   821c2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   821c4:	6001      	str	r1, [r0, #0]
}
   821c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   821ca:	4770      	bx	lr

000821cc <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
   821cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   821ce:	b083      	sub	sp, #12
   821d0:	4607      	mov	r7, r0
   821d2:	460c      	mov	r4, r1
   821d4:	4616      	mov	r6, r2
   821d6:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
   821d8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   821dc:	d01a      	beq.n	82214 <pio_configure+0x48>
   821de:	d806      	bhi.n	821ee <pio_configure+0x22>
   821e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   821e4:	d00a      	beq.n	821fc <pio_configure+0x30>
   821e6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   821ea:	d007      	beq.n	821fc <pio_configure+0x30>
   821ec:	e028      	b.n	82240 <pio_configure+0x74>
   821ee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   821f2:	d015      	beq.n	82220 <pio_configure+0x54>
   821f4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   821f8:	d012      	beq.n	82220 <pio_configure+0x54>
   821fa:	e021      	b.n	82240 <pio_configure+0x74>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
   821fc:	4638      	mov	r0, r7
   821fe:	4621      	mov	r1, r4
   82200:	4632      	mov	r2, r6
   82202:	4b11      	ldr	r3, [pc, #68]	; (82248 <pio_configure+0x7c>)
   82204:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82206:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8220a:	bf14      	ite	ne
   8220c:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8220e:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82210:	2001      	movs	r0, #1
   82212:	e016      	b.n	82242 <pio_configure+0x76>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
   82214:	4611      	mov	r1, r2
   82216:	461a      	mov	r2, r3
   82218:	4b0c      	ldr	r3, [pc, #48]	; (8224c <pio_configure+0x80>)
   8221a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8221c:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
   8221e:	e010      	b.n	82242 <pio_configure+0x76>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
   82220:	f005 0301 	and.w	r3, r5, #1
   82224:	9300      	str	r3, [sp, #0]
   82226:	4638      	mov	r0, r7
   82228:	4631      	mov	r1, r6
   8222a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8222e:	bf14      	ite	ne
   82230:	2200      	movne	r2, #0
   82232:	2201      	moveq	r2, #1
   82234:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82238:	4c05      	ldr	r4, [pc, #20]	; (82250 <pio_configure+0x84>)
   8223a:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8223c:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
   8223e:	e000      	b.n	82242 <pio_configure+0x76>

	default:
		return 0;
   82240:	2000      	movs	r0, #0
	}

	return 1;
}
   82242:	b003      	add	sp, #12
   82244:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82246:	bf00      	nop
   82248:	00082131 	.word	0x00082131
   8224c:	00082171 	.word	0x00082171
   82250:	000821a5 	.word	0x000821a5

00082254 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82254:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82256:	4770      	bx	lr

00082258 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82258:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8225a:	4770      	bx	lr

0008225c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8225c:	b570      	push	{r4, r5, r6, lr}
   8225e:	b082      	sub	sp, #8
   82260:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82262:	0944      	lsrs	r4, r0, #5
   82264:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   82268:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8226c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8226e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82272:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82276:	d030      	beq.n	822da <pio_configure_pin+0x7e>
   82278:	d806      	bhi.n	82288 <pio_configure_pin+0x2c>
   8227a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8227e:	d00a      	beq.n	82296 <pio_configure_pin+0x3a>
   82280:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82284:	d018      	beq.n	822b8 <pio_configure_pin+0x5c>
   82286:	e049      	b.n	8231c <pio_configure_pin+0xc0>
   82288:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8228c:	d030      	beq.n	822f0 <pio_configure_pin+0x94>
   8228e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82292:	d02d      	beq.n	822f0 <pio_configure_pin+0x94>
   82294:	e042      	b.n	8231c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82296:	f000 001f 	and.w	r0, r0, #31
   8229a:	2401      	movs	r4, #1
   8229c:	4084      	lsls	r4, r0
   8229e:	4630      	mov	r0, r6
   822a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   822a4:	4622      	mov	r2, r4
   822a6:	4b1f      	ldr	r3, [pc, #124]	; (82324 <pio_configure_pin+0xc8>)
   822a8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   822aa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   822ae:	bf14      	ite	ne
   822b0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   822b2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   822b4:	2001      	movs	r0, #1
   822b6:	e032      	b.n	8231e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   822b8:	f000 001f 	and.w	r0, r0, #31
   822bc:	2401      	movs	r4, #1
   822be:	4084      	lsls	r4, r0
   822c0:	4630      	mov	r0, r6
   822c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   822c6:	4622      	mov	r2, r4
   822c8:	4b16      	ldr	r3, [pc, #88]	; (82324 <pio_configure_pin+0xc8>)
   822ca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   822cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   822d0:	bf14      	ite	ne
   822d2:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   822d4:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   822d6:	2001      	movs	r0, #1
   822d8:	e021      	b.n	8231e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   822da:	f000 011f 	and.w	r1, r0, #31
   822de:	2401      	movs	r4, #1
   822e0:	4630      	mov	r0, r6
   822e2:	fa04 f101 	lsl.w	r1, r4, r1
   822e6:	462a      	mov	r2, r5
   822e8:	4b0f      	ldr	r3, [pc, #60]	; (82328 <pio_configure_pin+0xcc>)
   822ea:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   822ec:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   822ee:	e016      	b.n	8231e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822f0:	f000 011f 	and.w	r1, r0, #31
   822f4:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   822f6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822fa:	ea05 0304 	and.w	r3, r5, r4
   822fe:	9300      	str	r3, [sp, #0]
   82300:	4630      	mov	r0, r6
   82302:	fa04 f101 	lsl.w	r1, r4, r1
   82306:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8230a:	bf14      	ite	ne
   8230c:	2200      	movne	r2, #0
   8230e:	2201      	moveq	r2, #1
   82310:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82314:	4d05      	ldr	r5, [pc, #20]	; (8232c <pio_configure_pin+0xd0>)
   82316:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82318:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8231a:	e000      	b.n	8231e <pio_configure_pin+0xc2>

	default:
		return 0;
   8231c:	2000      	movs	r0, #0
	}

	return 1;
}
   8231e:	b002      	add	sp, #8
   82320:	bd70      	pop	{r4, r5, r6, pc}
   82322:	bf00      	nop
   82324:	00082131 	.word	0x00082131
   82328:	00082171 	.word	0x00082171
   8232c:	000821a5 	.word	0x000821a5

00082330 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82330:	b5f0      	push	{r4, r5, r6, r7, lr}
   82332:	b083      	sub	sp, #12
   82334:	4607      	mov	r7, r0
   82336:	460e      	mov	r6, r1
   82338:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8233a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8233e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82342:	d026      	beq.n	82392 <pio_configure_pin_group+0x62>
   82344:	d806      	bhi.n	82354 <pio_configure_pin_group+0x24>
   82346:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8234a:	d00a      	beq.n	82362 <pio_configure_pin_group+0x32>
   8234c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82350:	d013      	beq.n	8237a <pio_configure_pin_group+0x4a>
   82352:	e034      	b.n	823be <pio_configure_pin_group+0x8e>
   82354:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82358:	d01f      	beq.n	8239a <pio_configure_pin_group+0x6a>
   8235a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8235e:	d01c      	beq.n	8239a <pio_configure_pin_group+0x6a>
   82360:	e02d      	b.n	823be <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82362:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82366:	4632      	mov	r2, r6
   82368:	4b16      	ldr	r3, [pc, #88]	; (823c4 <pio_configure_pin_group+0x94>)
   8236a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8236c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82370:	bf14      	ite	ne
   82372:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82374:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82376:	2001      	movs	r0, #1
   82378:	e022      	b.n	823c0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8237a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8237e:	4632      	mov	r2, r6
   82380:	4b10      	ldr	r3, [pc, #64]	; (823c4 <pio_configure_pin_group+0x94>)
   82382:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82384:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82388:	bf14      	ite	ne
   8238a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8238c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8238e:	2001      	movs	r0, #1
   82390:	e016      	b.n	823c0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82392:	4b0d      	ldr	r3, [pc, #52]	; (823c8 <pio_configure_pin_group+0x98>)
   82394:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82396:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82398:	e012      	b.n	823c0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8239a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8239e:	f005 0301 	and.w	r3, r5, #1
   823a2:	9300      	str	r3, [sp, #0]
   823a4:	4638      	mov	r0, r7
   823a6:	4631      	mov	r1, r6
   823a8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   823ac:	bf14      	ite	ne
   823ae:	2200      	movne	r2, #0
   823b0:	2201      	moveq	r2, #1
   823b2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   823b6:	4c05      	ldr	r4, [pc, #20]	; (823cc <pio_configure_pin_group+0x9c>)
   823b8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   823ba:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   823bc:	e000      	b.n	823c0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   823be:	2000      	movs	r0, #0
	}

	return 1;
}
   823c0:	b003      	add	sp, #12
   823c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   823c4:	00082131 	.word	0x00082131
   823c8:	00082171 	.word	0x00082171
   823cc:	000821a5 	.word	0x000821a5

000823d0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   823d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823d4:	4604      	mov	r4, r0
   823d6:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   823d8:	4b10      	ldr	r3, [pc, #64]	; (8241c <pio_handler_process+0x4c>)
   823da:	4798      	blx	r3
   823dc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   823de:	4620      	mov	r0, r4
   823e0:	4b0f      	ldr	r3, [pc, #60]	; (82420 <pio_handler_process+0x50>)
   823e2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   823e4:	4005      	ands	r5, r0
   823e6:	d017      	beq.n	82418 <pio_handler_process+0x48>
   823e8:	4f0e      	ldr	r7, [pc, #56]	; (82424 <pio_handler_process+0x54>)
   823ea:	f107 040c 	add.w	r4, r7, #12
   823ee:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   823f0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   823f4:	42b3      	cmp	r3, r6
   823f6:	d10a      	bne.n	8240e <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   823f8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   823fc:	4229      	tst	r1, r5
   823fe:	d006      	beq.n	8240e <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82400:	6823      	ldr	r3, [r4, #0]
   82402:	4630      	mov	r0, r6
   82404:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82406:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8240a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8240e:	42bc      	cmp	r4, r7
   82410:	d002      	beq.n	82418 <pio_handler_process+0x48>
   82412:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82414:	2d00      	cmp	r5, #0
   82416:	d1eb      	bne.n	823f0 <pio_handler_process+0x20>
   82418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8241c:	00082255 	.word	0x00082255
   82420:	00082259 	.word	0x00082259
   82424:	2007ab64 	.word	0x2007ab64

00082428 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82428:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8242a:	4802      	ldr	r0, [pc, #8]	; (82434 <PIOA_Handler+0xc>)
   8242c:	210b      	movs	r1, #11
   8242e:	4b02      	ldr	r3, [pc, #8]	; (82438 <PIOA_Handler+0x10>)
   82430:	4798      	blx	r3
   82432:	bd08      	pop	{r3, pc}
   82434:	400e0e00 	.word	0x400e0e00
   82438:	000823d1 	.word	0x000823d1

0008243c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8243c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8243e:	4802      	ldr	r0, [pc, #8]	; (82448 <PIOB_Handler+0xc>)
   82440:	210c      	movs	r1, #12
   82442:	4b02      	ldr	r3, [pc, #8]	; (8244c <PIOB_Handler+0x10>)
   82444:	4798      	blx	r3
   82446:	bd08      	pop	{r3, pc}
   82448:	400e1000 	.word	0x400e1000
   8244c:	000823d1 	.word	0x000823d1

00082450 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82450:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82452:	4802      	ldr	r0, [pc, #8]	; (8245c <PIOC_Handler+0xc>)
   82454:	210d      	movs	r1, #13
   82456:	4b02      	ldr	r3, [pc, #8]	; (82460 <PIOC_Handler+0x10>)
   82458:	4798      	blx	r3
   8245a:	bd08      	pop	{r3, pc}
   8245c:	400e1200 	.word	0x400e1200
   82460:	000823d1 	.word	0x000823d1

00082464 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82464:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82466:	4802      	ldr	r0, [pc, #8]	; (82470 <PIOD_Handler+0xc>)
   82468:	210e      	movs	r1, #14
   8246a:	4b02      	ldr	r3, [pc, #8]	; (82474 <PIOD_Handler+0x10>)
   8246c:	4798      	blx	r3
   8246e:	bd08      	pop	{r3, pc}
   82470:	400e1400 	.word	0x400e1400
   82474:	000823d1 	.word	0x000823d1

00082478 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82478:	4b17      	ldr	r3, [pc, #92]	; (824d8 <pmc_switch_mck_to_pllack+0x60>)
   8247a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8247c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82480:	4310      	orrs	r0, r2
   82482:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82486:	f013 0f08 	tst.w	r3, #8
   8248a:	d109      	bne.n	824a0 <pmc_switch_mck_to_pllack+0x28>
   8248c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82490:	4911      	ldr	r1, [pc, #68]	; (824d8 <pmc_switch_mck_to_pllack+0x60>)
   82492:	e001      	b.n	82498 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82494:	3b01      	subs	r3, #1
   82496:	d019      	beq.n	824cc <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82498:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8249a:	f012 0f08 	tst.w	r2, #8
   8249e:	d0f9      	beq.n	82494 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   824a0:	4b0d      	ldr	r3, [pc, #52]	; (824d8 <pmc_switch_mck_to_pllack+0x60>)
   824a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   824a4:	f022 0203 	bic.w	r2, r2, #3
   824a8:	f042 0202 	orr.w	r2, r2, #2
   824ac:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   824ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
   824b0:	f010 0008 	ands.w	r0, r0, #8
   824b4:	d10c      	bne.n	824d0 <pmc_switch_mck_to_pllack+0x58>
   824b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   824ba:	4907      	ldr	r1, [pc, #28]	; (824d8 <pmc_switch_mck_to_pllack+0x60>)
   824bc:	e001      	b.n	824c2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   824be:	3b01      	subs	r3, #1
   824c0:	d008      	beq.n	824d4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   824c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   824c4:	f012 0f08 	tst.w	r2, #8
   824c8:	d0f9      	beq.n	824be <pmc_switch_mck_to_pllack+0x46>
   824ca:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   824cc:	2001      	movs	r0, #1
   824ce:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   824d0:	2000      	movs	r0, #0
   824d2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   824d4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   824d6:	4770      	bx	lr
   824d8:	400e0600 	.word	0x400e0600

000824dc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   824dc:	b138      	cbz	r0, 824ee <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824de:	4911      	ldr	r1, [pc, #68]	; (82524 <pmc_switch_mainck_to_xtal+0x48>)
   824e0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   824e2:	4a11      	ldr	r2, [pc, #68]	; (82528 <pmc_switch_mainck_to_xtal+0x4c>)
   824e4:	401a      	ands	r2, r3
   824e6:	4b11      	ldr	r3, [pc, #68]	; (8252c <pmc_switch_mainck_to_xtal+0x50>)
   824e8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   824ea:	620b      	str	r3, [r1, #32]
   824ec:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   824ee:	4a0d      	ldr	r2, [pc, #52]	; (82524 <pmc_switch_mainck_to_xtal+0x48>)
   824f0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   824f2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   824f6:	f023 0303 	bic.w	r3, r3, #3
   824fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   824fe:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82502:	0209      	lsls	r1, r1, #8
   82504:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82506:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82508:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8250a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8250c:	f013 0f01 	tst.w	r3, #1
   82510:	d0fb      	beq.n	8250a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82512:	4a04      	ldr	r2, [pc, #16]	; (82524 <pmc_switch_mainck_to_xtal+0x48>)
   82514:	6a13      	ldr	r3, [r2, #32]
   82516:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8251e:	6213      	str	r3, [r2, #32]
   82520:	4770      	bx	lr
   82522:	bf00      	nop
   82524:	400e0600 	.word	0x400e0600
   82528:	fec8fffc 	.word	0xfec8fffc
   8252c:	01370002 	.word	0x01370002

00082530 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82530:	4b02      	ldr	r3, [pc, #8]	; (8253c <pmc_osc_is_ready_mainck+0xc>)
   82532:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82534:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82538:	4770      	bx	lr
   8253a:	bf00      	nop
   8253c:	400e0600 	.word	0x400e0600

00082540 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82540:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82544:	4b01      	ldr	r3, [pc, #4]	; (8254c <pmc_disable_pllack+0xc>)
   82546:	629a      	str	r2, [r3, #40]	; 0x28
   82548:	4770      	bx	lr
   8254a:	bf00      	nop
   8254c:	400e0600 	.word	0x400e0600

00082550 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82550:	4b02      	ldr	r3, [pc, #8]	; (8255c <pmc_is_locked_pllack+0xc>)
   82552:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82554:	f000 0002 	and.w	r0, r0, #2
   82558:	4770      	bx	lr
   8255a:	bf00      	nop
   8255c:	400e0600 	.word	0x400e0600

00082560 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82560:	282c      	cmp	r0, #44	; 0x2c
   82562:	d820      	bhi.n	825a6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82564:	281f      	cmp	r0, #31
   82566:	d80d      	bhi.n	82584 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82568:	4b12      	ldr	r3, [pc, #72]	; (825b4 <pmc_enable_periph_clk+0x54>)
   8256a:	699a      	ldr	r2, [r3, #24]
   8256c:	2301      	movs	r3, #1
   8256e:	4083      	lsls	r3, r0
   82570:	401a      	ands	r2, r3
   82572:	4293      	cmp	r3, r2
   82574:	d019      	beq.n	825aa <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   82576:	2301      	movs	r3, #1
   82578:	fa03 f000 	lsl.w	r0, r3, r0
   8257c:	4b0d      	ldr	r3, [pc, #52]	; (825b4 <pmc_enable_periph_clk+0x54>)
   8257e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82580:	2000      	movs	r0, #0
   82582:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82584:	4b0b      	ldr	r3, [pc, #44]	; (825b4 <pmc_enable_periph_clk+0x54>)
   82586:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   8258a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8258c:	2301      	movs	r3, #1
   8258e:	4083      	lsls	r3, r0
   82590:	401a      	ands	r2, r3
   82592:	4293      	cmp	r3, r2
   82594:	d00b      	beq.n	825ae <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   82596:	2301      	movs	r3, #1
   82598:	fa03 f000 	lsl.w	r0, r3, r0
   8259c:	4b05      	ldr	r3, [pc, #20]	; (825b4 <pmc_enable_periph_clk+0x54>)
   8259e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   825a2:	2000      	movs	r0, #0
   825a4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   825a6:	2001      	movs	r0, #1
   825a8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   825aa:	2000      	movs	r0, #0
   825ac:	4770      	bx	lr
   825ae:	2000      	movs	r0, #0
}
   825b0:	4770      	bx	lr
   825b2:	bf00      	nop
   825b4:	400e0600 	.word	0x400e0600

000825b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   825b8:	e7fe      	b.n	825b8 <Dummy_Handler>
   825ba:	bf00      	nop

000825bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   825bc:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   825be:	4b1e      	ldr	r3, [pc, #120]	; (82638 <Reset_Handler+0x7c>)
   825c0:	4a1e      	ldr	r2, [pc, #120]	; (8263c <Reset_Handler+0x80>)
   825c2:	429a      	cmp	r2, r3
   825c4:	d003      	beq.n	825ce <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   825c6:	4b1e      	ldr	r3, [pc, #120]	; (82640 <Reset_Handler+0x84>)
   825c8:	4a1b      	ldr	r2, [pc, #108]	; (82638 <Reset_Handler+0x7c>)
   825ca:	429a      	cmp	r2, r3
   825cc:	d304      	bcc.n	825d8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   825ce:	4b1d      	ldr	r3, [pc, #116]	; (82644 <Reset_Handler+0x88>)
   825d0:	4a1d      	ldr	r2, [pc, #116]	; (82648 <Reset_Handler+0x8c>)
   825d2:	429a      	cmp	r2, r3
   825d4:	d30f      	bcc.n	825f6 <Reset_Handler+0x3a>
   825d6:	e01a      	b.n	8260e <Reset_Handler+0x52>
   825d8:	4b1c      	ldr	r3, [pc, #112]	; (8264c <Reset_Handler+0x90>)
   825da:	4c1d      	ldr	r4, [pc, #116]	; (82650 <Reset_Handler+0x94>)
   825dc:	1ae4      	subs	r4, r4, r3
   825de:	f024 0403 	bic.w	r4, r4, #3
   825e2:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   825e4:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   825e6:	4814      	ldr	r0, [pc, #80]	; (82638 <Reset_Handler+0x7c>)
   825e8:	4914      	ldr	r1, [pc, #80]	; (8263c <Reset_Handler+0x80>)
   825ea:	585a      	ldr	r2, [r3, r1]
   825ec:	501a      	str	r2, [r3, r0]
   825ee:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   825f0:	42a3      	cmp	r3, r4
   825f2:	d1fa      	bne.n	825ea <Reset_Handler+0x2e>
   825f4:	e7eb      	b.n	825ce <Reset_Handler+0x12>
   825f6:	4b17      	ldr	r3, [pc, #92]	; (82654 <Reset_Handler+0x98>)
   825f8:	4917      	ldr	r1, [pc, #92]	; (82658 <Reset_Handler+0x9c>)
   825fa:	1ac9      	subs	r1, r1, r3
   825fc:	f021 0103 	bic.w	r1, r1, #3
   82600:	1d1a      	adds	r2, r3, #4
   82602:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82604:	2200      	movs	r2, #0
   82606:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8260a:	428b      	cmp	r3, r1
   8260c:	d1fb      	bne.n	82606 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8260e:	4a13      	ldr	r2, [pc, #76]	; (8265c <Reset_Handler+0xa0>)
   82610:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   82614:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82618:	4911      	ldr	r1, [pc, #68]	; (82660 <Reset_Handler+0xa4>)
   8261a:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8261c:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82620:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82624:	d203      	bcs.n	8262e <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82626:	688a      	ldr	r2, [r1, #8]
   82628:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8262c:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8262e:	4b0d      	ldr	r3, [pc, #52]	; (82664 <Reset_Handler+0xa8>)
   82630:	4798      	blx	r3

	/* Branch to main function */
	main();
   82632:	4b0d      	ldr	r3, [pc, #52]	; (82668 <Reset_Handler+0xac>)
   82634:	4798      	blx	r3
   82636:	e7fe      	b.n	82636 <Reset_Handler+0x7a>
   82638:	20070000 	.word	0x20070000
   8263c:	00088e14 	.word	0x00088e14
   82640:	200708d8 	.word	0x200708d8
   82644:	2007ac44 	.word	0x2007ac44
   82648:	200708d8 	.word	0x200708d8
   8264c:	20070004 	.word	0x20070004
   82650:	200708db 	.word	0x200708db
   82654:	200708d4 	.word	0x200708d4
   82658:	2007ac3f 	.word	0x2007ac3f
   8265c:	00080000 	.word	0x00080000
   82660:	e000ed00 	.word	0xe000ed00
   82664:	00083301 	.word	0x00083301
   82668:	000829b1 	.word	0x000829b1

0008266c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8266c:	4b3e      	ldr	r3, [pc, #248]	; (82768 <SystemCoreClockUpdate+0xfc>)
   8266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82670:	f003 0303 	and.w	r3, r3, #3
   82674:	2b03      	cmp	r3, #3
   82676:	d85f      	bhi.n	82738 <SystemCoreClockUpdate+0xcc>
   82678:	e8df f003 	tbb	[pc, r3]
   8267c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82680:	4b3a      	ldr	r3, [pc, #232]	; (8276c <SystemCoreClockUpdate+0x100>)
   82682:	695b      	ldr	r3, [r3, #20]
   82684:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82688:	bf14      	ite	ne
   8268a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8268e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82692:	4b37      	ldr	r3, [pc, #220]	; (82770 <SystemCoreClockUpdate+0x104>)
   82694:	601a      	str	r2, [r3, #0]
   82696:	e04f      	b.n	82738 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82698:	4b33      	ldr	r3, [pc, #204]	; (82768 <SystemCoreClockUpdate+0xfc>)
   8269a:	6a1b      	ldr	r3, [r3, #32]
   8269c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   826a0:	d003      	beq.n	826aa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   826a2:	4a34      	ldr	r2, [pc, #208]	; (82774 <SystemCoreClockUpdate+0x108>)
   826a4:	4b32      	ldr	r3, [pc, #200]	; (82770 <SystemCoreClockUpdate+0x104>)
   826a6:	601a      	str	r2, [r3, #0]
   826a8:	e046      	b.n	82738 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   826aa:	4a33      	ldr	r2, [pc, #204]	; (82778 <SystemCoreClockUpdate+0x10c>)
   826ac:	4b30      	ldr	r3, [pc, #192]	; (82770 <SystemCoreClockUpdate+0x104>)
   826ae:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   826b0:	4b2d      	ldr	r3, [pc, #180]	; (82768 <SystemCoreClockUpdate+0xfc>)
   826b2:	6a1b      	ldr	r3, [r3, #32]
   826b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   826b8:	2b10      	cmp	r3, #16
   826ba:	d002      	beq.n	826c2 <SystemCoreClockUpdate+0x56>
   826bc:	2b20      	cmp	r3, #32
   826be:	d004      	beq.n	826ca <SystemCoreClockUpdate+0x5e>
   826c0:	e03a      	b.n	82738 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   826c2:	4a2e      	ldr	r2, [pc, #184]	; (8277c <SystemCoreClockUpdate+0x110>)
   826c4:	4b2a      	ldr	r3, [pc, #168]	; (82770 <SystemCoreClockUpdate+0x104>)
   826c6:	601a      	str	r2, [r3, #0]
				break;
   826c8:	e036      	b.n	82738 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   826ca:	4a2a      	ldr	r2, [pc, #168]	; (82774 <SystemCoreClockUpdate+0x108>)
   826cc:	4b28      	ldr	r3, [pc, #160]	; (82770 <SystemCoreClockUpdate+0x104>)
   826ce:	601a      	str	r2, [r3, #0]
				break;
   826d0:	e032      	b.n	82738 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   826d2:	4b25      	ldr	r3, [pc, #148]	; (82768 <SystemCoreClockUpdate+0xfc>)
   826d4:	6a1b      	ldr	r3, [r3, #32]
   826d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   826da:	d003      	beq.n	826e4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   826dc:	4a25      	ldr	r2, [pc, #148]	; (82774 <SystemCoreClockUpdate+0x108>)
   826de:	4b24      	ldr	r3, [pc, #144]	; (82770 <SystemCoreClockUpdate+0x104>)
   826e0:	601a      	str	r2, [r3, #0]
   826e2:	e012      	b.n	8270a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   826e4:	4a24      	ldr	r2, [pc, #144]	; (82778 <SystemCoreClockUpdate+0x10c>)
   826e6:	4b22      	ldr	r3, [pc, #136]	; (82770 <SystemCoreClockUpdate+0x104>)
   826e8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   826ea:	4b1f      	ldr	r3, [pc, #124]	; (82768 <SystemCoreClockUpdate+0xfc>)
   826ec:	6a1b      	ldr	r3, [r3, #32]
   826ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
   826f2:	2b10      	cmp	r3, #16
   826f4:	d002      	beq.n	826fc <SystemCoreClockUpdate+0x90>
   826f6:	2b20      	cmp	r3, #32
   826f8:	d004      	beq.n	82704 <SystemCoreClockUpdate+0x98>
   826fa:	e006      	b.n	8270a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   826fc:	4a1f      	ldr	r2, [pc, #124]	; (8277c <SystemCoreClockUpdate+0x110>)
   826fe:	4b1c      	ldr	r3, [pc, #112]	; (82770 <SystemCoreClockUpdate+0x104>)
   82700:	601a      	str	r2, [r3, #0]
				break;
   82702:	e002      	b.n	8270a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82704:	4a1b      	ldr	r2, [pc, #108]	; (82774 <SystemCoreClockUpdate+0x108>)
   82706:	4b1a      	ldr	r3, [pc, #104]	; (82770 <SystemCoreClockUpdate+0x104>)
   82708:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8270a:	4b17      	ldr	r3, [pc, #92]	; (82768 <SystemCoreClockUpdate+0xfc>)
   8270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8270e:	f003 0303 	and.w	r3, r3, #3
   82712:	2b02      	cmp	r3, #2
   82714:	d10d      	bne.n	82732 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82716:	4b14      	ldr	r3, [pc, #80]	; (82768 <SystemCoreClockUpdate+0xfc>)
   82718:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8271a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   8271c:	4b14      	ldr	r3, [pc, #80]	; (82770 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8271e:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82722:	681a      	ldr	r2, [r3, #0]
   82724:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82728:	b2c9      	uxtb	r1, r1
   8272a:	fbb2 f2f1 	udiv	r2, r2, r1
   8272e:	601a      	str	r2, [r3, #0]
   82730:	e002      	b.n	82738 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82732:	4a13      	ldr	r2, [pc, #76]	; (82780 <SystemCoreClockUpdate+0x114>)
   82734:	4b0e      	ldr	r3, [pc, #56]	; (82770 <SystemCoreClockUpdate+0x104>)
   82736:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82738:	4b0b      	ldr	r3, [pc, #44]	; (82768 <SystemCoreClockUpdate+0xfc>)
   8273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8273c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82740:	2b70      	cmp	r3, #112	; 0x70
   82742:	d107      	bne.n	82754 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82744:	4b0a      	ldr	r3, [pc, #40]	; (82770 <SystemCoreClockUpdate+0x104>)
   82746:	681a      	ldr	r2, [r3, #0]
   82748:	490e      	ldr	r1, [pc, #56]	; (82784 <SystemCoreClockUpdate+0x118>)
   8274a:	fba1 0202 	umull	r0, r2, r1, r2
   8274e:	0852      	lsrs	r2, r2, #1
   82750:	601a      	str	r2, [r3, #0]
   82752:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82754:	4b04      	ldr	r3, [pc, #16]	; (82768 <SystemCoreClockUpdate+0xfc>)
   82756:	6b19      	ldr	r1, [r3, #48]	; 0x30
   82758:	4b05      	ldr	r3, [pc, #20]	; (82770 <SystemCoreClockUpdate+0x104>)
   8275a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8275e:	681a      	ldr	r2, [r3, #0]
   82760:	40ca      	lsrs	r2, r1
   82762:	601a      	str	r2, [r3, #0]
   82764:	4770      	bx	lr
   82766:	bf00      	nop
   82768:	400e0600 	.word	0x400e0600
   8276c:	400e1a10 	.word	0x400e1a10
   82770:	2007000c 	.word	0x2007000c
   82774:	00b71b00 	.word	0x00b71b00
   82778:	003d0900 	.word	0x003d0900
   8277c:	007a1200 	.word	0x007a1200
   82780:	0e4e1c00 	.word	0x0e4e1c00
   82784:	aaaaaaab 	.word	0xaaaaaaab

00082788 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82788:	4b1b      	ldr	r3, [pc, #108]	; (827f8 <system_init_flash+0x70>)
   8278a:	4298      	cmp	r0, r3
   8278c:	d806      	bhi.n	8279c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   8278e:	2300      	movs	r3, #0
   82790:	4a1a      	ldr	r2, [pc, #104]	; (827fc <system_init_flash+0x74>)
   82792:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82794:	f502 7200 	add.w	r2, r2, #512	; 0x200
   82798:	6013      	str	r3, [r2, #0]
   8279a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8279c:	4b18      	ldr	r3, [pc, #96]	; (82800 <system_init_flash+0x78>)
   8279e:	4298      	cmp	r0, r3
   827a0:	d807      	bhi.n	827b2 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   827a2:	f44f 7380 	mov.w	r3, #256	; 0x100
   827a6:	4a15      	ldr	r2, [pc, #84]	; (827fc <system_init_flash+0x74>)
   827a8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   827aa:	f502 7200 	add.w	r2, r2, #512	; 0x200
   827ae:	6013      	str	r3, [r2, #0]
   827b0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   827b2:	4b14      	ldr	r3, [pc, #80]	; (82804 <system_init_flash+0x7c>)
   827b4:	4298      	cmp	r0, r3
   827b6:	d807      	bhi.n	827c8 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   827b8:	f44f 7300 	mov.w	r3, #512	; 0x200
   827bc:	4a0f      	ldr	r2, [pc, #60]	; (827fc <system_init_flash+0x74>)
   827be:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   827c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   827c4:	6013      	str	r3, [r2, #0]
   827c6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   827c8:	4b0f      	ldr	r3, [pc, #60]	; (82808 <system_init_flash+0x80>)
   827ca:	4298      	cmp	r0, r3
   827cc:	d807      	bhi.n	827de <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   827ce:	f44f 7340 	mov.w	r3, #768	; 0x300
   827d2:	4a0a      	ldr	r2, [pc, #40]	; (827fc <system_init_flash+0x74>)
   827d4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   827d6:	f502 7200 	add.w	r2, r2, #512	; 0x200
   827da:	6013      	str	r3, [r2, #0]
   827dc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   827de:	4b0b      	ldr	r3, [pc, #44]	; (8280c <system_init_flash+0x84>)
   827e0:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   827e2:	bf94      	ite	ls
   827e4:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   827e8:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   827ec:	4a03      	ldr	r2, [pc, #12]	; (827fc <system_init_flash+0x74>)
   827ee:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   827f0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   827f4:	6013      	str	r3, [r2, #0]
   827f6:	4770      	bx	lr
   827f8:	0121eabf 	.word	0x0121eabf
   827fc:	400e0a00 	.word	0x400e0a00
   82800:	02faf07f 	.word	0x02faf07f
   82804:	03d08fff 	.word	0x03d08fff
   82808:	04c4b3ff 	.word	0x04c4b3ff
   8280c:	055d4a7f 	.word	0x055d4a7f

00082810 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82810:	4b09      	ldr	r3, [pc, #36]	; (82838 <_sbrk+0x28>)
   82812:	681b      	ldr	r3, [r3, #0]
   82814:	b913      	cbnz	r3, 8281c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82816:	4a09      	ldr	r2, [pc, #36]	; (8283c <_sbrk+0x2c>)
   82818:	4b07      	ldr	r3, [pc, #28]	; (82838 <_sbrk+0x28>)
   8281a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8281c:	4b06      	ldr	r3, [pc, #24]	; (82838 <_sbrk+0x28>)
   8281e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82820:	181a      	adds	r2, r3, r0
   82822:	4907      	ldr	r1, [pc, #28]	; (82840 <_sbrk+0x30>)
   82824:	4291      	cmp	r1, r2
   82826:	db04      	blt.n	82832 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82828:	4610      	mov	r0, r2
   8282a:	4a03      	ldr	r2, [pc, #12]	; (82838 <_sbrk+0x28>)
   8282c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8282e:	4618      	mov	r0, r3
   82830:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82832:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82836:	4770      	bx	lr
   82838:	2007abd4 	.word	0x2007abd4
   8283c:	2007cc48 	.word	0x2007cc48
   82840:	20087ffc 	.word	0x20087ffc

00082844 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82844:	f04f 30ff 	mov.w	r0, #4294967295
   82848:	4770      	bx	lr
   8284a:	bf00      	nop

0008284c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8284c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82850:	604b      	str	r3, [r1, #4]

	return 0;
}
   82852:	2000      	movs	r0, #0
   82854:	4770      	bx	lr
   82856:	bf00      	nop

00082858 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82858:	2001      	movs	r0, #1
   8285a:	4770      	bx	lr

0008285c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8285c:	2000      	movs	r0, #0
   8285e:	4770      	bx	lr

00082860 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82860:	b5f0      	push	{r4, r5, r6, r7, lr}
   82862:	b083      	sub	sp, #12
   82864:	4604      	mov	r4, r0
   82866:	460d      	mov	r5, r1
	uint32_t val = 0;
   82868:	2300      	movs	r3, #0
   8286a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8286c:	4b1f      	ldr	r3, [pc, #124]	; (828ec <usart_serial_getchar+0x8c>)
   8286e:	4298      	cmp	r0, r3
   82870:	d107      	bne.n	82882 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   82872:	461f      	mov	r7, r3
   82874:	4e1e      	ldr	r6, [pc, #120]	; (828f0 <usart_serial_getchar+0x90>)
   82876:	4638      	mov	r0, r7
   82878:	4629      	mov	r1, r5
   8287a:	47b0      	blx	r6
   8287c:	2800      	cmp	r0, #0
   8287e:	d1fa      	bne.n	82876 <usart_serial_getchar+0x16>
   82880:	e019      	b.n	828b6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82882:	4b1c      	ldr	r3, [pc, #112]	; (828f4 <usart_serial_getchar+0x94>)
   82884:	4298      	cmp	r0, r3
   82886:	d109      	bne.n	8289c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   82888:	461f      	mov	r7, r3
   8288a:	4e1b      	ldr	r6, [pc, #108]	; (828f8 <usart_serial_getchar+0x98>)
   8288c:	4638      	mov	r0, r7
   8288e:	a901      	add	r1, sp, #4
   82890:	47b0      	blx	r6
   82892:	2800      	cmp	r0, #0
   82894:	d1fa      	bne.n	8288c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   82896:	9b01      	ldr	r3, [sp, #4]
   82898:	702b      	strb	r3, [r5, #0]
   8289a:	e019      	b.n	828d0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8289c:	4b17      	ldr	r3, [pc, #92]	; (828fc <usart_serial_getchar+0x9c>)
   8289e:	4298      	cmp	r0, r3
   828a0:	d109      	bne.n	828b6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   828a2:	461e      	mov	r6, r3
   828a4:	4c14      	ldr	r4, [pc, #80]	; (828f8 <usart_serial_getchar+0x98>)
   828a6:	4630      	mov	r0, r6
   828a8:	a901      	add	r1, sp, #4
   828aa:	47a0      	blx	r4
   828ac:	2800      	cmp	r0, #0
   828ae:	d1fa      	bne.n	828a6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   828b0:	9b01      	ldr	r3, [sp, #4]
   828b2:	702b      	strb	r3, [r5, #0]
   828b4:	e018      	b.n	828e8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   828b6:	4b12      	ldr	r3, [pc, #72]	; (82900 <usart_serial_getchar+0xa0>)
   828b8:	429c      	cmp	r4, r3
   828ba:	d109      	bne.n	828d0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   828bc:	461e      	mov	r6, r3
   828be:	4c0e      	ldr	r4, [pc, #56]	; (828f8 <usart_serial_getchar+0x98>)
   828c0:	4630      	mov	r0, r6
   828c2:	a901      	add	r1, sp, #4
   828c4:	47a0      	blx	r4
   828c6:	2800      	cmp	r0, #0
   828c8:	d1fa      	bne.n	828c0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   828ca:	9b01      	ldr	r3, [sp, #4]
   828cc:	702b      	strb	r3, [r5, #0]
   828ce:	e00b      	b.n	828e8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   828d0:	4b0c      	ldr	r3, [pc, #48]	; (82904 <usart_serial_getchar+0xa4>)
   828d2:	429c      	cmp	r4, r3
   828d4:	d108      	bne.n	828e8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   828d6:	461e      	mov	r6, r3
   828d8:	4c07      	ldr	r4, [pc, #28]	; (828f8 <usart_serial_getchar+0x98>)
   828da:	4630      	mov	r0, r6
   828dc:	a901      	add	r1, sp, #4
   828de:	47a0      	blx	r4
   828e0:	2800      	cmp	r0, #0
   828e2:	d1fa      	bne.n	828da <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   828e4:	9b01      	ldr	r3, [sp, #4]
   828e6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   828e8:	b003      	add	sp, #12
   828ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   828ec:	400e0800 	.word	0x400e0800
   828f0:	00082019 	.word	0x00082019
   828f4:	40098000 	.word	0x40098000
   828f8:	00082045 	.word	0x00082045
   828fc:	4009c000 	.word	0x4009c000
   82900:	400a0000 	.word	0x400a0000
   82904:	400a4000 	.word	0x400a4000

00082908 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   82908:	b570      	push	{r4, r5, r6, lr}
   8290a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8290c:	4b21      	ldr	r3, [pc, #132]	; (82994 <usart_serial_putchar+0x8c>)
   8290e:	4298      	cmp	r0, r3
   82910:	d107      	bne.n	82922 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   82912:	461e      	mov	r6, r3
   82914:	4d20      	ldr	r5, [pc, #128]	; (82998 <usart_serial_putchar+0x90>)
   82916:	4630      	mov	r0, r6
   82918:	4621      	mov	r1, r4
   8291a:	47a8      	blx	r5
   8291c:	2800      	cmp	r0, #0
   8291e:	d1fa      	bne.n	82916 <usart_serial_putchar+0xe>
   82920:	e02b      	b.n	8297a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82922:	4b1e      	ldr	r3, [pc, #120]	; (8299c <usart_serial_putchar+0x94>)
   82924:	4298      	cmp	r0, r3
   82926:	d107      	bne.n	82938 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   82928:	461e      	mov	r6, r3
   8292a:	4d1d      	ldr	r5, [pc, #116]	; (829a0 <usart_serial_putchar+0x98>)
   8292c:	4630      	mov	r0, r6
   8292e:	4621      	mov	r1, r4
   82930:	47a8      	blx	r5
   82932:	2800      	cmp	r0, #0
   82934:	d1fa      	bne.n	8292c <usart_serial_putchar+0x24>
   82936:	e022      	b.n	8297e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82938:	4b1a      	ldr	r3, [pc, #104]	; (829a4 <usart_serial_putchar+0x9c>)
   8293a:	4298      	cmp	r0, r3
   8293c:	d107      	bne.n	8294e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   8293e:	461e      	mov	r6, r3
   82940:	4d17      	ldr	r5, [pc, #92]	; (829a0 <usart_serial_putchar+0x98>)
   82942:	4630      	mov	r0, r6
   82944:	4621      	mov	r1, r4
   82946:	47a8      	blx	r5
   82948:	2800      	cmp	r0, #0
   8294a:	d1fa      	bne.n	82942 <usart_serial_putchar+0x3a>
   8294c:	e019      	b.n	82982 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8294e:	4b16      	ldr	r3, [pc, #88]	; (829a8 <usart_serial_putchar+0xa0>)
   82950:	4298      	cmp	r0, r3
   82952:	d107      	bne.n	82964 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82954:	461e      	mov	r6, r3
   82956:	4d12      	ldr	r5, [pc, #72]	; (829a0 <usart_serial_putchar+0x98>)
   82958:	4630      	mov	r0, r6
   8295a:	4621      	mov	r1, r4
   8295c:	47a8      	blx	r5
   8295e:	2800      	cmp	r0, #0
   82960:	d1fa      	bne.n	82958 <usart_serial_putchar+0x50>
   82962:	e010      	b.n	82986 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82964:	4b11      	ldr	r3, [pc, #68]	; (829ac <usart_serial_putchar+0xa4>)
   82966:	4298      	cmp	r0, r3
   82968:	d10f      	bne.n	8298a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8296a:	461e      	mov	r6, r3
   8296c:	4d0c      	ldr	r5, [pc, #48]	; (829a0 <usart_serial_putchar+0x98>)
   8296e:	4630      	mov	r0, r6
   82970:	4621      	mov	r1, r4
   82972:	47a8      	blx	r5
   82974:	2800      	cmp	r0, #0
   82976:	d1fa      	bne.n	8296e <usart_serial_putchar+0x66>
   82978:	e009      	b.n	8298e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8297a:	2001      	movs	r0, #1
   8297c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8297e:	2001      	movs	r0, #1
   82980:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82982:	2001      	movs	r0, #1
   82984:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82986:	2001      	movs	r0, #1
   82988:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8298a:	2000      	movs	r0, #0
   8298c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8298e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82990:	bd70      	pop	{r4, r5, r6, pc}
   82992:	bf00      	nop
   82994:	400e0800 	.word	0x400e0800
   82998:	00082005 	.word	0x00082005
   8299c:	40098000 	.word	0x40098000
   829a0:	0008202d 	.word	0x0008202d
   829a4:	4009c000 	.word	0x4009c000
   829a8:	400a0000 	.word	0x400a0000
   829ac:	400a4000 	.word	0x400a4000

000829b0 <main>:

/************************************************************************/
/* Initiation of the program. */
/************************************************************************/
int main (void)
{
   829b0:	b530      	push	{r4, r5, lr}
   829b2:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
   829b4:	4b30      	ldr	r3, [pc, #192]	; (82a78 <main+0xc8>)
   829b6:	4798      	blx	r3
	board_init();
   829b8:	4b30      	ldr	r3, [pc, #192]	; (82a7c <main+0xcc>)
   829ba:	4798      	blx	r3
   829bc:	200b      	movs	r0, #11
   829be:	4c30      	ldr	r4, [pc, #192]	; (82a80 <main+0xd0>)
   829c0:	47a0      	blx	r4
   829c2:	200c      	movs	r0, #12
   829c4:	47a0      	blx	r4
   829c6:	200d      	movs	r0, #13
   829c8:	47a0      	blx	r4
   829ca:	200e      	movs	r0, #14
   829cc:	47a0      	blx	r4
	ioport_init();
	InitADC();
   829ce:	4b2d      	ldr	r3, [pc, #180]	; (82a84 <main+0xd4>)
   829d0:	4798      	blx	r3
   829d2:	2008      	movs	r0, #8
   829d4:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   829d6:	4d2c      	ldr	r5, [pc, #176]	; (82a88 <main+0xd8>)
   829d8:	4b2c      	ldr	r3, [pc, #176]	; (82a8c <main+0xdc>)
   829da:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   829dc:	4a2c      	ldr	r2, [pc, #176]	; (82a90 <main+0xe0>)
   829de:	4b2d      	ldr	r3, [pc, #180]	; (82a94 <main+0xe4>)
   829e0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   829e2:	4a2d      	ldr	r2, [pc, #180]	; (82a98 <main+0xe8>)
   829e4:	4b2d      	ldr	r3, [pc, #180]	; (82a9c <main+0xec>)
   829e6:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   829e8:	4b2d      	ldr	r3, [pc, #180]	; (82aa0 <main+0xf0>)
   829ea:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   829ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   829f0:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   829f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   829f6:	9307      	str	r3, [sp, #28]
   829f8:	2008      	movs	r0, #8
   829fa:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   829fc:	4628      	mov	r0, r5
   829fe:	a905      	add	r1, sp, #20
   82a00:	4b28      	ldr	r3, [pc, #160]	; (82aa4 <main+0xf4>)
   82a02:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82a04:	4d28      	ldr	r5, [pc, #160]	; (82aa8 <main+0xf8>)
   82a06:	682b      	ldr	r3, [r5, #0]
   82a08:	6898      	ldr	r0, [r3, #8]
   82a0a:	2100      	movs	r1, #0
   82a0c:	4c27      	ldr	r4, [pc, #156]	; (82aac <main+0xfc>)
   82a0e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82a10:	682b      	ldr	r3, [r5, #0]
   82a12:	6858      	ldr	r0, [r3, #4]
   82a14:	2100      	movs	r1, #0
   82a16:	47a0      	blx	r4
	/* Konfigurera konsol UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	/* Specifiera att stdout inte ska buffras */
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   82a18:	682b      	ldr	r3, [r5, #0]
   82a1a:	6898      	ldr	r0, [r3, #8]
   82a1c:	2100      	movs	r1, #0
   82a1e:	47a0      	blx	r4
	sysclk_init();
	board_init();
	ioport_init();
	InitADC();
	ConfigureConsole();
	InitPWM();
   82a20:	4b23      	ldr	r3, [pc, #140]	; (82ab0 <main+0x100>)
   82a22:	4798      	blx	r3
	setupUART();
   82a24:	4b23      	ldr	r3, [pc, #140]	; (82ab4 <main+0x104>)
   82a26:	4798      	blx	r3
	
	/************************************************************************/
	/* First task that handles the PID-regulation. The task with highest priority. */
	/************************************************************************/
	if (xTaskCreate(taskModulate, (const signed char * const) "taskModulate", 1024, NULL, 2, NULL) != pdPASS){
   82a28:	2302      	movs	r3, #2
   82a2a:	9300      	str	r3, [sp, #0]
   82a2c:	2300      	movs	r3, #0
   82a2e:	9301      	str	r3, [sp, #4]
   82a30:	9302      	str	r3, [sp, #8]
   82a32:	9303      	str	r3, [sp, #12]
   82a34:	4820      	ldr	r0, [pc, #128]	; (82ab8 <main+0x108>)
   82a36:	4921      	ldr	r1, [pc, #132]	; (82abc <main+0x10c>)
   82a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82a3c:	4c20      	ldr	r4, [pc, #128]	; (82ac0 <main+0x110>)
   82a3e:	47a0      	blx	r4
   82a40:	2801      	cmp	r0, #1
   82a42:	d002      	beq.n	82a4a <main+0x9a>
		printf("Failed to create taskModulate\n");
   82a44:	481f      	ldr	r0, [pc, #124]	; (82ac4 <main+0x114>)
   82a46:	4b20      	ldr	r3, [pc, #128]	; (82ac8 <main+0x118>)
   82a48:	4798      	blx	r3
	}
	/************************************************************************/
	/* Second task that handles the communication to Matlab. The task with lowest priority. */
	/************************************************************************/
	if (xTaskCreate(taskSendToMatlab, (const signed char * const) "taskSendToMatlab", 1024, NULL, 1, NULL) != pdPASS){
   82a4a:	2301      	movs	r3, #1
   82a4c:	9300      	str	r3, [sp, #0]
   82a4e:	2300      	movs	r3, #0
   82a50:	9301      	str	r3, [sp, #4]
   82a52:	9302      	str	r3, [sp, #8]
   82a54:	9303      	str	r3, [sp, #12]
   82a56:	481d      	ldr	r0, [pc, #116]	; (82acc <main+0x11c>)
   82a58:	491d      	ldr	r1, [pc, #116]	; (82ad0 <main+0x120>)
   82a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82a5e:	4c18      	ldr	r4, [pc, #96]	; (82ac0 <main+0x110>)
   82a60:	47a0      	blx	r4
   82a62:	2801      	cmp	r0, #1
   82a64:	d002      	beq.n	82a6c <main+0xbc>
		printf("Failed to create taskSendToMatlab\n");
   82a66:	481b      	ldr	r0, [pc, #108]	; (82ad4 <main+0x124>)
   82a68:	4b17      	ldr	r3, [pc, #92]	; (82ac8 <main+0x118>)
   82a6a:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
   82a6c:	4b1a      	ldr	r3, [pc, #104]	; (82ad8 <main+0x128>)
   82a6e:	4798      	blx	r3
}
   82a70:	2000      	movs	r0, #0
   82a72:	b009      	add	sp, #36	; 0x24
   82a74:	bd30      	pop	{r4, r5, pc}
   82a76:	bf00      	nop
   82a78:	0008205d 	.word	0x0008205d
   82a7c:	000820c1 	.word	0x000820c1
   82a80:	00082561 	.word	0x00082561
   82a84:	000801a5 	.word	0x000801a5
   82a88:	400e0800 	.word	0x400e0800
   82a8c:	2007ac3c 	.word	0x2007ac3c
   82a90:	00082909 	.word	0x00082909
   82a94:	2007ac38 	.word	0x2007ac38
   82a98:	00082861 	.word	0x00082861
   82a9c:	2007ac0c 	.word	0x2007ac0c
   82aa0:	0501bd00 	.word	0x0501bd00
   82aa4:	00081fcd 	.word	0x00081fcd
   82aa8:	20070010 	.word	0x20070010
   82aac:	000833ef 	.word	0x000833ef
   82ab0:	00080429 	.word	0x00080429
   82ab4:	00080301 	.word	0x00080301
   82ab8:	000804f1 	.word	0x000804f1
   82abc:	00088a7c 	.word	0x00088a7c
   82ac0:	000810f1 	.word	0x000810f1
   82ac4:	00088a8c 	.word	0x00088a8c
   82ac8:	0008334d 	.word	0x0008334d
   82acc:	00080711 	.word	0x00080711
   82ad0:	00088aac 	.word	0x00088aac
   82ad4:	00088ac0 	.word	0x00088ac0
   82ad8:	000812f9 	.word	0x000812f9

00082adc <__aeabi_drsub>:
   82adc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82ae0:	e002      	b.n	82ae8 <__adddf3>
   82ae2:	bf00      	nop

00082ae4 <__aeabi_dsub>:
   82ae4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082ae8 <__adddf3>:
   82ae8:	b530      	push	{r4, r5, lr}
   82aea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82aee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82af2:	ea94 0f05 	teq	r4, r5
   82af6:	bf08      	it	eq
   82af8:	ea90 0f02 	teqeq	r0, r2
   82afc:	bf1f      	itttt	ne
   82afe:	ea54 0c00 	orrsne.w	ip, r4, r0
   82b02:	ea55 0c02 	orrsne.w	ip, r5, r2
   82b06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82b0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82b0e:	f000 80e2 	beq.w	82cd6 <__adddf3+0x1ee>
   82b12:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82b16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82b1a:	bfb8      	it	lt
   82b1c:	426d      	neglt	r5, r5
   82b1e:	dd0c      	ble.n	82b3a <__adddf3+0x52>
   82b20:	442c      	add	r4, r5
   82b22:	ea80 0202 	eor.w	r2, r0, r2
   82b26:	ea81 0303 	eor.w	r3, r1, r3
   82b2a:	ea82 0000 	eor.w	r0, r2, r0
   82b2e:	ea83 0101 	eor.w	r1, r3, r1
   82b32:	ea80 0202 	eor.w	r2, r0, r2
   82b36:	ea81 0303 	eor.w	r3, r1, r3
   82b3a:	2d36      	cmp	r5, #54	; 0x36
   82b3c:	bf88      	it	hi
   82b3e:	bd30      	pophi	{r4, r5, pc}
   82b40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82b44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82b48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82b4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82b50:	d002      	beq.n	82b58 <__adddf3+0x70>
   82b52:	4240      	negs	r0, r0
   82b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82b58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82b5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82b60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82b64:	d002      	beq.n	82b6c <__adddf3+0x84>
   82b66:	4252      	negs	r2, r2
   82b68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82b6c:	ea94 0f05 	teq	r4, r5
   82b70:	f000 80a7 	beq.w	82cc2 <__adddf3+0x1da>
   82b74:	f1a4 0401 	sub.w	r4, r4, #1
   82b78:	f1d5 0e20 	rsbs	lr, r5, #32
   82b7c:	db0d      	blt.n	82b9a <__adddf3+0xb2>
   82b7e:	fa02 fc0e 	lsl.w	ip, r2, lr
   82b82:	fa22 f205 	lsr.w	r2, r2, r5
   82b86:	1880      	adds	r0, r0, r2
   82b88:	f141 0100 	adc.w	r1, r1, #0
   82b8c:	fa03 f20e 	lsl.w	r2, r3, lr
   82b90:	1880      	adds	r0, r0, r2
   82b92:	fa43 f305 	asr.w	r3, r3, r5
   82b96:	4159      	adcs	r1, r3
   82b98:	e00e      	b.n	82bb8 <__adddf3+0xd0>
   82b9a:	f1a5 0520 	sub.w	r5, r5, #32
   82b9e:	f10e 0e20 	add.w	lr, lr, #32
   82ba2:	2a01      	cmp	r2, #1
   82ba4:	fa03 fc0e 	lsl.w	ip, r3, lr
   82ba8:	bf28      	it	cs
   82baa:	f04c 0c02 	orrcs.w	ip, ip, #2
   82bae:	fa43 f305 	asr.w	r3, r3, r5
   82bb2:	18c0      	adds	r0, r0, r3
   82bb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82bb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82bbc:	d507      	bpl.n	82bce <__adddf3+0xe6>
   82bbe:	f04f 0e00 	mov.w	lr, #0
   82bc2:	f1dc 0c00 	rsbs	ip, ip, #0
   82bc6:	eb7e 0000 	sbcs.w	r0, lr, r0
   82bca:	eb6e 0101 	sbc.w	r1, lr, r1
   82bce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82bd2:	d31b      	bcc.n	82c0c <__adddf3+0x124>
   82bd4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82bd8:	d30c      	bcc.n	82bf4 <__adddf3+0x10c>
   82bda:	0849      	lsrs	r1, r1, #1
   82bdc:	ea5f 0030 	movs.w	r0, r0, rrx
   82be0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82be4:	f104 0401 	add.w	r4, r4, #1
   82be8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82bec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82bf0:	f080 809a 	bcs.w	82d28 <__adddf3+0x240>
   82bf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82bf8:	bf08      	it	eq
   82bfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82bfe:	f150 0000 	adcs.w	r0, r0, #0
   82c02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82c06:	ea41 0105 	orr.w	r1, r1, r5
   82c0a:	bd30      	pop	{r4, r5, pc}
   82c0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82c10:	4140      	adcs	r0, r0
   82c12:	eb41 0101 	adc.w	r1, r1, r1
   82c16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82c1a:	f1a4 0401 	sub.w	r4, r4, #1
   82c1e:	d1e9      	bne.n	82bf4 <__adddf3+0x10c>
   82c20:	f091 0f00 	teq	r1, #0
   82c24:	bf04      	itt	eq
   82c26:	4601      	moveq	r1, r0
   82c28:	2000      	moveq	r0, #0
   82c2a:	fab1 f381 	clz	r3, r1
   82c2e:	bf08      	it	eq
   82c30:	3320      	addeq	r3, #32
   82c32:	f1a3 030b 	sub.w	r3, r3, #11
   82c36:	f1b3 0220 	subs.w	r2, r3, #32
   82c3a:	da0c      	bge.n	82c56 <__adddf3+0x16e>
   82c3c:	320c      	adds	r2, #12
   82c3e:	dd08      	ble.n	82c52 <__adddf3+0x16a>
   82c40:	f102 0c14 	add.w	ip, r2, #20
   82c44:	f1c2 020c 	rsb	r2, r2, #12
   82c48:	fa01 f00c 	lsl.w	r0, r1, ip
   82c4c:	fa21 f102 	lsr.w	r1, r1, r2
   82c50:	e00c      	b.n	82c6c <__adddf3+0x184>
   82c52:	f102 0214 	add.w	r2, r2, #20
   82c56:	bfd8      	it	le
   82c58:	f1c2 0c20 	rsble	ip, r2, #32
   82c5c:	fa01 f102 	lsl.w	r1, r1, r2
   82c60:	fa20 fc0c 	lsr.w	ip, r0, ip
   82c64:	bfdc      	itt	le
   82c66:	ea41 010c 	orrle.w	r1, r1, ip
   82c6a:	4090      	lslle	r0, r2
   82c6c:	1ae4      	subs	r4, r4, r3
   82c6e:	bfa2      	ittt	ge
   82c70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82c74:	4329      	orrge	r1, r5
   82c76:	bd30      	popge	{r4, r5, pc}
   82c78:	ea6f 0404 	mvn.w	r4, r4
   82c7c:	3c1f      	subs	r4, #31
   82c7e:	da1c      	bge.n	82cba <__adddf3+0x1d2>
   82c80:	340c      	adds	r4, #12
   82c82:	dc0e      	bgt.n	82ca2 <__adddf3+0x1ba>
   82c84:	f104 0414 	add.w	r4, r4, #20
   82c88:	f1c4 0220 	rsb	r2, r4, #32
   82c8c:	fa20 f004 	lsr.w	r0, r0, r4
   82c90:	fa01 f302 	lsl.w	r3, r1, r2
   82c94:	ea40 0003 	orr.w	r0, r0, r3
   82c98:	fa21 f304 	lsr.w	r3, r1, r4
   82c9c:	ea45 0103 	orr.w	r1, r5, r3
   82ca0:	bd30      	pop	{r4, r5, pc}
   82ca2:	f1c4 040c 	rsb	r4, r4, #12
   82ca6:	f1c4 0220 	rsb	r2, r4, #32
   82caa:	fa20 f002 	lsr.w	r0, r0, r2
   82cae:	fa01 f304 	lsl.w	r3, r1, r4
   82cb2:	ea40 0003 	orr.w	r0, r0, r3
   82cb6:	4629      	mov	r1, r5
   82cb8:	bd30      	pop	{r4, r5, pc}
   82cba:	fa21 f004 	lsr.w	r0, r1, r4
   82cbe:	4629      	mov	r1, r5
   82cc0:	bd30      	pop	{r4, r5, pc}
   82cc2:	f094 0f00 	teq	r4, #0
   82cc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82cca:	bf06      	itte	eq
   82ccc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82cd0:	3401      	addeq	r4, #1
   82cd2:	3d01      	subne	r5, #1
   82cd4:	e74e      	b.n	82b74 <__adddf3+0x8c>
   82cd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82cda:	bf18      	it	ne
   82cdc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82ce0:	d029      	beq.n	82d36 <__adddf3+0x24e>
   82ce2:	ea94 0f05 	teq	r4, r5
   82ce6:	bf08      	it	eq
   82ce8:	ea90 0f02 	teqeq	r0, r2
   82cec:	d005      	beq.n	82cfa <__adddf3+0x212>
   82cee:	ea54 0c00 	orrs.w	ip, r4, r0
   82cf2:	bf04      	itt	eq
   82cf4:	4619      	moveq	r1, r3
   82cf6:	4610      	moveq	r0, r2
   82cf8:	bd30      	pop	{r4, r5, pc}
   82cfa:	ea91 0f03 	teq	r1, r3
   82cfe:	bf1e      	ittt	ne
   82d00:	2100      	movne	r1, #0
   82d02:	2000      	movne	r0, #0
   82d04:	bd30      	popne	{r4, r5, pc}
   82d06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82d0a:	d105      	bne.n	82d18 <__adddf3+0x230>
   82d0c:	0040      	lsls	r0, r0, #1
   82d0e:	4149      	adcs	r1, r1
   82d10:	bf28      	it	cs
   82d12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82d16:	bd30      	pop	{r4, r5, pc}
   82d18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82d1c:	bf3c      	itt	cc
   82d1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82d22:	bd30      	popcc	{r4, r5, pc}
   82d24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82d28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82d2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82d30:	f04f 0000 	mov.w	r0, #0
   82d34:	bd30      	pop	{r4, r5, pc}
   82d36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82d3a:	bf1a      	itte	ne
   82d3c:	4619      	movne	r1, r3
   82d3e:	4610      	movne	r0, r2
   82d40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82d44:	bf1c      	itt	ne
   82d46:	460b      	movne	r3, r1
   82d48:	4602      	movne	r2, r0
   82d4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82d4e:	bf06      	itte	eq
   82d50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82d54:	ea91 0f03 	teqeq	r1, r3
   82d58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82d5c:	bd30      	pop	{r4, r5, pc}
   82d5e:	bf00      	nop

00082d60 <__aeabi_ui2d>:
   82d60:	f090 0f00 	teq	r0, #0
   82d64:	bf04      	itt	eq
   82d66:	2100      	moveq	r1, #0
   82d68:	4770      	bxeq	lr
   82d6a:	b530      	push	{r4, r5, lr}
   82d6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82d70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82d74:	f04f 0500 	mov.w	r5, #0
   82d78:	f04f 0100 	mov.w	r1, #0
   82d7c:	e750      	b.n	82c20 <__adddf3+0x138>
   82d7e:	bf00      	nop

00082d80 <__aeabi_i2d>:
   82d80:	f090 0f00 	teq	r0, #0
   82d84:	bf04      	itt	eq
   82d86:	2100      	moveq	r1, #0
   82d88:	4770      	bxeq	lr
   82d8a:	b530      	push	{r4, r5, lr}
   82d8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82d90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82d94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82d98:	bf48      	it	mi
   82d9a:	4240      	negmi	r0, r0
   82d9c:	f04f 0100 	mov.w	r1, #0
   82da0:	e73e      	b.n	82c20 <__adddf3+0x138>
   82da2:	bf00      	nop

00082da4 <__aeabi_f2d>:
   82da4:	0042      	lsls	r2, r0, #1
   82da6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82daa:	ea4f 0131 	mov.w	r1, r1, rrx
   82dae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82db2:	bf1f      	itttt	ne
   82db4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82db8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82dbc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82dc0:	4770      	bxne	lr
   82dc2:	f092 0f00 	teq	r2, #0
   82dc6:	bf14      	ite	ne
   82dc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82dcc:	4770      	bxeq	lr
   82dce:	b530      	push	{r4, r5, lr}
   82dd0:	f44f 7460 	mov.w	r4, #896	; 0x380
   82dd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82dd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82ddc:	e720      	b.n	82c20 <__adddf3+0x138>
   82dde:	bf00      	nop

00082de0 <__aeabi_ul2d>:
   82de0:	ea50 0201 	orrs.w	r2, r0, r1
   82de4:	bf08      	it	eq
   82de6:	4770      	bxeq	lr
   82de8:	b530      	push	{r4, r5, lr}
   82dea:	f04f 0500 	mov.w	r5, #0
   82dee:	e00a      	b.n	82e06 <__aeabi_l2d+0x16>

00082df0 <__aeabi_l2d>:
   82df0:	ea50 0201 	orrs.w	r2, r0, r1
   82df4:	bf08      	it	eq
   82df6:	4770      	bxeq	lr
   82df8:	b530      	push	{r4, r5, lr}
   82dfa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82dfe:	d502      	bpl.n	82e06 <__aeabi_l2d+0x16>
   82e00:	4240      	negs	r0, r0
   82e02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82e06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82e0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82e0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82e12:	f43f aedc 	beq.w	82bce <__adddf3+0xe6>
   82e16:	f04f 0203 	mov.w	r2, #3
   82e1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82e1e:	bf18      	it	ne
   82e20:	3203      	addne	r2, #3
   82e22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82e26:	bf18      	it	ne
   82e28:	3203      	addne	r2, #3
   82e2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82e2e:	f1c2 0320 	rsb	r3, r2, #32
   82e32:	fa00 fc03 	lsl.w	ip, r0, r3
   82e36:	fa20 f002 	lsr.w	r0, r0, r2
   82e3a:	fa01 fe03 	lsl.w	lr, r1, r3
   82e3e:	ea40 000e 	orr.w	r0, r0, lr
   82e42:	fa21 f102 	lsr.w	r1, r1, r2
   82e46:	4414      	add	r4, r2
   82e48:	e6c1      	b.n	82bce <__adddf3+0xe6>
   82e4a:	bf00      	nop

00082e4c <__aeabi_dmul>:
   82e4c:	b570      	push	{r4, r5, r6, lr}
   82e4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82e52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82e56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82e5a:	bf1d      	ittte	ne
   82e5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82e60:	ea94 0f0c 	teqne	r4, ip
   82e64:	ea95 0f0c 	teqne	r5, ip
   82e68:	f000 f8de 	bleq	83028 <__aeabi_dmul+0x1dc>
   82e6c:	442c      	add	r4, r5
   82e6e:	ea81 0603 	eor.w	r6, r1, r3
   82e72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82e76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82e7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82e7e:	bf18      	it	ne
   82e80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82e84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82e8c:	d038      	beq.n	82f00 <__aeabi_dmul+0xb4>
   82e8e:	fba0 ce02 	umull	ip, lr, r0, r2
   82e92:	f04f 0500 	mov.w	r5, #0
   82e96:	fbe1 e502 	umlal	lr, r5, r1, r2
   82e9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82e9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   82ea2:	f04f 0600 	mov.w	r6, #0
   82ea6:	fbe1 5603 	umlal	r5, r6, r1, r3
   82eaa:	f09c 0f00 	teq	ip, #0
   82eae:	bf18      	it	ne
   82eb0:	f04e 0e01 	orrne.w	lr, lr, #1
   82eb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82eb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82ebc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82ec0:	d204      	bcs.n	82ecc <__aeabi_dmul+0x80>
   82ec2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82ec6:	416d      	adcs	r5, r5
   82ec8:	eb46 0606 	adc.w	r6, r6, r6
   82ecc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   82ed0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82ed4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82ed8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82edc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   82ee0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82ee4:	bf88      	it	hi
   82ee6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82eea:	d81e      	bhi.n	82f2a <__aeabi_dmul+0xde>
   82eec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   82ef0:	bf08      	it	eq
   82ef2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82ef6:	f150 0000 	adcs.w	r0, r0, #0
   82efa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82efe:	bd70      	pop	{r4, r5, r6, pc}
   82f00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82f04:	ea46 0101 	orr.w	r1, r6, r1
   82f08:	ea40 0002 	orr.w	r0, r0, r2
   82f0c:	ea81 0103 	eor.w	r1, r1, r3
   82f10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82f14:	bfc2      	ittt	gt
   82f16:	ebd4 050c 	rsbsgt	r5, r4, ip
   82f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82f1e:	bd70      	popgt	{r4, r5, r6, pc}
   82f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82f24:	f04f 0e00 	mov.w	lr, #0
   82f28:	3c01      	subs	r4, #1
   82f2a:	f300 80ab 	bgt.w	83084 <__aeabi_dmul+0x238>
   82f2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82f32:	bfde      	ittt	le
   82f34:	2000      	movle	r0, #0
   82f36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82f3a:	bd70      	pople	{r4, r5, r6, pc}
   82f3c:	f1c4 0400 	rsb	r4, r4, #0
   82f40:	3c20      	subs	r4, #32
   82f42:	da35      	bge.n	82fb0 <__aeabi_dmul+0x164>
   82f44:	340c      	adds	r4, #12
   82f46:	dc1b      	bgt.n	82f80 <__aeabi_dmul+0x134>
   82f48:	f104 0414 	add.w	r4, r4, #20
   82f4c:	f1c4 0520 	rsb	r5, r4, #32
   82f50:	fa00 f305 	lsl.w	r3, r0, r5
   82f54:	fa20 f004 	lsr.w	r0, r0, r4
   82f58:	fa01 f205 	lsl.w	r2, r1, r5
   82f5c:	ea40 0002 	orr.w	r0, r0, r2
   82f60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82f64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82f68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82f6c:	fa21 f604 	lsr.w	r6, r1, r4
   82f70:	eb42 0106 	adc.w	r1, r2, r6
   82f74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82f78:	bf08      	it	eq
   82f7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82f7e:	bd70      	pop	{r4, r5, r6, pc}
   82f80:	f1c4 040c 	rsb	r4, r4, #12
   82f84:	f1c4 0520 	rsb	r5, r4, #32
   82f88:	fa00 f304 	lsl.w	r3, r0, r4
   82f8c:	fa20 f005 	lsr.w	r0, r0, r5
   82f90:	fa01 f204 	lsl.w	r2, r1, r4
   82f94:	ea40 0002 	orr.w	r0, r0, r2
   82f98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82f9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82fa0:	f141 0100 	adc.w	r1, r1, #0
   82fa4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82fa8:	bf08      	it	eq
   82faa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82fae:	bd70      	pop	{r4, r5, r6, pc}
   82fb0:	f1c4 0520 	rsb	r5, r4, #32
   82fb4:	fa00 f205 	lsl.w	r2, r0, r5
   82fb8:	ea4e 0e02 	orr.w	lr, lr, r2
   82fbc:	fa20 f304 	lsr.w	r3, r0, r4
   82fc0:	fa01 f205 	lsl.w	r2, r1, r5
   82fc4:	ea43 0302 	orr.w	r3, r3, r2
   82fc8:	fa21 f004 	lsr.w	r0, r1, r4
   82fcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82fd0:	fa21 f204 	lsr.w	r2, r1, r4
   82fd4:	ea20 0002 	bic.w	r0, r0, r2
   82fd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82fdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82fe0:	bf08      	it	eq
   82fe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82fe6:	bd70      	pop	{r4, r5, r6, pc}
   82fe8:	f094 0f00 	teq	r4, #0
   82fec:	d10f      	bne.n	8300e <__aeabi_dmul+0x1c2>
   82fee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82ff2:	0040      	lsls	r0, r0, #1
   82ff4:	eb41 0101 	adc.w	r1, r1, r1
   82ff8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82ffc:	bf08      	it	eq
   82ffe:	3c01      	subeq	r4, #1
   83000:	d0f7      	beq.n	82ff2 <__aeabi_dmul+0x1a6>
   83002:	ea41 0106 	orr.w	r1, r1, r6
   83006:	f095 0f00 	teq	r5, #0
   8300a:	bf18      	it	ne
   8300c:	4770      	bxne	lr
   8300e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83012:	0052      	lsls	r2, r2, #1
   83014:	eb43 0303 	adc.w	r3, r3, r3
   83018:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8301c:	bf08      	it	eq
   8301e:	3d01      	subeq	r5, #1
   83020:	d0f7      	beq.n	83012 <__aeabi_dmul+0x1c6>
   83022:	ea43 0306 	orr.w	r3, r3, r6
   83026:	4770      	bx	lr
   83028:	ea94 0f0c 	teq	r4, ip
   8302c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83030:	bf18      	it	ne
   83032:	ea95 0f0c 	teqne	r5, ip
   83036:	d00c      	beq.n	83052 <__aeabi_dmul+0x206>
   83038:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8303c:	bf18      	it	ne
   8303e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83042:	d1d1      	bne.n	82fe8 <__aeabi_dmul+0x19c>
   83044:	ea81 0103 	eor.w	r1, r1, r3
   83048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8304c:	f04f 0000 	mov.w	r0, #0
   83050:	bd70      	pop	{r4, r5, r6, pc}
   83052:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83056:	bf06      	itte	eq
   83058:	4610      	moveq	r0, r2
   8305a:	4619      	moveq	r1, r3
   8305c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83060:	d019      	beq.n	83096 <__aeabi_dmul+0x24a>
   83062:	ea94 0f0c 	teq	r4, ip
   83066:	d102      	bne.n	8306e <__aeabi_dmul+0x222>
   83068:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8306c:	d113      	bne.n	83096 <__aeabi_dmul+0x24a>
   8306e:	ea95 0f0c 	teq	r5, ip
   83072:	d105      	bne.n	83080 <__aeabi_dmul+0x234>
   83074:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83078:	bf1c      	itt	ne
   8307a:	4610      	movne	r0, r2
   8307c:	4619      	movne	r1, r3
   8307e:	d10a      	bne.n	83096 <__aeabi_dmul+0x24a>
   83080:	ea81 0103 	eor.w	r1, r1, r3
   83084:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83088:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8308c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83090:	f04f 0000 	mov.w	r0, #0
   83094:	bd70      	pop	{r4, r5, r6, pc}
   83096:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8309a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8309e:	bd70      	pop	{r4, r5, r6, pc}

000830a0 <__aeabi_ddiv>:
   830a0:	b570      	push	{r4, r5, r6, lr}
   830a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   830a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   830aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   830ae:	bf1d      	ittte	ne
   830b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   830b4:	ea94 0f0c 	teqne	r4, ip
   830b8:	ea95 0f0c 	teqne	r5, ip
   830bc:	f000 f8a7 	bleq	8320e <__aeabi_ddiv+0x16e>
   830c0:	eba4 0405 	sub.w	r4, r4, r5
   830c4:	ea81 0e03 	eor.w	lr, r1, r3
   830c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   830cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   830d0:	f000 8088 	beq.w	831e4 <__aeabi_ddiv+0x144>
   830d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   830d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   830dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   830e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   830e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   830e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   830ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   830f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   830f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   830f8:	429d      	cmp	r5, r3
   830fa:	bf08      	it	eq
   830fc:	4296      	cmpeq	r6, r2
   830fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83102:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83106:	d202      	bcs.n	8310e <__aeabi_ddiv+0x6e>
   83108:	085b      	lsrs	r3, r3, #1
   8310a:	ea4f 0232 	mov.w	r2, r2, rrx
   8310e:	1ab6      	subs	r6, r6, r2
   83110:	eb65 0503 	sbc.w	r5, r5, r3
   83114:	085b      	lsrs	r3, r3, #1
   83116:	ea4f 0232 	mov.w	r2, r2, rrx
   8311a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8311e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83122:	ebb6 0e02 	subs.w	lr, r6, r2
   83126:	eb75 0e03 	sbcs.w	lr, r5, r3
   8312a:	bf22      	ittt	cs
   8312c:	1ab6      	subcs	r6, r6, r2
   8312e:	4675      	movcs	r5, lr
   83130:	ea40 000c 	orrcs.w	r0, r0, ip
   83134:	085b      	lsrs	r3, r3, #1
   83136:	ea4f 0232 	mov.w	r2, r2, rrx
   8313a:	ebb6 0e02 	subs.w	lr, r6, r2
   8313e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83142:	bf22      	ittt	cs
   83144:	1ab6      	subcs	r6, r6, r2
   83146:	4675      	movcs	r5, lr
   83148:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8314c:	085b      	lsrs	r3, r3, #1
   8314e:	ea4f 0232 	mov.w	r2, r2, rrx
   83152:	ebb6 0e02 	subs.w	lr, r6, r2
   83156:	eb75 0e03 	sbcs.w	lr, r5, r3
   8315a:	bf22      	ittt	cs
   8315c:	1ab6      	subcs	r6, r6, r2
   8315e:	4675      	movcs	r5, lr
   83160:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83164:	085b      	lsrs	r3, r3, #1
   83166:	ea4f 0232 	mov.w	r2, r2, rrx
   8316a:	ebb6 0e02 	subs.w	lr, r6, r2
   8316e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83172:	bf22      	ittt	cs
   83174:	1ab6      	subcs	r6, r6, r2
   83176:	4675      	movcs	r5, lr
   83178:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8317c:	ea55 0e06 	orrs.w	lr, r5, r6
   83180:	d018      	beq.n	831b4 <__aeabi_ddiv+0x114>
   83182:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83186:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8318a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8318e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83192:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83196:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8319a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8319e:	d1c0      	bne.n	83122 <__aeabi_ddiv+0x82>
   831a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   831a4:	d10b      	bne.n	831be <__aeabi_ddiv+0x11e>
   831a6:	ea41 0100 	orr.w	r1, r1, r0
   831aa:	f04f 0000 	mov.w	r0, #0
   831ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   831b2:	e7b6      	b.n	83122 <__aeabi_ddiv+0x82>
   831b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   831b8:	bf04      	itt	eq
   831ba:	4301      	orreq	r1, r0
   831bc:	2000      	moveq	r0, #0
   831be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   831c2:	bf88      	it	hi
   831c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   831c8:	f63f aeaf 	bhi.w	82f2a <__aeabi_dmul+0xde>
   831cc:	ebb5 0c03 	subs.w	ip, r5, r3
   831d0:	bf04      	itt	eq
   831d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   831d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   831da:	f150 0000 	adcs.w	r0, r0, #0
   831de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   831e2:	bd70      	pop	{r4, r5, r6, pc}
   831e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   831e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   831ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   831f0:	bfc2      	ittt	gt
   831f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   831f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   831fa:	bd70      	popgt	{r4, r5, r6, pc}
   831fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83200:	f04f 0e00 	mov.w	lr, #0
   83204:	3c01      	subs	r4, #1
   83206:	e690      	b.n	82f2a <__aeabi_dmul+0xde>
   83208:	ea45 0e06 	orr.w	lr, r5, r6
   8320c:	e68d      	b.n	82f2a <__aeabi_dmul+0xde>
   8320e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83212:	ea94 0f0c 	teq	r4, ip
   83216:	bf08      	it	eq
   83218:	ea95 0f0c 	teqeq	r5, ip
   8321c:	f43f af3b 	beq.w	83096 <__aeabi_dmul+0x24a>
   83220:	ea94 0f0c 	teq	r4, ip
   83224:	d10a      	bne.n	8323c <__aeabi_ddiv+0x19c>
   83226:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8322a:	f47f af34 	bne.w	83096 <__aeabi_dmul+0x24a>
   8322e:	ea95 0f0c 	teq	r5, ip
   83232:	f47f af25 	bne.w	83080 <__aeabi_dmul+0x234>
   83236:	4610      	mov	r0, r2
   83238:	4619      	mov	r1, r3
   8323a:	e72c      	b.n	83096 <__aeabi_dmul+0x24a>
   8323c:	ea95 0f0c 	teq	r5, ip
   83240:	d106      	bne.n	83250 <__aeabi_ddiv+0x1b0>
   83242:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83246:	f43f aefd 	beq.w	83044 <__aeabi_dmul+0x1f8>
   8324a:	4610      	mov	r0, r2
   8324c:	4619      	mov	r1, r3
   8324e:	e722      	b.n	83096 <__aeabi_dmul+0x24a>
   83250:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83254:	bf18      	it	ne
   83256:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8325a:	f47f aec5 	bne.w	82fe8 <__aeabi_dmul+0x19c>
   8325e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83262:	f47f af0d 	bne.w	83080 <__aeabi_dmul+0x234>
   83266:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8326a:	f47f aeeb 	bne.w	83044 <__aeabi_dmul+0x1f8>
   8326e:	e712      	b.n	83096 <__aeabi_dmul+0x24a>

00083270 <__aeabi_d2iz>:
   83270:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83274:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83278:	d215      	bcs.n	832a6 <__aeabi_d2iz+0x36>
   8327a:	d511      	bpl.n	832a0 <__aeabi_d2iz+0x30>
   8327c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83280:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83284:	d912      	bls.n	832ac <__aeabi_d2iz+0x3c>
   83286:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8328a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8328e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83292:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83296:	fa23 f002 	lsr.w	r0, r3, r2
   8329a:	bf18      	it	ne
   8329c:	4240      	negne	r0, r0
   8329e:	4770      	bx	lr
   832a0:	f04f 0000 	mov.w	r0, #0
   832a4:	4770      	bx	lr
   832a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   832aa:	d105      	bne.n	832b8 <__aeabi_d2iz+0x48>
   832ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   832b0:	bf08      	it	eq
   832b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   832b6:	4770      	bx	lr
   832b8:	f04f 0000 	mov.w	r0, #0
   832bc:	4770      	bx	lr
   832be:	bf00      	nop

000832c0 <atexit>:
   832c0:	4601      	mov	r1, r0
   832c2:	2000      	movs	r0, #0
   832c4:	4602      	mov	r2, r0
   832c6:	4603      	mov	r3, r0
   832c8:	f002 b896 	b.w	853f8 <__register_exitproc>

000832cc <atof>:
   832cc:	2100      	movs	r1, #0
   832ce:	f000 bf8b 	b.w	841e8 <strtod>
	...

000832d4 <__libc_fini_array>:
   832d4:	b538      	push	{r3, r4, r5, lr}
   832d6:	4d08      	ldr	r5, [pc, #32]	; (832f8 <__libc_fini_array+0x24>)
   832d8:	4c08      	ldr	r4, [pc, #32]	; (832fc <__libc_fini_array+0x28>)
   832da:	1b64      	subs	r4, r4, r5
   832dc:	10a4      	asrs	r4, r4, #2
   832de:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   832e2:	b124      	cbz	r4, 832ee <__libc_fini_array+0x1a>
   832e4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   832e8:	3c01      	subs	r4, #1
   832ea:	4798      	blx	r3
   832ec:	e7f9      	b.n	832e2 <__libc_fini_array+0xe>
   832ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   832f2:	f005 bd83 	b.w	88dfc <_fini>
   832f6:	bf00      	nop
   832f8:	00088e08 	.word	0x00088e08
   832fc:	00088e0c 	.word	0x00088e0c

00083300 <__libc_init_array>:
   83300:	b570      	push	{r4, r5, r6, lr}
   83302:	4b0e      	ldr	r3, [pc, #56]	; (8333c <__libc_init_array+0x3c>)
   83304:	4d0e      	ldr	r5, [pc, #56]	; (83340 <__libc_init_array+0x40>)
   83306:	2400      	movs	r4, #0
   83308:	1aed      	subs	r5, r5, r3
   8330a:	10ad      	asrs	r5, r5, #2
   8330c:	461e      	mov	r6, r3
   8330e:	42ac      	cmp	r4, r5
   83310:	d004      	beq.n	8331c <__libc_init_array+0x1c>
   83312:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   83316:	4790      	blx	r2
   83318:	3401      	adds	r4, #1
   8331a:	e7f8      	b.n	8330e <__libc_init_array+0xe>
   8331c:	f005 fd64 	bl	88de8 <_init>
   83320:	4d08      	ldr	r5, [pc, #32]	; (83344 <__libc_init_array+0x44>)
   83322:	4b09      	ldr	r3, [pc, #36]	; (83348 <__libc_init_array+0x48>)
   83324:	2400      	movs	r4, #0
   83326:	1aed      	subs	r5, r5, r3
   83328:	10ad      	asrs	r5, r5, #2
   8332a:	461e      	mov	r6, r3
   8332c:	42ac      	cmp	r4, r5
   8332e:	d004      	beq.n	8333a <__libc_init_array+0x3a>
   83330:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   83334:	4790      	blx	r2
   83336:	3401      	adds	r4, #1
   83338:	e7f8      	b.n	8332c <__libc_init_array+0x2c>
   8333a:	bd70      	pop	{r4, r5, r6, pc}
   8333c:	00088df4 	.word	0x00088df4
   83340:	00088df4 	.word	0x00088df4
   83344:	00088dfc 	.word	0x00088dfc
   83348:	00088df4 	.word	0x00088df4

0008334c <iprintf>:
   8334c:	b40f      	push	{r0, r1, r2, r3}
   8334e:	b507      	push	{r0, r1, r2, lr}
   83350:	4906      	ldr	r1, [pc, #24]	; (8336c <iprintf+0x20>)
   83352:	ab04      	add	r3, sp, #16
   83354:	6808      	ldr	r0, [r1, #0]
   83356:	f853 2b04 	ldr.w	r2, [r3], #4
   8335a:	6881      	ldr	r1, [r0, #8]
   8335c:	9301      	str	r3, [sp, #4]
   8335e:	f000 ff9a 	bl	84296 <_vfiprintf_r>
   83362:	b003      	add	sp, #12
   83364:	f85d eb04 	ldr.w	lr, [sp], #4
   83368:	b004      	add	sp, #16
   8336a:	4770      	bx	lr
   8336c:	20070010 	.word	0x20070010

00083370 <_iprintf_r>:
   83370:	b40e      	push	{r1, r2, r3}
   83372:	b503      	push	{r0, r1, lr}
   83374:	ab03      	add	r3, sp, #12
   83376:	f853 2b04 	ldr.w	r2, [r3], #4
   8337a:	6881      	ldr	r1, [r0, #8]
   8337c:	9301      	str	r3, [sp, #4]
   8337e:	f000 ff8a 	bl	84296 <_vfiprintf_r>
   83382:	b002      	add	sp, #8
   83384:	f85d eb04 	ldr.w	lr, [sp], #4
   83388:	b003      	add	sp, #12
   8338a:	4770      	bx	lr

0008338c <iscanf>:
   8338c:	b40f      	push	{r0, r1, r2, r3}
   8338e:	b507      	push	{r0, r1, r2, lr}
   83390:	4906      	ldr	r1, [pc, #24]	; (833ac <iscanf+0x20>)
   83392:	ab04      	add	r3, sp, #16
   83394:	6808      	ldr	r0, [r1, #0]
   83396:	f853 2b04 	ldr.w	r2, [r3], #4
   8339a:	6841      	ldr	r1, [r0, #4]
   8339c:	9301      	str	r3, [sp, #4]
   8339e:	f001 fbcd 	bl	84b3c <__svfiscanf_r>
   833a2:	b003      	add	sp, #12
   833a4:	f85d eb04 	ldr.w	lr, [sp], #4
   833a8:	b004      	add	sp, #16
   833aa:	4770      	bx	lr
   833ac:	20070010 	.word	0x20070010

000833b0 <_iscanf_r>:
   833b0:	b40e      	push	{r1, r2, r3}
   833b2:	b503      	push	{r0, r1, lr}
   833b4:	ab03      	add	r3, sp, #12
   833b6:	f853 2b04 	ldr.w	r2, [r3], #4
   833ba:	6841      	ldr	r1, [r0, #4]
   833bc:	9301      	str	r3, [sp, #4]
   833be:	f001 fbbd 	bl	84b3c <__svfiscanf_r>
   833c2:	b002      	add	sp, #8
   833c4:	f85d eb04 	ldr.w	lr, [sp], #4
   833c8:	b003      	add	sp, #12
   833ca:	4770      	bx	lr

000833cc <memcpy>:
   833cc:	b510      	push	{r4, lr}
   833ce:	2300      	movs	r3, #0
   833d0:	4293      	cmp	r3, r2
   833d2:	d003      	beq.n	833dc <memcpy+0x10>
   833d4:	5ccc      	ldrb	r4, [r1, r3]
   833d6:	54c4      	strb	r4, [r0, r3]
   833d8:	3301      	adds	r3, #1
   833da:	e7f9      	b.n	833d0 <memcpy+0x4>
   833dc:	bd10      	pop	{r4, pc}

000833de <memset>:
   833de:	4402      	add	r2, r0
   833e0:	4603      	mov	r3, r0
   833e2:	4293      	cmp	r3, r2
   833e4:	d002      	beq.n	833ec <memset+0xe>
   833e6:	f803 1b01 	strb.w	r1, [r3], #1
   833ea:	e7fa      	b.n	833e2 <memset+0x4>
   833ec:	4770      	bx	lr

000833ee <setbuf>:
   833ee:	2900      	cmp	r1, #0
   833f0:	bf0c      	ite	eq
   833f2:	2202      	moveq	r2, #2
   833f4:	2200      	movne	r2, #0
   833f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   833fa:	f000 b801 	b.w	83400 <setvbuf>
	...

00083400 <setvbuf>:
   83400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83404:	461d      	mov	r5, r3
   83406:	4b36      	ldr	r3, [pc, #216]	; (834e0 <setvbuf+0xe0>)
   83408:	4604      	mov	r4, r0
   8340a:	681f      	ldr	r7, [r3, #0]
   8340c:	460e      	mov	r6, r1
   8340e:	4690      	mov	r8, r2
   83410:	b127      	cbz	r7, 8341c <setvbuf+0x1c>
   83412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   83414:	b913      	cbnz	r3, 8341c <setvbuf+0x1c>
   83416:	4638      	mov	r0, r7
   83418:	f002 f918 	bl	8564c <__sinit>
   8341c:	f1b8 0f02 	cmp.w	r8, #2
   83420:	d859      	bhi.n	834d6 <setvbuf+0xd6>
   83422:	2d00      	cmp	r5, #0
   83424:	db57      	blt.n	834d6 <setvbuf+0xd6>
   83426:	4638      	mov	r0, r7
   83428:	4621      	mov	r1, r4
   8342a:	f002 f8c6 	bl	855ba <_fflush_r>
   8342e:	2300      	movs	r3, #0
   83430:	6063      	str	r3, [r4, #4]
   83432:	61a3      	str	r3, [r4, #24]
   83434:	89a3      	ldrh	r3, [r4, #12]
   83436:	061b      	lsls	r3, r3, #24
   83438:	d503      	bpl.n	83442 <setvbuf+0x42>
   8343a:	4638      	mov	r0, r7
   8343c:	6921      	ldr	r1, [r4, #16]
   8343e:	f002 fae1 	bl	85a04 <_free_r>
   83442:	89a3      	ldrh	r3, [r4, #12]
   83444:	f1b8 0f02 	cmp.w	r8, #2
   83448:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8344c:	81a3      	strh	r3, [r4, #12]
   8344e:	d012      	beq.n	83476 <setvbuf+0x76>
   83450:	bb36      	cbnz	r6, 834a0 <setvbuf+0xa0>
   83452:	2d00      	cmp	r5, #0
   83454:	bf08      	it	eq
   83456:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   8345a:	4628      	mov	r0, r5
   8345c:	f003 f8e4 	bl	86628 <malloc>
   83460:	4606      	mov	r6, r0
   83462:	b9c8      	cbnz	r0, 83498 <setvbuf+0x98>
   83464:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83468:	f003 f8de 	bl	86628 <malloc>
   8346c:	4606      	mov	r6, r0
   8346e:	b988      	cbnz	r0, 83494 <setvbuf+0x94>
   83470:	f04f 30ff 	mov.w	r0, #4294967295
   83474:	e000      	b.n	83478 <setvbuf+0x78>
   83476:	2000      	movs	r0, #0
   83478:	89a3      	ldrh	r3, [r4, #12]
   8347a:	f043 0302 	orr.w	r3, r3, #2
   8347e:	81a3      	strh	r3, [r4, #12]
   83480:	2300      	movs	r3, #0
   83482:	60a3      	str	r3, [r4, #8]
   83484:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83488:	6023      	str	r3, [r4, #0]
   8348a:	6123      	str	r3, [r4, #16]
   8348c:	2301      	movs	r3, #1
   8348e:	6163      	str	r3, [r4, #20]
   83490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83494:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83498:	89a3      	ldrh	r3, [r4, #12]
   8349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8349e:	81a3      	strh	r3, [r4, #12]
   834a0:	f1b8 0f01 	cmp.w	r8, #1
   834a4:	d105      	bne.n	834b2 <setvbuf+0xb2>
   834a6:	89a3      	ldrh	r3, [r4, #12]
   834a8:	f043 0301 	orr.w	r3, r3, #1
   834ac:	81a3      	strh	r3, [r4, #12]
   834ae:	426b      	negs	r3, r5
   834b0:	61a3      	str	r3, [r4, #24]
   834b2:	4b0c      	ldr	r3, [pc, #48]	; (834e4 <setvbuf+0xe4>)
   834b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   834b6:	89a3      	ldrh	r3, [r4, #12]
   834b8:	6026      	str	r6, [r4, #0]
   834ba:	f003 0008 	and.w	r0, r3, #8
   834be:	b280      	uxth	r0, r0
   834c0:	6126      	str	r6, [r4, #16]
   834c2:	6165      	str	r5, [r4, #20]
   834c4:	b148      	cbz	r0, 834da <setvbuf+0xda>
   834c6:	f013 0f03 	tst.w	r3, #3
   834ca:	bf18      	it	ne
   834cc:	2500      	movne	r5, #0
   834ce:	60a5      	str	r5, [r4, #8]
   834d0:	2000      	movs	r0, #0
   834d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   834d6:	f04f 30ff 	mov.w	r0, #4294967295
   834da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   834de:	bf00      	nop
   834e0:	20070010 	.word	0x20070010
   834e4:	00085609 	.word	0x00085609

000834e8 <strlen>:
   834e8:	4603      	mov	r3, r0
   834ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   834ee:	2a00      	cmp	r2, #0
   834f0:	d1fb      	bne.n	834ea <strlen+0x2>
   834f2:	1a18      	subs	r0, r3, r0
   834f4:	3801      	subs	r0, #1
   834f6:	4770      	bx	lr

000834f8 <strncmp>:
   834f8:	b570      	push	{r4, r5, r6, lr}
   834fa:	b18a      	cbz	r2, 83520 <strncmp+0x28>
   834fc:	460b      	mov	r3, r1
   834fe:	4605      	mov	r5, r0
   83500:	781c      	ldrb	r4, [r3, #0]
   83502:	f810 6b01 	ldrb.w	r6, [r0], #1
   83506:	3101      	adds	r1, #1
   83508:	42b4      	cmp	r4, r6
   8350a:	d101      	bne.n	83510 <strncmp+0x18>
   8350c:	2a01      	cmp	r2, #1
   8350e:	d103      	bne.n	83518 <strncmp+0x20>
   83510:	7828      	ldrb	r0, [r5, #0]
   83512:	781b      	ldrb	r3, [r3, #0]
   83514:	1ac0      	subs	r0, r0, r3
   83516:	bd70      	pop	{r4, r5, r6, pc}
   83518:	3a01      	subs	r2, #1
   8351a:	2c00      	cmp	r4, #0
   8351c:	d1ee      	bne.n	834fc <strncmp+0x4>
   8351e:	e7f7      	b.n	83510 <strncmp+0x18>
   83520:	4610      	mov	r0, r2
   83522:	bd70      	pop	{r4, r5, r6, pc}

00083524 <strncpy>:
   83524:	b510      	push	{r4, lr}
   83526:	4603      	mov	r3, r0
   83528:	b132      	cbz	r2, 83538 <strncpy+0x14>
   8352a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8352e:	3a01      	subs	r2, #1
   83530:	f803 4b01 	strb.w	r4, [r3], #1
   83534:	2c00      	cmp	r4, #0
   83536:	d1f7      	bne.n	83528 <strncpy+0x4>
   83538:	441a      	add	r2, r3
   8353a:	4293      	cmp	r3, r2
   8353c:	d003      	beq.n	83546 <strncpy+0x22>
   8353e:	2100      	movs	r1, #0
   83540:	f803 1b01 	strb.w	r1, [r3], #1
   83544:	e7f9      	b.n	8353a <strncpy+0x16>
   83546:	bd10      	pop	{r4, pc}

00083548 <match>:
   83548:	b530      	push	{r4, r5, lr}
   8354a:	6802      	ldr	r2, [r0, #0]
   8354c:	f811 5b01 	ldrb.w	r5, [r1], #1
   83550:	1c54      	adds	r4, r2, #1
   83552:	b15d      	cbz	r5, 8356c <match+0x24>
   83554:	7853      	ldrb	r3, [r2, #1]
   83556:	4622      	mov	r2, r4
   83558:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
   8355c:	b2e4      	uxtb	r4, r4
   8355e:	2c19      	cmp	r4, #25
   83560:	bf98      	it	ls
   83562:	3320      	addls	r3, #32
   83564:	42ab      	cmp	r3, r5
   83566:	d0f1      	beq.n	8354c <match+0x4>
   83568:	2000      	movs	r0, #0
   8356a:	bd30      	pop	{r4, r5, pc}
   8356c:	6004      	str	r4, [r0, #0]
   8356e:	2001      	movs	r0, #1
   83570:	bd30      	pop	{r4, r5, pc}

00083572 <sulp>:
   83572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83576:	460d      	mov	r5, r1
   83578:	4690      	mov	r8, r2
   8357a:	f003 fda4 	bl	870c6 <__ulp>
   8357e:	4606      	mov	r6, r0
   83580:	460f      	mov	r7, r1
   83582:	f1b8 0f00 	cmp.w	r8, #0
   83586:	d00f      	beq.n	835a8 <sulp+0x36>
   83588:	f3c5 530a 	ubfx	r3, r5, #20, #11
   8358c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   83590:	2b00      	cmp	r3, #0
   83592:	dd09      	ble.n	835a8 <sulp+0x36>
   83594:	051c      	lsls	r4, r3, #20
   83596:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
   8359a:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
   8359e:	2200      	movs	r2, #0
   835a0:	f7ff fc54 	bl	82e4c <__aeabi_dmul>
   835a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   835a8:	4630      	mov	r0, r6
   835aa:	4639      	mov	r1, r7
   835ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000835b0 <_strtod_r>:
   835b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835b4:	2300      	movs	r3, #0
   835b6:	b09f      	sub	sp, #124	; 0x7c
   835b8:	4681      	mov	r9, r0
   835ba:	9104      	str	r1, [sp, #16]
   835bc:	9215      	str	r2, [sp, #84]	; 0x54
   835be:	931a      	str	r3, [sp, #104]	; 0x68
   835c0:	f04f 0a00 	mov.w	sl, #0
   835c4:	f04f 0b00 	mov.w	fp, #0
   835c8:	9119      	str	r1, [sp, #100]	; 0x64
   835ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
   835cc:	7813      	ldrb	r3, [r2, #0]
   835ce:	2b0d      	cmp	r3, #13
   835d0:	d805      	bhi.n	835de <_strtod_r+0x2e>
   835d2:	2b09      	cmp	r3, #9
   835d4:	d214      	bcs.n	83600 <_strtod_r+0x50>
   835d6:	2b00      	cmp	r3, #0
   835d8:	f000 81b3 	beq.w	83942 <_strtod_r+0x392>
   835dc:	e013      	b.n	83606 <_strtod_r+0x56>
   835de:	2b2b      	cmp	r3, #43	; 0x2b
   835e0:	d007      	beq.n	835f2 <_strtod_r+0x42>
   835e2:	2b2d      	cmp	r3, #45	; 0x2d
   835e4:	d002      	beq.n	835ec <_strtod_r+0x3c>
   835e6:	2b20      	cmp	r3, #32
   835e8:	d10d      	bne.n	83606 <_strtod_r+0x56>
   835ea:	e009      	b.n	83600 <_strtod_r+0x50>
   835ec:	2601      	movs	r6, #1
   835ee:	9609      	str	r6, [sp, #36]	; 0x24
   835f0:	e001      	b.n	835f6 <_strtod_r+0x46>
   835f2:	2700      	movs	r7, #0
   835f4:	9709      	str	r7, [sp, #36]	; 0x24
   835f6:	1c53      	adds	r3, r2, #1
   835f8:	9319      	str	r3, [sp, #100]	; 0x64
   835fa:	7853      	ldrb	r3, [r2, #1]
   835fc:	b92b      	cbnz	r3, 8360a <_strtod_r+0x5a>
   835fe:	e1a0      	b.n	83942 <_strtod_r+0x392>
   83600:	3201      	adds	r2, #1
   83602:	9219      	str	r2, [sp, #100]	; 0x64
   83604:	e7e1      	b.n	835ca <_strtod_r+0x1a>
   83606:	2600      	movs	r6, #0
   83608:	9609      	str	r6, [sp, #36]	; 0x24
   8360a:	9c19      	ldr	r4, [sp, #100]	; 0x64
   8360c:	7823      	ldrb	r3, [r4, #0]
   8360e:	2b30      	cmp	r3, #48	; 0x30
   83610:	d15a      	bne.n	836c8 <_strtod_r+0x118>
   83612:	7863      	ldrb	r3, [r4, #1]
   83614:	2b58      	cmp	r3, #88	; 0x58
   83616:	d001      	beq.n	8361c <_strtod_r+0x6c>
   83618:	2b78      	cmp	r3, #120	; 0x78
   8361a:	d149      	bne.n	836b0 <_strtod_r+0x100>
   8361c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8361e:	ab1a      	add	r3, sp, #104	; 0x68
   83620:	9300      	str	r3, [sp, #0]
   83622:	9701      	str	r7, [sp, #4]
   83624:	4648      	mov	r0, r9
   83626:	a919      	add	r1, sp, #100	; 0x64
   83628:	4a9d      	ldr	r2, [pc, #628]	; (838a0 <_strtod_r+0x2f0>)
   8362a:	ab1b      	add	r3, sp, #108	; 0x6c
   8362c:	f002 fc75 	bl	85f1a <__gethex>
   83630:	f010 0607 	ands.w	r6, r0, #7
   83634:	4605      	mov	r5, r0
   83636:	f000 85af 	beq.w	84198 <_strtod_r+0xbe8>
   8363a:	2e06      	cmp	r6, #6
   8363c:	d102      	bne.n	83644 <_strtod_r+0x94>
   8363e:	3401      	adds	r4, #1
   83640:	9419      	str	r4, [sp, #100]	; 0x64
   83642:	e180      	b.n	83946 <_strtod_r+0x396>
   83644:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   83646:	b13a      	cbz	r2, 83658 <_strtod_r+0xa8>
   83648:	a81c      	add	r0, sp, #112	; 0x70
   8364a:	2135      	movs	r1, #53	; 0x35
   8364c:	f003 fe40 	bl	872d0 <__copybits>
   83650:	4648      	mov	r0, r9
   83652:	991a      	ldr	r1, [sp, #104]	; 0x68
   83654:	f003 fab6 	bl	86bc4 <_Bfree>
   83658:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8365a:	2e06      	cmp	r6, #6
   8365c:	d821      	bhi.n	836a2 <_strtod_r+0xf2>
   8365e:	e8df f006 	tbb	[pc, r6]
   83662:	0d04      	.short	0x0d04
   83664:	0d1c1708 	.word	0x0d1c1708
   83668:	04          	.byte	0x04
   83669:	00          	.byte	0x00
   8366a:	f04f 0b00 	mov.w	fp, #0
   8366e:	46da      	mov	sl, fp
   83670:	e017      	b.n	836a2 <_strtod_r+0xf2>
   83672:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   83676:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   8367a:	e012      	b.n	836a2 <_strtod_r+0xf2>
   8367c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8367e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   83682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   83686:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   8368a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   8368e:	e008      	b.n	836a2 <_strtod_r+0xf2>
   83690:	f8df b210 	ldr.w	fp, [pc, #528]	; 838a4 <_strtod_r+0x2f4>
   83694:	f04f 0a00 	mov.w	sl, #0
   83698:	e003      	b.n	836a2 <_strtod_r+0xf2>
   8369a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   8369e:	f04f 3aff 	mov.w	sl, #4294967295
   836a2:	072b      	lsls	r3, r5, #28
   836a4:	f140 8578 	bpl.w	84198 <_strtod_r+0xbe8>
   836a8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   836ac:	f000 bd74 	b.w	84198 <_strtod_r+0xbe8>
   836b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   836b2:	1c5a      	adds	r2, r3, #1
   836b4:	9219      	str	r2, [sp, #100]	; 0x64
   836b6:	785b      	ldrb	r3, [r3, #1]
   836b8:	2b30      	cmp	r3, #48	; 0x30
   836ba:	d0f9      	beq.n	836b0 <_strtod_r+0x100>
   836bc:	2b00      	cmp	r3, #0
   836be:	f000 856b 	beq.w	84198 <_strtod_r+0xbe8>
   836c2:	2301      	movs	r3, #1
   836c4:	9305      	str	r3, [sp, #20]
   836c6:	e001      	b.n	836cc <_strtod_r+0x11c>
   836c8:	2600      	movs	r6, #0
   836ca:	9605      	str	r6, [sp, #20]
   836cc:	9f19      	ldr	r7, [sp, #100]	; 0x64
   836ce:	f04f 0800 	mov.w	r8, #0
   836d2:	9707      	str	r7, [sp, #28]
   836d4:	f8cd 800c 	str.w	r8, [sp, #12]
   836d8:	4644      	mov	r4, r8
   836da:	9e19      	ldr	r6, [sp, #100]	; 0x64
   836dc:	7835      	ldrb	r5, [r6, #0]
   836de:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   836e2:	b2da      	uxtb	r2, r3
   836e4:	2a09      	cmp	r2, #9
   836e6:	d810      	bhi.n	8370a <_strtod_r+0x15a>
   836e8:	2c08      	cmp	r4, #8
   836ea:	bfd8      	it	le
   836ec:	9f03      	ldrle	r7, [sp, #12]
   836ee:	f04f 020a 	mov.w	r2, #10
   836f2:	bfd8      	it	le
   836f4:	fb02 3707 	mlale	r7, r2, r7, r3
   836f8:	f106 0601 	add.w	r6, r6, #1
   836fc:	bfd4      	ite	le
   836fe:	9703      	strle	r7, [sp, #12]
   83700:	fb02 3808 	mlagt	r8, r2, r8, r3
   83704:	3401      	adds	r4, #1
   83706:	9619      	str	r6, [sp, #100]	; 0x64
   83708:	e7e7      	b.n	836da <_strtod_r+0x12a>
   8370a:	4648      	mov	r0, r9
   8370c:	f002 ff16 	bl	8653c <_localeconv_r>
   83710:	6807      	ldr	r7, [r0, #0]
   83712:	4648      	mov	r0, r9
   83714:	f002 ff12 	bl	8653c <_localeconv_r>
   83718:	6800      	ldr	r0, [r0, #0]
   8371a:	f7ff fee5 	bl	834e8 <strlen>
   8371e:	4639      	mov	r1, r7
   83720:	4602      	mov	r2, r0
   83722:	4630      	mov	r0, r6
   83724:	f7ff fee8 	bl	834f8 <strncmp>
   83728:	4606      	mov	r6, r0
   8372a:	b128      	cbz	r0, 83738 <_strtod_r+0x188>
   8372c:	2300      	movs	r3, #0
   8372e:	462a      	mov	r2, r5
   83730:	4619      	mov	r1, r3
   83732:	4625      	mov	r5, r4
   83734:	930a      	str	r3, [sp, #40]	; 0x28
   83736:	e05f      	b.n	837f8 <_strtod_r+0x248>
   83738:	4648      	mov	r0, r9
   8373a:	9d19      	ldr	r5, [sp, #100]	; 0x64
   8373c:	f002 fefe 	bl	8653c <_localeconv_r>
   83740:	6800      	ldr	r0, [r0, #0]
   83742:	f7ff fed1 	bl	834e8 <strlen>
   83746:	182b      	adds	r3, r5, r0
   83748:	9319      	str	r3, [sp, #100]	; 0x64
   8374a:	5c2a      	ldrb	r2, [r5, r0]
   8374c:	2c00      	cmp	r4, #0
   8374e:	d145      	bne.n	837dc <_strtod_r+0x22c>
   83750:	4623      	mov	r3, r4
   83752:	2a30      	cmp	r2, #48	; 0x30
   83754:	d105      	bne.n	83762 <_strtod_r+0x1b2>
   83756:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83758:	3301      	adds	r3, #1
   8375a:	1c51      	adds	r1, r2, #1
   8375c:	9119      	str	r1, [sp, #100]	; 0x64
   8375e:	7852      	ldrb	r2, [r2, #1]
   83760:	e7f7      	b.n	83752 <_strtod_r+0x1a2>
   83762:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   83766:	2908      	cmp	r1, #8
   83768:	d842      	bhi.n	837f0 <_strtod_r+0x240>
   8376a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   8376c:	4619      	mov	r1, r3
   8376e:	2300      	movs	r3, #0
   83770:	9607      	str	r6, [sp, #28]
   83772:	461d      	mov	r5, r3
   83774:	3a30      	subs	r2, #48	; 0x30
   83776:	f103 0001 	add.w	r0, r3, #1
   8377a:	d029      	beq.n	837d0 <_strtod_r+0x220>
   8377c:	4401      	add	r1, r0
   8377e:	1c6e      	adds	r6, r5, #1
   83780:	1b77      	subs	r7, r6, r5
   83782:	4287      	cmp	r7, r0
   83784:	da10      	bge.n	837a8 <_strtod_r+0x1f8>
   83786:	1e77      	subs	r7, r6, #1
   83788:	2f08      	cmp	r7, #8
   8378a:	dc06      	bgt.n	8379a <_strtod_r+0x1ea>
   8378c:	9f03      	ldr	r7, [sp, #12]
   8378e:	f04f 0c0a 	mov.w	ip, #10
   83792:	fb0c f707 	mul.w	r7, ip, r7
   83796:	9703      	str	r7, [sp, #12]
   83798:	e004      	b.n	837a4 <_strtod_r+0x1f4>
   8379a:	2e10      	cmp	r6, #16
   8379c:	bfdc      	itt	le
   8379e:	270a      	movle	r7, #10
   837a0:	fb07 f808 	mulle.w	r8, r7, r8
   837a4:	3601      	adds	r6, #1
   837a6:	e7eb      	b.n	83780 <_strtod_r+0x1d0>
   837a8:	2b00      	cmp	r3, #0
   837aa:	bfac      	ite	ge
   837ac:	18eb      	addge	r3, r5, r3
   837ae:	1c2b      	addlt	r3, r5, #0
   837b0:	2b08      	cmp	r3, #8
   837b2:	f103 0501 	add.w	r5, r3, #1
   837b6:	dc05      	bgt.n	837c4 <_strtod_r+0x214>
   837b8:	9e03      	ldr	r6, [sp, #12]
   837ba:	230a      	movs	r3, #10
   837bc:	fb03 2606 	mla	r6, r3, r6, r2
   837c0:	9603      	str	r6, [sp, #12]
   837c2:	e004      	b.n	837ce <_strtod_r+0x21e>
   837c4:	2d10      	cmp	r5, #16
   837c6:	bfdc      	itt	le
   837c8:	230a      	movle	r3, #10
   837ca:	fb03 2808 	mlale	r8, r3, r8, r2
   837ce:	2000      	movs	r0, #0
   837d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   837d2:	1c5a      	adds	r2, r3, #1
   837d4:	9219      	str	r2, [sp, #100]	; 0x64
   837d6:	785a      	ldrb	r2, [r3, #1]
   837d8:	4603      	mov	r3, r0
   837da:	e002      	b.n	837e2 <_strtod_r+0x232>
   837dc:	4625      	mov	r5, r4
   837de:	4633      	mov	r3, r6
   837e0:	4631      	mov	r1, r6
   837e2:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
   837e6:	2809      	cmp	r0, #9
   837e8:	d9c4      	bls.n	83774 <_strtod_r+0x1c4>
   837ea:	2701      	movs	r7, #1
   837ec:	970a      	str	r7, [sp, #40]	; 0x28
   837ee:	e003      	b.n	837f8 <_strtod_r+0x248>
   837f0:	2500      	movs	r5, #0
   837f2:	2001      	movs	r0, #1
   837f4:	4629      	mov	r1, r5
   837f6:	900a      	str	r0, [sp, #40]	; 0x28
   837f8:	f022 0620 	bic.w	r6, r2, #32
   837fc:	2e45      	cmp	r6, #69	; 0x45
   837fe:	d155      	bne.n	838ac <_strtod_r+0x2fc>
   83800:	b925      	cbnz	r5, 8380c <_strtod_r+0x25c>
   83802:	b91b      	cbnz	r3, 8380c <_strtod_r+0x25c>
   83804:	9e05      	ldr	r6, [sp, #20]
   83806:	2e00      	cmp	r6, #0
   83808:	f000 809b 	beq.w	83942 <_strtod_r+0x392>
   8380c:	9f19      	ldr	r7, [sp, #100]	; 0x64
   8380e:	1c7a      	adds	r2, r7, #1
   83810:	9219      	str	r2, [sp, #100]	; 0x64
   83812:	787a      	ldrb	r2, [r7, #1]
   83814:	9704      	str	r7, [sp, #16]
   83816:	2a2b      	cmp	r2, #43	; 0x2b
   83818:	d004      	beq.n	83824 <_strtod_r+0x274>
   8381a:	2a2d      	cmp	r2, #45	; 0x2d
   8381c:	d005      	beq.n	8382a <_strtod_r+0x27a>
   8381e:	2600      	movs	r6, #0
   83820:	960f      	str	r6, [sp, #60]	; 0x3c
   83822:	e008      	b.n	83836 <_strtod_r+0x286>
   83824:	2000      	movs	r0, #0
   83826:	900f      	str	r0, [sp, #60]	; 0x3c
   83828:	e001      	b.n	8382e <_strtod_r+0x27e>
   8382a:	2701      	movs	r7, #1
   8382c:	970f      	str	r7, [sp, #60]	; 0x3c
   8382e:	9e04      	ldr	r6, [sp, #16]
   83830:	1cb2      	adds	r2, r6, #2
   83832:	9219      	str	r2, [sp, #100]	; 0x64
   83834:	78b2      	ldrb	r2, [r6, #2]
   83836:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
   8383a:	2f09      	cmp	r7, #9
   8383c:	d834      	bhi.n	838a8 <_strtod_r+0x2f8>
   8383e:	2a30      	cmp	r2, #48	; 0x30
   83840:	d104      	bne.n	8384c <_strtod_r+0x29c>
   83842:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83844:	1c57      	adds	r7, r2, #1
   83846:	9719      	str	r7, [sp, #100]	; 0x64
   83848:	7852      	ldrb	r2, [r2, #1]
   8384a:	e7f8      	b.n	8383e <_strtod_r+0x28e>
   8384c:	f1a2 0731 	sub.w	r7, r2, #49	; 0x31
   83850:	2f08      	cmp	r7, #8
   83852:	d82b      	bhi.n	838ac <_strtod_r+0x2fc>
   83854:	9819      	ldr	r0, [sp, #100]	; 0x64
   83856:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
   8385a:	9006      	str	r0, [sp, #24]
   8385c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8385e:	1c56      	adds	r6, r2, #1
   83860:	9619      	str	r6, [sp, #100]	; 0x64
   83862:	7852      	ldrb	r2, [r2, #1]
   83864:	960e      	str	r6, [sp, #56]	; 0x38
   83866:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
   8386a:	b2c6      	uxtb	r6, r0
   8386c:	2e09      	cmp	r6, #9
   8386e:	d805      	bhi.n	8387c <_strtod_r+0x2cc>
   83870:	f04f 0c0a 	mov.w	ip, #10
   83874:	fb0c 2707 	mla	r7, ip, r7, r2
   83878:	3f30      	subs	r7, #48	; 0x30
   8387a:	e7ef      	b.n	8385c <_strtod_r+0x2ac>
   8387c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8387e:	9e06      	ldr	r6, [sp, #24]
   83880:	ebc6 0c00 	rsb	ip, r6, r0
   83884:	f1bc 0f08 	cmp.w	ip, #8
   83888:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
   8388c:	dc02      	bgt.n	83894 <_strtod_r+0x2e4>
   8388e:	4567      	cmp	r7, ip
   83890:	bfb8      	it	lt
   83892:	46bc      	movlt	ip, r7
   83894:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   83896:	b15f      	cbz	r7, 838b0 <_strtod_r+0x300>
   83898:	f1cc 0c00 	rsb	ip, ip, #0
   8389c:	e008      	b.n	838b0 <_strtod_r+0x300>
   8389e:	bf00      	nop
   838a0:	00088af0 	.word	0x00088af0
   838a4:	7ff00000 	.word	0x7ff00000
   838a8:	9e04      	ldr	r6, [sp, #16]
   838aa:	9619      	str	r6, [sp, #100]	; 0x64
   838ac:	f04f 0c00 	mov.w	ip, #0
   838b0:	2d00      	cmp	r5, #0
   838b2:	d14c      	bne.n	8394e <_strtod_r+0x39e>
   838b4:	2b00      	cmp	r3, #0
   838b6:	f040 846f 	bne.w	84198 <_strtod_r+0xbe8>
   838ba:	9f05      	ldr	r7, [sp, #20]
   838bc:	2f00      	cmp	r7, #0
   838be:	f040 846b 	bne.w	84198 <_strtod_r+0xbe8>
   838c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   838c4:	2800      	cmp	r0, #0
   838c6:	d13c      	bne.n	83942 <_strtod_r+0x392>
   838c8:	2a4e      	cmp	r2, #78	; 0x4e
   838ca:	d01b      	beq.n	83904 <_strtod_r+0x354>
   838cc:	dc02      	bgt.n	838d4 <_strtod_r+0x324>
   838ce:	2a49      	cmp	r2, #73	; 0x49
   838d0:	d005      	beq.n	838de <_strtod_r+0x32e>
   838d2:	e036      	b.n	83942 <_strtod_r+0x392>
   838d4:	2a69      	cmp	r2, #105	; 0x69
   838d6:	d002      	beq.n	838de <_strtod_r+0x32e>
   838d8:	2a6e      	cmp	r2, #110	; 0x6e
   838da:	d013      	beq.n	83904 <_strtod_r+0x354>
   838dc:	e031      	b.n	83942 <_strtod_r+0x392>
   838de:	a819      	add	r0, sp, #100	; 0x64
   838e0:	49ac      	ldr	r1, [pc, #688]	; (83b94 <_strtod_r+0x5e4>)
   838e2:	f7ff fe31 	bl	83548 <match>
   838e6:	b360      	cbz	r0, 83942 <_strtod_r+0x392>
   838e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   838ea:	a819      	add	r0, sp, #100	; 0x64
   838ec:	3b01      	subs	r3, #1
   838ee:	49aa      	ldr	r1, [pc, #680]	; (83b98 <_strtod_r+0x5e8>)
   838f0:	9319      	str	r3, [sp, #100]	; 0x64
   838f2:	f7ff fe29 	bl	83548 <match>
   838f6:	b910      	cbnz	r0, 838fe <_strtod_r+0x34e>
   838f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   838fa:	3301      	adds	r3, #1
   838fc:	9319      	str	r3, [sp, #100]	; 0x64
   838fe:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 83bb4 <_strtod_r+0x604>
   83902:	e01a      	b.n	8393a <_strtod_r+0x38a>
   83904:	a819      	add	r0, sp, #100	; 0x64
   83906:	49a5      	ldr	r1, [pc, #660]	; (83b9c <_strtod_r+0x5ec>)
   83908:	f7ff fe1e 	bl	83548 <match>
   8390c:	b1c8      	cbz	r0, 83942 <_strtod_r+0x392>
   8390e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83910:	781b      	ldrb	r3, [r3, #0]
   83912:	2b28      	cmp	r3, #40	; 0x28
   83914:	d10f      	bne.n	83936 <_strtod_r+0x386>
   83916:	a819      	add	r0, sp, #100	; 0x64
   83918:	49a1      	ldr	r1, [pc, #644]	; (83ba0 <_strtod_r+0x5f0>)
   8391a:	aa1c      	add	r2, sp, #112	; 0x70
   8391c:	f002 fd3f 	bl	8639e <__hexnan>
   83920:	2805      	cmp	r0, #5
   83922:	d108      	bne.n	83936 <_strtod_r+0x386>
   83924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   83926:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   8392a:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   8392e:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   83932:	f000 bc31 	b.w	84198 <_strtod_r+0xbe8>
   83936:	f8df b280 	ldr.w	fp, [pc, #640]	; 83bb8 <_strtod_r+0x608>
   8393a:	f04f 0a00 	mov.w	sl, #0
   8393e:	f000 bc2b 	b.w	84198 <_strtod_r+0xbe8>
   83942:	9b04      	ldr	r3, [sp, #16]
   83944:	9319      	str	r3, [sp, #100]	; 0x64
   83946:	2600      	movs	r6, #0
   83948:	9609      	str	r6, [sp, #36]	; 0x24
   8394a:	f000 bc25 	b.w	84198 <_strtod_r+0xbe8>
   8394e:	ebc1 010c 	rsb	r1, r1, ip
   83952:	9803      	ldr	r0, [sp, #12]
   83954:	2d10      	cmp	r5, #16
   83956:	bfb4      	ite	lt
   83958:	46ac      	movlt	ip, r5
   8395a:	f04f 0c10 	movge.w	ip, #16
   8395e:	f8cd c008 	str.w	ip, [sp, #8]
   83962:	9106      	str	r1, [sp, #24]
   83964:	f7ff f9fc 	bl	82d60 <__aeabi_ui2d>
   83968:	f8dd c008 	ldr.w	ip, [sp, #8]
   8396c:	2c00      	cmp	r4, #0
   8396e:	bf08      	it	eq
   83970:	462c      	moveq	r4, r5
   83972:	f1bc 0f09 	cmp.w	ip, #9
   83976:	4682      	mov	sl, r0
   83978:	468b      	mov	fp, r1
   8397a:	dd15      	ble.n	839a8 <_strtod_r+0x3f8>
   8397c:	4b89      	ldr	r3, [pc, #548]	; (83ba4 <_strtod_r+0x5f4>)
   8397e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   83982:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   83986:	f7ff fa61 	bl	82e4c <__aeabi_dmul>
   8398a:	4606      	mov	r6, r0
   8398c:	4640      	mov	r0, r8
   8398e:	460f      	mov	r7, r1
   83990:	f7ff f9e6 	bl	82d60 <__aeabi_ui2d>
   83994:	4602      	mov	r2, r0
   83996:	460b      	mov	r3, r1
   83998:	4630      	mov	r0, r6
   8399a:	4639      	mov	r1, r7
   8399c:	f7ff f8a4 	bl	82ae8 <__adddf3>
   839a0:	f8dd c008 	ldr.w	ip, [sp, #8]
   839a4:	4682      	mov	sl, r0
   839a6:	468b      	mov	fp, r1
   839a8:	2d0f      	cmp	r5, #15
   839aa:	dc37      	bgt.n	83a1c <_strtod_r+0x46c>
   839ac:	9f06      	ldr	r7, [sp, #24]
   839ae:	2f00      	cmp	r7, #0
   839b0:	f000 83f2 	beq.w	84198 <_strtod_r+0xbe8>
   839b4:	dd23      	ble.n	839fe <_strtod_r+0x44e>
   839b6:	2f16      	cmp	r7, #22
   839b8:	dc07      	bgt.n	839ca <_strtod_r+0x41a>
   839ba:	497a      	ldr	r1, [pc, #488]	; (83ba4 <_strtod_r+0x5f4>)
   839bc:	4652      	mov	r2, sl
   839be:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
   839c2:	e9d1 0100 	ldrd	r0, r1, [r1]
   839c6:	465b      	mov	r3, fp
   839c8:	e014      	b.n	839f4 <_strtod_r+0x444>
   839ca:	9e06      	ldr	r6, [sp, #24]
   839cc:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   839d0:	429e      	cmp	r6, r3
   839d2:	dc23      	bgt.n	83a1c <_strtod_r+0x46c>
   839d4:	4c73      	ldr	r4, [pc, #460]	; (83ba4 <_strtod_r+0x5f4>)
   839d6:	f1c5 050f 	rsb	r5, r5, #15
   839da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   839de:	1b75      	subs	r5, r6, r5
   839e0:	e9d3 0100 	ldrd	r0, r1, [r3]
   839e4:	4652      	mov	r2, sl
   839e6:	465b      	mov	r3, fp
   839e8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   839ec:	f7ff fa2e 	bl	82e4c <__aeabi_dmul>
   839f0:	e9d4 2300 	ldrd	r2, r3, [r4]
   839f4:	f7ff fa2a 	bl	82e4c <__aeabi_dmul>
   839f8:	4682      	mov	sl, r0
   839fa:	468b      	mov	fp, r1
   839fc:	e3cc      	b.n	84198 <_strtod_r+0xbe8>
   839fe:	9f06      	ldr	r7, [sp, #24]
   83a00:	3716      	adds	r7, #22
   83a02:	db0b      	blt.n	83a1c <_strtod_r+0x46c>
   83a04:	f8dd c018 	ldr.w	ip, [sp, #24]
   83a08:	4f66      	ldr	r7, [pc, #408]	; (83ba4 <_strtod_r+0x5f4>)
   83a0a:	4650      	mov	r0, sl
   83a0c:	eba7 07cc 	sub.w	r7, r7, ip, lsl #3
   83a10:	4659      	mov	r1, fp
   83a12:	e9d7 2300 	ldrd	r2, r3, [r7]
   83a16:	f7ff fb43 	bl	830a0 <__aeabi_ddiv>
   83a1a:	e7ed      	b.n	839f8 <_strtod_r+0x448>
   83a1c:	9e06      	ldr	r6, [sp, #24]
   83a1e:	ebcc 0805 	rsb	r8, ip, r5
   83a22:	44b0      	add	r8, r6
   83a24:	f1b8 0f00 	cmp.w	r8, #0
   83a28:	dd61      	ble.n	83aee <_strtod_r+0x53e>
   83a2a:	f018 030f 	ands.w	r3, r8, #15
   83a2e:	d00a      	beq.n	83a46 <_strtod_r+0x496>
   83a30:	4a5c      	ldr	r2, [pc, #368]	; (83ba4 <_strtod_r+0x5f4>)
   83a32:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83a36:	e9d3 0100 	ldrd	r0, r1, [r3]
   83a3a:	4652      	mov	r2, sl
   83a3c:	465b      	mov	r3, fp
   83a3e:	f7ff fa05 	bl	82e4c <__aeabi_dmul>
   83a42:	4682      	mov	sl, r0
   83a44:	468b      	mov	fp, r1
   83a46:	f038 080f 	bics.w	r8, r8, #15
   83a4a:	f000 80c8 	beq.w	83bde <_strtod_r+0x62e>
   83a4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   83a52:	dd13      	ble.n	83a7c <_strtod_r+0x4cc>
   83a54:	f04f 0800 	mov.w	r8, #0
   83a58:	f8cd 800c 	str.w	r8, [sp, #12]
   83a5c:	f8cd 801c 	str.w	r8, [sp, #28]
   83a60:	f8cd 8014 	str.w	r8, [sp, #20]
   83a64:	9f07      	ldr	r7, [sp, #28]
   83a66:	2322      	movs	r3, #34	; 0x22
   83a68:	f8c9 3000 	str.w	r3, [r9]
   83a6c:	f8df b144 	ldr.w	fp, [pc, #324]	; 83bb4 <_strtod_r+0x604>
   83a70:	f04f 0a00 	mov.w	sl, #0
   83a74:	2f00      	cmp	r7, #0
   83a76:	f040 837b 	bne.w	84170 <_strtod_r+0xbc0>
   83a7a:	e38d      	b.n	84198 <_strtod_r+0xbe8>
   83a7c:	ea4f 1828 	mov.w	r8, r8, asr #4
   83a80:	4650      	mov	r0, sl
   83a82:	4659      	mov	r1, fp
   83a84:	2600      	movs	r6, #0
   83a86:	f1b8 0f01 	cmp.w	r8, #1
   83a8a:	dd0d      	ble.n	83aa8 <_strtod_r+0x4f8>
   83a8c:	f018 0f01 	tst.w	r8, #1
   83a90:	d006      	beq.n	83aa0 <_strtod_r+0x4f0>
   83a92:	4b45      	ldr	r3, [pc, #276]	; (83ba8 <_strtod_r+0x5f8>)
   83a94:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   83a98:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a9c:	f7ff f9d6 	bl	82e4c <__aeabi_dmul>
   83aa0:	3601      	adds	r6, #1
   83aa2:	ea4f 0868 	mov.w	r8, r8, asr #1
   83aa6:	e7ee      	b.n	83a86 <_strtod_r+0x4d6>
   83aa8:	4b3f      	ldr	r3, [pc, #252]	; (83ba8 <_strtod_r+0x5f8>)
   83aaa:	4682      	mov	sl, r0
   83aac:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
   83ab0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   83ab4:	4652      	mov	r2, sl
   83ab6:	465b      	mov	r3, fp
   83ab8:	e9d6 0100 	ldrd	r0, r1, [r6]
   83abc:	f7ff f9c6 	bl	82e4c <__aeabi_dmul>
   83ac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   83ac4:	468b      	mov	fp, r1
   83ac6:	0d1b      	lsrs	r3, r3, #20
   83ac8:	4938      	ldr	r1, [pc, #224]	; (83bac <_strtod_r+0x5fc>)
   83aca:	051b      	lsls	r3, r3, #20
   83acc:	428b      	cmp	r3, r1
   83ace:	4682      	mov	sl, r0
   83ad0:	d8c0      	bhi.n	83a54 <_strtod_r+0x4a4>
   83ad2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   83ad6:	428b      	cmp	r3, r1
   83ad8:	d906      	bls.n	83ae8 <_strtod_r+0x538>
   83ada:	2600      	movs	r6, #0
   83adc:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 83bbc <_strtod_r+0x60c>
   83ae0:	f04f 3aff 	mov.w	sl, #4294967295
   83ae4:	9604      	str	r6, [sp, #16]
   83ae6:	e07c      	b.n	83be2 <_strtod_r+0x632>
   83ae8:	f10b 7b54 	add.w	fp, fp, #55574528	; 0x3500000
   83aec:	e077      	b.n	83bde <_strtod_r+0x62e>
   83aee:	d076      	beq.n	83bde <_strtod_r+0x62e>
   83af0:	f1c8 0800 	rsb	r8, r8, #0
   83af4:	f018 030f 	ands.w	r3, r8, #15
   83af8:	d00a      	beq.n	83b10 <_strtod_r+0x560>
   83afa:	4a2a      	ldr	r2, [pc, #168]	; (83ba4 <_strtod_r+0x5f4>)
   83afc:	4650      	mov	r0, sl
   83afe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83b02:	4659      	mov	r1, fp
   83b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   83b08:	f7ff faca 	bl	830a0 <__aeabi_ddiv>
   83b0c:	4682      	mov	sl, r0
   83b0e:	468b      	mov	fp, r1
   83b10:	ea5f 1828 	movs.w	r8, r8, asr #4
   83b14:	d063      	beq.n	83bde <_strtod_r+0x62e>
   83b16:	f1b8 0f1f 	cmp.w	r8, #31
   83b1a:	dd08      	ble.n	83b2e <_strtod_r+0x57e>
   83b1c:	f04f 0800 	mov.w	r8, #0
   83b20:	f8cd 800c 	str.w	r8, [sp, #12]
   83b24:	f8cd 801c 	str.w	r8, [sp, #28]
   83b28:	f8cd 8014 	str.w	r8, [sp, #20]
   83b2c:	e11e      	b.n	83d6c <_strtod_r+0x7bc>
   83b2e:	f018 0f10 	tst.w	r8, #16
   83b32:	bf14      	ite	ne
   83b34:	266a      	movne	r6, #106	; 0x6a
   83b36:	2600      	moveq	r6, #0
   83b38:	9604      	str	r6, [sp, #16]
   83b3a:	4e1d      	ldr	r6, [pc, #116]	; (83bb0 <_strtod_r+0x600>)
   83b3c:	4650      	mov	r0, sl
   83b3e:	4659      	mov	r1, fp
   83b40:	f1b8 0f00 	cmp.w	r8, #0
   83b44:	dd0a      	ble.n	83b5c <_strtod_r+0x5ac>
   83b46:	f018 0f01 	tst.w	r8, #1
   83b4a:	d003      	beq.n	83b54 <_strtod_r+0x5a4>
   83b4c:	e9d6 2300 	ldrd	r2, r3, [r6]
   83b50:	f7ff f97c 	bl	82e4c <__aeabi_dmul>
   83b54:	ea4f 0868 	mov.w	r8, r8, asr #1
   83b58:	3608      	adds	r6, #8
   83b5a:	e7f1      	b.n	83b40 <_strtod_r+0x590>
   83b5c:	9f04      	ldr	r7, [sp, #16]
   83b5e:	4682      	mov	sl, r0
   83b60:	468b      	mov	fp, r1
   83b62:	b39f      	cbz	r7, 83bcc <_strtod_r+0x61c>
   83b64:	f3c1 530a 	ubfx	r3, r1, #20, #11
   83b68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   83b6c:	2b00      	cmp	r3, #0
   83b6e:	dd2d      	ble.n	83bcc <_strtod_r+0x61c>
   83b70:	2b1f      	cmp	r3, #31
   83b72:	dd25      	ble.n	83bc0 <_strtod_r+0x610>
   83b74:	2b34      	cmp	r3, #52	; 0x34
   83b76:	f04f 0a00 	mov.w	sl, #0
   83b7a:	dd02      	ble.n	83b82 <_strtod_r+0x5d2>
   83b7c:	f04f 7b5c 	mov.w	fp, #57671680	; 0x3700000
   83b80:	e024      	b.n	83bcc <_strtod_r+0x61c>
   83b82:	3b20      	subs	r3, #32
   83b84:	f04f 31ff 	mov.w	r1, #4294967295
   83b88:	fa01 f303 	lsl.w	r3, r1, r3
   83b8c:	ea03 0b0b 	and.w	fp, r3, fp
   83b90:	e01c      	b.n	83bcc <_strtod_r+0x61c>
   83b92:	bf00      	nop
   83b94:	00088b40 	.word	0x00088b40
   83b98:	00088b43 	.word	0x00088b43
   83b9c:	00088b49 	.word	0x00088b49
   83ba0:	00088b04 	.word	0x00088b04
   83ba4:	00088cd0 	.word	0x00088cd0
   83ba8:	00088dc0 	.word	0x00088dc0
   83bac:	7ca00000 	.word	0x7ca00000
   83bb0:	00088b18 	.word	0x00088b18
   83bb4:	7ff00000 	.word	0x7ff00000
   83bb8:	fff80000 	.word	0xfff80000
   83bbc:	7fefffff 	.word	0x7fefffff
   83bc0:	f04f 32ff 	mov.w	r2, #4294967295
   83bc4:	fa02 f303 	lsl.w	r3, r2, r3
   83bc8:	ea03 0a00 	and.w	sl, r3, r0
   83bcc:	4650      	mov	r0, sl
   83bce:	4659      	mov	r1, fp
   83bd0:	2200      	movs	r2, #0
   83bd2:	2300      	movs	r3, #0
   83bd4:	f004 fba2 	bl	8831c <__aeabi_dcmpeq>
   83bd8:	2800      	cmp	r0, #0
   83bda:	d19f      	bne.n	83b1c <_strtod_r+0x56c>
   83bdc:	e001      	b.n	83be2 <_strtod_r+0x632>
   83bde:	2700      	movs	r7, #0
   83be0:	9704      	str	r7, [sp, #16]
   83be2:	9e03      	ldr	r6, [sp, #12]
   83be4:	4648      	mov	r0, r9
   83be6:	9600      	str	r6, [sp, #0]
   83be8:	9907      	ldr	r1, [sp, #28]
   83bea:	4622      	mov	r2, r4
   83bec:	462b      	mov	r3, r5
   83bee:	f003 f82c 	bl	86c4a <__s2b>
   83bf2:	9007      	str	r0, [sp, #28]
   83bf4:	2800      	cmp	r0, #0
   83bf6:	f43f af2d 	beq.w	83a54 <_strtod_r+0x4a4>
   83bfa:	9f06      	ldr	r7, [sp, #24]
   83bfc:	f04f 0800 	mov.w	r8, #0
   83c00:	427b      	negs	r3, r7
   83c02:	2f00      	cmp	r7, #0
   83c04:	bfa8      	it	ge
   83c06:	2300      	movge	r3, #0
   83c08:	930e      	str	r3, [sp, #56]	; 0x38
   83c0a:	f8cd 800c 	str.w	r8, [sp, #12]
   83c0e:	9e07      	ldr	r6, [sp, #28]
   83c10:	4648      	mov	r0, r9
   83c12:	6871      	ldr	r1, [r6, #4]
   83c14:	f002 ffb0 	bl	86b78 <_Balloc>
   83c18:	9005      	str	r0, [sp, #20]
   83c1a:	2800      	cmp	r0, #0
   83c1c:	f43f af22 	beq.w	83a64 <_strtod_r+0x4b4>
   83c20:	6932      	ldr	r2, [r6, #16]
   83c22:	f106 010c 	add.w	r1, r6, #12
   83c26:	3202      	adds	r2, #2
   83c28:	0092      	lsls	r2, r2, #2
   83c2a:	300c      	adds	r0, #12
   83c2c:	f7ff fbce 	bl	833cc <memcpy>
   83c30:	ab1b      	add	r3, sp, #108	; 0x6c
   83c32:	9300      	str	r3, [sp, #0]
   83c34:	ab1c      	add	r3, sp, #112	; 0x70
   83c36:	9301      	str	r3, [sp, #4]
   83c38:	4648      	mov	r0, r9
   83c3a:	4652      	mov	r2, sl
   83c3c:	465b      	mov	r3, fp
   83c3e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   83c42:	f003 fab4 	bl	871ae <__d2b>
   83c46:	901a      	str	r0, [sp, #104]	; 0x68
   83c48:	2800      	cmp	r0, #0
   83c4a:	f43f af0b 	beq.w	83a64 <_strtod_r+0x4b4>
   83c4e:	4648      	mov	r0, r9
   83c50:	2101      	movs	r1, #1
   83c52:	f003 f889 	bl	86d68 <__i2b>
   83c56:	9003      	str	r0, [sp, #12]
   83c58:	2800      	cmp	r0, #0
   83c5a:	f43f af03 	beq.w	83a64 <_strtod_r+0x4b4>
   83c5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   83c60:	f8dd c018 	ldr.w	ip, [sp, #24]
   83c64:	2b00      	cmp	r3, #0
   83c66:	ea2c 77ec 	bic.w	r7, ip, ip, asr #31
   83c6a:	f2c0 808b 	blt.w	83d84 <_strtod_r+0x7d4>
   83c6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   83c70:	463a      	mov	r2, r7
   83c72:	441c      	add	r4, r3
   83c74:	9e04      	ldr	r6, [sp, #16]
   83c76:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   83c78:	1b9b      	subs	r3, r3, r6
   83c7a:	1959      	adds	r1, r3, r5
   83c7c:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
   83c80:	4299      	cmp	r1, r3
   83c82:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   83c86:	f280 8087 	bge.w	83d98 <_strtod_r+0x7e8>
   83c8a:	1a5b      	subs	r3, r3, r1
   83c8c:	2b1f      	cmp	r3, #31
   83c8e:	ebc3 0505 	rsb	r5, r3, r5
   83c92:	f04f 0001 	mov.w	r0, #1
   83c96:	dc78      	bgt.n	83d8a <_strtod_r+0x7da>
   83c98:	4098      	lsls	r0, r3
   83c9a:	2300      	movs	r3, #0
   83c9c:	9014      	str	r0, [sp, #80]	; 0x50
   83c9e:	930f      	str	r3, [sp, #60]	; 0x3c
   83ca0:	9804      	ldr	r0, [sp, #16]
   83ca2:	1966      	adds	r6, r4, r5
   83ca4:	4415      	add	r5, r2
   83ca6:	42a6      	cmp	r6, r4
   83ca8:	bfb4      	ite	lt
   83caa:	4633      	movlt	r3, r6
   83cac:	4623      	movge	r3, r4
   83cae:	4405      	add	r5, r0
   83cb0:	42ab      	cmp	r3, r5
   83cb2:	bfa8      	it	ge
   83cb4:	462b      	movge	r3, r5
   83cb6:	2b00      	cmp	r3, #0
   83cb8:	dd02      	ble.n	83cc0 <_strtod_r+0x710>
   83cba:	1af6      	subs	r6, r6, r3
   83cbc:	1aed      	subs	r5, r5, r3
   83cbe:	1ae4      	subs	r4, r4, r3
   83cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
   83cc2:	2900      	cmp	r1, #0
   83cc4:	d16f      	bne.n	83da6 <_strtod_r+0x7f6>
   83cc6:	2e00      	cmp	r6, #0
   83cc8:	f300 8087 	bgt.w	83dda <_strtod_r+0x82a>
   83ccc:	2f00      	cmp	r7, #0
   83cce:	f040 808e 	bne.w	83dee <_strtod_r+0x83e>
   83cd2:	2d00      	cmp	r5, #0
   83cd4:	f300 8095 	bgt.w	83e02 <_strtod_r+0x852>
   83cd8:	2c00      	cmp	r4, #0
   83cda:	f300 809c 	bgt.w	83e16 <_strtod_r+0x866>
   83cde:	4648      	mov	r0, r9
   83ce0:	991a      	ldr	r1, [sp, #104]	; 0x68
   83ce2:	9a05      	ldr	r2, [sp, #20]
   83ce4:	f003 f990 	bl	87008 <__mdiff>
   83ce8:	4680      	mov	r8, r0
   83cea:	2800      	cmp	r0, #0
   83cec:	f43f aeba 	beq.w	83a64 <_strtod_r+0x4b4>
   83cf0:	68c6      	ldr	r6, [r0, #12]
   83cf2:	2300      	movs	r3, #0
   83cf4:	60c3      	str	r3, [r0, #12]
   83cf6:	9903      	ldr	r1, [sp, #12]
   83cf8:	9608      	str	r6, [sp, #32]
   83cfa:	f003 f968 	bl	86fce <__mcmp>
   83cfe:	2800      	cmp	r0, #0
   83d00:	f280 8098 	bge.w	83e34 <_strtod_r+0x884>
   83d04:	2e00      	cmp	r6, #0
   83d06:	f040 8220 	bne.w	8414a <_strtod_r+0xb9a>
   83d0a:	f1ba 0f00 	cmp.w	sl, #0
   83d0e:	f040 821c 	bne.w	8414a <_strtod_r+0xb9a>
   83d12:	f3cb 0313 	ubfx	r3, fp, #0, #20
   83d16:	2b00      	cmp	r3, #0
   83d18:	f040 8217 	bne.w	8414a <_strtod_r+0xb9a>
   83d1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   83d20:	0d1b      	lsrs	r3, r3, #20
   83d22:	051b      	lsls	r3, r3, #20
   83d24:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   83d28:	f240 820f 	bls.w	8414a <_strtod_r+0xb9a>
   83d2c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   83d30:	2b00      	cmp	r3, #0
   83d32:	d07a      	beq.n	83e2a <_strtod_r+0x87a>
   83d34:	4641      	mov	r1, r8
   83d36:	2201      	movs	r2, #1
   83d38:	4648      	mov	r0, r9
   83d3a:	f003 f8f5 	bl	86f28 <__lshift>
   83d3e:	9903      	ldr	r1, [sp, #12]
   83d40:	4680      	mov	r8, r0
   83d42:	f003 f944 	bl	86fce <__mcmp>
   83d46:	2800      	cmp	r0, #0
   83d48:	f340 81ff 	ble.w	8414a <_strtod_r+0xb9a>
   83d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   83d50:	9f04      	ldr	r7, [sp, #16]
   83d52:	0d1b      	lsrs	r3, r3, #20
   83d54:	051b      	lsls	r3, r3, #20
   83d56:	2f00      	cmp	r7, #0
   83d58:	f000 809c 	beq.w	83e94 <_strtod_r+0x8e4>
   83d5c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   83d60:	f200 8098 	bhi.w	83e94 <_strtod_r+0x8e4>
   83d64:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   83d68:	f200 81f1 	bhi.w	8414e <_strtod_r+0xb9e>
   83d6c:	9e07      	ldr	r6, [sp, #28]
   83d6e:	2322      	movs	r3, #34	; 0x22
   83d70:	f04f 0a00 	mov.w	sl, #0
   83d74:	f04f 0b00 	mov.w	fp, #0
   83d78:	f8c9 3000 	str.w	r3, [r9]
   83d7c:	2e00      	cmp	r6, #0
   83d7e:	f040 81f7 	bne.w	84170 <_strtod_r+0xbc0>
   83d82:	e209      	b.n	84198 <_strtod_r+0xbe8>
   83d84:	1afa      	subs	r2, r7, r3
   83d86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   83d88:	e774      	b.n	83c74 <_strtod_r+0x6c4>
   83d8a:	4e84      	ldr	r6, [pc, #528]	; (83f9c <_strtod_r+0x9ec>)
   83d8c:	9014      	str	r0, [sp, #80]	; 0x50
   83d8e:	1a76      	subs	r6, r6, r1
   83d90:	fa00 f606 	lsl.w	r6, r0, r6
   83d94:	960f      	str	r6, [sp, #60]	; 0x3c
   83d96:	e783      	b.n	83ca0 <_strtod_r+0x6f0>
   83d98:	2600      	movs	r6, #0
   83d9a:	f04f 0c01 	mov.w	ip, #1
   83d9e:	960f      	str	r6, [sp, #60]	; 0x3c
   83da0:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   83da4:	e77c      	b.n	83ca0 <_strtod_r+0x6f0>
   83da6:	4648      	mov	r0, r9
   83da8:	9903      	ldr	r1, [sp, #12]
   83daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83dac:	f003 f87d 	bl	86eaa <__pow5mult>
   83db0:	9003      	str	r0, [sp, #12]
   83db2:	2800      	cmp	r0, #0
   83db4:	f43f ae56 	beq.w	83a64 <_strtod_r+0x4b4>
   83db8:	4648      	mov	r0, r9
   83dba:	9903      	ldr	r1, [sp, #12]
   83dbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   83dbe:	f002 ffdc 	bl	86d7a <__multiply>
   83dc2:	4603      	mov	r3, r0
   83dc4:	2800      	cmp	r0, #0
   83dc6:	f43f ae4d 	beq.w	83a64 <_strtod_r+0x4b4>
   83dca:	4648      	mov	r0, r9
   83dcc:	991a      	ldr	r1, [sp, #104]	; 0x68
   83dce:	9302      	str	r3, [sp, #8]
   83dd0:	f002 fef8 	bl	86bc4 <_Bfree>
   83dd4:	9b02      	ldr	r3, [sp, #8]
   83dd6:	931a      	str	r3, [sp, #104]	; 0x68
   83dd8:	e775      	b.n	83cc6 <_strtod_r+0x716>
   83dda:	4648      	mov	r0, r9
   83ddc:	991a      	ldr	r1, [sp, #104]	; 0x68
   83dde:	4632      	mov	r2, r6
   83de0:	f003 f8a2 	bl	86f28 <__lshift>
   83de4:	901a      	str	r0, [sp, #104]	; 0x68
   83de6:	2800      	cmp	r0, #0
   83de8:	f47f af70 	bne.w	83ccc <_strtod_r+0x71c>
   83dec:	e63a      	b.n	83a64 <_strtod_r+0x4b4>
   83dee:	4648      	mov	r0, r9
   83df0:	9905      	ldr	r1, [sp, #20]
   83df2:	463a      	mov	r2, r7
   83df4:	f003 f859 	bl	86eaa <__pow5mult>
   83df8:	9005      	str	r0, [sp, #20]
   83dfa:	2800      	cmp	r0, #0
   83dfc:	f47f af69 	bne.w	83cd2 <_strtod_r+0x722>
   83e00:	e630      	b.n	83a64 <_strtod_r+0x4b4>
   83e02:	4648      	mov	r0, r9
   83e04:	9905      	ldr	r1, [sp, #20]
   83e06:	462a      	mov	r2, r5
   83e08:	f003 f88e 	bl	86f28 <__lshift>
   83e0c:	9005      	str	r0, [sp, #20]
   83e0e:	2800      	cmp	r0, #0
   83e10:	f47f af62 	bne.w	83cd8 <_strtod_r+0x728>
   83e14:	e626      	b.n	83a64 <_strtod_r+0x4b4>
   83e16:	4648      	mov	r0, r9
   83e18:	9903      	ldr	r1, [sp, #12]
   83e1a:	4622      	mov	r2, r4
   83e1c:	f003 f884 	bl	86f28 <__lshift>
   83e20:	9003      	str	r0, [sp, #12]
   83e22:	2800      	cmp	r0, #0
   83e24:	f47f af5b 	bne.w	83cde <_strtod_r+0x72e>
   83e28:	e61c      	b.n	83a64 <_strtod_r+0x4b4>
   83e2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   83e2e:	2b01      	cmp	r3, #1
   83e30:	dc80      	bgt.n	83d34 <_strtod_r+0x784>
   83e32:	e18a      	b.n	8414a <_strtod_r+0xb9a>
   83e34:	d163      	bne.n	83efe <_strtod_r+0x94e>
   83e36:	9f08      	ldr	r7, [sp, #32]
   83e38:	f3cb 0313 	ubfx	r3, fp, #0, #20
   83e3c:	b32f      	cbz	r7, 83e8a <_strtod_r+0x8da>
   83e3e:	4958      	ldr	r1, [pc, #352]	; (83fa0 <_strtod_r+0x9f0>)
   83e40:	465a      	mov	r2, fp
   83e42:	428b      	cmp	r3, r1
   83e44:	d12f      	bne.n	83ea6 <_strtod_r+0x8f6>
   83e46:	9e04      	ldr	r6, [sp, #16]
   83e48:	4651      	mov	r1, sl
   83e4a:	b16e      	cbz	r6, 83e68 <_strtod_r+0x8b8>
   83e4c:	4b55      	ldr	r3, [pc, #340]	; (83fa4 <_strtod_r+0x9f4>)
   83e4e:	ea0b 0303 	and.w	r3, fp, r3
   83e52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   83e56:	d807      	bhi.n	83e68 <_strtod_r+0x8b8>
   83e58:	0d1b      	lsrs	r3, r3, #20
   83e5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   83e5e:	f04f 30ff 	mov.w	r0, #4294967295
   83e62:	fa00 f303 	lsl.w	r3, r0, r3
   83e66:	e001      	b.n	83e6c <_strtod_r+0x8bc>
   83e68:	f04f 33ff 	mov.w	r3, #4294967295
   83e6c:	4299      	cmp	r1, r3
   83e6e:	d11a      	bne.n	83ea6 <_strtod_r+0x8f6>
   83e70:	4b4d      	ldr	r3, [pc, #308]	; (83fa8 <_strtod_r+0x9f8>)
   83e72:	429a      	cmp	r2, r3
   83e74:	d102      	bne.n	83e7c <_strtod_r+0x8cc>
   83e76:	3101      	adds	r1, #1
   83e78:	f43f adf4 	beq.w	83a64 <_strtod_r+0x4b4>
   83e7c:	4b49      	ldr	r3, [pc, #292]	; (83fa4 <_strtod_r+0x9f4>)
   83e7e:	f04f 0a00 	mov.w	sl, #0
   83e82:	4013      	ands	r3, r2
   83e84:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   83e88:	e15f      	b.n	8414a <_strtod_r+0xb9a>
   83e8a:	b963      	cbnz	r3, 83ea6 <_strtod_r+0x8f6>
   83e8c:	f1ba 0f00 	cmp.w	sl, #0
   83e90:	d109      	bne.n	83ea6 <_strtod_r+0x8f6>
   83e92:	e75b      	b.n	83d4c <_strtod_r+0x79c>
   83e94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   83e98:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   83e9c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   83ea0:	f04f 3aff 	mov.w	sl, #4294967295
   83ea4:	e151      	b.n	8414a <_strtod_r+0xb9a>
   83ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83ea8:	b113      	cbz	r3, 83eb0 <_strtod_r+0x900>
   83eaa:	ea13 0f0b 	tst.w	r3, fp
   83eae:	e002      	b.n	83eb6 <_strtod_r+0x906>
   83eb0:	9e14      	ldr	r6, [sp, #80]	; 0x50
   83eb2:	ea16 0f0a 	tst.w	r6, sl
   83eb6:	f000 8148 	beq.w	8414a <_strtod_r+0xb9a>
   83eba:	9f08      	ldr	r7, [sp, #32]
   83ebc:	4650      	mov	r0, sl
   83ebe:	4659      	mov	r1, fp
   83ec0:	9a04      	ldr	r2, [sp, #16]
   83ec2:	b157      	cbz	r7, 83eda <_strtod_r+0x92a>
   83ec4:	f7ff fb55 	bl	83572 <sulp>
   83ec8:	4602      	mov	r2, r0
   83eca:	460b      	mov	r3, r1
   83ecc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   83ed0:	f7fe fe0a 	bl	82ae8 <__adddf3>
   83ed4:	4682      	mov	sl, r0
   83ed6:	468b      	mov	fp, r1
   83ed8:	e137      	b.n	8414a <_strtod_r+0xb9a>
   83eda:	f7ff fb4a 	bl	83572 <sulp>
   83ede:	4602      	mov	r2, r0
   83ee0:	460b      	mov	r3, r1
   83ee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   83ee6:	f7fe fdfd 	bl	82ae4 <__aeabi_dsub>
   83eea:	2200      	movs	r2, #0
   83eec:	2300      	movs	r3, #0
   83eee:	4682      	mov	sl, r0
   83ef0:	468b      	mov	fp, r1
   83ef2:	f004 fa13 	bl	8831c <__aeabi_dcmpeq>
   83ef6:	2800      	cmp	r0, #0
   83ef8:	f47f af38 	bne.w	83d6c <_strtod_r+0x7bc>
   83efc:	e125      	b.n	8414a <_strtod_r+0xb9a>
   83efe:	4640      	mov	r0, r8
   83f00:	9903      	ldr	r1, [sp, #12]
   83f02:	f003 f9a6 	bl	87252 <__ratio>
   83f06:	2200      	movs	r2, #0
   83f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83f0c:	4604      	mov	r4, r0
   83f0e:	460d      	mov	r5, r1
   83f10:	f004 fa18 	bl	88344 <__aeabi_dcmple>
   83f14:	2800      	cmp	r0, #0
   83f16:	d032      	beq.n	83f7e <_strtod_r+0x9ce>
   83f18:	9e08      	ldr	r6, [sp, #32]
   83f1a:	b126      	cbz	r6, 83f26 <_strtod_r+0x976>
   83f1c:	4f23      	ldr	r7, [pc, #140]	; (83fac <_strtod_r+0x9fc>)
   83f1e:	2600      	movs	r6, #0
   83f20:	4634      	mov	r4, r6
   83f22:	463d      	mov	r5, r7
   83f24:	e04c      	b.n	83fc0 <_strtod_r+0xa10>
   83f26:	f1ba 0f00 	cmp.w	sl, #0
   83f2a:	d103      	bne.n	83f34 <_strtod_r+0x984>
   83f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   83f30:	b93b      	cbnz	r3, 83f42 <_strtod_r+0x992>
   83f32:	e00b      	b.n	83f4c <_strtod_r+0x99c>
   83f34:	f1ba 0f01 	cmp.w	sl, #1
   83f38:	d103      	bne.n	83f42 <_strtod_r+0x992>
   83f3a:	f1bb 0f00 	cmp.w	fp, #0
   83f3e:	f43f af15 	beq.w	83d6c <_strtod_r+0x7bc>
   83f42:	2600      	movs	r6, #0
   83f44:	4f1a      	ldr	r7, [pc, #104]	; (83fb0 <_strtod_r+0xa00>)
   83f46:	2400      	movs	r4, #0
   83f48:	4d18      	ldr	r5, [pc, #96]	; (83fac <_strtod_r+0x9fc>)
   83f4a:	e039      	b.n	83fc0 <_strtod_r+0xa10>
   83f4c:	4620      	mov	r0, r4
   83f4e:	4629      	mov	r1, r5
   83f50:	2200      	movs	r2, #0
   83f52:	4b16      	ldr	r3, [pc, #88]	; (83fac <_strtod_r+0x9fc>)
   83f54:	f004 f9ec 	bl	88330 <__aeabi_dcmplt>
   83f58:	b940      	cbnz	r0, 83f6c <_strtod_r+0x9bc>
   83f5a:	4620      	mov	r0, r4
   83f5c:	4629      	mov	r1, r5
   83f5e:	2200      	movs	r2, #0
   83f60:	4b14      	ldr	r3, [pc, #80]	; (83fb4 <_strtod_r+0xa04>)
   83f62:	f7fe ff73 	bl	82e4c <__aeabi_dmul>
   83f66:	4604      	mov	r4, r0
   83f68:	460d      	mov	r5, r1
   83f6a:	e001      	b.n	83f70 <_strtod_r+0x9c0>
   83f6c:	4d11      	ldr	r5, [pc, #68]	; (83fb4 <_strtod_r+0xa04>)
   83f6e:	2400      	movs	r4, #0
   83f70:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
   83f74:	9416      	str	r4, [sp, #88]	; 0x58
   83f76:	9717      	str	r7, [sp, #92]	; 0x5c
   83f78:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   83f7c:	e020      	b.n	83fc0 <_strtod_r+0xa10>
   83f7e:	4620      	mov	r0, r4
   83f80:	4629      	mov	r1, r5
   83f82:	2200      	movs	r2, #0
   83f84:	4b0b      	ldr	r3, [pc, #44]	; (83fb4 <_strtod_r+0xa04>)
   83f86:	f7fe ff61 	bl	82e4c <__aeabi_dmul>
   83f8a:	9e08      	ldr	r6, [sp, #32]
   83f8c:	4604      	mov	r4, r0
   83f8e:	460d      	mov	r5, r1
   83f90:	b996      	cbnz	r6, 83fb8 <_strtod_r+0xa08>
   83f92:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   83f96:	9010      	str	r0, [sp, #64]	; 0x40
   83f98:	9711      	str	r7, [sp, #68]	; 0x44
   83f9a:	e00f      	b.n	83fbc <_strtod_r+0xa0c>
   83f9c:	fffffbe3 	.word	0xfffffbe3
   83fa0:	000fffff 	.word	0x000fffff
   83fa4:	7ff00000 	.word	0x7ff00000
   83fa8:	7fefffff 	.word	0x7fefffff
   83fac:	3ff00000 	.word	0x3ff00000
   83fb0:	bff00000 	.word	0xbff00000
   83fb4:	3fe00000 	.word	0x3fe00000
   83fb8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   83fbc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   83fc0:	f02b 4c00 	bic.w	ip, fp, #2147483648	; 0x80000000
   83fc4:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
   83fc8:	4b83      	ldr	r3, [pc, #524]	; (841d8 <_strtod_r+0xc28>)
   83fca:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   83fce:	459c      	cmp	ip, r3
   83fd0:	d131      	bne.n	84036 <_strtod_r+0xa86>
   83fd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   83fd6:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   83fda:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   83fde:	4650      	mov	r0, sl
   83fe0:	4659      	mov	r1, fp
   83fe2:	f8cd c008 	str.w	ip, [sp, #8]
   83fe6:	f003 f86e 	bl	870c6 <__ulp>
   83fea:	4602      	mov	r2, r0
   83fec:	460b      	mov	r3, r1
   83fee:	4630      	mov	r0, r6
   83ff0:	4639      	mov	r1, r7
   83ff2:	f7fe ff2b 	bl	82e4c <__aeabi_dmul>
   83ff6:	4602      	mov	r2, r0
   83ff8:	460b      	mov	r3, r1
   83ffa:	4650      	mov	r0, sl
   83ffc:	4659      	mov	r1, fp
   83ffe:	f7fe fd73 	bl	82ae8 <__adddf3>
   84002:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   84006:	0d1b      	lsrs	r3, r3, #20
   84008:	4a74      	ldr	r2, [pc, #464]	; (841dc <_strtod_r+0xc2c>)
   8400a:	051b      	lsls	r3, r3, #20
   8400c:	4293      	cmp	r3, r2
   8400e:	4682      	mov	sl, r0
   84010:	f8dd c008 	ldr.w	ip, [sp, #8]
   84014:	d90c      	bls.n	84030 <_strtod_r+0xa80>
   84016:	4b72      	ldr	r3, [pc, #456]	; (841e0 <_strtod_r+0xc30>)
   84018:	990d      	ldr	r1, [sp, #52]	; 0x34
   8401a:	4299      	cmp	r1, r3
   8401c:	d103      	bne.n	84026 <_strtod_r+0xa76>
   8401e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84020:	3201      	adds	r2, #1
   84022:	f43f ad1f 	beq.w	83a64 <_strtod_r+0x4b4>
   84026:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 841e0 <_strtod_r+0xc30>
   8402a:	f04f 3aff 	mov.w	sl, #4294967295
   8402e:	e07b      	b.n	84128 <_strtod_r+0xb78>
   84030:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   84034:	e042      	b.n	840bc <_strtod_r+0xb0c>
   84036:	9b04      	ldr	r3, [sp, #16]
   84038:	b353      	cbz	r3, 84090 <_strtod_r+0xae0>
   8403a:	f1bc 6fd4 	cmp.w	ip, #111149056	; 0x6a00000
   8403e:	d827      	bhi.n	84090 <_strtod_r+0xae0>
   84040:	a35d      	add	r3, pc, #372	; (adr r3, 841b8 <_strtod_r+0xc08>)
   84042:	e9d3 2300 	ldrd	r2, r3, [r3]
   84046:	4620      	mov	r0, r4
   84048:	4629      	mov	r1, r5
   8404a:	f8cd c008 	str.w	ip, [sp, #8]
   8404e:	f004 f979 	bl	88344 <__aeabi_dcmple>
   84052:	f8dd c008 	ldr.w	ip, [sp, #8]
   84056:	b1b8      	cbz	r0, 84088 <_strtod_r+0xad8>
   84058:	4629      	mov	r1, r5
   8405a:	4620      	mov	r0, r4
   8405c:	f004 f990 	bl	88380 <__aeabi_d2uiz>
   84060:	2800      	cmp	r0, #0
   84062:	bf08      	it	eq
   84064:	2001      	moveq	r0, #1
   84066:	f7fe fe7b 	bl	82d60 <__aeabi_ui2d>
   8406a:	9e08      	ldr	r6, [sp, #32]
   8406c:	4604      	mov	r4, r0
   8406e:	460d      	mov	r5, r1
   84070:	f8dd c008 	ldr.w	ip, [sp, #8]
   84074:	b926      	cbnz	r6, 84080 <_strtod_r+0xad0>
   84076:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   8407a:	9012      	str	r0, [sp, #72]	; 0x48
   8407c:	9713      	str	r7, [sp, #76]	; 0x4c
   8407e:	e001      	b.n	84084 <_strtod_r+0xad4>
   84080:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
   84084:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   84088:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
   8408c:	ebcc 0703 	rsb	r7, ip, r3
   84090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   84094:	f8cd c008 	str.w	ip, [sp, #8]
   84098:	f003 f815 	bl	870c6 <__ulp>
   8409c:	4602      	mov	r2, r0
   8409e:	460b      	mov	r3, r1
   840a0:	4630      	mov	r0, r6
   840a2:	4639      	mov	r1, r7
   840a4:	f7fe fed2 	bl	82e4c <__aeabi_dmul>
   840a8:	4602      	mov	r2, r0
   840aa:	460b      	mov	r3, r1
   840ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   840b0:	f7fe fd1a 	bl	82ae8 <__adddf3>
   840b4:	f8dd c008 	ldr.w	ip, [sp, #8]
   840b8:	4682      	mov	sl, r0
   840ba:	468b      	mov	fp, r1
   840bc:	9f04      	ldr	r7, [sp, #16]
   840be:	2f00      	cmp	r7, #0
   840c0:	d132      	bne.n	84128 <_strtod_r+0xb78>
   840c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   840c6:	0d1b      	lsrs	r3, r3, #20
   840c8:	051b      	lsls	r3, r3, #20
   840ca:	459c      	cmp	ip, r3
   840cc:	d12c      	bne.n	84128 <_strtod_r+0xb78>
   840ce:	4629      	mov	r1, r5
   840d0:	4620      	mov	r0, r4
   840d2:	f7ff f8cd 	bl	83270 <__aeabi_d2iz>
   840d6:	f7fe fe53 	bl	82d80 <__aeabi_i2d>
   840da:	4602      	mov	r2, r0
   840dc:	460b      	mov	r3, r1
   840de:	4620      	mov	r0, r4
   840e0:	4629      	mov	r1, r5
   840e2:	f7fe fcff 	bl	82ae4 <__aeabi_dsub>
   840e6:	9f08      	ldr	r7, [sp, #32]
   840e8:	4604      	mov	r4, r0
   840ea:	460d      	mov	r5, r1
   840ec:	b92f      	cbnz	r7, 840fa <_strtod_r+0xb4a>
   840ee:	f1ba 0f00 	cmp.w	sl, #0
   840f2:	d102      	bne.n	840fa <_strtod_r+0xb4a>
   840f4:	f3cb 0613 	ubfx	r6, fp, #0, #20
   840f8:	b186      	cbz	r6, 8411c <_strtod_r+0xb6c>
   840fa:	4620      	mov	r0, r4
   840fc:	4629      	mov	r1, r5
   840fe:	a330      	add	r3, pc, #192	; (adr r3, 841c0 <_strtod_r+0xc10>)
   84100:	e9d3 2300 	ldrd	r2, r3, [r3]
   84104:	f004 f914 	bl	88330 <__aeabi_dcmplt>
   84108:	2800      	cmp	r0, #0
   8410a:	d131      	bne.n	84170 <_strtod_r+0xbc0>
   8410c:	4620      	mov	r0, r4
   8410e:	4629      	mov	r1, r5
   84110:	a32d      	add	r3, pc, #180	; (adr r3, 841c8 <_strtod_r+0xc18>)
   84112:	e9d3 2300 	ldrd	r2, r3, [r3]
   84116:	f004 f929 	bl	8836c <__aeabi_dcmpgt>
   8411a:	e004      	b.n	84126 <_strtod_r+0xb76>
   8411c:	a32c      	add	r3, pc, #176	; (adr r3, 841d0 <_strtod_r+0xc20>)
   8411e:	e9d3 2300 	ldrd	r2, r3, [r3]
   84122:	f004 f905 	bl	88330 <__aeabi_dcmplt>
   84126:	bb18      	cbnz	r0, 84170 <_strtod_r+0xbc0>
   84128:	4648      	mov	r0, r9
   8412a:	991a      	ldr	r1, [sp, #104]	; 0x68
   8412c:	f002 fd4a 	bl	86bc4 <_Bfree>
   84130:	4648      	mov	r0, r9
   84132:	9905      	ldr	r1, [sp, #20]
   84134:	f002 fd46 	bl	86bc4 <_Bfree>
   84138:	4648      	mov	r0, r9
   8413a:	9903      	ldr	r1, [sp, #12]
   8413c:	f002 fd42 	bl	86bc4 <_Bfree>
   84140:	4648      	mov	r0, r9
   84142:	4641      	mov	r1, r8
   84144:	f002 fd3e 	bl	86bc4 <_Bfree>
   84148:	e561      	b.n	83c0e <_strtod_r+0x65e>
   8414a:	9e04      	ldr	r6, [sp, #16]
   8414c:	b186      	cbz	r6, 84170 <_strtod_r+0xbc0>
   8414e:	4f25      	ldr	r7, [pc, #148]	; (841e4 <_strtod_r+0xc34>)
   84150:	2000      	movs	r0, #0
   84152:	900c      	str	r0, [sp, #48]	; 0x30
   84154:	970d      	str	r7, [sp, #52]	; 0x34
   84156:	4650      	mov	r0, sl
   84158:	4659      	mov	r1, fp
   8415a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   8415e:	f7fe fe75 	bl	82e4c <__aeabi_dmul>
   84162:	4682      	mov	sl, r0
   84164:	468b      	mov	fp, r1
   84166:	b919      	cbnz	r1, 84170 <_strtod_r+0xbc0>
   84168:	b910      	cbnz	r0, 84170 <_strtod_r+0xbc0>
   8416a:	2322      	movs	r3, #34	; 0x22
   8416c:	f8c9 3000 	str.w	r3, [r9]
   84170:	4648      	mov	r0, r9
   84172:	991a      	ldr	r1, [sp, #104]	; 0x68
   84174:	f002 fd26 	bl	86bc4 <_Bfree>
   84178:	4648      	mov	r0, r9
   8417a:	9905      	ldr	r1, [sp, #20]
   8417c:	f002 fd22 	bl	86bc4 <_Bfree>
   84180:	4648      	mov	r0, r9
   84182:	9903      	ldr	r1, [sp, #12]
   84184:	f002 fd1e 	bl	86bc4 <_Bfree>
   84188:	4648      	mov	r0, r9
   8418a:	9907      	ldr	r1, [sp, #28]
   8418c:	f002 fd1a 	bl	86bc4 <_Bfree>
   84190:	4648      	mov	r0, r9
   84192:	4641      	mov	r1, r8
   84194:	f002 fd16 	bl	86bc4 <_Bfree>
   84198:	9e15      	ldr	r6, [sp, #84]	; 0x54
   8419a:	b10e      	cbz	r6, 841a0 <_strtod_r+0xbf0>
   8419c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8419e:	6033      	str	r3, [r6, #0]
   841a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   841a2:	b11f      	cbz	r7, 841ac <_strtod_r+0xbfc>
   841a4:	4650      	mov	r0, sl
   841a6:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
   841aa:	e001      	b.n	841b0 <_strtod_r+0xc00>
   841ac:	4650      	mov	r0, sl
   841ae:	4659      	mov	r1, fp
   841b0:	b01f      	add	sp, #124	; 0x7c
   841b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841b6:	bf00      	nop
   841b8:	ffc00000 	.word	0xffc00000
   841bc:	41dfffff 	.word	0x41dfffff
   841c0:	94a03595 	.word	0x94a03595
   841c4:	3fdfffff 	.word	0x3fdfffff
   841c8:	35afe535 	.word	0x35afe535
   841cc:	3fe00000 	.word	0x3fe00000
   841d0:	94a03595 	.word	0x94a03595
   841d4:	3fcfffff 	.word	0x3fcfffff
   841d8:	7fe00000 	.word	0x7fe00000
   841dc:	7c9fffff 	.word	0x7c9fffff
   841e0:	7fefffff 	.word	0x7fefffff
   841e4:	39500000 	.word	0x39500000

000841e8 <strtod>:
   841e8:	460a      	mov	r2, r1
   841ea:	4903      	ldr	r1, [pc, #12]	; (841f8 <strtod+0x10>)
   841ec:	4603      	mov	r3, r0
   841ee:	6808      	ldr	r0, [r1, #0]
   841f0:	4619      	mov	r1, r3
   841f2:	f7ff b9dd 	b.w	835b0 <_strtod_r>
   841f6:	bf00      	nop
   841f8:	20070010 	.word	0x20070010

000841fc <strtof>:
   841fc:	460a      	mov	r2, r1
   841fe:	490a      	ldr	r1, [pc, #40]	; (84228 <strtof+0x2c>)
   84200:	b538      	push	{r3, r4, r5, lr}
   84202:	4603      	mov	r3, r0
   84204:	6808      	ldr	r0, [r1, #0]
   84206:	4619      	mov	r1, r3
   84208:	f7ff f9d2 	bl	835b0 <_strtod_r>
   8420c:	4604      	mov	r4, r0
   8420e:	460d      	mov	r5, r1
   84210:	f003 facc 	bl	877ac <__fpclassifyd>
   84214:	b918      	cbnz	r0, 8421e <strtof+0x22>
   84216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8421a:	f003 bb2b 	b.w	87874 <nanf>
   8421e:	4620      	mov	r0, r4
   84220:	4629      	mov	r1, r5
   84222:	f004 f8cd 	bl	883c0 <__aeabi_d2f>
   84226:	bd38      	pop	{r3, r4, r5, pc}
   84228:	20070010 	.word	0x20070010
   8422c:	f3af 8000 	nop.w

00084230 <__sprint_r>:
   84230:	6893      	ldr	r3, [r2, #8]
   84232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84236:	4681      	mov	r9, r0
   84238:	460f      	mov	r7, r1
   8423a:	4614      	mov	r4, r2
   8423c:	b91b      	cbnz	r3, 84246 <__sprint_r+0x16>
   8423e:	6053      	str	r3, [r2, #4]
   84240:	4618      	mov	r0, r3
   84242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84246:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84248:	049d      	lsls	r5, r3, #18
   8424a:	d51d      	bpl.n	84288 <__sprint_r+0x58>
   8424c:	6815      	ldr	r5, [r2, #0]
   8424e:	68a3      	ldr	r3, [r4, #8]
   84250:	3508      	adds	r5, #8
   84252:	b1bb      	cbz	r3, 84284 <__sprint_r+0x54>
   84254:	f855 3c04 	ldr.w	r3, [r5, #-4]
   84258:	f855 ac08 	ldr.w	sl, [r5, #-8]
   8425c:	ea4f 0893 	mov.w	r8, r3, lsr #2
   84260:	2600      	movs	r6, #0
   84262:	4546      	cmp	r6, r8
   84264:	da09      	bge.n	8427a <__sprint_r+0x4a>
   84266:	4648      	mov	r0, r9
   84268:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
   8426c:	463a      	mov	r2, r7
   8426e:	f001 fab7 	bl	857e0 <_fputwc_r>
   84272:	1c43      	adds	r3, r0, #1
   84274:	d00a      	beq.n	8428c <__sprint_r+0x5c>
   84276:	3601      	adds	r6, #1
   84278:	e7f3      	b.n	84262 <__sprint_r+0x32>
   8427a:	68a3      	ldr	r3, [r4, #8]
   8427c:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
   84280:	60a3      	str	r3, [r4, #8]
   84282:	e7e4      	b.n	8424e <__sprint_r+0x1e>
   84284:	4618      	mov	r0, r3
   84286:	e001      	b.n	8428c <__sprint_r+0x5c>
   84288:	f001 fc74 	bl	85b74 <__sfvwrite_r>
   8428c:	2300      	movs	r3, #0
   8428e:	60a3      	str	r3, [r4, #8]
   84290:	6063      	str	r3, [r4, #4]
   84292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084296 <_vfiprintf_r>:
   84296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8429a:	b0ad      	sub	sp, #180	; 0xb4
   8429c:	4688      	mov	r8, r1
   8429e:	9202      	str	r2, [sp, #8]
   842a0:	461c      	mov	r4, r3
   842a2:	461e      	mov	r6, r3
   842a4:	4683      	mov	fp, r0
   842a6:	b118      	cbz	r0, 842b0 <_vfiprintf_r+0x1a>
   842a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   842aa:	b90b      	cbnz	r3, 842b0 <_vfiprintf_r+0x1a>
   842ac:	f001 f9ce 	bl	8564c <__sinit>
   842b0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   842b4:	0498      	lsls	r0, r3, #18
   842b6:	d409      	bmi.n	842cc <_vfiprintf_r+0x36>
   842b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   842bc:	f8a8 300c 	strh.w	r3, [r8, #12]
   842c0:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
   842c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   842c8:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
   842cc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   842d0:	0719      	lsls	r1, r3, #28
   842d2:	d509      	bpl.n	842e8 <_vfiprintf_r+0x52>
   842d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   842d8:	b133      	cbz	r3, 842e8 <_vfiprintf_r+0x52>
   842da:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   842de:	f003 031a 	and.w	r3, r3, #26
   842e2:	2b0a      	cmp	r3, #10
   842e4:	d114      	bne.n	84310 <_vfiprintf_r+0x7a>
   842e6:	e008      	b.n	842fa <_vfiprintf_r+0x64>
   842e8:	4658      	mov	r0, fp
   842ea:	4641      	mov	r1, r8
   842ec:	f001 f82a 	bl	85344 <__swsetup_r>
   842f0:	2800      	cmp	r0, #0
   842f2:	d0f2      	beq.n	842da <_vfiprintf_r+0x44>
   842f4:	f04f 30ff 	mov.w	r0, #4294967295
   842f8:	e3d9      	b.n	84aae <_vfiprintf_r+0x818>
   842fa:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   842fe:	2b00      	cmp	r3, #0
   84300:	db06      	blt.n	84310 <_vfiprintf_r+0x7a>
   84302:	4658      	mov	r0, fp
   84304:	4641      	mov	r1, r8
   84306:	9a02      	ldr	r2, [sp, #8]
   84308:	4623      	mov	r3, r4
   8430a:	f000 fbe1 	bl	84ad0 <__sbprintf>
   8430e:	e3ce      	b.n	84aae <_vfiprintf_r+0x818>
   84310:	2300      	movs	r3, #0
   84312:	aa1c      	add	r2, sp, #112	; 0x70
   84314:	920f      	str	r2, [sp, #60]	; 0x3c
   84316:	9311      	str	r3, [sp, #68]	; 0x44
   84318:	9310      	str	r3, [sp, #64]	; 0x40
   8431a:	4694      	mov	ip, r2
   8431c:	930a      	str	r3, [sp, #40]	; 0x28
   8431e:	9305      	str	r3, [sp, #20]
   84320:	9b02      	ldr	r3, [sp, #8]
   84322:	461c      	mov	r4, r3
   84324:	f813 2b01 	ldrb.w	r2, [r3], #1
   84328:	b91a      	cbnz	r2, 84332 <_vfiprintf_r+0x9c>
   8432a:	9802      	ldr	r0, [sp, #8]
   8432c:	1a25      	subs	r5, r4, r0
   8432e:	d103      	bne.n	84338 <_vfiprintf_r+0xa2>
   84330:	e01d      	b.n	8436e <_vfiprintf_r+0xd8>
   84332:	2a25      	cmp	r2, #37	; 0x25
   84334:	d1f5      	bne.n	84322 <_vfiprintf_r+0x8c>
   84336:	e7f8      	b.n	8432a <_vfiprintf_r+0x94>
   84338:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8433a:	9902      	ldr	r1, [sp, #8]
   8433c:	442b      	add	r3, r5
   8433e:	9311      	str	r3, [sp, #68]	; 0x44
   84340:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84342:	e88c 0022 	stmia.w	ip, {r1, r5}
   84346:	3301      	adds	r3, #1
   84348:	2b07      	cmp	r3, #7
   8434a:	9310      	str	r3, [sp, #64]	; 0x40
   8434c:	dc02      	bgt.n	84354 <_vfiprintf_r+0xbe>
   8434e:	f10c 0c08 	add.w	ip, ip, #8
   84352:	e009      	b.n	84368 <_vfiprintf_r+0xd2>
   84354:	4658      	mov	r0, fp
   84356:	4641      	mov	r1, r8
   84358:	aa0f      	add	r2, sp, #60	; 0x3c
   8435a:	f7ff ff69 	bl	84230 <__sprint_r>
   8435e:	2800      	cmp	r0, #0
   84360:	f040 839f 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   84364:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84368:	9a05      	ldr	r2, [sp, #20]
   8436a:	442a      	add	r2, r5
   8436c:	9205      	str	r2, [sp, #20]
   8436e:	7823      	ldrb	r3, [r4, #0]
   84370:	2b00      	cmp	r3, #0
   84372:	f000 838f 	beq.w	84a94 <_vfiprintf_r+0x7fe>
   84376:	2200      	movs	r2, #0
   84378:	3401      	adds	r4, #1
   8437a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8437e:	f04f 3aff 	mov.w	sl, #4294967295
   84382:	9204      	str	r2, [sp, #16]
   84384:	4617      	mov	r7, r2
   84386:	1c65      	adds	r5, r4, #1
   84388:	7823      	ldrb	r3, [r4, #0]
   8438a:	9502      	str	r5, [sp, #8]
   8438c:	2b58      	cmp	r3, #88	; 0x58
   8438e:	d064      	beq.n	8445a <_vfiprintf_r+0x1c4>
   84390:	dc2d      	bgt.n	843ee <_vfiprintf_r+0x158>
   84392:	2b2e      	cmp	r3, #46	; 0x2e
   84394:	d076      	beq.n	84484 <_vfiprintf_r+0x1ee>
   84396:	dc12      	bgt.n	843be <_vfiprintf_r+0x128>
   84398:	2b2a      	cmp	r3, #42	; 0x2a
   8439a:	d066      	beq.n	8446a <_vfiprintf_r+0x1d4>
   8439c:	dc08      	bgt.n	843b0 <_vfiprintf_r+0x11a>
   8439e:	2b20      	cmp	r3, #32
   843a0:	d05f      	beq.n	84462 <_vfiprintf_r+0x1cc>
   843a2:	2b23      	cmp	r3, #35	; 0x23
   843a4:	f040 8200 	bne.w	847a8 <_vfiprintf_r+0x512>
   843a8:	f047 0701 	orr.w	r7, r7, #1
   843ac:	9c02      	ldr	r4, [sp, #8]
   843ae:	e7ea      	b.n	84386 <_vfiprintf_r+0xf0>
   843b0:	2b2b      	cmp	r3, #43	; 0x2b
   843b2:	d101      	bne.n	843b8 <_vfiprintf_r+0x122>
   843b4:	461a      	mov	r2, r3
   843b6:	e7f9      	b.n	843ac <_vfiprintf_r+0x116>
   843b8:	2b2d      	cmp	r3, #45	; 0x2d
   843ba:	d060      	beq.n	8447e <_vfiprintf_r+0x1e8>
   843bc:	e1f4      	b.n	847a8 <_vfiprintf_r+0x512>
   843be:	2b39      	cmp	r3, #57	; 0x39
   843c0:	dc07      	bgt.n	843d2 <_vfiprintf_r+0x13c>
   843c2:	2b31      	cmp	r3, #49	; 0x31
   843c4:	da7f      	bge.n	844c6 <_vfiprintf_r+0x230>
   843c6:	2b30      	cmp	r3, #48	; 0x30
   843c8:	f040 81ee 	bne.w	847a8 <_vfiprintf_r+0x512>
   843cc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   843d0:	e7ec      	b.n	843ac <_vfiprintf_r+0x116>
   843d2:	2b4f      	cmp	r3, #79	; 0x4f
   843d4:	f000 80e0 	beq.w	84598 <_vfiprintf_r+0x302>
   843d8:	2b55      	cmp	r3, #85	; 0x55
   843da:	f000 8120 	beq.w	8461e <_vfiprintf_r+0x388>
   843de:	2b44      	cmp	r3, #68	; 0x44
   843e0:	f040 81e2 	bne.w	847a8 <_vfiprintf_r+0x512>
   843e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   843e8:	f047 0710 	orr.w	r7, r7, #16
   843ec:	e094      	b.n	84518 <_vfiprintf_r+0x282>
   843ee:	2b6e      	cmp	r3, #110	; 0x6e
   843f0:	f000 80b6 	beq.w	84560 <_vfiprintf_r+0x2ca>
   843f4:	dc0d      	bgt.n	84412 <_vfiprintf_r+0x17c>
   843f6:	2b68      	cmp	r3, #104	; 0x68
   843f8:	d076      	beq.n	844e8 <_vfiprintf_r+0x252>
   843fa:	dc05      	bgt.n	84408 <_vfiprintf_r+0x172>
   843fc:	2b63      	cmp	r3, #99	; 0x63
   843fe:	f000 8083 	beq.w	84508 <_vfiprintf_r+0x272>
   84402:	2b64      	cmp	r3, #100	; 0x64
   84404:	d026      	beq.n	84454 <_vfiprintf_r+0x1be>
   84406:	e1cf      	b.n	847a8 <_vfiprintf_r+0x512>
   84408:	2b69      	cmp	r3, #105	; 0x69
   8440a:	d023      	beq.n	84454 <_vfiprintf_r+0x1be>
   8440c:	2b6c      	cmp	r3, #108	; 0x6c
   8440e:	d06e      	beq.n	844ee <_vfiprintf_r+0x258>
   84410:	e1ca      	b.n	847a8 <_vfiprintf_r+0x512>
   84412:	2b71      	cmp	r3, #113	; 0x71
   84414:	d075      	beq.n	84502 <_vfiprintf_r+0x26c>
   84416:	dc13      	bgt.n	84440 <_vfiprintf_r+0x1aa>
   84418:	2b6f      	cmp	r3, #111	; 0x6f
   8441a:	f000 80bf 	beq.w	8459c <_vfiprintf_r+0x306>
   8441e:	2b70      	cmp	r3, #112	; 0x70
   84420:	f040 81c2 	bne.w	847a8 <_vfiprintf_r+0x512>
   84424:	2330      	movs	r3, #48	; 0x30
   84426:	48a0      	ldr	r0, [pc, #640]	; (846a8 <_vfiprintf_r+0x412>)
   84428:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   8442c:	2378      	movs	r3, #120	; 0x78
   8442e:	6834      	ldr	r4, [r6, #0]
   84430:	2500      	movs	r5, #0
   84432:	f047 0702 	orr.w	r7, r7, #2
   84436:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   8443a:	3604      	adds	r6, #4
   8443c:	900a      	str	r0, [sp, #40]	; 0x28
   8443e:	e12e      	b.n	8469e <_vfiprintf_r+0x408>
   84440:	2b75      	cmp	r3, #117	; 0x75
   84442:	f000 80ee 	beq.w	84622 <_vfiprintf_r+0x38c>
   84446:	2b78      	cmp	r3, #120	; 0x78
   84448:	f000 8103 	beq.w	84652 <_vfiprintf_r+0x3bc>
   8444c:	2b73      	cmp	r3, #115	; 0x73
   8444e:	f040 81ab 	bne.w	847a8 <_vfiprintf_r+0x512>
   84452:	e0bf      	b.n	845d4 <_vfiprintf_r+0x33e>
   84454:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   84458:	e05e      	b.n	84518 <_vfiprintf_r+0x282>
   8445a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8445e:	4c93      	ldr	r4, [pc, #588]	; (846ac <_vfiprintf_r+0x416>)
   84460:	e0fa      	b.n	84658 <_vfiprintf_r+0x3c2>
   84462:	2a00      	cmp	r2, #0
   84464:	bf08      	it	eq
   84466:	2220      	moveq	r2, #32
   84468:	e7a0      	b.n	843ac <_vfiprintf_r+0x116>
   8446a:	1d33      	adds	r3, r6, #4
   8446c:	6836      	ldr	r6, [r6, #0]
   8446e:	2e00      	cmp	r6, #0
   84470:	9604      	str	r6, [sp, #16]
   84472:	db01      	blt.n	84478 <_vfiprintf_r+0x1e2>
   84474:	461e      	mov	r6, r3
   84476:	e799      	b.n	843ac <_vfiprintf_r+0x116>
   84478:	4275      	negs	r5, r6
   8447a:	9504      	str	r5, [sp, #16]
   8447c:	461e      	mov	r6, r3
   8447e:	f047 0704 	orr.w	r7, r7, #4
   84482:	e793      	b.n	843ac <_vfiprintf_r+0x116>
   84484:	9c02      	ldr	r4, [sp, #8]
   84486:	7823      	ldrb	r3, [r4, #0]
   84488:	1c61      	adds	r1, r4, #1
   8448a:	2b2a      	cmp	r3, #42	; 0x2a
   8448c:	d002      	beq.n	84494 <_vfiprintf_r+0x1fe>
   8448e:	f04f 0a00 	mov.w	sl, #0
   84492:	e00a      	b.n	844aa <_vfiprintf_r+0x214>
   84494:	f8d6 a000 	ldr.w	sl, [r6]
   84498:	1d33      	adds	r3, r6, #4
   8449a:	f1ba 0f00 	cmp.w	sl, #0
   8449e:	461e      	mov	r6, r3
   844a0:	9102      	str	r1, [sp, #8]
   844a2:	da83      	bge.n	843ac <_vfiprintf_r+0x116>
   844a4:	f04f 3aff 	mov.w	sl, #4294967295
   844a8:	e780      	b.n	843ac <_vfiprintf_r+0x116>
   844aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   844ae:	2809      	cmp	r0, #9
   844b0:	d805      	bhi.n	844be <_vfiprintf_r+0x228>
   844b2:	230a      	movs	r3, #10
   844b4:	fb03 0a0a 	mla	sl, r3, sl, r0
   844b8:	f811 3b01 	ldrb.w	r3, [r1], #1
   844bc:	e7f5      	b.n	844aa <_vfiprintf_r+0x214>
   844be:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
   844c2:	9102      	str	r1, [sp, #8]
   844c4:	e762      	b.n	8438c <_vfiprintf_r+0xf6>
   844c6:	2500      	movs	r5, #0
   844c8:	9504      	str	r5, [sp, #16]
   844ca:	9c04      	ldr	r4, [sp, #16]
   844cc:	3b30      	subs	r3, #48	; 0x30
   844ce:	210a      	movs	r1, #10
   844d0:	fb01 3404 	mla	r4, r1, r4, r3
   844d4:	9902      	ldr	r1, [sp, #8]
   844d6:	9404      	str	r4, [sp, #16]
   844d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   844dc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   844e0:	2809      	cmp	r0, #9
   844e2:	d8ee      	bhi.n	844c2 <_vfiprintf_r+0x22c>
   844e4:	9102      	str	r1, [sp, #8]
   844e6:	e7f0      	b.n	844ca <_vfiprintf_r+0x234>
   844e8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
   844ec:	e75e      	b.n	843ac <_vfiprintf_r+0x116>
   844ee:	9d02      	ldr	r5, [sp, #8]
   844f0:	782b      	ldrb	r3, [r5, #0]
   844f2:	2b6c      	cmp	r3, #108	; 0x6c
   844f4:	d102      	bne.n	844fc <_vfiprintf_r+0x266>
   844f6:	3501      	adds	r5, #1
   844f8:	9502      	str	r5, [sp, #8]
   844fa:	e002      	b.n	84502 <_vfiprintf_r+0x26c>
   844fc:	f047 0710 	orr.w	r7, r7, #16
   84500:	e754      	b.n	843ac <_vfiprintf_r+0x116>
   84502:	f047 0720 	orr.w	r7, r7, #32
   84506:	e751      	b.n	843ac <_vfiprintf_r+0x116>
   84508:	6833      	ldr	r3, [r6, #0]
   8450a:	2500      	movs	r5, #0
   8450c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   84510:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   84514:	3604      	adds	r6, #4
   84516:	e151      	b.n	847bc <_vfiprintf_r+0x526>
   84518:	06ba      	lsls	r2, r7, #26
   8451a:	d507      	bpl.n	8452c <_vfiprintf_r+0x296>
   8451c:	3607      	adds	r6, #7
   8451e:	f026 0307 	bic.w	r3, r6, #7
   84522:	f103 0608 	add.w	r6, r3, #8
   84526:	e9d3 4500 	ldrd	r4, r5, [r3]
   8452a:	e00d      	b.n	84548 <_vfiprintf_r+0x2b2>
   8452c:	f017 0f10 	tst.w	r7, #16
   84530:	f106 0304 	add.w	r3, r6, #4
   84534:	d001      	beq.n	8453a <_vfiprintf_r+0x2a4>
   84536:	6834      	ldr	r4, [r6, #0]
   84538:	e004      	b.n	84544 <_vfiprintf_r+0x2ae>
   8453a:	6834      	ldr	r4, [r6, #0]
   8453c:	f017 0f40 	tst.w	r7, #64	; 0x40
   84540:	bf18      	it	ne
   84542:	b224      	sxthne	r4, r4
   84544:	17e5      	asrs	r5, r4, #31
   84546:	461e      	mov	r6, r3
   84548:	2c00      	cmp	r4, #0
   8454a:	f175 0000 	sbcs.w	r0, r5, #0
   8454e:	f280 80af 	bge.w	846b0 <_vfiprintf_r+0x41a>
   84552:	232d      	movs	r3, #45	; 0x2d
   84554:	4264      	negs	r4, r4
   84556:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8455a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8455e:	e0a7      	b.n	846b0 <_vfiprintf_r+0x41a>
   84560:	f017 0f20 	tst.w	r7, #32
   84564:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   84568:	f106 0104 	add.w	r1, r6, #4
   8456c:	d007      	beq.n	8457e <_vfiprintf_r+0x2e8>
   8456e:	9c05      	ldr	r4, [sp, #20]
   84570:	6830      	ldr	r0, [r6, #0]
   84572:	17e5      	asrs	r5, r4, #31
   84574:	4622      	mov	r2, r4
   84576:	462b      	mov	r3, r5
   84578:	e9c0 2300 	strd	r2, r3, [r0]
   8457c:	e00a      	b.n	84594 <_vfiprintf_r+0x2fe>
   8457e:	06fb      	lsls	r3, r7, #27
   84580:	d405      	bmi.n	8458e <_vfiprintf_r+0x2f8>
   84582:	067f      	lsls	r7, r7, #25
   84584:	d503      	bpl.n	8458e <_vfiprintf_r+0x2f8>
   84586:	6833      	ldr	r3, [r6, #0]
   84588:	9c05      	ldr	r4, [sp, #20]
   8458a:	801c      	strh	r4, [r3, #0]
   8458c:	e002      	b.n	84594 <_vfiprintf_r+0x2fe>
   8458e:	6833      	ldr	r3, [r6, #0]
   84590:	9d05      	ldr	r5, [sp, #20]
   84592:	601d      	str	r5, [r3, #0]
   84594:	460e      	mov	r6, r1
   84596:	e6c3      	b.n	84320 <_vfiprintf_r+0x8a>
   84598:	f047 0710 	orr.w	r7, r7, #16
   8459c:	f017 0320 	ands.w	r3, r7, #32
   845a0:	d008      	beq.n	845b4 <_vfiprintf_r+0x31e>
   845a2:	3607      	adds	r6, #7
   845a4:	f026 0307 	bic.w	r3, r6, #7
   845a8:	f103 0608 	add.w	r6, r3, #8
   845ac:	e9d3 4500 	ldrd	r4, r5, [r3]
   845b0:	2300      	movs	r3, #0
   845b2:	e075      	b.n	846a0 <_vfiprintf_r+0x40a>
   845b4:	f017 0110 	ands.w	r1, r7, #16
   845b8:	f106 0204 	add.w	r2, r6, #4
   845bc:	d106      	bne.n	845cc <_vfiprintf_r+0x336>
   845be:	f017 0340 	ands.w	r3, r7, #64	; 0x40
   845c2:	d003      	beq.n	845cc <_vfiprintf_r+0x336>
   845c4:	8834      	ldrh	r4, [r6, #0]
   845c6:	2500      	movs	r5, #0
   845c8:	4616      	mov	r6, r2
   845ca:	e7f1      	b.n	845b0 <_vfiprintf_r+0x31a>
   845cc:	6834      	ldr	r4, [r6, #0]
   845ce:	2500      	movs	r5, #0
   845d0:	4616      	mov	r6, r2
   845d2:	e065      	b.n	846a0 <_vfiprintf_r+0x40a>
   845d4:	f8d6 9000 	ldr.w	r9, [r6]
   845d8:	2300      	movs	r3, #0
   845da:	459a      	cmp	sl, r3
   845dc:	f106 0604 	add.w	r6, r6, #4
   845e0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   845e4:	4648      	mov	r0, r9
   845e6:	db11      	blt.n	8460c <_vfiprintf_r+0x376>
   845e8:	4619      	mov	r1, r3
   845ea:	4652      	mov	r2, sl
   845ec:	f8cd c004 	str.w	ip, [sp, #4]
   845f0:	f002 fa96 	bl	86b20 <memchr>
   845f4:	f8dd c004 	ldr.w	ip, [sp, #4]
   845f8:	2800      	cmp	r0, #0
   845fa:	f000 80e4 	beq.w	847c6 <_vfiprintf_r+0x530>
   845fe:	ebc9 0000 	rsb	r0, r9, r0
   84602:	4550      	cmp	r0, sl
   84604:	bfb8      	it	lt
   84606:	4682      	movlt	sl, r0
   84608:	2500      	movs	r5, #0
   8460a:	e0dd      	b.n	847c8 <_vfiprintf_r+0x532>
   8460c:	f8cd c004 	str.w	ip, [sp, #4]
   84610:	f7fe ff6a 	bl	834e8 <strlen>
   84614:	2500      	movs	r5, #0
   84616:	4682      	mov	sl, r0
   84618:	f8dd c004 	ldr.w	ip, [sp, #4]
   8461c:	e0d4      	b.n	847c8 <_vfiprintf_r+0x532>
   8461e:	f047 0710 	orr.w	r7, r7, #16
   84622:	06bd      	lsls	r5, r7, #26
   84624:	d507      	bpl.n	84636 <_vfiprintf_r+0x3a0>
   84626:	3607      	adds	r6, #7
   84628:	f026 0307 	bic.w	r3, r6, #7
   8462c:	f103 0608 	add.w	r6, r3, #8
   84630:	e9d3 4500 	ldrd	r4, r5, [r3]
   84634:	e00b      	b.n	8464e <_vfiprintf_r+0x3b8>
   84636:	f017 0f10 	tst.w	r7, #16
   8463a:	f106 0304 	add.w	r3, r6, #4
   8463e:	d103      	bne.n	84648 <_vfiprintf_r+0x3b2>
   84640:	067c      	lsls	r4, r7, #25
   84642:	d501      	bpl.n	84648 <_vfiprintf_r+0x3b2>
   84644:	8834      	ldrh	r4, [r6, #0]
   84646:	e000      	b.n	8464a <_vfiprintf_r+0x3b4>
   84648:	6834      	ldr	r4, [r6, #0]
   8464a:	2500      	movs	r5, #0
   8464c:	461e      	mov	r6, r3
   8464e:	2301      	movs	r3, #1
   84650:	e026      	b.n	846a0 <_vfiprintf_r+0x40a>
   84652:	4c15      	ldr	r4, [pc, #84]	; (846a8 <_vfiprintf_r+0x412>)
   84654:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   84658:	06b8      	lsls	r0, r7, #26
   8465a:	940a      	str	r4, [sp, #40]	; 0x28
   8465c:	d507      	bpl.n	8466e <_vfiprintf_r+0x3d8>
   8465e:	3607      	adds	r6, #7
   84660:	f026 0207 	bic.w	r2, r6, #7
   84664:	f102 0608 	add.w	r6, r2, #8
   84668:	e9d2 4500 	ldrd	r4, r5, [r2]
   8466c:	e00b      	b.n	84686 <_vfiprintf_r+0x3f0>
   8466e:	f017 0f10 	tst.w	r7, #16
   84672:	f106 0204 	add.w	r2, r6, #4
   84676:	d103      	bne.n	84680 <_vfiprintf_r+0x3ea>
   84678:	0679      	lsls	r1, r7, #25
   8467a:	d501      	bpl.n	84680 <_vfiprintf_r+0x3ea>
   8467c:	8834      	ldrh	r4, [r6, #0]
   8467e:	e000      	b.n	84682 <_vfiprintf_r+0x3ec>
   84680:	6834      	ldr	r4, [r6, #0]
   84682:	2500      	movs	r5, #0
   84684:	4616      	mov	r6, r2
   84686:	07fa      	lsls	r2, r7, #31
   84688:	d509      	bpl.n	8469e <_vfiprintf_r+0x408>
   8468a:	ea54 0005 	orrs.w	r0, r4, r5
   8468e:	d006      	beq.n	8469e <_vfiprintf_r+0x408>
   84690:	2230      	movs	r2, #48	; 0x30
   84692:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   84696:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   8469a:	f047 0702 	orr.w	r7, r7, #2
   8469e:	2302      	movs	r3, #2
   846a0:	2200      	movs	r2, #0
   846a2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   846a6:	e004      	b.n	846b2 <_vfiprintf_r+0x41c>
   846a8:	00088b7d 	.word	0x00088b7d
   846ac:	00088b6c 	.word	0x00088b6c
   846b0:	2301      	movs	r3, #1
   846b2:	f1ba 0f00 	cmp.w	sl, #0
   846b6:	bfa8      	it	ge
   846b8:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
   846bc:	ea54 0105 	orrs.w	r1, r4, r5
   846c0:	d102      	bne.n	846c8 <_vfiprintf_r+0x432>
   846c2:	f1ba 0f00 	cmp.w	sl, #0
   846c6:	d05e      	beq.n	84786 <_vfiprintf_r+0x4f0>
   846c8:	2b01      	cmp	r3, #1
   846ca:	d01f      	beq.n	8470c <_vfiprintf_r+0x476>
   846cc:	2b02      	cmp	r3, #2
   846ce:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
   846d2:	d045      	beq.n	84760 <_vfiprintf_r+0x4ca>
   846d4:	08e0      	lsrs	r0, r4, #3
   846d6:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
   846da:	08e8      	lsrs	r0, r5, #3
   846dc:	f004 0207 	and.w	r2, r4, #7
   846e0:	9106      	str	r1, [sp, #24]
   846e2:	9007      	str	r0, [sp, #28]
   846e4:	3230      	adds	r2, #48	; 0x30
   846e6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   846ea:	ea54 0105 	orrs.w	r1, r4, r5
   846ee:	4699      	mov	r9, r3
   846f0:	701a      	strb	r2, [r3, #0]
   846f2:	f103 33ff 	add.w	r3, r3, #4294967295
   846f6:	d1ed      	bne.n	846d4 <_vfiprintf_r+0x43e>
   846f8:	07f8      	lsls	r0, r7, #31
   846fa:	4649      	mov	r1, r9
   846fc:	d54e      	bpl.n	8479c <_vfiprintf_r+0x506>
   846fe:	2a30      	cmp	r2, #48	; 0x30
   84700:	d04c      	beq.n	8479c <_vfiprintf_r+0x506>
   84702:	4699      	mov	r9, r3
   84704:	2330      	movs	r3, #48	; 0x30
   84706:	f801 3c01 	strb.w	r3, [r1, #-1]
   8470a:	e047      	b.n	8479c <_vfiprintf_r+0x506>
   8470c:	2d00      	cmp	r5, #0
   8470e:	bf08      	it	eq
   84710:	2c0a      	cmpeq	r4, #10
   84712:	d205      	bcs.n	84720 <_vfiprintf_r+0x48a>
   84714:	3430      	adds	r4, #48	; 0x30
   84716:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   8471a:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
   8471e:	e03d      	b.n	8479c <_vfiprintf_r+0x506>
   84720:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   84724:	9203      	str	r2, [sp, #12]
   84726:	4620      	mov	r0, r4
   84728:	4629      	mov	r1, r5
   8472a:	220a      	movs	r2, #10
   8472c:	2300      	movs	r3, #0
   8472e:	f8cd c004 	str.w	ip, [sp, #4]
   84732:	f003 fe95 	bl	88460 <__aeabi_uldivmod>
   84736:	9b03      	ldr	r3, [sp, #12]
   84738:	3230      	adds	r2, #48	; 0x30
   8473a:	f803 2901 	strb.w	r2, [r3], #-1
   8473e:	4620      	mov	r0, r4
   84740:	4629      	mov	r1, r5
   84742:	f8dd 900c 	ldr.w	r9, [sp, #12]
   84746:	220a      	movs	r2, #10
   84748:	9303      	str	r3, [sp, #12]
   8474a:	2300      	movs	r3, #0
   8474c:	f003 fe88 	bl	88460 <__aeabi_uldivmod>
   84750:	4604      	mov	r4, r0
   84752:	460d      	mov	r5, r1
   84754:	ea54 0005 	orrs.w	r0, r4, r5
   84758:	f8dd c004 	ldr.w	ip, [sp, #4]
   8475c:	d1e3      	bne.n	84726 <_vfiprintf_r+0x490>
   8475e:	e01d      	b.n	8479c <_vfiprintf_r+0x506>
   84760:	990a      	ldr	r1, [sp, #40]	; 0x28
   84762:	f004 020f 	and.w	r2, r4, #15
   84766:	5c8a      	ldrb	r2, [r1, r2]
   84768:	4699      	mov	r9, r3
   8476a:	f803 2901 	strb.w	r2, [r3], #-1
   8476e:	0922      	lsrs	r2, r4, #4
   84770:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
   84774:	0929      	lsrs	r1, r5, #4
   84776:	9008      	str	r0, [sp, #32]
   84778:	9109      	str	r1, [sp, #36]	; 0x24
   8477a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   8477e:	ea54 0205 	orrs.w	r2, r4, r5
   84782:	d1ed      	bne.n	84760 <_vfiprintf_r+0x4ca>
   84784:	e00a      	b.n	8479c <_vfiprintf_r+0x506>
   84786:	b93b      	cbnz	r3, 84798 <_vfiprintf_r+0x502>
   84788:	07f9      	lsls	r1, r7, #31
   8478a:	d505      	bpl.n	84798 <_vfiprintf_r+0x502>
   8478c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   84790:	2330      	movs	r3, #48	; 0x30
   84792:	f809 3d41 	strb.w	r3, [r9, #-65]!
   84796:	e001      	b.n	8479c <_vfiprintf_r+0x506>
   84798:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   8479c:	4655      	mov	r5, sl
   8479e:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   847a2:	ebc9 0a0a 	rsb	sl, r9, sl
   847a6:	e00f      	b.n	847c8 <_vfiprintf_r+0x532>
   847a8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   847ac:	2b00      	cmp	r3, #0
   847ae:	f000 8171 	beq.w	84a94 <_vfiprintf_r+0x7fe>
   847b2:	2500      	movs	r5, #0
   847b4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   847b8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   847bc:	f04f 0a01 	mov.w	sl, #1
   847c0:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   847c4:	e000      	b.n	847c8 <_vfiprintf_r+0x532>
   847c6:	4605      	mov	r5, r0
   847c8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   847cc:	45aa      	cmp	sl, r5
   847ce:	bfac      	ite	ge
   847d0:	4654      	movge	r4, sl
   847d2:	462c      	movlt	r4, r5
   847d4:	b103      	cbz	r3, 847d8 <_vfiprintf_r+0x542>
   847d6:	3401      	adds	r4, #1
   847d8:	f017 0302 	ands.w	r3, r7, #2
   847dc:	9303      	str	r3, [sp, #12]
   847de:	bf18      	it	ne
   847e0:	3402      	addne	r4, #2
   847e2:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   847e6:	930b      	str	r3, [sp, #44]	; 0x2c
   847e8:	d13b      	bne.n	84862 <_vfiprintf_r+0x5cc>
   847ea:	9804      	ldr	r0, [sp, #16]
   847ec:	1b03      	subs	r3, r0, r4
   847ee:	2b00      	cmp	r3, #0
   847f0:	dd37      	ble.n	84862 <_vfiprintf_r+0x5cc>
   847f2:	4aa6      	ldr	r2, [pc, #664]	; (84a8c <_vfiprintf_r+0x7f6>)
   847f4:	2b10      	cmp	r3, #16
   847f6:	f8cc 2000 	str.w	r2, [ip]
   847fa:	dd1b      	ble.n	84834 <_vfiprintf_r+0x59e>
   847fc:	2210      	movs	r2, #16
   847fe:	f8cc 2004 	str.w	r2, [ip, #4]
   84802:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84804:	3210      	adds	r2, #16
   84806:	9211      	str	r2, [sp, #68]	; 0x44
   84808:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8480a:	3201      	adds	r2, #1
   8480c:	2a07      	cmp	r2, #7
   8480e:	9210      	str	r2, [sp, #64]	; 0x40
   84810:	dc02      	bgt.n	84818 <_vfiprintf_r+0x582>
   84812:	f10c 0c08 	add.w	ip, ip, #8
   84816:	e00b      	b.n	84830 <_vfiprintf_r+0x59a>
   84818:	4658      	mov	r0, fp
   8481a:	4641      	mov	r1, r8
   8481c:	aa0f      	add	r2, sp, #60	; 0x3c
   8481e:	9301      	str	r3, [sp, #4]
   84820:	f7ff fd06 	bl	84230 <__sprint_r>
   84824:	9b01      	ldr	r3, [sp, #4]
   84826:	2800      	cmp	r0, #0
   84828:	f040 813b 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   8482c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84830:	3b10      	subs	r3, #16
   84832:	e7de      	b.n	847f2 <_vfiprintf_r+0x55c>
   84834:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84836:	f8cc 3004 	str.w	r3, [ip, #4]
   8483a:	4413      	add	r3, r2
   8483c:	9311      	str	r3, [sp, #68]	; 0x44
   8483e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84840:	3301      	adds	r3, #1
   84842:	2b07      	cmp	r3, #7
   84844:	9310      	str	r3, [sp, #64]	; 0x40
   84846:	dc02      	bgt.n	8484e <_vfiprintf_r+0x5b8>
   84848:	f10c 0c08 	add.w	ip, ip, #8
   8484c:	e009      	b.n	84862 <_vfiprintf_r+0x5cc>
   8484e:	4658      	mov	r0, fp
   84850:	4641      	mov	r1, r8
   84852:	aa0f      	add	r2, sp, #60	; 0x3c
   84854:	f7ff fcec 	bl	84230 <__sprint_r>
   84858:	2800      	cmp	r0, #0
   8485a:	f040 8122 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   8485e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84862:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   84866:	b1db      	cbz	r3, 848a0 <_vfiprintf_r+0x60a>
   84868:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   8486c:	f8cc 3000 	str.w	r3, [ip]
   84870:	2301      	movs	r3, #1
   84872:	f8cc 3004 	str.w	r3, [ip, #4]
   84876:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84878:	3301      	adds	r3, #1
   8487a:	9311      	str	r3, [sp, #68]	; 0x44
   8487c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8487e:	3301      	adds	r3, #1
   84880:	2b07      	cmp	r3, #7
   84882:	9310      	str	r3, [sp, #64]	; 0x40
   84884:	dc02      	bgt.n	8488c <_vfiprintf_r+0x5f6>
   84886:	f10c 0c08 	add.w	ip, ip, #8
   8488a:	e009      	b.n	848a0 <_vfiprintf_r+0x60a>
   8488c:	4658      	mov	r0, fp
   8488e:	4641      	mov	r1, r8
   84890:	aa0f      	add	r2, sp, #60	; 0x3c
   84892:	f7ff fccd 	bl	84230 <__sprint_r>
   84896:	2800      	cmp	r0, #0
   84898:	f040 8103 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   8489c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   848a0:	9b03      	ldr	r3, [sp, #12]
   848a2:	b1d3      	cbz	r3, 848da <_vfiprintf_r+0x644>
   848a4:	ab0e      	add	r3, sp, #56	; 0x38
   848a6:	f8cc 3000 	str.w	r3, [ip]
   848aa:	2302      	movs	r3, #2
   848ac:	f8cc 3004 	str.w	r3, [ip, #4]
   848b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   848b2:	3302      	adds	r3, #2
   848b4:	9311      	str	r3, [sp, #68]	; 0x44
   848b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   848b8:	3301      	adds	r3, #1
   848ba:	2b07      	cmp	r3, #7
   848bc:	9310      	str	r3, [sp, #64]	; 0x40
   848be:	dc02      	bgt.n	848c6 <_vfiprintf_r+0x630>
   848c0:	f10c 0c08 	add.w	ip, ip, #8
   848c4:	e009      	b.n	848da <_vfiprintf_r+0x644>
   848c6:	4658      	mov	r0, fp
   848c8:	4641      	mov	r1, r8
   848ca:	aa0f      	add	r2, sp, #60	; 0x3c
   848cc:	f7ff fcb0 	bl	84230 <__sprint_r>
   848d0:	2800      	cmp	r0, #0
   848d2:	f040 80e6 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   848d6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   848da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   848dc:	2b80      	cmp	r3, #128	; 0x80
   848de:	d13f      	bne.n	84960 <_vfiprintf_r+0x6ca>
   848e0:	9b04      	ldr	r3, [sp, #16]
   848e2:	1b1b      	subs	r3, r3, r4
   848e4:	2b00      	cmp	r3, #0
   848e6:	9303      	str	r3, [sp, #12]
   848e8:	dd3a      	ble.n	84960 <_vfiprintf_r+0x6ca>
   848ea:	9b03      	ldr	r3, [sp, #12]
   848ec:	2b10      	cmp	r3, #16
   848ee:	4b68      	ldr	r3, [pc, #416]	; (84a90 <_vfiprintf_r+0x7fa>)
   848f0:	f8cc 3000 	str.w	r3, [ip]
   848f4:	dd1b      	ble.n	8492e <_vfiprintf_r+0x698>
   848f6:	2310      	movs	r3, #16
   848f8:	f8cc 3004 	str.w	r3, [ip, #4]
   848fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   848fe:	3310      	adds	r3, #16
   84900:	9311      	str	r3, [sp, #68]	; 0x44
   84902:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84904:	3301      	adds	r3, #1
   84906:	2b07      	cmp	r3, #7
   84908:	9310      	str	r3, [sp, #64]	; 0x40
   8490a:	dc02      	bgt.n	84912 <_vfiprintf_r+0x67c>
   8490c:	f10c 0c08 	add.w	ip, ip, #8
   84910:	e009      	b.n	84926 <_vfiprintf_r+0x690>
   84912:	4658      	mov	r0, fp
   84914:	4641      	mov	r1, r8
   84916:	aa0f      	add	r2, sp, #60	; 0x3c
   84918:	f7ff fc8a 	bl	84230 <__sprint_r>
   8491c:	2800      	cmp	r0, #0
   8491e:	f040 80c0 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   84922:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84926:	9b03      	ldr	r3, [sp, #12]
   84928:	3b10      	subs	r3, #16
   8492a:	9303      	str	r3, [sp, #12]
   8492c:	e7dd      	b.n	848ea <_vfiprintf_r+0x654>
   8492e:	9b03      	ldr	r3, [sp, #12]
   84930:	9803      	ldr	r0, [sp, #12]
   84932:	f8cc 3004 	str.w	r3, [ip, #4]
   84936:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84938:	4403      	add	r3, r0
   8493a:	9311      	str	r3, [sp, #68]	; 0x44
   8493c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8493e:	3301      	adds	r3, #1
   84940:	2b07      	cmp	r3, #7
   84942:	9310      	str	r3, [sp, #64]	; 0x40
   84944:	dc02      	bgt.n	8494c <_vfiprintf_r+0x6b6>
   84946:	f10c 0c08 	add.w	ip, ip, #8
   8494a:	e009      	b.n	84960 <_vfiprintf_r+0x6ca>
   8494c:	4658      	mov	r0, fp
   8494e:	4641      	mov	r1, r8
   84950:	aa0f      	add	r2, sp, #60	; 0x3c
   84952:	f7ff fc6d 	bl	84230 <__sprint_r>
   84956:	2800      	cmp	r0, #0
   84958:	f040 80a3 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   8495c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84960:	ebca 0505 	rsb	r5, sl, r5
   84964:	2d00      	cmp	r5, #0
   84966:	dd34      	ble.n	849d2 <_vfiprintf_r+0x73c>
   84968:	4b49      	ldr	r3, [pc, #292]	; (84a90 <_vfiprintf_r+0x7fa>)
   8496a:	2d10      	cmp	r5, #16
   8496c:	f8cc 3000 	str.w	r3, [ip]
   84970:	dd19      	ble.n	849a6 <_vfiprintf_r+0x710>
   84972:	2310      	movs	r3, #16
   84974:	f8cc 3004 	str.w	r3, [ip, #4]
   84978:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8497a:	3310      	adds	r3, #16
   8497c:	9311      	str	r3, [sp, #68]	; 0x44
   8497e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84980:	3301      	adds	r3, #1
   84982:	2b07      	cmp	r3, #7
   84984:	9310      	str	r3, [sp, #64]	; 0x40
   84986:	dc02      	bgt.n	8498e <_vfiprintf_r+0x6f8>
   84988:	f10c 0c08 	add.w	ip, ip, #8
   8498c:	e009      	b.n	849a2 <_vfiprintf_r+0x70c>
   8498e:	4658      	mov	r0, fp
   84990:	4641      	mov	r1, r8
   84992:	aa0f      	add	r2, sp, #60	; 0x3c
   84994:	f7ff fc4c 	bl	84230 <__sprint_r>
   84998:	2800      	cmp	r0, #0
   8499a:	f040 8082 	bne.w	84aa2 <_vfiprintf_r+0x80c>
   8499e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   849a2:	3d10      	subs	r5, #16
   849a4:	e7e0      	b.n	84968 <_vfiprintf_r+0x6d2>
   849a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   849a8:	f8cc 5004 	str.w	r5, [ip, #4]
   849ac:	441d      	add	r5, r3
   849ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   849b0:	9511      	str	r5, [sp, #68]	; 0x44
   849b2:	3301      	adds	r3, #1
   849b4:	2b07      	cmp	r3, #7
   849b6:	9310      	str	r3, [sp, #64]	; 0x40
   849b8:	dc02      	bgt.n	849c0 <_vfiprintf_r+0x72a>
   849ba:	f10c 0c08 	add.w	ip, ip, #8
   849be:	e008      	b.n	849d2 <_vfiprintf_r+0x73c>
   849c0:	4658      	mov	r0, fp
   849c2:	4641      	mov	r1, r8
   849c4:	aa0f      	add	r2, sp, #60	; 0x3c
   849c6:	f7ff fc33 	bl	84230 <__sprint_r>
   849ca:	2800      	cmp	r0, #0
   849cc:	d169      	bne.n	84aa2 <_vfiprintf_r+0x80c>
   849ce:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   849d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   849d4:	e88c 0600 	stmia.w	ip, {r9, sl}
   849d8:	4453      	add	r3, sl
   849da:	9311      	str	r3, [sp, #68]	; 0x44
   849dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   849de:	3301      	adds	r3, #1
   849e0:	2b07      	cmp	r3, #7
   849e2:	9310      	str	r3, [sp, #64]	; 0x40
   849e4:	dc02      	bgt.n	849ec <_vfiprintf_r+0x756>
   849e6:	f10c 0308 	add.w	r3, ip, #8
   849ea:	e007      	b.n	849fc <_vfiprintf_r+0x766>
   849ec:	4658      	mov	r0, fp
   849ee:	4641      	mov	r1, r8
   849f0:	aa0f      	add	r2, sp, #60	; 0x3c
   849f2:	f7ff fc1d 	bl	84230 <__sprint_r>
   849f6:	2800      	cmp	r0, #0
   849f8:	d153      	bne.n	84aa2 <_vfiprintf_r+0x80c>
   849fa:	ab1c      	add	r3, sp, #112	; 0x70
   849fc:	077a      	lsls	r2, r7, #29
   849fe:	d40a      	bmi.n	84a16 <_vfiprintf_r+0x780>
   84a00:	9d05      	ldr	r5, [sp, #20]
   84a02:	9804      	ldr	r0, [sp, #16]
   84a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84a06:	4284      	cmp	r4, r0
   84a08:	bfac      	ite	ge
   84a0a:	192d      	addge	r5, r5, r4
   84a0c:	182d      	addlt	r5, r5, r0
   84a0e:	9505      	str	r5, [sp, #20]
   84a10:	2b00      	cmp	r3, #0
   84a12:	d035      	beq.n	84a80 <_vfiprintf_r+0x7ea>
   84a14:	e02e      	b.n	84a74 <_vfiprintf_r+0x7de>
   84a16:	9904      	ldr	r1, [sp, #16]
   84a18:	1b0d      	subs	r5, r1, r4
   84a1a:	2d00      	cmp	r5, #0
   84a1c:	ddf0      	ble.n	84a00 <_vfiprintf_r+0x76a>
   84a1e:	4a1b      	ldr	r2, [pc, #108]	; (84a8c <_vfiprintf_r+0x7f6>)
   84a20:	2d10      	cmp	r5, #16
   84a22:	601a      	str	r2, [r3, #0]
   84a24:	dd15      	ble.n	84a52 <_vfiprintf_r+0x7bc>
   84a26:	2210      	movs	r2, #16
   84a28:	605a      	str	r2, [r3, #4]
   84a2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84a2c:	3210      	adds	r2, #16
   84a2e:	9211      	str	r2, [sp, #68]	; 0x44
   84a30:	9a10      	ldr	r2, [sp, #64]	; 0x40
   84a32:	3201      	adds	r2, #1
   84a34:	2a07      	cmp	r2, #7
   84a36:	9210      	str	r2, [sp, #64]	; 0x40
   84a38:	dc01      	bgt.n	84a3e <_vfiprintf_r+0x7a8>
   84a3a:	3308      	adds	r3, #8
   84a3c:	e007      	b.n	84a4e <_vfiprintf_r+0x7b8>
   84a3e:	4658      	mov	r0, fp
   84a40:	4641      	mov	r1, r8
   84a42:	aa0f      	add	r2, sp, #60	; 0x3c
   84a44:	f7ff fbf4 	bl	84230 <__sprint_r>
   84a48:	2800      	cmp	r0, #0
   84a4a:	d12a      	bne.n	84aa2 <_vfiprintf_r+0x80c>
   84a4c:	ab1c      	add	r3, sp, #112	; 0x70
   84a4e:	3d10      	subs	r5, #16
   84a50:	e7e5      	b.n	84a1e <_vfiprintf_r+0x788>
   84a52:	605d      	str	r5, [r3, #4]
   84a54:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84a56:	441d      	add	r5, r3
   84a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84a5a:	9511      	str	r5, [sp, #68]	; 0x44
   84a5c:	3301      	adds	r3, #1
   84a5e:	2b07      	cmp	r3, #7
   84a60:	9310      	str	r3, [sp, #64]	; 0x40
   84a62:	ddcd      	ble.n	84a00 <_vfiprintf_r+0x76a>
   84a64:	4658      	mov	r0, fp
   84a66:	4641      	mov	r1, r8
   84a68:	aa0f      	add	r2, sp, #60	; 0x3c
   84a6a:	f7ff fbe1 	bl	84230 <__sprint_r>
   84a6e:	2800      	cmp	r0, #0
   84a70:	d0c6      	beq.n	84a00 <_vfiprintf_r+0x76a>
   84a72:	e016      	b.n	84aa2 <_vfiprintf_r+0x80c>
   84a74:	4658      	mov	r0, fp
   84a76:	4641      	mov	r1, r8
   84a78:	aa0f      	add	r2, sp, #60	; 0x3c
   84a7a:	f7ff fbd9 	bl	84230 <__sprint_r>
   84a7e:	b980      	cbnz	r0, 84aa2 <_vfiprintf_r+0x80c>
   84a80:	2300      	movs	r3, #0
   84a82:	9310      	str	r3, [sp, #64]	; 0x40
   84a84:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   84a88:	e44a      	b.n	84320 <_vfiprintf_r+0x8a>
   84a8a:	bf00      	nop
   84a8c:	00088b4c 	.word	0x00088b4c
   84a90:	00088b5c 	.word	0x00088b5c
   84a94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84a96:	b123      	cbz	r3, 84aa2 <_vfiprintf_r+0x80c>
   84a98:	4658      	mov	r0, fp
   84a9a:	4641      	mov	r1, r8
   84a9c:	aa0f      	add	r2, sp, #60	; 0x3c
   84a9e:	f7ff fbc7 	bl	84230 <__sprint_r>
   84aa2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84aa6:	065b      	lsls	r3, r3, #25
   84aa8:	f53f ac24 	bmi.w	842f4 <_vfiprintf_r+0x5e>
   84aac:	9805      	ldr	r0, [sp, #20]
   84aae:	b02d      	add	sp, #180	; 0xb4
   84ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084ab4 <vfiprintf>:
   84ab4:	b530      	push	{r4, r5, lr}
   84ab6:	4613      	mov	r3, r2
   84ab8:	4a04      	ldr	r2, [pc, #16]	; (84acc <vfiprintf+0x18>)
   84aba:	4605      	mov	r5, r0
   84abc:	460c      	mov	r4, r1
   84abe:	6810      	ldr	r0, [r2, #0]
   84ac0:	4629      	mov	r1, r5
   84ac2:	4622      	mov	r2, r4
   84ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   84ac8:	f7ff bbe5 	b.w	84296 <_vfiprintf_r>
   84acc:	20070010 	.word	0x20070010

00084ad0 <__sbprintf>:
   84ad0:	b570      	push	{r4, r5, r6, lr}
   84ad2:	460c      	mov	r4, r1
   84ad4:	8989      	ldrh	r1, [r1, #12]
   84ad6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84ada:	f021 0102 	bic.w	r1, r1, #2
   84ade:	f8ad 100c 	strh.w	r1, [sp, #12]
   84ae2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84ae4:	4606      	mov	r6, r0
   84ae6:	9119      	str	r1, [sp, #100]	; 0x64
   84ae8:	89e1      	ldrh	r1, [r4, #14]
   84aea:	f8ad 100e 	strh.w	r1, [sp, #14]
   84aee:	69e1      	ldr	r1, [r4, #28]
   84af0:	9107      	str	r1, [sp, #28]
   84af2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   84af4:	9109      	str	r1, [sp, #36]	; 0x24
   84af6:	a91a      	add	r1, sp, #104	; 0x68
   84af8:	9100      	str	r1, [sp, #0]
   84afa:	9104      	str	r1, [sp, #16]
   84afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84b00:	9102      	str	r1, [sp, #8]
   84b02:	9105      	str	r1, [sp, #20]
   84b04:	2100      	movs	r1, #0
   84b06:	9106      	str	r1, [sp, #24]
   84b08:	4669      	mov	r1, sp
   84b0a:	f7ff fbc4 	bl	84296 <_vfiprintf_r>
   84b0e:	1e05      	subs	r5, r0, #0
   84b10:	db07      	blt.n	84b22 <__sbprintf+0x52>
   84b12:	4630      	mov	r0, r6
   84b14:	4669      	mov	r1, sp
   84b16:	f000 fd50 	bl	855ba <_fflush_r>
   84b1a:	2800      	cmp	r0, #0
   84b1c:	bf18      	it	ne
   84b1e:	f04f 35ff 	movne.w	r5, #4294967295
   84b22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84b26:	065b      	lsls	r3, r3, #25
   84b28:	d503      	bpl.n	84b32 <__sbprintf+0x62>
   84b2a:	89a3      	ldrh	r3, [r4, #12]
   84b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b30:	81a3      	strh	r3, [r4, #12]
   84b32:	4628      	mov	r0, r5
   84b34:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84b38:	bd70      	pop	{r4, r5, r6, pc}
   84b3a:	bf00      	nop

00084b3c <__svfiscanf_r>:
   84b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84b40:	461d      	mov	r5, r3
   84b42:	898b      	ldrh	r3, [r1, #12]
   84b44:	b0d7      	sub	sp, #348	; 0x15c
   84b46:	049e      	lsls	r6, r3, #18
   84b48:	4681      	mov	r9, r0
   84b4a:	460c      	mov	r4, r1
   84b4c:	9206      	str	r2, [sp, #24]
   84b4e:	d406      	bmi.n	84b5e <__svfiscanf_r+0x22>
   84b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84b54:	818b      	strh	r3, [r1, #12]
   84b56:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84b5c:	664b      	str	r3, [r1, #100]	; 0x64
   84b5e:	2600      	movs	r6, #0
   84b60:	9605      	str	r6, [sp, #20]
   84b62:	46b0      	mov	r8, r6
   84b64:	4637      	mov	r7, r6
   84b66:	9604      	str	r6, [sp, #16]
   84b68:	9e06      	ldr	r6, [sp, #24]
   84b6a:	f816 3b01 	ldrb.w	r3, [r6], #1
   84b6e:	9606      	str	r6, [sp, #24]
   84b70:	9309      	str	r3, [sp, #36]	; 0x24
   84b72:	2b00      	cmp	r3, #0
   84b74:	f000 83a6 	beq.w	852c4 <__svfiscanf_r+0x788>
   84b78:	4e9d      	ldr	r6, [pc, #628]	; (84df0 <__svfiscanf_r+0x2b4>)
   84b7a:	6831      	ldr	r1, [r6, #0]
   84b7c:	18ca      	adds	r2, r1, r3
   84b7e:	7852      	ldrb	r2, [r2, #1]
   84b80:	f002 0208 	and.w	r2, r2, #8
   84b84:	f002 0bff 	and.w	fp, r2, #255	; 0xff
   84b88:	b1ba      	cbz	r2, 84bba <__svfiscanf_r+0x7e>
   84b8a:	6863      	ldr	r3, [r4, #4]
   84b8c:	2b00      	cmp	r3, #0
   84b8e:	dd0d      	ble.n	84bac <__svfiscanf_r+0x70>
   84b90:	6823      	ldr	r3, [r4, #0]
   84b92:	6832      	ldr	r2, [r6, #0]
   84b94:	7819      	ldrb	r1, [r3, #0]
   84b96:	440a      	add	r2, r1
   84b98:	7852      	ldrb	r2, [r2, #1]
   84b9a:	0710      	lsls	r0, r2, #28
   84b9c:	d5e4      	bpl.n	84b68 <__svfiscanf_r+0x2c>
   84b9e:	6862      	ldr	r2, [r4, #4]
   84ba0:	3301      	adds	r3, #1
   84ba2:	3a01      	subs	r2, #1
   84ba4:	3701      	adds	r7, #1
   84ba6:	6062      	str	r2, [r4, #4]
   84ba8:	6023      	str	r3, [r4, #0]
   84baa:	e7ee      	b.n	84b8a <__svfiscanf_r+0x4e>
   84bac:	4648      	mov	r0, r9
   84bae:	4621      	mov	r1, r4
   84bb0:	f002 fd7f 	bl	876b2 <__srefill_r>
   84bb4:	2800      	cmp	r0, #0
   84bb6:	d0eb      	beq.n	84b90 <__svfiscanf_r+0x54>
   84bb8:	e7d6      	b.n	84b68 <__svfiscanf_r+0x2c>
   84bba:	2b25      	cmp	r3, #37	; 0x25
   84bbc:	d150      	bne.n	84c60 <__svfiscanf_r+0x124>
   84bbe:	9a06      	ldr	r2, [sp, #24]
   84bc0:	465e      	mov	r6, fp
   84bc2:	9806      	ldr	r0, [sp, #24]
   84bc4:	7813      	ldrb	r3, [r2, #0]
   84bc6:	3001      	adds	r0, #1
   84bc8:	2b63      	cmp	r3, #99	; 0x63
   84bca:	9006      	str	r0, [sp, #24]
   84bcc:	f000 8090 	beq.w	84cf0 <__svfiscanf_r+0x1b4>
   84bd0:	d822      	bhi.n	84c18 <__svfiscanf_r+0xdc>
   84bd2:	2b39      	cmp	r3, #57	; 0x39
   84bd4:	d809      	bhi.n	84bea <__svfiscanf_r+0xae>
   84bd6:	2b30      	cmp	r3, #48	; 0x30
   84bd8:	d26e      	bcs.n	84cb8 <__svfiscanf_r+0x17c>
   84bda:	2b25      	cmp	r3, #37	; 0x25
   84bdc:	d040      	beq.n	84c60 <__svfiscanf_r+0x124>
   84bde:	2b2a      	cmp	r3, #42	; 0x2a
   84be0:	d057      	beq.n	84c92 <__svfiscanf_r+0x156>
   84be2:	2b00      	cmp	r3, #0
   84be4:	f040 80a8 	bne.w	84d38 <__svfiscanf_r+0x1fc>
   84be8:	e369      	b.n	852be <__svfiscanf_r+0x782>
   84bea:	2b4f      	cmp	r3, #79	; 0x4f
   84bec:	d06e      	beq.n	84ccc <__svfiscanf_r+0x190>
   84bee:	d804      	bhi.n	84bfa <__svfiscanf_r+0xbe>
   84bf0:	2b44      	cmp	r3, #68	; 0x44
   84bf2:	d066      	beq.n	84cc2 <__svfiscanf_r+0x186>
   84bf4:	2b4c      	cmp	r3, #76	; 0x4c
   84bf6:	d059      	beq.n	84cac <__svfiscanf_r+0x170>
   84bf8:	e09e      	b.n	84d38 <__svfiscanf_r+0x1fc>
   84bfa:	2b58      	cmp	r3, #88	; 0x58
   84bfc:	d070      	beq.n	84ce0 <__svfiscanf_r+0x1a4>
   84bfe:	2b5b      	cmp	r3, #91	; 0x5b
   84c00:	f040 809a 	bne.w	84d38 <__svfiscanf_r+0x1fc>
   84c04:	a816      	add	r0, sp, #88	; 0x58
   84c06:	9906      	ldr	r1, [sp, #24]
   84c08:	f002 fe02 	bl	87810 <__sccl>
   84c0c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   84c10:	9006      	str	r0, [sp, #24]
   84c12:	f04f 0a01 	mov.w	sl, #1
   84c16:	e0a5      	b.n	84d64 <__svfiscanf_r+0x228>
   84c18:	2b6e      	cmp	r3, #110	; 0x6e
   84c1a:	d071      	beq.n	84d00 <__svfiscanf_r+0x1c4>
   84c1c:	d80c      	bhi.n	84c38 <__svfiscanf_r+0xfc>
   84c1e:	2b68      	cmp	r3, #104	; 0x68
   84c20:	d047      	beq.n	84cb2 <__svfiscanf_r+0x176>
   84c22:	d803      	bhi.n	84c2c <__svfiscanf_r+0xf0>
   84c24:	2b64      	cmp	r3, #100	; 0x64
   84c26:	f000 808f 	beq.w	84d48 <__svfiscanf_r+0x20c>
   84c2a:	e085      	b.n	84d38 <__svfiscanf_r+0x1fc>
   84c2c:	2b69      	cmp	r3, #105	; 0x69
   84c2e:	f000 808e 	beq.w	84d4e <__svfiscanf_r+0x212>
   84c32:	2b6c      	cmp	r3, #108	; 0x6c
   84c34:	d031      	beq.n	84c9a <__svfiscanf_r+0x15e>
   84c36:	e07f      	b.n	84d38 <__svfiscanf_r+0x1fc>
   84c38:	2b73      	cmp	r3, #115	; 0x73
   84c3a:	d056      	beq.n	84cea <__svfiscanf_r+0x1ae>
   84c3c:	d808      	bhi.n	84c50 <__svfiscanf_r+0x114>
   84c3e:	2b6f      	cmp	r3, #111	; 0x6f
   84c40:	d00b      	beq.n	84c5a <__svfiscanf_r+0x11e>
   84c42:	2b70      	cmp	r3, #112	; 0x70
   84c44:	d178      	bne.n	84d38 <__svfiscanf_r+0x1fc>
   84c46:	486b      	ldr	r0, [pc, #428]	; (84df4 <__svfiscanf_r+0x2b8>)
   84c48:	f44b 7b08 	orr.w	fp, fp, #544	; 0x220
   84c4c:	9005      	str	r0, [sp, #20]
   84c4e:	e054      	b.n	84cfa <__svfiscanf_r+0x1be>
   84c50:	2b75      	cmp	r3, #117	; 0x75
   84c52:	d042      	beq.n	84cda <__svfiscanf_r+0x19e>
   84c54:	2b78      	cmp	r3, #120	; 0x78
   84c56:	d043      	beq.n	84ce0 <__svfiscanf_r+0x1a4>
   84c58:	e06e      	b.n	84d38 <__svfiscanf_r+0x1fc>
   84c5a:	4a66      	ldr	r2, [pc, #408]	; (84df4 <__svfiscanf_r+0x2b8>)
   84c5c:	9205      	str	r2, [sp, #20]
   84c5e:	e039      	b.n	84cd4 <__svfiscanf_r+0x198>
   84c60:	6863      	ldr	r3, [r4, #4]
   84c62:	2b00      	cmp	r3, #0
   84c64:	dd0e      	ble.n	84c84 <__svfiscanf_r+0x148>
   84c66:	6823      	ldr	r3, [r4, #0]
   84c68:	9e06      	ldr	r6, [sp, #24]
   84c6a:	7819      	ldrb	r1, [r3, #0]
   84c6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   84c70:	4291      	cmp	r1, r2
   84c72:	f040 8327 	bne.w	852c4 <__svfiscanf_r+0x788>
   84c76:	6862      	ldr	r2, [r4, #4]
   84c78:	3301      	adds	r3, #1
   84c7a:	3a01      	subs	r2, #1
   84c7c:	6062      	str	r2, [r4, #4]
   84c7e:	6023      	str	r3, [r4, #0]
   84c80:	3701      	adds	r7, #1
   84c82:	e771      	b.n	84b68 <__svfiscanf_r+0x2c>
   84c84:	4648      	mov	r0, r9
   84c86:	4621      	mov	r1, r4
   84c88:	f002 fd13 	bl	876b2 <__srefill_r>
   84c8c:	2800      	cmp	r0, #0
   84c8e:	d0ea      	beq.n	84c66 <__svfiscanf_r+0x12a>
   84c90:	e310      	b.n	852b4 <__svfiscanf_r+0x778>
   84c92:	f04b 0b10 	orr.w	fp, fp, #16
   84c96:	9a06      	ldr	r2, [sp, #24]
   84c98:	e793      	b.n	84bc2 <__svfiscanf_r+0x86>
   84c9a:	7853      	ldrb	r3, [r2, #1]
   84c9c:	2b6c      	cmp	r3, #108	; 0x6c
   84c9e:	d102      	bne.n	84ca6 <__svfiscanf_r+0x16a>
   84ca0:	3202      	adds	r2, #2
   84ca2:	9206      	str	r2, [sp, #24]
   84ca4:	e002      	b.n	84cac <__svfiscanf_r+0x170>
   84ca6:	f04b 0b01 	orr.w	fp, fp, #1
   84caa:	e7f4      	b.n	84c96 <__svfiscanf_r+0x15a>
   84cac:	f04b 0b02 	orr.w	fp, fp, #2
   84cb0:	e7f1      	b.n	84c96 <__svfiscanf_r+0x15a>
   84cb2:	f04b 0b04 	orr.w	fp, fp, #4
   84cb6:	e7ee      	b.n	84c96 <__svfiscanf_r+0x15a>
   84cb8:	220a      	movs	r2, #10
   84cba:	fb02 3606 	mla	r6, r2, r6, r3
   84cbe:	3e30      	subs	r6, #48	; 0x30
   84cc0:	e7e9      	b.n	84c96 <__svfiscanf_r+0x15a>
   84cc2:	484d      	ldr	r0, [pc, #308]	; (84df8 <__svfiscanf_r+0x2bc>)
   84cc4:	f04b 0b01 	orr.w	fp, fp, #1
   84cc8:	9005      	str	r0, [sp, #20]
   84cca:	e047      	b.n	84d5c <__svfiscanf_r+0x220>
   84ccc:	4949      	ldr	r1, [pc, #292]	; (84df4 <__svfiscanf_r+0x2b8>)
   84cce:	f04b 0b01 	orr.w	fp, fp, #1
   84cd2:	9105      	str	r1, [sp, #20]
   84cd4:	f04f 0808 	mov.w	r8, #8
   84cd8:	e042      	b.n	84d60 <__svfiscanf_r+0x224>
   84cda:	4a46      	ldr	r2, [pc, #280]	; (84df4 <__svfiscanf_r+0x2b8>)
   84cdc:	9205      	str	r2, [sp, #20]
   84cde:	e03d      	b.n	84d5c <__svfiscanf_r+0x220>
   84ce0:	4b44      	ldr	r3, [pc, #272]	; (84df4 <__svfiscanf_r+0x2b8>)
   84ce2:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
   84ce6:	9305      	str	r3, [sp, #20]
   84ce8:	e007      	b.n	84cfa <__svfiscanf_r+0x1be>
   84cea:	f04f 0a02 	mov.w	sl, #2
   84cee:	e039      	b.n	84d64 <__svfiscanf_r+0x228>
   84cf0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   84cf4:	f04f 0a00 	mov.w	sl, #0
   84cf8:	e034      	b.n	84d64 <__svfiscanf_r+0x228>
   84cfa:	f04f 0810 	mov.w	r8, #16
   84cfe:	e02f      	b.n	84d60 <__svfiscanf_r+0x224>
   84d00:	f01b 0f10 	tst.w	fp, #16
   84d04:	f47f af30 	bne.w	84b68 <__svfiscanf_r+0x2c>
   84d08:	f01b 0f04 	tst.w	fp, #4
   84d0c:	f105 0104 	add.w	r1, r5, #4
   84d10:	d002      	beq.n	84d18 <__svfiscanf_r+0x1dc>
   84d12:	682b      	ldr	r3, [r5, #0]
   84d14:	801f      	strh	r7, [r3, #0]
   84d16:	e004      	b.n	84d22 <__svfiscanf_r+0x1e6>
   84d18:	f01b 0f01 	tst.w	fp, #1
   84d1c:	d003      	beq.n	84d26 <__svfiscanf_r+0x1ea>
   84d1e:	682b      	ldr	r3, [r5, #0]
   84d20:	601f      	str	r7, [r3, #0]
   84d22:	460d      	mov	r5, r1
   84d24:	e720      	b.n	84b68 <__svfiscanf_r+0x2c>
   84d26:	f01b 0f02 	tst.w	fp, #2
   84d2a:	d0f8      	beq.n	84d1e <__svfiscanf_r+0x1e2>
   84d2c:	6828      	ldr	r0, [r5, #0]
   84d2e:	463a      	mov	r2, r7
   84d30:	17fb      	asrs	r3, r7, #31
   84d32:	e9c0 2300 	strd	r2, r3, [r0]
   84d36:	e7f4      	b.n	84d22 <__svfiscanf_r+0x1e6>
   84d38:	440b      	add	r3, r1
   84d3a:	785b      	ldrb	r3, [r3, #1]
   84d3c:	f003 0303 	and.w	r3, r3, #3
   84d40:	2b01      	cmp	r3, #1
   84d42:	d109      	bne.n	84d58 <__svfiscanf_r+0x21c>
   84d44:	f04b 0b01 	orr.w	fp, fp, #1
   84d48:	492b      	ldr	r1, [pc, #172]	; (84df8 <__svfiscanf_r+0x2bc>)
   84d4a:	9105      	str	r1, [sp, #20]
   84d4c:	e006      	b.n	84d5c <__svfiscanf_r+0x220>
   84d4e:	4a2a      	ldr	r2, [pc, #168]	; (84df8 <__svfiscanf_r+0x2bc>)
   84d50:	f04f 0800 	mov.w	r8, #0
   84d54:	9205      	str	r2, [sp, #20]
   84d56:	e003      	b.n	84d60 <__svfiscanf_r+0x224>
   84d58:	4b27      	ldr	r3, [pc, #156]	; (84df8 <__svfiscanf_r+0x2bc>)
   84d5a:	9305      	str	r3, [sp, #20]
   84d5c:	f04f 080a 	mov.w	r8, #10
   84d60:	f04f 0a03 	mov.w	sl, #3
   84d64:	6863      	ldr	r3, [r4, #4]
   84d66:	2b00      	cmp	r3, #0
   84d68:	dd03      	ble.n	84d72 <__svfiscanf_r+0x236>
   84d6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84d6e:	d00f      	beq.n	84d90 <__svfiscanf_r+0x254>
   84d70:	e01e      	b.n	84db0 <__svfiscanf_r+0x274>
   84d72:	4648      	mov	r0, r9
   84d74:	4621      	mov	r1, r4
   84d76:	f002 fc9c 	bl	876b2 <__srefill_r>
   84d7a:	2800      	cmp	r0, #0
   84d7c:	d0f5      	beq.n	84d6a <__svfiscanf_r+0x22e>
   84d7e:	e299      	b.n	852b4 <__svfiscanf_r+0x778>
   84d80:	6862      	ldr	r2, [r4, #4]
   84d82:	3701      	adds	r7, #1
   84d84:	3a01      	subs	r2, #1
   84d86:	2a00      	cmp	r2, #0
   84d88:	6062      	str	r2, [r4, #4]
   84d8a:	dd0a      	ble.n	84da2 <__svfiscanf_r+0x266>
   84d8c:	3301      	adds	r3, #1
   84d8e:	6023      	str	r3, [r4, #0]
   84d90:	6823      	ldr	r3, [r4, #0]
   84d92:	4917      	ldr	r1, [pc, #92]	; (84df0 <__svfiscanf_r+0x2b4>)
   84d94:	781a      	ldrb	r2, [r3, #0]
   84d96:	6809      	ldr	r1, [r1, #0]
   84d98:	440a      	add	r2, r1
   84d9a:	7852      	ldrb	r2, [r2, #1]
   84d9c:	0711      	lsls	r1, r2, #28
   84d9e:	d4ef      	bmi.n	84d80 <__svfiscanf_r+0x244>
   84da0:	e006      	b.n	84db0 <__svfiscanf_r+0x274>
   84da2:	4648      	mov	r0, r9
   84da4:	4621      	mov	r1, r4
   84da6:	f002 fc84 	bl	876b2 <__srefill_r>
   84daa:	2800      	cmp	r0, #0
   84dac:	d0f0      	beq.n	84d90 <__svfiscanf_r+0x254>
   84dae:	e281      	b.n	852b4 <__svfiscanf_r+0x778>
   84db0:	f1ba 0f02 	cmp.w	sl, #2
   84db4:	f000 80f3 	beq.w	84f9e <__svfiscanf_r+0x462>
   84db8:	f1ba 0f03 	cmp.w	sl, #3
   84dbc:	f000 81b0 	beq.w	85120 <__svfiscanf_r+0x5e4>
   84dc0:	f1ba 0f01 	cmp.w	sl, #1
   84dc4:	f00b 0a10 	and.w	sl, fp, #16
   84dc8:	f000 8096 	beq.w	84ef8 <__svfiscanf_r+0x3bc>
   84dcc:	2e00      	cmp	r6, #0
   84dce:	bf08      	it	eq
   84dd0:	2601      	moveq	r6, #1
   84dd2:	f01b 0b01 	ands.w	fp, fp, #1
   84dd6:	d061      	beq.n	84e9c <__svfiscanf_r+0x360>
   84dd8:	a80a      	add	r0, sp, #40	; 0x28
   84dda:	2100      	movs	r1, #0
   84ddc:	2208      	movs	r2, #8
   84dde:	f7fe fafe 	bl	833de <memset>
   84de2:	f1ba 0f00 	cmp.w	sl, #0
   84de6:	d109      	bne.n	84dfc <__svfiscanf_r+0x2c0>
   84de8:	f8d5 b000 	ldr.w	fp, [r5]
   84dec:	3504      	adds	r5, #4
   84dee:	e007      	b.n	84e00 <__svfiscanf_r+0x2c4>
   84df0:	20070440 	.word	0x20070440
   84df4:	00087bbd 	.word	0x00087bbd
   84df8:	0008791d 	.word	0x0008791d
   84dfc:	f04f 0b00 	mov.w	fp, #0
   84e00:	2300      	movs	r3, #0
   84e02:	9303      	str	r3, [sp, #12]
   84e04:	f001 fb8e 	bl	86524 <__locale_mb_cur_max>
   84e08:	9b03      	ldr	r3, [sp, #12]
   84e0a:	4283      	cmp	r3, r0
   84e0c:	f000 8252 	beq.w	852b4 <__svfiscanf_r+0x778>
   84e10:	6821      	ldr	r1, [r4, #0]
   84e12:	aa0c      	add	r2, sp, #48	; 0x30
   84e14:	f811 0b01 	ldrb.w	r0, [r1], #1
   84e18:	f103 0c01 	add.w	ip, r3, #1
   84e1c:	54d0      	strb	r0, [r2, r3]
   84e1e:	6863      	ldr	r3, [r4, #4]
   84e20:	4648      	mov	r0, r9
   84e22:	3b01      	subs	r3, #1
   84e24:	e884 000a 	stmia.w	r4, {r1, r3}
   84e28:	ab0a      	add	r3, sp, #40	; 0x28
   84e2a:	9300      	str	r3, [sp, #0]
   84e2c:	4659      	mov	r1, fp
   84e2e:	4663      	mov	r3, ip
   84e30:	f8cd c00c 	str.w	ip, [sp, #12]
   84e34:	f001 fe10 	bl	86a58 <_mbrtowc_r>
   84e38:	1c42      	adds	r2, r0, #1
   84e3a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   84e3e:	f000 8239 	beq.w	852b4 <__svfiscanf_r+0x778>
   84e42:	b928      	cbnz	r0, 84e50 <__svfiscanf_r+0x314>
   84e44:	f1ba 0f00 	cmp.w	sl, #0
   84e48:	d104      	bne.n	84e54 <__svfiscanf_r+0x318>
   84e4a:	f8cb a000 	str.w	sl, [fp]
   84e4e:	e001      	b.n	84e54 <__svfiscanf_r+0x318>
   84e50:	3002      	adds	r0, #2
   84e52:	d00a      	beq.n	84e6a <__svfiscanf_r+0x32e>
   84e54:	4467      	add	r7, ip
   84e56:	3e01      	subs	r6, #1
   84e58:	f1ba 0f00 	cmp.w	sl, #0
   84e5c:	d103      	bne.n	84e66 <__svfiscanf_r+0x32a>
   84e5e:	f10b 0b04 	add.w	fp, fp, #4
   84e62:	46d4      	mov	ip, sl
   84e64:	e001      	b.n	84e6a <__svfiscanf_r+0x32e>
   84e66:	f04f 0c00 	mov.w	ip, #0
   84e6a:	6863      	ldr	r3, [r4, #4]
   84e6c:	2b00      	cmp	r3, #0
   84e6e:	dc11      	bgt.n	84e94 <__svfiscanf_r+0x358>
   84e70:	4648      	mov	r0, r9
   84e72:	4621      	mov	r1, r4
   84e74:	f8cd c00c 	str.w	ip, [sp, #12]
   84e78:	f002 fc1b 	bl	876b2 <__srefill_r>
   84e7c:	f8dd c00c 	ldr.w	ip, [sp, #12]
   84e80:	b140      	cbz	r0, 84e94 <__svfiscanf_r+0x358>
   84e82:	f1bc 0f00 	cmp.w	ip, #0
   84e86:	f040 8215 	bne.w	852b4 <__svfiscanf_r+0x778>
   84e8a:	f1ba 0f00 	cmp.w	sl, #0
   84e8e:	f000 80fa 	beq.w	85086 <__svfiscanf_r+0x54a>
   84e92:	e669      	b.n	84b68 <__svfiscanf_r+0x2c>
   84e94:	2e00      	cmp	r6, #0
   84e96:	d0f8      	beq.n	84e8a <__svfiscanf_r+0x34e>
   84e98:	4663      	mov	r3, ip
   84e9a:	e7b2      	b.n	84e02 <__svfiscanf_r+0x2c6>
   84e9c:	f1ba 0f00 	cmp.w	sl, #0
   84ea0:	d018      	beq.n	84ed4 <__svfiscanf_r+0x398>
   84ea2:	6863      	ldr	r3, [r4, #4]
   84ea4:	6822      	ldr	r2, [r4, #0]
   84ea6:	42b3      	cmp	r3, r6
   84ea8:	da0d      	bge.n	84ec6 <__svfiscanf_r+0x38a>
   84eaa:	449b      	add	fp, r3
   84eac:	1af6      	subs	r6, r6, r3
   84eae:	4413      	add	r3, r2
   84eb0:	6023      	str	r3, [r4, #0]
   84eb2:	4648      	mov	r0, r9
   84eb4:	4621      	mov	r1, r4
   84eb6:	f002 fbfc 	bl	876b2 <__srefill_r>
   84eba:	2800      	cmp	r0, #0
   84ebc:	d0f1      	beq.n	84ea2 <__svfiscanf_r+0x366>
   84ebe:	f1bb 0f00 	cmp.w	fp, #0
   84ec2:	d105      	bne.n	84ed0 <__svfiscanf_r+0x394>
   84ec4:	e1f6      	b.n	852b4 <__svfiscanf_r+0x778>
   84ec6:	1b9b      	subs	r3, r3, r6
   84ec8:	44b3      	add	fp, r6
   84eca:	4416      	add	r6, r2
   84ecc:	6063      	str	r3, [r4, #4]
   84ece:	6026      	str	r6, [r4, #0]
   84ed0:	445f      	add	r7, fp
   84ed2:	e649      	b.n	84b68 <__svfiscanf_r+0x2c>
   84ed4:	9400      	str	r4, [sp, #0]
   84ed6:	4648      	mov	r0, r9
   84ed8:	6829      	ldr	r1, [r5, #0]
   84eda:	2201      	movs	r2, #1
   84edc:	4633      	mov	r3, r6
   84ede:	f105 0a04 	add.w	sl, r5, #4
   84ee2:	f000 fce9 	bl	858b8 <_fread_r>
   84ee6:	2800      	cmp	r0, #0
   84ee8:	f000 81e4 	beq.w	852b4 <__svfiscanf_r+0x778>
   84eec:	9e04      	ldr	r6, [sp, #16]
   84eee:	4407      	add	r7, r0
   84ef0:	3601      	adds	r6, #1
   84ef2:	9604      	str	r6, [sp, #16]
   84ef4:	4655      	mov	r5, sl
   84ef6:	e637      	b.n	84b68 <__svfiscanf_r+0x2c>
   84ef8:	2e00      	cmp	r6, #0
   84efa:	bf08      	it	eq
   84efc:	f04f 36ff 	moveq.w	r6, #4294967295
   84f00:	f1ba 0f00 	cmp.w	sl, #0
   84f04:	d01e      	beq.n	84f44 <__svfiscanf_r+0x408>
   84f06:	f04f 0a00 	mov.w	sl, #0
   84f0a:	6823      	ldr	r3, [r4, #0]
   84f0c:	a916      	add	r1, sp, #88	; 0x58
   84f0e:	781a      	ldrb	r2, [r3, #0]
   84f10:	5c8a      	ldrb	r2, [r1, r2]
   84f12:	b192      	cbz	r2, 84f3a <__svfiscanf_r+0x3fe>
   84f14:	6862      	ldr	r2, [r4, #4]
   84f16:	f10a 0a01 	add.w	sl, sl, #1
   84f1a:	3a01      	subs	r2, #1
   84f1c:	3301      	adds	r3, #1
   84f1e:	4556      	cmp	r6, sl
   84f20:	6062      	str	r2, [r4, #4]
   84f22:	6023      	str	r3, [r4, #0]
   84f24:	f000 81c4 	beq.w	852b0 <__svfiscanf_r+0x774>
   84f28:	2a00      	cmp	r2, #0
   84f2a:	dcee      	bgt.n	84f0a <__svfiscanf_r+0x3ce>
   84f2c:	4648      	mov	r0, r9
   84f2e:	4621      	mov	r1, r4
   84f30:	f002 fbbf 	bl	876b2 <__srefill_r>
   84f34:	2800      	cmp	r0, #0
   84f36:	d0e8      	beq.n	84f0a <__svfiscanf_r+0x3ce>
   84f38:	e1ba      	b.n	852b0 <__svfiscanf_r+0x774>
   84f3a:	f1ba 0f00 	cmp.w	sl, #0
   84f3e:	f040 81b7 	bne.w	852b0 <__svfiscanf_r+0x774>
   84f42:	e1bf      	b.n	852c4 <__svfiscanf_r+0x788>
   84f44:	f8d5 a000 	ldr.w	sl, [r5]
   84f48:	f105 0b04 	add.w	fp, r5, #4
   84f4c:	4655      	mov	r5, sl
   84f4e:	6823      	ldr	r3, [r4, #0]
   84f50:	a916      	add	r1, sp, #88	; 0x58
   84f52:	781a      	ldrb	r2, [r3, #0]
   84f54:	5c8a      	ldrb	r2, [r1, r2]
   84f56:	b1ba      	cbz	r2, 84f88 <__svfiscanf_r+0x44c>
   84f58:	6862      	ldr	r2, [r4, #4]
   84f5a:	3a01      	subs	r2, #1
   84f5c:	6062      	str	r2, [r4, #4]
   84f5e:	1c5a      	adds	r2, r3, #1
   84f60:	6022      	str	r2, [r4, #0]
   84f62:	781b      	ldrb	r3, [r3, #0]
   84f64:	f805 3b01 	strb.w	r3, [r5], #1
   84f68:	eb0a 0306 	add.w	r3, sl, r6
   84f6c:	429d      	cmp	r5, r3
   84f6e:	d00b      	beq.n	84f88 <__svfiscanf_r+0x44c>
   84f70:	6863      	ldr	r3, [r4, #4]
   84f72:	2b00      	cmp	r3, #0
   84f74:	dceb      	bgt.n	84f4e <__svfiscanf_r+0x412>
   84f76:	4648      	mov	r0, r9
   84f78:	4621      	mov	r1, r4
   84f7a:	f002 fb9a 	bl	876b2 <__srefill_r>
   84f7e:	2800      	cmp	r0, #0
   84f80:	d0e5      	beq.n	84f4e <__svfiscanf_r+0x412>
   84f82:	4555      	cmp	r5, sl
   84f84:	f000 8196 	beq.w	852b4 <__svfiscanf_r+0x778>
   84f88:	ebb5 0a0a 	subs.w	sl, r5, sl
   84f8c:	f000 819a 	beq.w	852c4 <__svfiscanf_r+0x788>
   84f90:	9e04      	ldr	r6, [sp, #16]
   84f92:	2300      	movs	r3, #0
   84f94:	3601      	adds	r6, #1
   84f96:	702b      	strb	r3, [r5, #0]
   84f98:	9604      	str	r6, [sp, #16]
   84f9a:	465d      	mov	r5, fp
   84f9c:	e188      	b.n	852b0 <__svfiscanf_r+0x774>
   84f9e:	2e00      	cmp	r6, #0
   84fa0:	bf08      	it	eq
   84fa2:	f04f 36ff 	moveq.w	r6, #4294967295
   84fa6:	f00b 0010 	and.w	r0, fp, #16
   84faa:	f01b 0a01 	ands.w	sl, fp, #1
   84fae:	9007      	str	r0, [sp, #28]
   84fb0:	d06c      	beq.n	8508c <__svfiscanf_r+0x550>
   84fb2:	2100      	movs	r1, #0
   84fb4:	a80a      	add	r0, sp, #40	; 0x28
   84fb6:	2208      	movs	r2, #8
   84fb8:	f7fe fa11 	bl	833de <memset>
   84fbc:	9907      	ldr	r1, [sp, #28]
   84fbe:	b919      	cbnz	r1, 84fc8 <__svfiscanf_r+0x48c>
   84fc0:	f8d5 a000 	ldr.w	sl, [r5]
   84fc4:	3504      	adds	r5, #4
   84fc6:	e001      	b.n	84fcc <__svfiscanf_r+0x490>
   84fc8:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
   84fcc:	2300      	movs	r3, #0
   84fce:	6822      	ldr	r2, [r4, #0]
   84fd0:	49a4      	ldr	r1, [pc, #656]	; (85264 <__svfiscanf_r+0x728>)
   84fd2:	7812      	ldrb	r2, [r2, #0]
   84fd4:	6809      	ldr	r1, [r1, #0]
   84fd6:	440a      	add	r2, r1
   84fd8:	7852      	ldrb	r2, [r2, #1]
   84fda:	0710      	lsls	r0, r2, #28
   84fdc:	d44d      	bmi.n	8507a <__svfiscanf_r+0x53e>
   84fde:	2e00      	cmp	r6, #0
   84fe0:	d04b      	beq.n	8507a <__svfiscanf_r+0x53e>
   84fe2:	9303      	str	r3, [sp, #12]
   84fe4:	f001 fa9e 	bl	86524 <__locale_mb_cur_max>
   84fe8:	9b03      	ldr	r3, [sp, #12]
   84fea:	4283      	cmp	r3, r0
   84fec:	f000 8162 	beq.w	852b4 <__svfiscanf_r+0x778>
   84ff0:	6821      	ldr	r1, [r4, #0]
   84ff2:	aa0c      	add	r2, sp, #48	; 0x30
   84ff4:	f811 0b01 	ldrb.w	r0, [r1], #1
   84ff8:	f103 0b01 	add.w	fp, r3, #1
   84ffc:	54d0      	strb	r0, [r2, r3]
   84ffe:	6863      	ldr	r3, [r4, #4]
   85000:	4648      	mov	r0, r9
   85002:	3b01      	subs	r3, #1
   85004:	e884 000a 	stmia.w	r4, {r1, r3}
   85008:	ab0a      	add	r3, sp, #40	; 0x28
   8500a:	9300      	str	r3, [sp, #0]
   8500c:	4651      	mov	r1, sl
   8500e:	465b      	mov	r3, fp
   85010:	f001 fd22 	bl	86a58 <_mbrtowc_r>
   85014:	1c43      	adds	r3, r0, #1
   85016:	f000 814d 	beq.w	852b4 <__svfiscanf_r+0x778>
   8501a:	b910      	cbnz	r0, 85022 <__svfiscanf_r+0x4e6>
   8501c:	f8ca 0000 	str.w	r0, [sl]
   85020:	e001      	b.n	85026 <__svfiscanf_r+0x4ea>
   85022:	3002      	adds	r0, #2
   85024:	d01a      	beq.n	8505c <__svfiscanf_r+0x520>
   85026:	f8da 0000 	ldr.w	r0, [sl]
   8502a:	f001 fa49 	bl	864c0 <iswspace>
   8502e:	b160      	cbz	r0, 8504a <__svfiscanf_r+0x50e>
   85030:	f1bb 0f00 	cmp.w	fp, #0
   85034:	d021      	beq.n	8507a <__svfiscanf_r+0x53e>
   85036:	f10b 3bff 	add.w	fp, fp, #4294967295
   8503a:	ab0c      	add	r3, sp, #48	; 0x30
   8503c:	4648      	mov	r0, r9
   8503e:	f813 100b 	ldrb.w	r1, [r3, fp]
   85042:	4622      	mov	r2, r4
   85044:	f002 ff1d 	bl	87e82 <_ungetc_r>
   85048:	e7f2      	b.n	85030 <__svfiscanf_r+0x4f4>
   8504a:	9a07      	ldr	r2, [sp, #28]
   8504c:	445f      	add	r7, fp
   8504e:	3e01      	subs	r6, #1
   85050:	b91a      	cbnz	r2, 8505a <__svfiscanf_r+0x51e>
   85052:	f10a 0a04 	add.w	sl, sl, #4
   85056:	4693      	mov	fp, r2
   85058:	e000      	b.n	8505c <__svfiscanf_r+0x520>
   8505a:	4683      	mov	fp, r0
   8505c:	6863      	ldr	r3, [r4, #4]
   8505e:	2b00      	cmp	r3, #0
   85060:	dc09      	bgt.n	85076 <__svfiscanf_r+0x53a>
   85062:	4648      	mov	r0, r9
   85064:	4621      	mov	r1, r4
   85066:	f002 fb24 	bl	876b2 <__srefill_r>
   8506a:	b120      	cbz	r0, 85076 <__svfiscanf_r+0x53a>
   8506c:	f1bb 0f00 	cmp.w	fp, #0
   85070:	f040 8120 	bne.w	852b4 <__svfiscanf_r+0x778>
   85074:	e001      	b.n	8507a <__svfiscanf_r+0x53e>
   85076:	465b      	mov	r3, fp
   85078:	e7a9      	b.n	84fce <__svfiscanf_r+0x492>
   8507a:	9e07      	ldr	r6, [sp, #28]
   8507c:	2e00      	cmp	r6, #0
   8507e:	f47f ad73 	bne.w	84b68 <__svfiscanf_r+0x2c>
   85082:	f8ca 6000 	str.w	r6, [sl]
   85086:	9e04      	ldr	r6, [sp, #16]
   85088:	3601      	adds	r6, #1
   8508a:	e56c      	b.n	84b66 <__svfiscanf_r+0x2a>
   8508c:	9807      	ldr	r0, [sp, #28]
   8508e:	b1d8      	cbz	r0, 850c8 <__svfiscanf_r+0x58c>
   85090:	6823      	ldr	r3, [r4, #0]
   85092:	4974      	ldr	r1, [pc, #464]	; (85264 <__svfiscanf_r+0x728>)
   85094:	781a      	ldrb	r2, [r3, #0]
   85096:	6809      	ldr	r1, [r1, #0]
   85098:	440a      	add	r2, r1
   8509a:	7852      	ldrb	r2, [r2, #1]
   8509c:	0711      	lsls	r1, r2, #28
   8509e:	f100 8107 	bmi.w	852b0 <__svfiscanf_r+0x774>
   850a2:	6862      	ldr	r2, [r4, #4]
   850a4:	f10a 0a01 	add.w	sl, sl, #1
   850a8:	3a01      	subs	r2, #1
   850aa:	3301      	adds	r3, #1
   850ac:	4556      	cmp	r6, sl
   850ae:	6062      	str	r2, [r4, #4]
   850b0:	6023      	str	r3, [r4, #0]
   850b2:	f000 80fd 	beq.w	852b0 <__svfiscanf_r+0x774>
   850b6:	2a00      	cmp	r2, #0
   850b8:	dcea      	bgt.n	85090 <__svfiscanf_r+0x554>
   850ba:	4648      	mov	r0, r9
   850bc:	4621      	mov	r1, r4
   850be:	f002 faf8 	bl	876b2 <__srefill_r>
   850c2:	2800      	cmp	r0, #0
   850c4:	d0e4      	beq.n	85090 <__svfiscanf_r+0x554>
   850c6:	e0f3      	b.n	852b0 <__svfiscanf_r+0x774>
   850c8:	f8d5 a000 	ldr.w	sl, [r5]
   850cc:	f105 0b04 	add.w	fp, r5, #4
   850d0:	4655      	mov	r5, sl
   850d2:	6823      	ldr	r3, [r4, #0]
   850d4:	4963      	ldr	r1, [pc, #396]	; (85264 <__svfiscanf_r+0x728>)
   850d6:	781a      	ldrb	r2, [r3, #0]
   850d8:	6809      	ldr	r1, [r1, #0]
   850da:	440a      	add	r2, r1
   850dc:	7852      	ldrb	r2, [r2, #1]
   850de:	0712      	lsls	r2, r2, #28
   850e0:	d414      	bmi.n	8510c <__svfiscanf_r+0x5d0>
   850e2:	6862      	ldr	r2, [r4, #4]
   850e4:	3a01      	subs	r2, #1
   850e6:	6062      	str	r2, [r4, #4]
   850e8:	1c5a      	adds	r2, r3, #1
   850ea:	6022      	str	r2, [r4, #0]
   850ec:	781b      	ldrb	r3, [r3, #0]
   850ee:	f805 3b01 	strb.w	r3, [r5], #1
   850f2:	eb0a 0306 	add.w	r3, sl, r6
   850f6:	429d      	cmp	r5, r3
   850f8:	d008      	beq.n	8510c <__svfiscanf_r+0x5d0>
   850fa:	6863      	ldr	r3, [r4, #4]
   850fc:	2b00      	cmp	r3, #0
   850fe:	dce8      	bgt.n	850d2 <__svfiscanf_r+0x596>
   85100:	4648      	mov	r0, r9
   85102:	4621      	mov	r1, r4
   85104:	f002 fad5 	bl	876b2 <__srefill_r>
   85108:	2800      	cmp	r0, #0
   8510a:	d0e2      	beq.n	850d2 <__svfiscanf_r+0x596>
   8510c:	9e04      	ldr	r6, [sp, #16]
   8510e:	2300      	movs	r3, #0
   85110:	702b      	strb	r3, [r5, #0]
   85112:	3601      	adds	r6, #1
   85114:	ebca 0505 	rsb	r5, sl, r5
   85118:	442f      	add	r7, r5
   8511a:	9604      	str	r6, [sp, #16]
   8511c:	465d      	mov	r5, fp
   8511e:	e523      	b.n	84b68 <__svfiscanf_r+0x2c>
   85120:	1e73      	subs	r3, r6, #1
   85122:	2b26      	cmp	r3, #38	; 0x26
   85124:	f04f 0000 	mov.w	r0, #0
   85128:	bf8a      	itet	hi
   8512a:	f1a6 0327 	subhi.w	r3, r6, #39	; 0x27
   8512e:	2300      	movls	r3, #0
   85130:	2627      	movhi	r6, #39	; 0x27
   85132:	f44b 6b58 	orr.w	fp, fp, #3456	; 0xd80
   85136:	9007      	str	r0, [sp, #28]
   85138:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   8513c:	6821      	ldr	r1, [r4, #0]
   8513e:	780a      	ldrb	r2, [r1, #0]
   85140:	2a39      	cmp	r2, #57	; 0x39
   85142:	d809      	bhi.n	85158 <__svfiscanf_r+0x61c>
   85144:	2a38      	cmp	r2, #56	; 0x38
   85146:	d233      	bcs.n	851b0 <__svfiscanf_r+0x674>
   85148:	2a30      	cmp	r2, #48	; 0x30
   8514a:	d014      	beq.n	85176 <__svfiscanf_r+0x63a>
   8514c:	d82c      	bhi.n	851a8 <__svfiscanf_r+0x66c>
   8514e:	2a2b      	cmp	r2, #43	; 0x2b
   85150:	d03a      	beq.n	851c8 <__svfiscanf_r+0x68c>
   85152:	2a2d      	cmp	r2, #45	; 0x2d
   85154:	d038      	beq.n	851c8 <__svfiscanf_r+0x68c>
   85156:	e05d      	b.n	85214 <__svfiscanf_r+0x6d8>
   85158:	2a58      	cmp	r2, #88	; 0x58
   8515a:	d03b      	beq.n	851d4 <__svfiscanf_r+0x698>
   8515c:	d804      	bhi.n	85168 <__svfiscanf_r+0x62c>
   8515e:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   85162:	2805      	cmp	r0, #5
   85164:	d92a      	bls.n	851bc <__svfiscanf_r+0x680>
   85166:	e055      	b.n	85214 <__svfiscanf_r+0x6d8>
   85168:	2a61      	cmp	r2, #97	; 0x61
   8516a:	d353      	bcc.n	85214 <__svfiscanf_r+0x6d8>
   8516c:	2a66      	cmp	r2, #102	; 0x66
   8516e:	d925      	bls.n	851bc <__svfiscanf_r+0x680>
   85170:	2a78      	cmp	r2, #120	; 0x78
   85172:	d02f      	beq.n	851d4 <__svfiscanf_r+0x698>
   85174:	e04e      	b.n	85214 <__svfiscanf_r+0x6d8>
   85176:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   8517a:	d036      	beq.n	851ea <__svfiscanf_r+0x6ae>
   8517c:	f1b8 0f00 	cmp.w	r8, #0
   85180:	d103      	bne.n	8518a <__svfiscanf_r+0x64e>
   85182:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
   85186:	f04f 0808 	mov.w	r8, #8
   8518a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
   8518e:	d002      	beq.n	85196 <__svfiscanf_r+0x65a>
   85190:	f42b 6bb0 	bic.w	fp, fp, #1408	; 0x580
   85194:	e029      	b.n	851ea <__svfiscanf_r+0x6ae>
   85196:	f42b 7b60 	bic.w	fp, fp, #896	; 0x380
   8519a:	b10b      	cbz	r3, 851a0 <__svfiscanf_r+0x664>
   8519c:	3b01      	subs	r3, #1
   8519e:	3601      	adds	r6, #1
   851a0:	9a07      	ldr	r2, [sp, #28]
   851a2:	3201      	adds	r2, #1
   851a4:	9207      	str	r2, [sp, #28]
   851a6:	e024      	b.n	851f2 <__svfiscanf_r+0x6b6>
   851a8:	482f      	ldr	r0, [pc, #188]	; (85268 <__svfiscanf_r+0x72c>)
   851aa:	f930 8018 	ldrsh.w	r8, [r0, r8, lsl #1]
   851ae:	e008      	b.n	851c2 <__svfiscanf_r+0x686>
   851b0:	482d      	ldr	r0, [pc, #180]	; (85268 <__svfiscanf_r+0x72c>)
   851b2:	f930 8018 	ldrsh.w	r8, [r0, r8, lsl #1]
   851b6:	f1b8 0f08 	cmp.w	r8, #8
   851ba:	e001      	b.n	851c0 <__svfiscanf_r+0x684>
   851bc:	f1b8 0f0a 	cmp.w	r8, #10
   851c0:	dd28      	ble.n	85214 <__svfiscanf_r+0x6d8>
   851c2:	f42b 6b38 	bic.w	fp, fp, #2944	; 0xb80
   851c6:	e010      	b.n	851ea <__svfiscanf_r+0x6ae>
   851c8:	f01b 0f80 	tst.w	fp, #128	; 0x80
   851cc:	d022      	beq.n	85214 <__svfiscanf_r+0x6d8>
   851ce:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   851d2:	e00a      	b.n	851ea <__svfiscanf_r+0x6ae>
   851d4:	f40b 60c0 	and.w	r0, fp, #1536	; 0x600
   851d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   851dc:	d11a      	bne.n	85214 <__svfiscanf_r+0x6d8>
   851de:	f42b 7b00 	bic.w	fp, fp, #512	; 0x200
   851e2:	f44b 6ba0 	orr.w	fp, fp, #1280	; 0x500
   851e6:	f04f 0810 	mov.w	r8, #16
   851ea:	f88a 2000 	strb.w	r2, [sl]
   851ee:	f10a 0a01 	add.w	sl, sl, #1
   851f2:	6862      	ldr	r2, [r4, #4]
   851f4:	3a01      	subs	r2, #1
   851f6:	2a00      	cmp	r2, #0
   851f8:	6062      	str	r2, [r4, #4]
   851fa:	dd02      	ble.n	85202 <__svfiscanf_r+0x6c6>
   851fc:	3101      	adds	r1, #1
   851fe:	6021      	str	r1, [r4, #0]
   85200:	e006      	b.n	85210 <__svfiscanf_r+0x6d4>
   85202:	4648      	mov	r0, r9
   85204:	4621      	mov	r1, r4
   85206:	9303      	str	r3, [sp, #12]
   85208:	f002 fa53 	bl	876b2 <__srefill_r>
   8520c:	9b03      	ldr	r3, [sp, #12]
   8520e:	b908      	cbnz	r0, 85214 <__svfiscanf_r+0x6d8>
   85210:	3e01      	subs	r6, #1
   85212:	d193      	bne.n	8513c <__svfiscanf_r+0x600>
   85214:	f41b 7f80 	tst.w	fp, #256	; 0x100
   85218:	d00e      	beq.n	85238 <__svfiscanf_r+0x6fc>
   8521a:	ab0c      	add	r3, sp, #48	; 0x30
   8521c:	459a      	cmp	sl, r3
   8521e:	d908      	bls.n	85232 <__svfiscanf_r+0x6f6>
   85220:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
   85224:	4648      	mov	r0, r9
   85226:	4622      	mov	r2, r4
   85228:	f002 fe2b 	bl	87e82 <_ungetc_r>
   8522c:	f10a 36ff 	add.w	r6, sl, #4294967295
   85230:	46b2      	mov	sl, r6
   85232:	ab0c      	add	r3, sp, #48	; 0x30
   85234:	459a      	cmp	sl, r3
   85236:	d045      	beq.n	852c4 <__svfiscanf_r+0x788>
   85238:	f01b 0210 	ands.w	r2, fp, #16
   8523c:	d133      	bne.n	852a6 <__svfiscanf_r+0x76a>
   8523e:	4643      	mov	r3, r8
   85240:	4648      	mov	r0, r9
   85242:	a90c      	add	r1, sp, #48	; 0x30
   85244:	9e05      	ldr	r6, [sp, #20]
   85246:	f88a 2000 	strb.w	r2, [sl]
   8524a:	47b0      	blx	r6
   8524c:	f01b 0f20 	tst.w	fp, #32
   85250:	f105 0304 	add.w	r3, r5, #4
   85254:	d121      	bne.n	8529a <__svfiscanf_r+0x75e>
   85256:	f01b 0f04 	tst.w	fp, #4
   8525a:	d007      	beq.n	8526c <__svfiscanf_r+0x730>
   8525c:	682a      	ldr	r2, [r5, #0]
   8525e:	8010      	strh	r0, [r2, #0]
   85260:	e01d      	b.n	8529e <__svfiscanf_r+0x762>
   85262:	bf00      	nop
   85264:	20070440 	.word	0x20070440
   85268:	00088b8e 	.word	0x00088b8e
   8526c:	f01b 0201 	ands.w	r2, fp, #1
   85270:	d113      	bne.n	8529a <__svfiscanf_r+0x75e>
   85272:	f01b 0f02 	tst.w	fp, #2
   85276:	d010      	beq.n	8529a <__svfiscanf_r+0x75e>
   85278:	4b14      	ldr	r3, [pc, #80]	; (852cc <__svfiscanf_r+0x790>)
   8527a:	9e05      	ldr	r6, [sp, #20]
   8527c:	4648      	mov	r0, r9
   8527e:	429e      	cmp	r6, r3
   85280:	a90c      	add	r1, sp, #48	; 0x30
   85282:	4643      	mov	r3, r8
   85284:	d102      	bne.n	8528c <__svfiscanf_r+0x750>
   85286:	f002 fd1f 	bl	87cc8 <_strtoull_r>
   8528a:	e001      	b.n	85290 <__svfiscanf_r+0x754>
   8528c:	f002 fbd6 	bl	87a3c <_strtoll_r>
   85290:	682b      	ldr	r3, [r5, #0]
   85292:	3504      	adds	r5, #4
   85294:	e9c3 0100 	strd	r0, r1, [r3]
   85298:	e002      	b.n	852a0 <__svfiscanf_r+0x764>
   8529a:	682a      	ldr	r2, [r5, #0]
   8529c:	6010      	str	r0, [r2, #0]
   8529e:	461d      	mov	r5, r3
   852a0:	9e04      	ldr	r6, [sp, #16]
   852a2:	3601      	adds	r6, #1
   852a4:	9604      	str	r6, [sp, #16]
   852a6:	ab0c      	add	r3, sp, #48	; 0x30
   852a8:	9e07      	ldr	r6, [sp, #28]
   852aa:	ebc3 0a0a 	rsb	sl, r3, sl
   852ae:	44b2      	add	sl, r6
   852b0:	4457      	add	r7, sl
   852b2:	e459      	b.n	84b68 <__svfiscanf_r+0x2c>
   852b4:	9e04      	ldr	r6, [sp, #16]
   852b6:	b116      	cbz	r6, 852be <__svfiscanf_r+0x782>
   852b8:	89a3      	ldrh	r3, [r4, #12]
   852ba:	065b      	lsls	r3, r3, #25
   852bc:	d502      	bpl.n	852c4 <__svfiscanf_r+0x788>
   852be:	f04f 30ff 	mov.w	r0, #4294967295
   852c2:	e000      	b.n	852c6 <__svfiscanf_r+0x78a>
   852c4:	9804      	ldr	r0, [sp, #16]
   852c6:	b057      	add	sp, #348	; 0x15c
   852c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852cc:	00087bbd 	.word	0x00087bbd

000852d0 <vfiscanf>:
   852d0:	4b0a      	ldr	r3, [pc, #40]	; (852fc <vfiscanf+0x2c>)
   852d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   852d6:	681c      	ldr	r4, [r3, #0]
   852d8:	4680      	mov	r8, r0
   852da:	460f      	mov	r7, r1
   852dc:	4616      	mov	r6, r2
   852de:	b124      	cbz	r4, 852ea <vfiscanf+0x1a>
   852e0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   852e2:	b915      	cbnz	r5, 852ea <vfiscanf+0x1a>
   852e4:	4620      	mov	r0, r4
   852e6:	f000 f9b1 	bl	8564c <__sinit>
   852ea:	4620      	mov	r0, r4
   852ec:	4641      	mov	r1, r8
   852ee:	463a      	mov	r2, r7
   852f0:	4633      	mov	r3, r6
   852f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   852f6:	f7ff bc21 	b.w	84b3c <__svfiscanf_r>
   852fa:	bf00      	nop
   852fc:	20070010 	.word	0x20070010

00085300 <__svfiscanf>:
   85300:	b530      	push	{r4, r5, lr}
   85302:	4613      	mov	r3, r2
   85304:	4a04      	ldr	r2, [pc, #16]	; (85318 <__svfiscanf+0x18>)
   85306:	4605      	mov	r5, r0
   85308:	460c      	mov	r4, r1
   8530a:	6810      	ldr	r0, [r2, #0]
   8530c:	4629      	mov	r1, r5
   8530e:	4622      	mov	r2, r4
   85310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85314:	f7ff bc12 	b.w	84b3c <__svfiscanf_r>
   85318:	20070010 	.word	0x20070010

0008531c <_vfiscanf_r>:
   8531c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85320:	4688      	mov	r8, r1
   85322:	4617      	mov	r7, r2
   85324:	461e      	mov	r6, r3
   85326:	4604      	mov	r4, r0
   85328:	b118      	cbz	r0, 85332 <_vfiscanf_r+0x16>
   8532a:	6b85      	ldr	r5, [r0, #56]	; 0x38
   8532c:	b90d      	cbnz	r5, 85332 <_vfiscanf_r+0x16>
   8532e:	f000 f98d 	bl	8564c <__sinit>
   85332:	4620      	mov	r0, r4
   85334:	4641      	mov	r1, r8
   85336:	463a      	mov	r2, r7
   85338:	4633      	mov	r3, r6
   8533a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8533e:	f7ff bbfd 	b.w	84b3c <__svfiscanf_r>
   85342:	bf00      	nop

00085344 <__swsetup_r>:
   85344:	b538      	push	{r3, r4, r5, lr}
   85346:	4b2b      	ldr	r3, [pc, #172]	; (853f4 <__swsetup_r+0xb0>)
   85348:	4605      	mov	r5, r0
   8534a:	6818      	ldr	r0, [r3, #0]
   8534c:	460c      	mov	r4, r1
   8534e:	b118      	cbz	r0, 85358 <__swsetup_r+0x14>
   85350:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85352:	b90b      	cbnz	r3, 85358 <__swsetup_r+0x14>
   85354:	f000 f97a 	bl	8564c <__sinit>
   85358:	89a2      	ldrh	r2, [r4, #12]
   8535a:	b293      	uxth	r3, r2
   8535c:	0718      	lsls	r0, r3, #28
   8535e:	d420      	bmi.n	853a2 <__swsetup_r+0x5e>
   85360:	06d9      	lsls	r1, r3, #27
   85362:	d405      	bmi.n	85370 <__swsetup_r+0x2c>
   85364:	2309      	movs	r3, #9
   85366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8536a:	602b      	str	r3, [r5, #0]
   8536c:	81a2      	strh	r2, [r4, #12]
   8536e:	e03b      	b.n	853e8 <__swsetup_r+0xa4>
   85370:	0758      	lsls	r0, r3, #29
   85372:	d512      	bpl.n	8539a <__swsetup_r+0x56>
   85374:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85376:	b141      	cbz	r1, 8538a <__swsetup_r+0x46>
   85378:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8537c:	4299      	cmp	r1, r3
   8537e:	d002      	beq.n	85386 <__swsetup_r+0x42>
   85380:	4628      	mov	r0, r5
   85382:	f000 fb3f 	bl	85a04 <_free_r>
   85386:	2300      	movs	r3, #0
   85388:	6323      	str	r3, [r4, #48]	; 0x30
   8538a:	89a3      	ldrh	r3, [r4, #12]
   8538c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   85390:	81a3      	strh	r3, [r4, #12]
   85392:	2300      	movs	r3, #0
   85394:	6063      	str	r3, [r4, #4]
   85396:	6923      	ldr	r3, [r4, #16]
   85398:	6023      	str	r3, [r4, #0]
   8539a:	89a3      	ldrh	r3, [r4, #12]
   8539c:	f043 0308 	orr.w	r3, r3, #8
   853a0:	81a3      	strh	r3, [r4, #12]
   853a2:	6923      	ldr	r3, [r4, #16]
   853a4:	b94b      	cbnz	r3, 853ba <__swsetup_r+0x76>
   853a6:	89a3      	ldrh	r3, [r4, #12]
   853a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
   853ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   853b0:	d003      	beq.n	853ba <__swsetup_r+0x76>
   853b2:	4628      	mov	r0, r5
   853b4:	4621      	mov	r1, r4
   853b6:	f001 f8d3 	bl	86560 <__smakebuf_r>
   853ba:	89a3      	ldrh	r3, [r4, #12]
   853bc:	f013 0201 	ands.w	r2, r3, #1
   853c0:	d005      	beq.n	853ce <__swsetup_r+0x8a>
   853c2:	2200      	movs	r2, #0
   853c4:	60a2      	str	r2, [r4, #8]
   853c6:	6962      	ldr	r2, [r4, #20]
   853c8:	4252      	negs	r2, r2
   853ca:	61a2      	str	r2, [r4, #24]
   853cc:	e003      	b.n	853d6 <__swsetup_r+0x92>
   853ce:	0799      	lsls	r1, r3, #30
   853d0:	bf58      	it	pl
   853d2:	6962      	ldrpl	r2, [r4, #20]
   853d4:	60a2      	str	r2, [r4, #8]
   853d6:	6922      	ldr	r2, [r4, #16]
   853d8:	b94a      	cbnz	r2, 853ee <__swsetup_r+0xaa>
   853da:	f003 0080 	and.w	r0, r3, #128	; 0x80
   853de:	b280      	uxth	r0, r0
   853e0:	b130      	cbz	r0, 853f0 <__swsetup_r+0xac>
   853e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   853e6:	81a3      	strh	r3, [r4, #12]
   853e8:	f04f 30ff 	mov.w	r0, #4294967295
   853ec:	bd38      	pop	{r3, r4, r5, pc}
   853ee:	2000      	movs	r0, #0
   853f0:	bd38      	pop	{r3, r4, r5, pc}
   853f2:	bf00      	nop
   853f4:	20070010 	.word	0x20070010

000853f8 <__register_exitproc>:
   853f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   853fc:	4698      	mov	r8, r3
   853fe:	4b22      	ldr	r3, [pc, #136]	; (85488 <__register_exitproc+0x90>)
   85400:	4606      	mov	r6, r0
   85402:	681c      	ldr	r4, [r3, #0]
   85404:	460f      	mov	r7, r1
   85406:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8540a:	4691      	mov	r9, r2
   8540c:	b918      	cbnz	r0, 85416 <__register_exitproc+0x1e>
   8540e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   85412:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   85416:	6843      	ldr	r3, [r0, #4]
   85418:	2b1f      	cmp	r3, #31
   8541a:	dd16      	ble.n	8544a <__register_exitproc+0x52>
   8541c:	4b1b      	ldr	r3, [pc, #108]	; (8548c <__register_exitproc+0x94>)
   8541e:	b91b      	cbnz	r3, 85428 <__register_exitproc+0x30>
   85420:	f04f 30ff 	mov.w	r0, #4294967295
   85424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85428:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8542c:	f001 f8fc 	bl	86628 <malloc>
   85430:	2800      	cmp	r0, #0
   85432:	d0f5      	beq.n	85420 <__register_exitproc+0x28>
   85434:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85438:	2500      	movs	r5, #0
   8543a:	6045      	str	r5, [r0, #4]
   8543c:	6001      	str	r1, [r0, #0]
   8543e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   85442:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   85446:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8544a:	6844      	ldr	r4, [r0, #4]
   8544c:	b1a6      	cbz	r6, 85478 <__register_exitproc+0x80>
   8544e:	2201      	movs	r2, #1
   85450:	40a2      	lsls	r2, r4
   85452:	eb00 0584 	add.w	r5, r0, r4, lsl #2
   85456:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
   8545a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   8545e:	2e02      	cmp	r6, #2
   85460:	ea41 0102 	orr.w	r1, r1, r2
   85464:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   85468:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   8546c:	d104      	bne.n	85478 <__register_exitproc+0x80>
   8546e:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   85472:	431a      	orrs	r2, r3
   85474:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   85478:	1c63      	adds	r3, r4, #1
   8547a:	3402      	adds	r4, #2
   8547c:	6043      	str	r3, [r0, #4]
   8547e:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
   85482:	2000      	movs	r0, #0
   85484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85488:	00088ae4 	.word	0x00088ae4
   8548c:	00086629 	.word	0x00086629

00085490 <register_fini>:
   85490:	4b02      	ldr	r3, [pc, #8]	; (8549c <register_fini+0xc>)
   85492:	b113      	cbz	r3, 8549a <register_fini+0xa>
   85494:	4802      	ldr	r0, [pc, #8]	; (854a0 <register_fini+0x10>)
   85496:	f7fd bf13 	b.w	832c0 <atexit>
   8549a:	4770      	bx	lr
   8549c:	00000000 	.word	0x00000000
   854a0:	000832d5 	.word	0x000832d5

000854a4 <__sflush_r>:
   854a4:	898a      	ldrh	r2, [r1, #12]
   854a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   854aa:	b293      	uxth	r3, r2
   854ac:	4605      	mov	r5, r0
   854ae:	0718      	lsls	r0, r3, #28
   854b0:	460c      	mov	r4, r1
   854b2:	d45e      	bmi.n	85572 <__sflush_r+0xce>
   854b4:	684b      	ldr	r3, [r1, #4]
   854b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   854ba:	2b00      	cmp	r3, #0
   854bc:	818a      	strh	r2, [r1, #12]
   854be:	dc02      	bgt.n	854c6 <__sflush_r+0x22>
   854c0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   854c2:	2b00      	cmp	r3, #0
   854c4:	dd18      	ble.n	854f8 <__sflush_r+0x54>
   854c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   854c8:	b1b6      	cbz	r6, 854f8 <__sflush_r+0x54>
   854ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   854ce:	2300      	movs	r3, #0
   854d0:	b292      	uxth	r2, r2
   854d2:	682f      	ldr	r7, [r5, #0]
   854d4:	602b      	str	r3, [r5, #0]
   854d6:	b10a      	cbz	r2, 854dc <__sflush_r+0x38>
   854d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
   854da:	e010      	b.n	854fe <__sflush_r+0x5a>
   854dc:	69e1      	ldr	r1, [r4, #28]
   854de:	4628      	mov	r0, r5
   854e0:	2301      	movs	r3, #1
   854e2:	47b0      	blx	r6
   854e4:	1c41      	adds	r1, r0, #1
   854e6:	4602      	mov	r2, r0
   854e8:	d109      	bne.n	854fe <__sflush_r+0x5a>
   854ea:	682b      	ldr	r3, [r5, #0]
   854ec:	b13b      	cbz	r3, 854fe <__sflush_r+0x5a>
   854ee:	2b1d      	cmp	r3, #29
   854f0:	d001      	beq.n	854f6 <__sflush_r+0x52>
   854f2:	2b16      	cmp	r3, #22
   854f4:	d14a      	bne.n	8558c <__sflush_r+0xe8>
   854f6:	602f      	str	r7, [r5, #0]
   854f8:	2000      	movs	r0, #0
   854fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   854fe:	89a3      	ldrh	r3, [r4, #12]
   85500:	075b      	lsls	r3, r3, #29
   85502:	d505      	bpl.n	85510 <__sflush_r+0x6c>
   85504:	6863      	ldr	r3, [r4, #4]
   85506:	1ad2      	subs	r2, r2, r3
   85508:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8550a:	b10b      	cbz	r3, 85510 <__sflush_r+0x6c>
   8550c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8550e:	1ad2      	subs	r2, r2, r3
   85510:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   85512:	4628      	mov	r0, r5
   85514:	69e1      	ldr	r1, [r4, #28]
   85516:	2300      	movs	r3, #0
   85518:	47b0      	blx	r6
   8551a:	1c46      	adds	r6, r0, #1
   8551c:	89a2      	ldrh	r2, [r4, #12]
   8551e:	d105      	bne.n	8552c <__sflush_r+0x88>
   85520:	682b      	ldr	r3, [r5, #0]
   85522:	b11b      	cbz	r3, 8552c <__sflush_r+0x88>
   85524:	2b1d      	cmp	r3, #29
   85526:	d001      	beq.n	8552c <__sflush_r+0x88>
   85528:	2b16      	cmp	r3, #22
   8552a:	d11d      	bne.n	85568 <__sflush_r+0xc4>
   8552c:	2300      	movs	r3, #0
   8552e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   85532:	b292      	uxth	r2, r2
   85534:	6063      	str	r3, [r4, #4]
   85536:	6923      	ldr	r3, [r4, #16]
   85538:	04d1      	lsls	r1, r2, #19
   8553a:	81a2      	strh	r2, [r4, #12]
   8553c:	6023      	str	r3, [r4, #0]
   8553e:	d504      	bpl.n	8554a <__sflush_r+0xa6>
   85540:	1c42      	adds	r2, r0, #1
   85542:	d101      	bne.n	85548 <__sflush_r+0xa4>
   85544:	682b      	ldr	r3, [r5, #0]
   85546:	b903      	cbnz	r3, 8554a <__sflush_r+0xa6>
   85548:	6520      	str	r0, [r4, #80]	; 0x50
   8554a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8554c:	602f      	str	r7, [r5, #0]
   8554e:	2900      	cmp	r1, #0
   85550:	d0d2      	beq.n	854f8 <__sflush_r+0x54>
   85552:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85556:	4299      	cmp	r1, r3
   85558:	d002      	beq.n	85560 <__sflush_r+0xbc>
   8555a:	4628      	mov	r0, r5
   8555c:	f000 fa52 	bl	85a04 <_free_r>
   85560:	2000      	movs	r0, #0
   85562:	6320      	str	r0, [r4, #48]	; 0x30
   85564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8556c:	81a2      	strh	r2, [r4, #12]
   8556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85572:	690e      	ldr	r6, [r1, #16]
   85574:	2e00      	cmp	r6, #0
   85576:	d0bf      	beq.n	854f8 <__sflush_r+0x54>
   85578:	079b      	lsls	r3, r3, #30
   8557a:	680a      	ldr	r2, [r1, #0]
   8557c:	bf0c      	ite	eq
   8557e:	694b      	ldreq	r3, [r1, #20]
   85580:	2300      	movne	r3, #0
   85582:	ebc6 0802 	rsb	r8, r6, r2
   85586:	600e      	str	r6, [r1, #0]
   85588:	608b      	str	r3, [r1, #8]
   8558a:	e012      	b.n	855b2 <__sflush_r+0x10e>
   8558c:	89a3      	ldrh	r3, [r4, #12]
   8558e:	f04f 30ff 	mov.w	r0, #4294967295
   85592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85596:	81a3      	strh	r3, [r4, #12]
   85598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8559c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8559e:	4628      	mov	r0, r5
   855a0:	69e1      	ldr	r1, [r4, #28]
   855a2:	4632      	mov	r2, r6
   855a4:	4643      	mov	r3, r8
   855a6:	47b8      	blx	r7
   855a8:	2800      	cmp	r0, #0
   855aa:	ddef      	ble.n	8558c <__sflush_r+0xe8>
   855ac:	4406      	add	r6, r0
   855ae:	ebc0 0808 	rsb	r8, r0, r8
   855b2:	f1b8 0f00 	cmp.w	r8, #0
   855b6:	dcf1      	bgt.n	8559c <__sflush_r+0xf8>
   855b8:	e79e      	b.n	854f8 <__sflush_r+0x54>

000855ba <_fflush_r>:
   855ba:	b538      	push	{r3, r4, r5, lr}
   855bc:	460c      	mov	r4, r1
   855be:	4605      	mov	r5, r0
   855c0:	b118      	cbz	r0, 855ca <_fflush_r+0x10>
   855c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   855c4:	b90b      	cbnz	r3, 855ca <_fflush_r+0x10>
   855c6:	f000 f841 	bl	8564c <__sinit>
   855ca:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   855ce:	b128      	cbz	r0, 855dc <_fflush_r+0x22>
   855d0:	4628      	mov	r0, r5
   855d2:	4621      	mov	r1, r4
   855d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   855d8:	f7ff bf64 	b.w	854a4 <__sflush_r>
   855dc:	bd38      	pop	{r3, r4, r5, pc}

000855de <fflush>:
   855de:	4601      	mov	r1, r0
   855e0:	b920      	cbnz	r0, 855ec <fflush+0xe>
   855e2:	4b04      	ldr	r3, [pc, #16]	; (855f4 <fflush+0x16>)
   855e4:	4904      	ldr	r1, [pc, #16]	; (855f8 <fflush+0x1a>)
   855e6:	6818      	ldr	r0, [r3, #0]
   855e8:	f000 bc2c 	b.w	85e44 <_fwalk_reent>
   855ec:	4b03      	ldr	r3, [pc, #12]	; (855fc <fflush+0x1e>)
   855ee:	6818      	ldr	r0, [r3, #0]
   855f0:	f7ff bfe3 	b.w	855ba <_fflush_r>
   855f4:	00088ae4 	.word	0x00088ae4
   855f8:	000855bb 	.word	0x000855bb
   855fc:	20070010 	.word	0x20070010

00085600 <__fp_lock>:
   85600:	2000      	movs	r0, #0
   85602:	4770      	bx	lr

00085604 <__fp_unlock>:
   85604:	2000      	movs	r0, #0
   85606:	4770      	bx	lr

00085608 <_cleanup_r>:
   85608:	4901      	ldr	r1, [pc, #4]	; (85610 <_cleanup_r+0x8>)
   8560a:	f000 bbff 	b.w	85e0c <_fwalk>
   8560e:	bf00      	nop
   85610:	000881d5 	.word	0x000881d5

00085614 <__sfmoreglue>:
   85614:	b570      	push	{r4, r5, r6, lr}
   85616:	1e4b      	subs	r3, r1, #1
   85618:	2568      	movs	r5, #104	; 0x68
   8561a:	435d      	muls	r5, r3
   8561c:	460e      	mov	r6, r1
   8561e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   85622:	f001 f811 	bl	86648 <_malloc_r>
   85626:	4604      	mov	r4, r0
   85628:	b140      	cbz	r0, 8563c <__sfmoreglue+0x28>
   8562a:	2100      	movs	r1, #0
   8562c:	e880 0042 	stmia.w	r0, {r1, r6}
   85630:	300c      	adds	r0, #12
   85632:	60a0      	str	r0, [r4, #8]
   85634:	f105 0268 	add.w	r2, r5, #104	; 0x68
   85638:	f7fd fed1 	bl	833de <memset>
   8563c:	4620      	mov	r0, r4
   8563e:	bd70      	pop	{r4, r5, r6, pc}

00085640 <_cleanup>:
   85640:	4b01      	ldr	r3, [pc, #4]	; (85648 <_cleanup+0x8>)
   85642:	6818      	ldr	r0, [r3, #0]
   85644:	f7ff bfe0 	b.w	85608 <_cleanup_r>
   85648:	00088ae4 	.word	0x00088ae4

0008564c <__sinit>:
   8564c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85650:	6b84      	ldr	r4, [r0, #56]	; 0x38
   85652:	4606      	mov	r6, r0
   85654:	2c00      	cmp	r4, #0
   85656:	d162      	bne.n	8571e <__sinit+0xd2>
   85658:	4b32      	ldr	r3, [pc, #200]	; (85724 <__sinit+0xd8>)
   8565a:	6845      	ldr	r5, [r0, #4]
   8565c:	63c3      	str	r3, [r0, #60]	; 0x3c
   8565e:	2303      	movs	r3, #3
   85660:	f8c0 32e4 	str.w	r3, [r0, #740]	; 0x2e4
   85664:	f500 733b 	add.w	r3, r0, #748	; 0x2ec
   85668:	f8c0 32e8 	str.w	r3, [r0, #744]	; 0x2e8
   8566c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8572c <__sinit+0xe0>
   85670:	2304      	movs	r3, #4
   85672:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 85730 <__sinit+0xe4>
   85676:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 85734 <__sinit+0xe8>
   8567a:	4f2b      	ldr	r7, [pc, #172]	; (85728 <__sinit+0xdc>)
   8567c:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
   85680:	4621      	mov	r1, r4
   85682:	81ab      	strh	r3, [r5, #12]
   85684:	602c      	str	r4, [r5, #0]
   85686:	606c      	str	r4, [r5, #4]
   85688:	60ac      	str	r4, [r5, #8]
   8568a:	666c      	str	r4, [r5, #100]	; 0x64
   8568c:	81ec      	strh	r4, [r5, #14]
   8568e:	612c      	str	r4, [r5, #16]
   85690:	616c      	str	r4, [r5, #20]
   85692:	61ac      	str	r4, [r5, #24]
   85694:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85698:	2208      	movs	r2, #8
   8569a:	f7fd fea0 	bl	833de <memset>
   8569e:	61ed      	str	r5, [r5, #28]
   856a0:	f8c5 a020 	str.w	sl, [r5, #32]
   856a4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   856a8:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   856ac:	62ef      	str	r7, [r5, #44]	; 0x2c
   856ae:	68b5      	ldr	r5, [r6, #8]
   856b0:	2309      	movs	r3, #9
   856b2:	f04f 0b01 	mov.w	fp, #1
   856b6:	81ab      	strh	r3, [r5, #12]
   856b8:	602c      	str	r4, [r5, #0]
   856ba:	606c      	str	r4, [r5, #4]
   856bc:	60ac      	str	r4, [r5, #8]
   856be:	666c      	str	r4, [r5, #100]	; 0x64
   856c0:	f8a5 b00e 	strh.w	fp, [r5, #14]
   856c4:	612c      	str	r4, [r5, #16]
   856c6:	616c      	str	r4, [r5, #20]
   856c8:	61ac      	str	r4, [r5, #24]
   856ca:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   856ce:	4621      	mov	r1, r4
   856d0:	2208      	movs	r2, #8
   856d2:	f7fd fe84 	bl	833de <memset>
   856d6:	61ed      	str	r5, [r5, #28]
   856d8:	f8c5 a020 	str.w	sl, [r5, #32]
   856dc:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   856e0:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   856e4:	62ef      	str	r7, [r5, #44]	; 0x2c
   856e6:	68f5      	ldr	r5, [r6, #12]
   856e8:	2312      	movs	r3, #18
   856ea:	81ab      	strh	r3, [r5, #12]
   856ec:	2302      	movs	r3, #2
   856ee:	602c      	str	r4, [r5, #0]
   856f0:	606c      	str	r4, [r5, #4]
   856f2:	60ac      	str	r4, [r5, #8]
   856f4:	666c      	str	r4, [r5, #100]	; 0x64
   856f6:	81eb      	strh	r3, [r5, #14]
   856f8:	612c      	str	r4, [r5, #16]
   856fa:	616c      	str	r4, [r5, #20]
   856fc:	61ac      	str	r4, [r5, #24]
   856fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85702:	4621      	mov	r1, r4
   85704:	2208      	movs	r2, #8
   85706:	f7fd fe6a 	bl	833de <memset>
   8570a:	61ed      	str	r5, [r5, #28]
   8570c:	f8c5 a020 	str.w	sl, [r5, #32]
   85710:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
   85714:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
   85718:	62ef      	str	r7, [r5, #44]	; 0x2c
   8571a:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
   8571e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85722:	bf00      	nop
   85724:	00085609 	.word	0x00085609
   85728:	000878ff 	.word	0x000878ff
   8572c:	0008787d 	.word	0x0008787d
   85730:	000878a3 	.word	0x000878a3
   85734:	000878db 	.word	0x000878db

00085738 <__sfp>:
   85738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8573a:	4b1c      	ldr	r3, [pc, #112]	; (857ac <__sfp+0x74>)
   8573c:	4607      	mov	r7, r0
   8573e:	681e      	ldr	r6, [r3, #0]
   85740:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   85742:	b913      	cbnz	r3, 8574a <__sfp+0x12>
   85744:	4630      	mov	r0, r6
   85746:	f7ff ff81 	bl	8564c <__sinit>
   8574a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
   8574e:	68b4      	ldr	r4, [r6, #8]
   85750:	6873      	ldr	r3, [r6, #4]
   85752:	3b01      	subs	r3, #1
   85754:	d404      	bmi.n	85760 <__sfp+0x28>
   85756:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   8575a:	b175      	cbz	r5, 8577a <__sfp+0x42>
   8575c:	3468      	adds	r4, #104	; 0x68
   8575e:	e7f8      	b.n	85752 <__sfp+0x1a>
   85760:	6833      	ldr	r3, [r6, #0]
   85762:	b92b      	cbnz	r3, 85770 <__sfp+0x38>
   85764:	4638      	mov	r0, r7
   85766:	2104      	movs	r1, #4
   85768:	f7ff ff54 	bl	85614 <__sfmoreglue>
   8576c:	6030      	str	r0, [r6, #0]
   8576e:	b108      	cbz	r0, 85774 <__sfp+0x3c>
   85770:	6836      	ldr	r6, [r6, #0]
   85772:	e7ec      	b.n	8574e <__sfp+0x16>
   85774:	230c      	movs	r3, #12
   85776:	603b      	str	r3, [r7, #0]
   85778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8577a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8577e:	81e3      	strh	r3, [r4, #14]
   85780:	2301      	movs	r3, #1
   85782:	81a3      	strh	r3, [r4, #12]
   85784:	6665      	str	r5, [r4, #100]	; 0x64
   85786:	6025      	str	r5, [r4, #0]
   85788:	60a5      	str	r5, [r4, #8]
   8578a:	6065      	str	r5, [r4, #4]
   8578c:	6125      	str	r5, [r4, #16]
   8578e:	6165      	str	r5, [r4, #20]
   85790:	61a5      	str	r5, [r4, #24]
   85792:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   85796:	4629      	mov	r1, r5
   85798:	2208      	movs	r2, #8
   8579a:	f7fd fe20 	bl	833de <memset>
   8579e:	6325      	str	r5, [r4, #48]	; 0x30
   857a0:	6365      	str	r5, [r4, #52]	; 0x34
   857a2:	6465      	str	r5, [r4, #68]	; 0x44
   857a4:	64a5      	str	r5, [r4, #72]	; 0x48
   857a6:	4620      	mov	r0, r4
   857a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   857aa:	bf00      	nop
   857ac:	00088ae4 	.word	0x00088ae4

000857b0 <__sfp_lock_acquire>:
   857b0:	4770      	bx	lr

000857b2 <__sfp_lock_release>:
   857b2:	4770      	bx	lr

000857b4 <__sinit_lock_acquire>:
   857b4:	4770      	bx	lr

000857b6 <__sinit_lock_release>:
   857b6:	4770      	bx	lr

000857b8 <__fp_lock_all>:
   857b8:	4b02      	ldr	r3, [pc, #8]	; (857c4 <__fp_lock_all+0xc>)
   857ba:	4903      	ldr	r1, [pc, #12]	; (857c8 <__fp_lock_all+0x10>)
   857bc:	6818      	ldr	r0, [r3, #0]
   857be:	f000 bb25 	b.w	85e0c <_fwalk>
   857c2:	bf00      	nop
   857c4:	20070010 	.word	0x20070010
   857c8:	00085601 	.word	0x00085601

000857cc <__fp_unlock_all>:
   857cc:	4b02      	ldr	r3, [pc, #8]	; (857d8 <__fp_unlock_all+0xc>)
   857ce:	4903      	ldr	r1, [pc, #12]	; (857dc <__fp_unlock_all+0x10>)
   857d0:	6818      	ldr	r0, [r3, #0]
   857d2:	f000 bb1b 	b.w	85e0c <_fwalk>
   857d6:	bf00      	nop
   857d8:	20070010 	.word	0x20070010
   857dc:	00085605 	.word	0x00085605

000857e0 <_fputwc_r>:
   857e0:	8993      	ldrh	r3, [r2, #12]
   857e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   857e6:	460e      	mov	r6, r1
   857e8:	0499      	lsls	r1, r3, #18
   857ea:	4680      	mov	r8, r0
   857ec:	4614      	mov	r4, r2
   857ee:	d406      	bmi.n	857fe <_fputwc_r+0x1e>
   857f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   857f4:	8193      	strh	r3, [r2, #12]
   857f6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   857f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   857fc:	6653      	str	r3, [r2, #100]	; 0x64
   857fe:	f000 fe91 	bl	86524 <__locale_mb_cur_max>
   85802:	2801      	cmp	r0, #1
   85804:	d106      	bne.n	85814 <_fputwc_r+0x34>
   85806:	1e73      	subs	r3, r6, #1
   85808:	2bfe      	cmp	r3, #254	; 0xfe
   8580a:	d803      	bhi.n	85814 <_fputwc_r+0x34>
   8580c:	f88d 6004 	strb.w	r6, [sp, #4]
   85810:	4607      	mov	r7, r0
   85812:	e00e      	b.n	85832 <_fputwc_r+0x52>
   85814:	4632      	mov	r2, r6
   85816:	4640      	mov	r0, r8
   85818:	a901      	add	r1, sp, #4
   8581a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8581e:	f002 fbf3 	bl	88008 <_wcrtomb_r>
   85822:	1c42      	adds	r2, r0, #1
   85824:	4607      	mov	r7, r0
   85826:	d104      	bne.n	85832 <_fputwc_r+0x52>
   85828:	89a3      	ldrh	r3, [r4, #12]
   8582a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8582e:	81a3      	strh	r3, [r4, #12]
   85830:	e02b      	b.n	8588a <_fputwc_r+0xaa>
   85832:	2500      	movs	r5, #0
   85834:	42bd      	cmp	r5, r7
   85836:	d024      	beq.n	85882 <_fputwc_r+0xa2>
   85838:	68a2      	ldr	r2, [r4, #8]
   8583a:	ab01      	add	r3, sp, #4
   8583c:	3a01      	subs	r2, #1
   8583e:	2a00      	cmp	r2, #0
   85840:	60a2      	str	r2, [r4, #8]
   85842:	da16      	bge.n	85872 <_fputwc_r+0x92>
   85844:	69a1      	ldr	r1, [r4, #24]
   85846:	428a      	cmp	r2, r1
   85848:	db08      	blt.n	8585c <_fputwc_r+0x7c>
   8584a:	5d5b      	ldrb	r3, [r3, r5]
   8584c:	6822      	ldr	r2, [r4, #0]
   8584e:	7013      	strb	r3, [r2, #0]
   85850:	6823      	ldr	r3, [r4, #0]
   85852:	7819      	ldrb	r1, [r3, #0]
   85854:	290a      	cmp	r1, #10
   85856:	d110      	bne.n	8587a <_fputwc_r+0x9a>
   85858:	4640      	mov	r0, r8
   8585a:	e001      	b.n	85860 <_fputwc_r+0x80>
   8585c:	5d59      	ldrb	r1, [r3, r5]
   8585e:	4640      	mov	r0, r8
   85860:	4622      	mov	r2, r4
   85862:	f002 fb7f 	bl	87f64 <__swbuf_r>
   85866:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8586a:	4258      	negs	r0, r3
   8586c:	4158      	adcs	r0, r3
   8586e:	b130      	cbz	r0, 8587e <_fputwc_r+0x9e>
   85870:	e009      	b.n	85886 <_fputwc_r+0xa6>
   85872:	5d5b      	ldrb	r3, [r3, r5]
   85874:	6822      	ldr	r2, [r4, #0]
   85876:	7013      	strb	r3, [r2, #0]
   85878:	6823      	ldr	r3, [r4, #0]
   8587a:	3301      	adds	r3, #1
   8587c:	6023      	str	r3, [r4, #0]
   8587e:	3501      	adds	r5, #1
   85880:	e7d8      	b.n	85834 <_fputwc_r+0x54>
   85882:	4630      	mov	r0, r6
   85884:	e001      	b.n	8588a <_fputwc_r+0xaa>
   85886:	f04f 30ff 	mov.w	r0, #4294967295
   8588a:	b002      	add	sp, #8
   8588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085890 <fputwc>:
   85890:	4b08      	ldr	r3, [pc, #32]	; (858b4 <fputwc+0x24>)
   85892:	b570      	push	{r4, r5, r6, lr}
   85894:	681c      	ldr	r4, [r3, #0]
   85896:	4606      	mov	r6, r0
   85898:	460d      	mov	r5, r1
   8589a:	b124      	cbz	r4, 858a6 <fputwc+0x16>
   8589c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8589e:	b913      	cbnz	r3, 858a6 <fputwc+0x16>
   858a0:	4620      	mov	r0, r4
   858a2:	f7ff fed3 	bl	8564c <__sinit>
   858a6:	4620      	mov	r0, r4
   858a8:	4631      	mov	r1, r6
   858aa:	462a      	mov	r2, r5
   858ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   858b0:	f7ff bf96 	b.w	857e0 <_fputwc_r>
   858b4:	20070010 	.word	0x20070010

000858b8 <_fread_r>:
   858b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   858bc:	4692      	mov	sl, r2
   858be:	435a      	muls	r2, r3
   858c0:	4681      	mov	r9, r0
   858c2:	460f      	mov	r7, r1
   858c4:	4698      	mov	r8, r3
   858c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   858c8:	4693      	mov	fp, r2
   858ca:	d039      	beq.n	85940 <_fread_r+0x88>
   858cc:	b118      	cbz	r0, 858d6 <_fread_r+0x1e>
   858ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
   858d0:	b90b      	cbnz	r3, 858d6 <_fread_r+0x1e>
   858d2:	f7ff febb 	bl	8564c <__sinit>
   858d6:	89a3      	ldrh	r3, [r4, #12]
   858d8:	049a      	lsls	r2, r3, #18
   858da:	d406      	bmi.n	858ea <_fread_r+0x32>
   858dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   858e0:	81a3      	strh	r3, [r4, #12]
   858e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   858e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   858e8:	6663      	str	r3, [r4, #100]	; 0x64
   858ea:	6863      	ldr	r3, [r4, #4]
   858ec:	2b00      	cmp	r3, #0
   858ee:	da01      	bge.n	858f4 <_fread_r+0x3c>
   858f0:	2300      	movs	r3, #0
   858f2:	6063      	str	r3, [r4, #4]
   858f4:	465d      	mov	r5, fp
   858f6:	6866      	ldr	r6, [r4, #4]
   858f8:	4638      	mov	r0, r7
   858fa:	42b5      	cmp	r5, r6
   858fc:	6821      	ldr	r1, [r4, #0]
   858fe:	d913      	bls.n	85928 <_fread_r+0x70>
   85900:	4632      	mov	r2, r6
   85902:	f7fd fd63 	bl	833cc <memcpy>
   85906:	6823      	ldr	r3, [r4, #0]
   85908:	4648      	mov	r0, r9
   8590a:	4433      	add	r3, r6
   8590c:	6023      	str	r3, [r4, #0]
   8590e:	4621      	mov	r1, r4
   85910:	4437      	add	r7, r6
   85912:	1bad      	subs	r5, r5, r6
   85914:	f001 fecd 	bl	876b2 <__srefill_r>
   85918:	2800      	cmp	r0, #0
   8591a:	d0ec      	beq.n	858f6 <_fread_r+0x3e>
   8591c:	ebc5 0b0b 	rsb	fp, r5, fp
   85920:	fbbb f0fa 	udiv	r0, fp, sl
   85924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85928:	462a      	mov	r2, r5
   8592a:	f7fd fd4f 	bl	833cc <memcpy>
   8592e:	6863      	ldr	r3, [r4, #4]
   85930:	4640      	mov	r0, r8
   85932:	1b5b      	subs	r3, r3, r5
   85934:	6063      	str	r3, [r4, #4]
   85936:	6823      	ldr	r3, [r4, #0]
   85938:	441d      	add	r5, r3
   8593a:	6025      	str	r5, [r4, #0]
   8593c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85940:	4610      	mov	r0, r2
   85942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085946 <fread>:
   85946:	b573      	push	{r0, r1, r4, r5, r6, lr}
   85948:	9300      	str	r3, [sp, #0]
   8594a:	4b06      	ldr	r3, [pc, #24]	; (85964 <fread+0x1e>)
   8594c:	4606      	mov	r6, r0
   8594e:	460d      	mov	r5, r1
   85950:	4614      	mov	r4, r2
   85952:	6818      	ldr	r0, [r3, #0]
   85954:	4631      	mov	r1, r6
   85956:	462a      	mov	r2, r5
   85958:	4623      	mov	r3, r4
   8595a:	f7ff ffad 	bl	858b8 <_fread_r>
   8595e:	b002      	add	sp, #8
   85960:	bd70      	pop	{r4, r5, r6, pc}
   85962:	bf00      	nop
   85964:	20070010 	.word	0x20070010

00085968 <_malloc_trim_r>:
   85968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8596a:	4d23      	ldr	r5, [pc, #140]	; (859f8 <_malloc_trim_r+0x90>)
   8596c:	460e      	mov	r6, r1
   8596e:	4604      	mov	r4, r0
   85970:	f001 f8ff 	bl	86b72 <__malloc_lock>
   85974:	68ab      	ldr	r3, [r5, #8]
   85976:	685f      	ldr	r7, [r3, #4]
   85978:	f027 0703 	bic.w	r7, r7, #3
   8597c:	1bbe      	subs	r6, r7, r6
   8597e:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
   85982:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
   85986:	f026 060f 	bic.w	r6, r6, #15
   8598a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   8598e:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   85992:	da04      	bge.n	8599e <_malloc_trim_r+0x36>
   85994:	4620      	mov	r0, r4
   85996:	f001 f8ed 	bl	86b74 <__malloc_unlock>
   8599a:	2000      	movs	r0, #0
   8599c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8599e:	4620      	mov	r0, r4
   859a0:	2100      	movs	r1, #0
   859a2:	f001 ff25 	bl	877f0 <_sbrk_r>
   859a6:	68ab      	ldr	r3, [r5, #8]
   859a8:	443b      	add	r3, r7
   859aa:	4298      	cmp	r0, r3
   859ac:	d1f2      	bne.n	85994 <_malloc_trim_r+0x2c>
   859ae:	4620      	mov	r0, r4
   859b0:	4271      	negs	r1, r6
   859b2:	f001 ff1d 	bl	877f0 <_sbrk_r>
   859b6:	3001      	adds	r0, #1
   859b8:	d110      	bne.n	859dc <_malloc_trim_r+0x74>
   859ba:	4620      	mov	r0, r4
   859bc:	2100      	movs	r1, #0
   859be:	f001 ff17 	bl	877f0 <_sbrk_r>
   859c2:	68ab      	ldr	r3, [r5, #8]
   859c4:	1ac2      	subs	r2, r0, r3
   859c6:	2a0f      	cmp	r2, #15
   859c8:	dde4      	ble.n	85994 <_malloc_trim_r+0x2c>
   859ca:	490c      	ldr	r1, [pc, #48]	; (859fc <_malloc_trim_r+0x94>)
   859cc:	f042 0201 	orr.w	r2, r2, #1
   859d0:	6809      	ldr	r1, [r1, #0]
   859d2:	605a      	str	r2, [r3, #4]
   859d4:	1a40      	subs	r0, r0, r1
   859d6:	490a      	ldr	r1, [pc, #40]	; (85a00 <_malloc_trim_r+0x98>)
   859d8:	6008      	str	r0, [r1, #0]
   859da:	e7db      	b.n	85994 <_malloc_trim_r+0x2c>
   859dc:	68ab      	ldr	r3, [r5, #8]
   859de:	1bbf      	subs	r7, r7, r6
   859e0:	f047 0701 	orr.w	r7, r7, #1
   859e4:	605f      	str	r7, [r3, #4]
   859e6:	4b06      	ldr	r3, [pc, #24]	; (85a00 <_malloc_trim_r+0x98>)
   859e8:	4620      	mov	r0, r4
   859ea:	681a      	ldr	r2, [r3, #0]
   859ec:	1b96      	subs	r6, r2, r6
   859ee:	601e      	str	r6, [r3, #0]
   859f0:	f001 f8c0 	bl	86b74 <__malloc_unlock>
   859f4:	2001      	movs	r0, #1
   859f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   859f8:	200704c0 	.word	0x200704c0
   859fc:	200708c8 	.word	0x200708c8
   85a00:	2007abdc 	.word	0x2007abdc

00085a04 <_free_r>:
   85a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85a06:	4606      	mov	r6, r0
   85a08:	460d      	mov	r5, r1
   85a0a:	2900      	cmp	r1, #0
   85a0c:	f000 80a9 	beq.w	85b62 <_free_r+0x15e>
   85a10:	f001 f8af 	bl	86b72 <__malloc_lock>
   85a14:	f855 cc04 	ldr.w	ip, [r5, #-4]
   85a18:	4c52      	ldr	r4, [pc, #328]	; (85b64 <_free_r+0x160>)
   85a1a:	f1a5 0308 	sub.w	r3, r5, #8
   85a1e:	f02c 0201 	bic.w	r2, ip, #1
   85a22:	1898      	adds	r0, r3, r2
   85a24:	68a1      	ldr	r1, [r4, #8]
   85a26:	6847      	ldr	r7, [r0, #4]
   85a28:	4288      	cmp	r0, r1
   85a2a:	f027 0703 	bic.w	r7, r7, #3
   85a2e:	f00c 0101 	and.w	r1, ip, #1
   85a32:	d11b      	bne.n	85a6c <_free_r+0x68>
   85a34:	443a      	add	r2, r7
   85a36:	b939      	cbnz	r1, 85a48 <_free_r+0x44>
   85a38:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85a3c:	1a5b      	subs	r3, r3, r1
   85a3e:	6898      	ldr	r0, [r3, #8]
   85a40:	440a      	add	r2, r1
   85a42:	68d9      	ldr	r1, [r3, #12]
   85a44:	60c1      	str	r1, [r0, #12]
   85a46:	6088      	str	r0, [r1, #8]
   85a48:	f042 0101 	orr.w	r1, r2, #1
   85a4c:	6059      	str	r1, [r3, #4]
   85a4e:	60a3      	str	r3, [r4, #8]
   85a50:	4b45      	ldr	r3, [pc, #276]	; (85b68 <_free_r+0x164>)
   85a52:	681b      	ldr	r3, [r3, #0]
   85a54:	429a      	cmp	r2, r3
   85a56:	d304      	bcc.n	85a62 <_free_r+0x5e>
   85a58:	4b44      	ldr	r3, [pc, #272]	; (85b6c <_free_r+0x168>)
   85a5a:	4630      	mov	r0, r6
   85a5c:	6819      	ldr	r1, [r3, #0]
   85a5e:	f7ff ff83 	bl	85968 <_malloc_trim_r>
   85a62:	4630      	mov	r0, r6
   85a64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   85a68:	f001 b884 	b.w	86b74 <__malloc_unlock>
   85a6c:	6047      	str	r7, [r0, #4]
   85a6e:	b979      	cbnz	r1, 85a90 <_free_r+0x8c>
   85a70:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85a74:	f104 0c08 	add.w	ip, r4, #8
   85a78:	1b5b      	subs	r3, r3, r5
   85a7a:	442a      	add	r2, r5
   85a7c:	689d      	ldr	r5, [r3, #8]
   85a7e:	4565      	cmp	r5, ip
   85a80:	d008      	beq.n	85a94 <_free_r+0x90>
   85a82:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   85a86:	f8c5 c00c 	str.w	ip, [r5, #12]
   85a8a:	f8cc 5008 	str.w	r5, [ip, #8]
   85a8e:	e002      	b.n	85a96 <_free_r+0x92>
   85a90:	2100      	movs	r1, #0
   85a92:	e000      	b.n	85a96 <_free_r+0x92>
   85a94:	2101      	movs	r1, #1
   85a96:	19c5      	adds	r5, r0, r7
   85a98:	686d      	ldr	r5, [r5, #4]
   85a9a:	07ed      	lsls	r5, r5, #31
   85a9c:	d40e      	bmi.n	85abc <_free_r+0xb8>
   85a9e:	443a      	add	r2, r7
   85aa0:	6885      	ldr	r5, [r0, #8]
   85aa2:	b941      	cbnz	r1, 85ab6 <_free_r+0xb2>
   85aa4:	4f32      	ldr	r7, [pc, #200]	; (85b70 <_free_r+0x16c>)
   85aa6:	42bd      	cmp	r5, r7
   85aa8:	d105      	bne.n	85ab6 <_free_r+0xb2>
   85aaa:	6163      	str	r3, [r4, #20]
   85aac:	6123      	str	r3, [r4, #16]
   85aae:	2101      	movs	r1, #1
   85ab0:	60dd      	str	r5, [r3, #12]
   85ab2:	609d      	str	r5, [r3, #8]
   85ab4:	e002      	b.n	85abc <_free_r+0xb8>
   85ab6:	68c0      	ldr	r0, [r0, #12]
   85ab8:	60e8      	str	r0, [r5, #12]
   85aba:	6085      	str	r5, [r0, #8]
   85abc:	f042 0001 	orr.w	r0, r2, #1
   85ac0:	6058      	str	r0, [r3, #4]
   85ac2:	509a      	str	r2, [r3, r2]
   85ac4:	2900      	cmp	r1, #0
   85ac6:	d1cc      	bne.n	85a62 <_free_r+0x5e>
   85ac8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85acc:	d20e      	bcs.n	85aec <_free_r+0xe8>
   85ace:	08d2      	lsrs	r2, r2, #3
   85ad0:	1091      	asrs	r1, r2, #2
   85ad2:	2001      	movs	r0, #1
   85ad4:	4088      	lsls	r0, r1
   85ad6:	6861      	ldr	r1, [r4, #4]
   85ad8:	4301      	orrs	r1, r0
   85ada:	6061      	str	r1, [r4, #4]
   85adc:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
   85ae0:	68a2      	ldr	r2, [r4, #8]
   85ae2:	60dc      	str	r4, [r3, #12]
   85ae4:	609a      	str	r2, [r3, #8]
   85ae6:	60a3      	str	r3, [r4, #8]
   85ae8:	60d3      	str	r3, [r2, #12]
   85aea:	e7ba      	b.n	85a62 <_free_r+0x5e>
   85aec:	0a51      	lsrs	r1, r2, #9
   85aee:	2904      	cmp	r1, #4
   85af0:	d802      	bhi.n	85af8 <_free_r+0xf4>
   85af2:	0991      	lsrs	r1, r2, #6
   85af4:	3138      	adds	r1, #56	; 0x38
   85af6:	e015      	b.n	85b24 <_free_r+0x120>
   85af8:	2914      	cmp	r1, #20
   85afa:	d801      	bhi.n	85b00 <_free_r+0xfc>
   85afc:	315b      	adds	r1, #91	; 0x5b
   85afe:	e011      	b.n	85b24 <_free_r+0x120>
   85b00:	2954      	cmp	r1, #84	; 0x54
   85b02:	d802      	bhi.n	85b0a <_free_r+0x106>
   85b04:	0b11      	lsrs	r1, r2, #12
   85b06:	316e      	adds	r1, #110	; 0x6e
   85b08:	e00c      	b.n	85b24 <_free_r+0x120>
   85b0a:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
   85b0e:	d802      	bhi.n	85b16 <_free_r+0x112>
   85b10:	0bd1      	lsrs	r1, r2, #15
   85b12:	3177      	adds	r1, #119	; 0x77
   85b14:	e006      	b.n	85b24 <_free_r+0x120>
   85b16:	f240 5054 	movw	r0, #1364	; 0x554
   85b1a:	4281      	cmp	r1, r0
   85b1c:	bf9a      	itte	ls
   85b1e:	0c91      	lsrls	r1, r2, #18
   85b20:	317c      	addls	r1, #124	; 0x7c
   85b22:	217e      	movhi	r1, #126	; 0x7e
   85b24:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   85b28:	68a5      	ldr	r5, [r4, #8]
   85b2a:	480e      	ldr	r0, [pc, #56]	; (85b64 <_free_r+0x160>)
   85b2c:	42a5      	cmp	r5, r4
   85b2e:	d001      	beq.n	85b34 <_free_r+0x130>
   85b30:	4629      	mov	r1, r5
   85b32:	e00b      	b.n	85b4c <_free_r+0x148>
   85b34:	2201      	movs	r2, #1
   85b36:	1089      	asrs	r1, r1, #2
   85b38:	fa02 f101 	lsl.w	r1, r2, r1
   85b3c:	6842      	ldr	r2, [r0, #4]
   85b3e:	430a      	orrs	r2, r1
   85b40:	6042      	str	r2, [r0, #4]
   85b42:	4629      	mov	r1, r5
   85b44:	e008      	b.n	85b58 <_free_r+0x154>
   85b46:	6889      	ldr	r1, [r1, #8]
   85b48:	42a1      	cmp	r1, r4
   85b4a:	d004      	beq.n	85b56 <_free_r+0x152>
   85b4c:	6848      	ldr	r0, [r1, #4]
   85b4e:	f020 0003 	bic.w	r0, r0, #3
   85b52:	4282      	cmp	r2, r0
   85b54:	d3f7      	bcc.n	85b46 <_free_r+0x142>
   85b56:	68cd      	ldr	r5, [r1, #12]
   85b58:	60dd      	str	r5, [r3, #12]
   85b5a:	6099      	str	r1, [r3, #8]
   85b5c:	60ab      	str	r3, [r5, #8]
   85b5e:	60cb      	str	r3, [r1, #12]
   85b60:	e77f      	b.n	85a62 <_free_r+0x5e>
   85b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85b64:	200704c0 	.word	0x200704c0
   85b68:	200708cc 	.word	0x200708cc
   85b6c:	2007abd8 	.word	0x2007abd8
   85b70:	200704c8 	.word	0x200704c8

00085b74 <__sfvwrite_r>:
   85b74:	6893      	ldr	r3, [r2, #8]
   85b76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85b7a:	4680      	mov	r8, r0
   85b7c:	460c      	mov	r4, r1
   85b7e:	4691      	mov	r9, r2
   85b80:	b90b      	cbnz	r3, 85b86 <__sfvwrite_r+0x12>
   85b82:	2000      	movs	r0, #0
   85b84:	e13c      	b.n	85e00 <__sfvwrite_r+0x28c>
   85b86:	898b      	ldrh	r3, [r1, #12]
   85b88:	0718      	lsls	r0, r3, #28
   85b8a:	d50e      	bpl.n	85baa <__sfvwrite_r+0x36>
   85b8c:	690b      	ldr	r3, [r1, #16]
   85b8e:	b163      	cbz	r3, 85baa <__sfvwrite_r+0x36>
   85b90:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
   85b94:	f8d9 6000 	ldr.w	r6, [r9]
   85b98:	f00a 0c02 	and.w	ip, sl, #2
   85b9c:	fa1f f38c 	uxth.w	r3, ip
   85ba0:	b333      	cbz	r3, 85bf0 <__sfvwrite_r+0x7c>
   85ba2:	f04f 0a00 	mov.w	sl, #0
   85ba6:	4657      	mov	r7, sl
   85ba8:	e01b      	b.n	85be2 <__sfvwrite_r+0x6e>
   85baa:	4640      	mov	r0, r8
   85bac:	4621      	mov	r1, r4
   85bae:	f7ff fbc9 	bl	85344 <__swsetup_r>
   85bb2:	2800      	cmp	r0, #0
   85bb4:	d0ec      	beq.n	85b90 <__sfvwrite_r+0x1c>
   85bb6:	e121      	b.n	85dfc <__sfvwrite_r+0x288>
   85bb8:	4b93      	ldr	r3, [pc, #588]	; (85e08 <__sfvwrite_r+0x294>)
   85bba:	4640      	mov	r0, r8
   85bbc:	429f      	cmp	r7, r3
   85bbe:	bf38      	it	cc
   85bc0:	463b      	movcc	r3, r7
   85bc2:	69e1      	ldr	r1, [r4, #28]
   85bc4:	4652      	mov	r2, sl
   85bc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85bc8:	47a8      	blx	r5
   85bca:	2800      	cmp	r0, #0
   85bcc:	f340 8112 	ble.w	85df4 <__sfvwrite_r+0x280>
   85bd0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   85bd4:	4482      	add	sl, r0
   85bd6:	1a3f      	subs	r7, r7, r0
   85bd8:	1a18      	subs	r0, r3, r0
   85bda:	f8c9 0008 	str.w	r0, [r9, #8]
   85bde:	2800      	cmp	r0, #0
   85be0:	d0cf      	beq.n	85b82 <__sfvwrite_r+0xe>
   85be2:	2f00      	cmp	r7, #0
   85be4:	d1e8      	bne.n	85bb8 <__sfvwrite_r+0x44>
   85be6:	f8d6 a000 	ldr.w	sl, [r6]
   85bea:	6877      	ldr	r7, [r6, #4]
   85bec:	3608      	adds	r6, #8
   85bee:	e7f8      	b.n	85be2 <__sfvwrite_r+0x6e>
   85bf0:	f01a 0a01 	ands.w	sl, sl, #1
   85bf4:	d004      	beq.n	85c00 <__sfvwrite_r+0x8c>
   85bf6:	469b      	mov	fp, r3
   85bf8:	9301      	str	r3, [sp, #4]
   85bfa:	461f      	mov	r7, r3
   85bfc:	469a      	mov	sl, r3
   85bfe:	e0bf      	b.n	85d80 <__sfvwrite_r+0x20c>
   85c00:	4655      	mov	r5, sl
   85c02:	b925      	cbnz	r5, 85c0e <__sfvwrite_r+0x9a>
   85c04:	f8d6 a000 	ldr.w	sl, [r6]
   85c08:	6875      	ldr	r5, [r6, #4]
   85c0a:	3608      	adds	r6, #8
   85c0c:	e7f9      	b.n	85c02 <__sfvwrite_r+0x8e>
   85c0e:	89a2      	ldrh	r2, [r4, #12]
   85c10:	68a7      	ldr	r7, [r4, #8]
   85c12:	0591      	lsls	r1, r2, #22
   85c14:	d552      	bpl.n	85cbc <__sfvwrite_r+0x148>
   85c16:	42bd      	cmp	r5, r7
   85c18:	d342      	bcc.n	85ca0 <__sfvwrite_r+0x12c>
   85c1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   85c1e:	d03d      	beq.n	85c9c <__sfvwrite_r+0x128>
   85c20:	6921      	ldr	r1, [r4, #16]
   85c22:	6823      	ldr	r3, [r4, #0]
   85c24:	2002      	movs	r0, #2
   85c26:	1a5b      	subs	r3, r3, r1
   85c28:	9301      	str	r3, [sp, #4]
   85c2a:	6963      	ldr	r3, [r4, #20]
   85c2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   85c30:	fb93 fbf0 	sdiv	fp, r3, r0
   85c34:	9b01      	ldr	r3, [sp, #4]
   85c36:	1c58      	adds	r0, r3, #1
   85c38:	4428      	add	r0, r5
   85c3a:	4583      	cmp	fp, r0
   85c3c:	bf38      	it	cc
   85c3e:	4683      	movcc	fp, r0
   85c40:	0553      	lsls	r3, r2, #21
   85c42:	4640      	mov	r0, r8
   85c44:	d50f      	bpl.n	85c66 <__sfvwrite_r+0xf2>
   85c46:	4659      	mov	r1, fp
   85c48:	f000 fcfe 	bl	86648 <_malloc_r>
   85c4c:	4607      	mov	r7, r0
   85c4e:	b1b8      	cbz	r0, 85c80 <__sfvwrite_r+0x10c>
   85c50:	9a01      	ldr	r2, [sp, #4]
   85c52:	6921      	ldr	r1, [r4, #16]
   85c54:	f7fd fbba 	bl	833cc <memcpy>
   85c58:	89a2      	ldrh	r2, [r4, #12]
   85c5a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   85c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85c62:	81a2      	strh	r2, [r4, #12]
   85c64:	e010      	b.n	85c88 <__sfvwrite_r+0x114>
   85c66:	465a      	mov	r2, fp
   85c68:	f001 fb70 	bl	8734c <_realloc_r>
   85c6c:	4607      	mov	r7, r0
   85c6e:	b958      	cbnz	r0, 85c88 <__sfvwrite_r+0x114>
   85c70:	4640      	mov	r0, r8
   85c72:	6921      	ldr	r1, [r4, #16]
   85c74:	f7ff fec6 	bl	85a04 <_free_r>
   85c78:	89a3      	ldrh	r3, [r4, #12]
   85c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85c7e:	81a3      	strh	r3, [r4, #12]
   85c80:	230c      	movs	r3, #12
   85c82:	f8c8 3000 	str.w	r3, [r8]
   85c86:	e0b5      	b.n	85df4 <__sfvwrite_r+0x280>
   85c88:	9b01      	ldr	r3, [sp, #4]
   85c8a:	6127      	str	r7, [r4, #16]
   85c8c:	441f      	add	r7, r3
   85c8e:	ebc3 030b 	rsb	r3, r3, fp
   85c92:	6027      	str	r7, [r4, #0]
   85c94:	f8c4 b014 	str.w	fp, [r4, #20]
   85c98:	462f      	mov	r7, r5
   85c9a:	60a3      	str	r3, [r4, #8]
   85c9c:	42bd      	cmp	r5, r7
   85c9e:	d200      	bcs.n	85ca2 <__sfvwrite_r+0x12e>
   85ca0:	462f      	mov	r7, r5
   85ca2:	463a      	mov	r2, r7
   85ca4:	6820      	ldr	r0, [r4, #0]
   85ca6:	4651      	mov	r1, sl
   85ca8:	f000 ff48 	bl	86b3c <memmove>
   85cac:	68a3      	ldr	r3, [r4, #8]
   85cae:	1bdb      	subs	r3, r3, r7
   85cb0:	60a3      	str	r3, [r4, #8]
   85cb2:	6823      	ldr	r3, [r4, #0]
   85cb4:	441f      	add	r7, r3
   85cb6:	6027      	str	r7, [r4, #0]
   85cb8:	462f      	mov	r7, r5
   85cba:	e02a      	b.n	85d12 <__sfvwrite_r+0x19e>
   85cbc:	6820      	ldr	r0, [r4, #0]
   85cbe:	6923      	ldr	r3, [r4, #16]
   85cc0:	4298      	cmp	r0, r3
   85cc2:	d802      	bhi.n	85cca <__sfvwrite_r+0x156>
   85cc4:	6963      	ldr	r3, [r4, #20]
   85cc6:	429d      	cmp	r5, r3
   85cc8:	d213      	bcs.n	85cf2 <__sfvwrite_r+0x17e>
   85cca:	42bd      	cmp	r5, r7
   85ccc:	bf38      	it	cc
   85cce:	462f      	movcc	r7, r5
   85cd0:	463a      	mov	r2, r7
   85cd2:	4651      	mov	r1, sl
   85cd4:	f000 ff32 	bl	86b3c <memmove>
   85cd8:	68a3      	ldr	r3, [r4, #8]
   85cda:	6822      	ldr	r2, [r4, #0]
   85cdc:	1bdb      	subs	r3, r3, r7
   85cde:	443a      	add	r2, r7
   85ce0:	60a3      	str	r3, [r4, #8]
   85ce2:	6022      	str	r2, [r4, #0]
   85ce4:	b9ab      	cbnz	r3, 85d12 <__sfvwrite_r+0x19e>
   85ce6:	4640      	mov	r0, r8
   85ce8:	4621      	mov	r1, r4
   85cea:	f7ff fc66 	bl	855ba <_fflush_r>
   85cee:	b180      	cbz	r0, 85d12 <__sfvwrite_r+0x19e>
   85cf0:	e080      	b.n	85df4 <__sfvwrite_r+0x280>
   85cf2:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   85cf6:	4575      	cmp	r5, lr
   85cf8:	bf38      	it	cc
   85cfa:	46ae      	movcc	lr, r5
   85cfc:	fb9e fef3 	sdiv	lr, lr, r3
   85d00:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85d02:	4640      	mov	r0, r8
   85d04:	69e1      	ldr	r1, [r4, #28]
   85d06:	4652      	mov	r2, sl
   85d08:	fb03 f30e 	mul.w	r3, r3, lr
   85d0c:	47b8      	blx	r7
   85d0e:	1e07      	subs	r7, r0, #0
   85d10:	dd70      	ble.n	85df4 <__sfvwrite_r+0x280>
   85d12:	f8d9 3008 	ldr.w	r3, [r9, #8]
   85d16:	44ba      	add	sl, r7
   85d18:	1bed      	subs	r5, r5, r7
   85d1a:	1bdf      	subs	r7, r3, r7
   85d1c:	f8c9 7008 	str.w	r7, [r9, #8]
   85d20:	2f00      	cmp	r7, #0
   85d22:	f47f af6e 	bne.w	85c02 <__sfvwrite_r+0x8e>
   85d26:	e72c      	b.n	85b82 <__sfvwrite_r+0xe>
   85d28:	9d01      	ldr	r5, [sp, #4]
   85d2a:	2d00      	cmp	r5, #0
   85d2c:	d031      	beq.n	85d92 <__sfvwrite_r+0x21e>
   85d2e:	6820      	ldr	r0, [r4, #0]
   85d30:	6922      	ldr	r2, [r4, #16]
   85d32:	45d3      	cmp	fp, sl
   85d34:	bf34      	ite	cc
   85d36:	465b      	movcc	r3, fp
   85d38:	4653      	movcs	r3, sl
   85d3a:	4290      	cmp	r0, r2
   85d3c:	68a5      	ldr	r5, [r4, #8]
   85d3e:	f8d4 e014 	ldr.w	lr, [r4, #20]
   85d42:	d936      	bls.n	85db2 <__sfvwrite_r+0x23e>
   85d44:	4475      	add	r5, lr
   85d46:	42ab      	cmp	r3, r5
   85d48:	dd33      	ble.n	85db2 <__sfvwrite_r+0x23e>
   85d4a:	4639      	mov	r1, r7
   85d4c:	462a      	mov	r2, r5
   85d4e:	f000 fef5 	bl	86b3c <memmove>
   85d52:	6823      	ldr	r3, [r4, #0]
   85d54:	4640      	mov	r0, r8
   85d56:	442b      	add	r3, r5
   85d58:	6023      	str	r3, [r4, #0]
   85d5a:	4621      	mov	r1, r4
   85d5c:	f7ff fc2d 	bl	855ba <_fflush_r>
   85d60:	2800      	cmp	r0, #0
   85d62:	d147      	bne.n	85df4 <__sfvwrite_r+0x280>
   85d64:	ebbb 0b05 	subs.w	fp, fp, r5
   85d68:	d03c      	beq.n	85de4 <__sfvwrite_r+0x270>
   85d6a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   85d6e:	442f      	add	r7, r5
   85d70:	ebc5 0a0a 	rsb	sl, r5, sl
   85d74:	1b5d      	subs	r5, r3, r5
   85d76:	f8c9 5008 	str.w	r5, [r9, #8]
   85d7a:	2d00      	cmp	r5, #0
   85d7c:	f43f af01 	beq.w	85b82 <__sfvwrite_r+0xe>
   85d80:	f1ba 0f00 	cmp.w	sl, #0
   85d84:	d1d0      	bne.n	85d28 <__sfvwrite_r+0x1b4>
   85d86:	2500      	movs	r5, #0
   85d88:	e896 0480 	ldmia.w	r6, {r7, sl}
   85d8c:	9501      	str	r5, [sp, #4]
   85d8e:	3608      	adds	r6, #8
   85d90:	e7f6      	b.n	85d80 <__sfvwrite_r+0x20c>
   85d92:	4638      	mov	r0, r7
   85d94:	210a      	movs	r1, #10
   85d96:	4652      	mov	r2, sl
   85d98:	f000 fec2 	bl	86b20 <memchr>
   85d9c:	b120      	cbz	r0, 85da8 <__sfvwrite_r+0x234>
   85d9e:	f100 0c01 	add.w	ip, r0, #1
   85da2:	ebc7 0b0c 	rsb	fp, r7, ip
   85da6:	e001      	b.n	85dac <__sfvwrite_r+0x238>
   85da8:	f10a 0b01 	add.w	fp, sl, #1
   85dac:	2501      	movs	r5, #1
   85dae:	9501      	str	r5, [sp, #4]
   85db0:	e7bd      	b.n	85d2e <__sfvwrite_r+0x1ba>
   85db2:	4573      	cmp	r3, lr
   85db4:	db08      	blt.n	85dc8 <__sfvwrite_r+0x254>
   85db6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   85db8:	4640      	mov	r0, r8
   85dba:	69e1      	ldr	r1, [r4, #28]
   85dbc:	463a      	mov	r2, r7
   85dbe:	4673      	mov	r3, lr
   85dc0:	47a8      	blx	r5
   85dc2:	1e05      	subs	r5, r0, #0
   85dc4:	dcce      	bgt.n	85d64 <__sfvwrite_r+0x1f0>
   85dc6:	e015      	b.n	85df4 <__sfvwrite_r+0x280>
   85dc8:	461a      	mov	r2, r3
   85dca:	4639      	mov	r1, r7
   85dcc:	9300      	str	r3, [sp, #0]
   85dce:	f000 feb5 	bl	86b3c <memmove>
   85dd2:	9b00      	ldr	r3, [sp, #0]
   85dd4:	68a2      	ldr	r2, [r4, #8]
   85dd6:	461d      	mov	r5, r3
   85dd8:	1ad2      	subs	r2, r2, r3
   85dda:	60a2      	str	r2, [r4, #8]
   85ddc:	6822      	ldr	r2, [r4, #0]
   85dde:	441a      	add	r2, r3
   85de0:	6022      	str	r2, [r4, #0]
   85de2:	e7bf      	b.n	85d64 <__sfvwrite_r+0x1f0>
   85de4:	4640      	mov	r0, r8
   85de6:	4621      	mov	r1, r4
   85de8:	f7ff fbe7 	bl	855ba <_fflush_r>
   85dec:	b910      	cbnz	r0, 85df4 <__sfvwrite_r+0x280>
   85dee:	f8cd b004 	str.w	fp, [sp, #4]
   85df2:	e7ba      	b.n	85d6a <__sfvwrite_r+0x1f6>
   85df4:	89a3      	ldrh	r3, [r4, #12]
   85df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85dfa:	81a3      	strh	r3, [r4, #12]
   85dfc:	f04f 30ff 	mov.w	r0, #4294967295
   85e00:	b003      	add	sp, #12
   85e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e06:	bf00      	nop
   85e08:	7ffffc00 	.word	0x7ffffc00

00085e0c <_fwalk>:
   85e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85e10:	4688      	mov	r8, r1
   85e12:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   85e16:	2600      	movs	r6, #0
   85e18:	b18c      	cbz	r4, 85e3e <_fwalk+0x32>
   85e1a:	68a5      	ldr	r5, [r4, #8]
   85e1c:	6867      	ldr	r7, [r4, #4]
   85e1e:	3f01      	subs	r7, #1
   85e20:	d40b      	bmi.n	85e3a <_fwalk+0x2e>
   85e22:	89ab      	ldrh	r3, [r5, #12]
   85e24:	2b01      	cmp	r3, #1
   85e26:	d906      	bls.n	85e36 <_fwalk+0x2a>
   85e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   85e2c:	3301      	adds	r3, #1
   85e2e:	d002      	beq.n	85e36 <_fwalk+0x2a>
   85e30:	4628      	mov	r0, r5
   85e32:	47c0      	blx	r8
   85e34:	4306      	orrs	r6, r0
   85e36:	3568      	adds	r5, #104	; 0x68
   85e38:	e7f1      	b.n	85e1e <_fwalk+0x12>
   85e3a:	6824      	ldr	r4, [r4, #0]
   85e3c:	e7ec      	b.n	85e18 <_fwalk+0xc>
   85e3e:	4630      	mov	r0, r6
   85e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00085e44 <_fwalk_reent>:
   85e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85e48:	4680      	mov	r8, r0
   85e4a:	4689      	mov	r9, r1
   85e4c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
   85e50:	2600      	movs	r6, #0
   85e52:	b194      	cbz	r4, 85e7a <_fwalk_reent+0x36>
   85e54:	68a5      	ldr	r5, [r4, #8]
   85e56:	6867      	ldr	r7, [r4, #4]
   85e58:	3f01      	subs	r7, #1
   85e5a:	d40c      	bmi.n	85e76 <_fwalk_reent+0x32>
   85e5c:	89ab      	ldrh	r3, [r5, #12]
   85e5e:	2b01      	cmp	r3, #1
   85e60:	d907      	bls.n	85e72 <_fwalk_reent+0x2e>
   85e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   85e66:	3301      	adds	r3, #1
   85e68:	d003      	beq.n	85e72 <_fwalk_reent+0x2e>
   85e6a:	4640      	mov	r0, r8
   85e6c:	4629      	mov	r1, r5
   85e6e:	47c8      	blx	r9
   85e70:	4306      	orrs	r6, r0
   85e72:	3568      	adds	r5, #104	; 0x68
   85e74:	e7f0      	b.n	85e58 <_fwalk_reent+0x14>
   85e76:	6824      	ldr	r4, [r4, #0]
   85e78:	e7eb      	b.n	85e52 <_fwalk_reent+0xe>
   85e7a:	4630      	mov	r0, r6
   85e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085e80 <rshift>:
   85e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   85e82:	6906      	ldr	r6, [r0, #16]
   85e84:	114b      	asrs	r3, r1, #5
   85e86:	42b3      	cmp	r3, r6
   85e88:	f100 0214 	add.w	r2, r0, #20
   85e8c:	da26      	bge.n	85edc <rshift+0x5c>
   85e8e:	f011 011f 	ands.w	r1, r1, #31
   85e92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   85e96:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   85e9a:	d101      	bne.n	85ea0 <rshift+0x20>
   85e9c:	4613      	mov	r3, r2
   85e9e:	e016      	b.n	85ece <rshift+0x4e>
   85ea0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   85ea4:	f1c1 0c20 	rsb	ip, r1, #32
   85ea8:	40cd      	lsrs	r5, r1
   85eaa:	3404      	adds	r4, #4
   85eac:	4613      	mov	r3, r2
   85eae:	42b4      	cmp	r4, r6
   85eb0:	d209      	bcs.n	85ec6 <rshift+0x46>
   85eb2:	6827      	ldr	r7, [r4, #0]
   85eb4:	fa07 f70c 	lsl.w	r7, r7, ip
   85eb8:	433d      	orrs	r5, r7
   85eba:	f843 5b04 	str.w	r5, [r3], #4
   85ebe:	f854 5b04 	ldr.w	r5, [r4], #4
   85ec2:	40cd      	lsrs	r5, r1
   85ec4:	e7f3      	b.n	85eae <rshift+0x2e>
   85ec6:	601d      	str	r5, [r3, #0]
   85ec8:	b14d      	cbz	r5, 85ede <rshift+0x5e>
   85eca:	3304      	adds	r3, #4
   85ecc:	e007      	b.n	85ede <rshift+0x5e>
   85ece:	42b4      	cmp	r4, r6
   85ed0:	d205      	bcs.n	85ede <rshift+0x5e>
   85ed2:	f854 1b04 	ldr.w	r1, [r4], #4
   85ed6:	f843 1b04 	str.w	r1, [r3], #4
   85eda:	e7f8      	b.n	85ece <rshift+0x4e>
   85edc:	4613      	mov	r3, r2
   85ede:	1a9b      	subs	r3, r3, r2
   85ee0:	109b      	asrs	r3, r3, #2
   85ee2:	6103      	str	r3, [r0, #16]
   85ee4:	b903      	cbnz	r3, 85ee8 <rshift+0x68>
   85ee6:	6143      	str	r3, [r0, #20]
   85ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00085eea <__hexdig_fun>:
   85eea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   85eee:	b2db      	uxtb	r3, r3
   85ef0:	2b09      	cmp	r3, #9
   85ef2:	d801      	bhi.n	85ef8 <__hexdig_fun+0xe>
   85ef4:	3820      	subs	r0, #32
   85ef6:	e00c      	b.n	85f12 <__hexdig_fun+0x28>
   85ef8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   85efc:	b2db      	uxtb	r3, r3
   85efe:	2b05      	cmp	r3, #5
   85f00:	d801      	bhi.n	85f06 <__hexdig_fun+0x1c>
   85f02:	3847      	subs	r0, #71	; 0x47
   85f04:	e005      	b.n	85f12 <__hexdig_fun+0x28>
   85f06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   85f0a:	b2db      	uxtb	r3, r3
   85f0c:	2b05      	cmp	r3, #5
   85f0e:	d802      	bhi.n	85f16 <__hexdig_fun+0x2c>
   85f10:	3827      	subs	r0, #39	; 0x27
   85f12:	b2c0      	uxtb	r0, r0
   85f14:	4770      	bx	lr
   85f16:	2000      	movs	r0, #0
   85f18:	4770      	bx	lr

00085f1a <__gethex>:
   85f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f1e:	b089      	sub	sp, #36	; 0x24
   85f20:	9105      	str	r1, [sp, #20]
   85f22:	9306      	str	r3, [sp, #24]
   85f24:	4690      	mov	r8, r2
   85f26:	9003      	str	r0, [sp, #12]
   85f28:	f000 fb08 	bl	8653c <_localeconv_r>
   85f2c:	6800      	ldr	r0, [r0, #0]
   85f2e:	f04f 0b00 	mov.w	fp, #0
   85f32:	9004      	str	r0, [sp, #16]
   85f34:	f7fd fad8 	bl	834e8 <strlen>
   85f38:	9b04      	ldr	r3, [sp, #16]
   85f3a:	9905      	ldr	r1, [sp, #20]
   85f3c:	4403      	add	r3, r0
   85f3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   85f42:	9002      	str	r0, [sp, #8]
   85f44:	9307      	str	r3, [sp, #28]
   85f46:	680b      	ldr	r3, [r1, #0]
   85f48:	3302      	adds	r3, #2
   85f4a:	461f      	mov	r7, r3
   85f4c:	f813 0b01 	ldrb.w	r0, [r3], #1
   85f50:	2830      	cmp	r0, #48	; 0x30
   85f52:	d102      	bne.n	85f5a <__gethex+0x40>
   85f54:	f10b 0b01 	add.w	fp, fp, #1
   85f58:	e7f7      	b.n	85f4a <__gethex+0x30>
   85f5a:	f7ff ffc6 	bl	85eea <__hexdig_fun>
   85f5e:	4606      	mov	r6, r0
   85f60:	b9f8      	cbnz	r0, 85fa2 <__gethex+0x88>
   85f62:	4638      	mov	r0, r7
   85f64:	9904      	ldr	r1, [sp, #16]
   85f66:	9a02      	ldr	r2, [sp, #8]
   85f68:	f7fd fac6 	bl	834f8 <strncmp>
   85f6c:	2800      	cmp	r0, #0
   85f6e:	d139      	bne.n	85fe4 <__gethex+0xca>
   85f70:	9b02      	ldr	r3, [sp, #8]
   85f72:	9d02      	ldr	r5, [sp, #8]
   85f74:	5cf8      	ldrb	r0, [r7, r3]
   85f76:	443d      	add	r5, r7
   85f78:	f7ff ffb7 	bl	85eea <__hexdig_fun>
   85f7c:	2800      	cmp	r0, #0
   85f7e:	d033      	beq.n	85fe8 <__gethex+0xce>
   85f80:	462b      	mov	r3, r5
   85f82:	7818      	ldrb	r0, [r3, #0]
   85f84:	461f      	mov	r7, r3
   85f86:	2830      	cmp	r0, #48	; 0x30
   85f88:	f103 0301 	add.w	r3, r3, #1
   85f8c:	d0f9      	beq.n	85f82 <__gethex+0x68>
   85f8e:	f7ff ffac 	bl	85eea <__hexdig_fun>
   85f92:	f1d0 0401 	rsbs	r4, r0, #1
   85f96:	bf38      	it	cc
   85f98:	2400      	movcc	r4, #0
   85f9a:	462e      	mov	r6, r5
   85f9c:	f04f 0b01 	mov.w	fp, #1
   85fa0:	e001      	b.n	85fa6 <__gethex+0x8c>
   85fa2:	2400      	movs	r4, #0
   85fa4:	4626      	mov	r6, r4
   85fa6:	46b9      	mov	r9, r7
   85fa8:	464d      	mov	r5, r9
   85faa:	7828      	ldrb	r0, [r5, #0]
   85fac:	f109 0901 	add.w	r9, r9, #1
   85fb0:	f7ff ff9b 	bl	85eea <__hexdig_fun>
   85fb4:	2800      	cmp	r0, #0
   85fb6:	d1f7      	bne.n	85fa8 <__gethex+0x8e>
   85fb8:	4628      	mov	r0, r5
   85fba:	9904      	ldr	r1, [sp, #16]
   85fbc:	9a02      	ldr	r2, [sp, #8]
   85fbe:	f7fd fa9b 	bl	834f8 <strncmp>
   85fc2:	b958      	cbnz	r0, 85fdc <__gethex+0xc2>
   85fc4:	b95e      	cbnz	r6, 85fde <__gethex+0xc4>
   85fc6:	9e02      	ldr	r6, [sp, #8]
   85fc8:	442e      	add	r6, r5
   85fca:	46b1      	mov	r9, r6
   85fcc:	464d      	mov	r5, r9
   85fce:	7828      	ldrb	r0, [r5, #0]
   85fd0:	f109 0901 	add.w	r9, r9, #1
   85fd4:	f7ff ff89 	bl	85eea <__hexdig_fun>
   85fd8:	2800      	cmp	r0, #0
   85fda:	d1f7      	bne.n	85fcc <__gethex+0xb2>
   85fdc:	b136      	cbz	r6, 85fec <__gethex+0xd2>
   85fde:	1b76      	subs	r6, r6, r5
   85fe0:	00b6      	lsls	r6, r6, #2
   85fe2:	e003      	b.n	85fec <__gethex+0xd2>
   85fe4:	463d      	mov	r5, r7
   85fe6:	e000      	b.n	85fea <__gethex+0xd0>
   85fe8:	4606      	mov	r6, r0
   85fea:	2401      	movs	r4, #1
   85fec:	782b      	ldrb	r3, [r5, #0]
   85fee:	2b50      	cmp	r3, #80	; 0x50
   85ff0:	d001      	beq.n	85ff6 <__gethex+0xdc>
   85ff2:	2b70      	cmp	r3, #112	; 0x70
   85ff4:	d134      	bne.n	86060 <__gethex+0x146>
   85ff6:	786b      	ldrb	r3, [r5, #1]
   85ff8:	2b2b      	cmp	r3, #43	; 0x2b
   85ffa:	d005      	beq.n	86008 <__gethex+0xee>
   85ffc:	2b2d      	cmp	r3, #45	; 0x2d
   85ffe:	d005      	beq.n	8600c <__gethex+0xf2>
   86000:	f105 0901 	add.w	r9, r5, #1
   86004:	2100      	movs	r1, #0
   86006:	e004      	b.n	86012 <__gethex+0xf8>
   86008:	2100      	movs	r1, #0
   8600a:	e000      	b.n	8600e <__gethex+0xf4>
   8600c:	2101      	movs	r1, #1
   8600e:	f105 0902 	add.w	r9, r5, #2
   86012:	f899 0000 	ldrb.w	r0, [r9]
   86016:	9101      	str	r1, [sp, #4]
   86018:	f7ff ff67 	bl	85eea <__hexdig_fun>
   8601c:	1e43      	subs	r3, r0, #1
   8601e:	b2db      	uxtb	r3, r3
   86020:	2b18      	cmp	r3, #24
   86022:	9901      	ldr	r1, [sp, #4]
   86024:	d81c      	bhi.n	86060 <__gethex+0x146>
   86026:	f1a0 0a10 	sub.w	sl, r0, #16
   8602a:	f109 0301 	add.w	r3, r9, #1
   8602e:	4699      	mov	r9, r3
   86030:	f899 0000 	ldrb.w	r0, [r9]
   86034:	3301      	adds	r3, #1
   86036:	9101      	str	r1, [sp, #4]
   86038:	9300      	str	r3, [sp, #0]
   8603a:	f7ff ff56 	bl	85eea <__hexdig_fun>
   8603e:	1e42      	subs	r2, r0, #1
   86040:	b2d2      	uxtb	r2, r2
   86042:	2a18      	cmp	r2, #24
   86044:	9901      	ldr	r1, [sp, #4]
   86046:	9b00      	ldr	r3, [sp, #0]
   86048:	d805      	bhi.n	86056 <__gethex+0x13c>
   8604a:	220a      	movs	r2, #10
   8604c:	fb02 0a0a 	mla	sl, r2, sl, r0
   86050:	f1aa 0a10 	sub.w	sl, sl, #16
   86054:	e7eb      	b.n	8602e <__gethex+0x114>
   86056:	b109      	cbz	r1, 8605c <__gethex+0x142>
   86058:	f1ca 0a00 	rsb	sl, sl, #0
   8605c:	4456      	add	r6, sl
   8605e:	e000      	b.n	86062 <__gethex+0x148>
   86060:	46a9      	mov	r9, r5
   86062:	9905      	ldr	r1, [sp, #20]
   86064:	f8c1 9000 	str.w	r9, [r1]
   86068:	b12c      	cbz	r4, 86076 <__gethex+0x15c>
   8606a:	f1bb 0f00 	cmp.w	fp, #0
   8606e:	bf0c      	ite	eq
   86070:	2006      	moveq	r0, #6
   86072:	2000      	movne	r0, #0
   86074:	e17d      	b.n	86372 <__gethex+0x458>
   86076:	1beb      	subs	r3, r5, r7
   86078:	3b01      	subs	r3, #1
   8607a:	4621      	mov	r1, r4
   8607c:	2b07      	cmp	r3, #7
   8607e:	dd02      	ble.n	86086 <__gethex+0x16c>
   86080:	3101      	adds	r1, #1
   86082:	105b      	asrs	r3, r3, #1
   86084:	e7fa      	b.n	8607c <__gethex+0x162>
   86086:	9803      	ldr	r0, [sp, #12]
   86088:	f000 fd76 	bl	86b78 <_Balloc>
   8608c:	f04f 0900 	mov.w	r9, #0
   86090:	f100 0a14 	add.w	sl, r0, #20
   86094:	4604      	mov	r4, r0
   86096:	4653      	mov	r3, sl
   86098:	46cb      	mov	fp, r9
   8609a:	42bd      	cmp	r5, r7
   8609c:	d933      	bls.n	86106 <__gethex+0x1ec>
   8609e:	1e6a      	subs	r2, r5, #1
   860a0:	9205      	str	r2, [sp, #20]
   860a2:	9907      	ldr	r1, [sp, #28]
   860a4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   860a8:	428a      	cmp	r2, r1
   860aa:	d009      	beq.n	860c0 <__gethex+0x1a6>
   860ac:	f1bb 0f20 	cmp.w	fp, #32
   860b0:	d117      	bne.n	860e2 <__gethex+0x1c8>
   860b2:	f8c3 9000 	str.w	r9, [r3]
   860b6:	f04f 0900 	mov.w	r9, #0
   860ba:	3304      	adds	r3, #4
   860bc:	46cb      	mov	fp, r9
   860be:	e010      	b.n	860e2 <__gethex+0x1c8>
   860c0:	9a02      	ldr	r2, [sp, #8]
   860c2:	9905      	ldr	r1, [sp, #20]
   860c4:	f1c2 0c01 	rsb	ip, r2, #1
   860c8:	448c      	add	ip, r1
   860ca:	45bc      	cmp	ip, r7
   860cc:	d3ee      	bcc.n	860ac <__gethex+0x192>
   860ce:	4660      	mov	r0, ip
   860d0:	9904      	ldr	r1, [sp, #16]
   860d2:	e88d 1008 	stmia.w	sp, {r3, ip}
   860d6:	f7fd fa0f 	bl	834f8 <strncmp>
   860da:	e89d 1008 	ldmia.w	sp, {r3, ip}
   860de:	b180      	cbz	r0, 86102 <__gethex+0x1e8>
   860e0:	e7e4      	b.n	860ac <__gethex+0x192>
   860e2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   860e6:	9300      	str	r3, [sp, #0]
   860e8:	f7ff feff 	bl	85eea <__hexdig_fun>
   860ec:	f000 000f 	and.w	r0, r0, #15
   860f0:	fa00 f00b 	lsl.w	r0, r0, fp
   860f4:	f8dd c014 	ldr.w	ip, [sp, #20]
   860f8:	9b00      	ldr	r3, [sp, #0]
   860fa:	ea49 0900 	orr.w	r9, r9, r0
   860fe:	f10b 0b04 	add.w	fp, fp, #4
   86102:	4665      	mov	r5, ip
   86104:	e7c9      	b.n	8609a <__gethex+0x180>
   86106:	f843 9b04 	str.w	r9, [r3], #4
   8610a:	ebca 0303 	rsb	r3, sl, r3
   8610e:	109b      	asrs	r3, r3, #2
   86110:	6123      	str	r3, [r4, #16]
   86112:	4648      	mov	r0, r9
   86114:	015f      	lsls	r7, r3, #5
   86116:	f000 fdda 	bl	86cce <__hi0bits>
   8611a:	f8d8 5000 	ldr.w	r5, [r8]
   8611e:	1a38      	subs	r0, r7, r0
   86120:	42a8      	cmp	r0, r5
   86122:	dd26      	ble.n	86172 <__gethex+0x258>
   86124:	1b47      	subs	r7, r0, r5
   86126:	4639      	mov	r1, r7
   86128:	4620      	mov	r0, r4
   8612a:	f001 f8ea 	bl	87302 <__any_on>
   8612e:	b1c8      	cbz	r0, 86164 <__gethex+0x24a>
   86130:	1e7b      	subs	r3, r7, #1
   86132:	f003 011f 	and.w	r1, r3, #31
   86136:	f04f 0901 	mov.w	r9, #1
   8613a:	fa09 f101 	lsl.w	r1, r9, r1
   8613e:	115a      	asrs	r2, r3, #5
   86140:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
   86144:	4211      	tst	r1, r2
   86146:	d00e      	beq.n	86166 <__gethex+0x24c>
   86148:	454b      	cmp	r3, r9
   8614a:	dc02      	bgt.n	86152 <__gethex+0x238>
   8614c:	f04f 0902 	mov.w	r9, #2
   86150:	e009      	b.n	86166 <__gethex+0x24c>
   86152:	4620      	mov	r0, r4
   86154:	1eb9      	subs	r1, r7, #2
   86156:	f001 f8d4 	bl	87302 <__any_on>
   8615a:	2800      	cmp	r0, #0
   8615c:	d0f6      	beq.n	8614c <__gethex+0x232>
   8615e:	f04f 0903 	mov.w	r9, #3
   86162:	e000      	b.n	86166 <__gethex+0x24c>
   86164:	4681      	mov	r9, r0
   86166:	4620      	mov	r0, r4
   86168:	4639      	mov	r1, r7
   8616a:	f7ff fe89 	bl	85e80 <rshift>
   8616e:	443e      	add	r6, r7
   86170:	e00c      	b.n	8618c <__gethex+0x272>
   86172:	da09      	bge.n	86188 <__gethex+0x26e>
   86174:	1a2f      	subs	r7, r5, r0
   86176:	4621      	mov	r1, r4
   86178:	9803      	ldr	r0, [sp, #12]
   8617a:	463a      	mov	r2, r7
   8617c:	f000 fed4 	bl	86f28 <__lshift>
   86180:	1bf6      	subs	r6, r6, r7
   86182:	4604      	mov	r4, r0
   86184:	f100 0a14 	add.w	sl, r0, #20
   86188:	f04f 0900 	mov.w	r9, #0
   8618c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   86190:	429e      	cmp	r6, r3
   86192:	dd08      	ble.n	861a6 <__gethex+0x28c>
   86194:	9803      	ldr	r0, [sp, #12]
   86196:	4621      	mov	r1, r4
   86198:	f000 fd14 	bl	86bc4 <_Bfree>
   8619c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8619e:	2300      	movs	r3, #0
   861a0:	6013      	str	r3, [r2, #0]
   861a2:	20a3      	movs	r0, #163	; 0xa3
   861a4:	e0e5      	b.n	86372 <__gethex+0x458>
   861a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   861aa:	429e      	cmp	r6, r3
   861ac:	da54      	bge.n	86258 <__gethex+0x33e>
   861ae:	1b9e      	subs	r6, r3, r6
   861b0:	42ae      	cmp	r6, r5
   861b2:	db2e      	blt.n	86212 <__gethex+0x2f8>
   861b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   861b8:	2b02      	cmp	r3, #2
   861ba:	d01a      	beq.n	861f2 <__gethex+0x2d8>
   861bc:	2b03      	cmp	r3, #3
   861be:	d01c      	beq.n	861fa <__gethex+0x2e0>
   861c0:	2b01      	cmp	r3, #1
   861c2:	d11d      	bne.n	86200 <__gethex+0x2e6>
   861c4:	42ae      	cmp	r6, r5
   861c6:	d11b      	bne.n	86200 <__gethex+0x2e6>
   861c8:	2d01      	cmp	r5, #1
   861ca:	dc0b      	bgt.n	861e4 <__gethex+0x2ca>
   861cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   861d0:	9906      	ldr	r1, [sp, #24]
   861d2:	2062      	movs	r0, #98	; 0x62
   861d4:	600b      	str	r3, [r1, #0]
   861d6:	2301      	movs	r3, #1
   861d8:	6123      	str	r3, [r4, #16]
   861da:	f8ca 3000 	str.w	r3, [sl]
   861de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   861e0:	601c      	str	r4, [r3, #0]
   861e2:	e0c6      	b.n	86372 <__gethex+0x458>
   861e4:	4620      	mov	r0, r4
   861e6:	1e69      	subs	r1, r5, #1
   861e8:	f001 f88b 	bl	87302 <__any_on>
   861ec:	2800      	cmp	r0, #0
   861ee:	d1ed      	bne.n	861cc <__gethex+0x2b2>
   861f0:	e006      	b.n	86200 <__gethex+0x2e6>
   861f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   861f4:	2b00      	cmp	r3, #0
   861f6:	d0e9      	beq.n	861cc <__gethex+0x2b2>
   861f8:	e002      	b.n	86200 <__gethex+0x2e6>
   861fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   861fc:	2b00      	cmp	r3, #0
   861fe:	d1e5      	bne.n	861cc <__gethex+0x2b2>
   86200:	9803      	ldr	r0, [sp, #12]
   86202:	4621      	mov	r1, r4
   86204:	f000 fcde 	bl	86bc4 <_Bfree>
   86208:	9912      	ldr	r1, [sp, #72]	; 0x48
   8620a:	2300      	movs	r3, #0
   8620c:	600b      	str	r3, [r1, #0]
   8620e:	2050      	movs	r0, #80	; 0x50
   86210:	e0af      	b.n	86372 <__gethex+0x458>
   86212:	1e77      	subs	r7, r6, #1
   86214:	f1b9 0f00 	cmp.w	r9, #0
   86218:	d107      	bne.n	8622a <__gethex+0x310>
   8621a:	2f00      	cmp	r7, #0
   8621c:	dd07      	ble.n	8622e <__gethex+0x314>
   8621e:	4620      	mov	r0, r4
   86220:	4639      	mov	r1, r7
   86222:	f001 f86e 	bl	87302 <__any_on>
   86226:	4681      	mov	r9, r0
   86228:	e001      	b.n	8622e <__gethex+0x314>
   8622a:	f04f 0901 	mov.w	r9, #1
   8622e:	117b      	asrs	r3, r7, #5
   86230:	2201      	movs	r2, #1
   86232:	f007 071f 	and.w	r7, r7, #31
   86236:	fa02 f707 	lsl.w	r7, r2, r7
   8623a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
   8623e:	4631      	mov	r1, r6
   86240:	421f      	tst	r7, r3
   86242:	4620      	mov	r0, r4
   86244:	bf18      	it	ne
   86246:	f049 0902 	orrne.w	r9, r9, #2
   8624a:	1bad      	subs	r5, r5, r6
   8624c:	f7ff fe18 	bl	85e80 <rshift>
   86250:	2702      	movs	r7, #2
   86252:	f8d8 6004 	ldr.w	r6, [r8, #4]
   86256:	e000      	b.n	8625a <__gethex+0x340>
   86258:	2701      	movs	r7, #1
   8625a:	f1b9 0f00 	cmp.w	r9, #0
   8625e:	f000 8083 	beq.w	86368 <__gethex+0x44e>
   86262:	f8d8 300c 	ldr.w	r3, [r8, #12]
   86266:	2b02      	cmp	r3, #2
   86268:	d00e      	beq.n	86288 <__gethex+0x36e>
   8626a:	2b03      	cmp	r3, #3
   8626c:	d010      	beq.n	86290 <__gethex+0x376>
   8626e:	2b01      	cmp	r3, #1
   86270:	d178      	bne.n	86364 <__gethex+0x44a>
   86272:	f019 0f02 	tst.w	r9, #2
   86276:	d075      	beq.n	86364 <__gethex+0x44a>
   86278:	f8da 3000 	ldr.w	r3, [sl]
   8627c:	ea49 0903 	orr.w	r9, r9, r3
   86280:	f019 0f01 	tst.w	r9, #1
   86284:	d107      	bne.n	86296 <__gethex+0x37c>
   86286:	e06d      	b.n	86364 <__gethex+0x44a>
   86288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8628a:	f1c3 0301 	rsb	r3, r3, #1
   8628e:	9313      	str	r3, [sp, #76]	; 0x4c
   86290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86292:	2b00      	cmp	r3, #0
   86294:	d066      	beq.n	86364 <__gethex+0x44a>
   86296:	f8d4 9010 	ldr.w	r9, [r4, #16]
   8629a:	f104 0314 	add.w	r3, r4, #20
   8629e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   862a2:	eb03 010a 	add.w	r1, r3, sl
   862a6:	4618      	mov	r0, r3
   862a8:	f853 2b04 	ldr.w	r2, [r3], #4
   862ac:	f1b2 3fff 	cmp.w	r2, #4294967295
   862b0:	d002      	beq.n	862b8 <__gethex+0x39e>
   862b2:	3201      	adds	r2, #1
   862b4:	6002      	str	r2, [r0, #0]
   862b6:	e021      	b.n	862fc <__gethex+0x3e2>
   862b8:	2200      	movs	r2, #0
   862ba:	428b      	cmp	r3, r1
   862bc:	f843 2c04 	str.w	r2, [r3, #-4]
   862c0:	d3f1      	bcc.n	862a6 <__gethex+0x38c>
   862c2:	68a3      	ldr	r3, [r4, #8]
   862c4:	4599      	cmp	r9, r3
   862c6:	db12      	blt.n	862ee <__gethex+0x3d4>
   862c8:	6861      	ldr	r1, [r4, #4]
   862ca:	9803      	ldr	r0, [sp, #12]
   862cc:	3101      	adds	r1, #1
   862ce:	f000 fc53 	bl	86b78 <_Balloc>
   862d2:	6922      	ldr	r2, [r4, #16]
   862d4:	f104 010c 	add.w	r1, r4, #12
   862d8:	3202      	adds	r2, #2
   862da:	4683      	mov	fp, r0
   862dc:	0092      	lsls	r2, r2, #2
   862de:	300c      	adds	r0, #12
   862e0:	f7fd f874 	bl	833cc <memcpy>
   862e4:	4621      	mov	r1, r4
   862e6:	9803      	ldr	r0, [sp, #12]
   862e8:	f000 fc6c 	bl	86bc4 <_Bfree>
   862ec:	465c      	mov	r4, fp
   862ee:	6923      	ldr	r3, [r4, #16]
   862f0:	1c5a      	adds	r2, r3, #1
   862f2:	6122      	str	r2, [r4, #16]
   862f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   862f8:	2201      	movs	r2, #1
   862fa:	615a      	str	r2, [r3, #20]
   862fc:	2f02      	cmp	r7, #2
   862fe:	f104 0314 	add.w	r3, r4, #20
   86302:	d111      	bne.n	86328 <__gethex+0x40e>
   86304:	f8d8 2000 	ldr.w	r2, [r8]
   86308:	3a01      	subs	r2, #1
   8630a:	4295      	cmp	r5, r2
   8630c:	d127      	bne.n	8635e <__gethex+0x444>
   8630e:	116a      	asrs	r2, r5, #5
   86310:	2101      	movs	r1, #1
   86312:	f005 051f 	and.w	r5, r5, #31
   86316:	fa01 f505 	lsl.w	r5, r1, r5
   8631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8631e:	421d      	tst	r5, r3
   86320:	bf0c      	ite	eq
   86322:	2702      	moveq	r7, #2
   86324:	460f      	movne	r7, r1
   86326:	e01a      	b.n	8635e <__gethex+0x444>
   86328:	6922      	ldr	r2, [r4, #16]
   8632a:	454a      	cmp	r2, r9
   8632c:	dd0a      	ble.n	86344 <__gethex+0x42a>
   8632e:	4620      	mov	r0, r4
   86330:	2101      	movs	r1, #1
   86332:	f7ff fda5 	bl	85e80 <rshift>
   86336:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8633a:	3601      	adds	r6, #1
   8633c:	429e      	cmp	r6, r3
   8633e:	f73f af29 	bgt.w	86194 <__gethex+0x27a>
   86342:	e00b      	b.n	8635c <__gethex+0x442>
   86344:	f015 051f 	ands.w	r5, r5, #31
   86348:	d008      	beq.n	8635c <__gethex+0x442>
   8634a:	4453      	add	r3, sl
   8634c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   86350:	f000 fcbd 	bl	86cce <__hi0bits>
   86354:	f1c5 0520 	rsb	r5, r5, #32
   86358:	42a8      	cmp	r0, r5
   8635a:	dbe8      	blt.n	8632e <__gethex+0x414>
   8635c:	2701      	movs	r7, #1
   8635e:	f047 0720 	orr.w	r7, r7, #32
   86362:	e001      	b.n	86368 <__gethex+0x44e>
   86364:	f047 0710 	orr.w	r7, r7, #16
   86368:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8636a:	4638      	mov	r0, r7
   8636c:	601c      	str	r4, [r3, #0]
   8636e:	9b06      	ldr	r3, [sp, #24]
   86370:	601e      	str	r6, [r3, #0]
   86372:	b009      	add	sp, #36	; 0x24
   86374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086378 <L_shift>:
   86378:	f1c2 0208 	rsb	r2, r2, #8
   8637c:	0092      	lsls	r2, r2, #2
   8637e:	b570      	push	{r4, r5, r6, lr}
   86380:	f1c2 0420 	rsb	r4, r2, #32
   86384:	6805      	ldr	r5, [r0, #0]
   86386:	f850 3f04 	ldr.w	r3, [r0, #4]!
   8638a:	fa03 f604 	lsl.w	r6, r3, r4
   8638e:	40d3      	lsrs	r3, r2
   86390:	4335      	orrs	r5, r6
   86392:	4288      	cmp	r0, r1
   86394:	f840 5c04 	str.w	r5, [r0, #-4]
   86398:	6003      	str	r3, [r0, #0]
   8639a:	d3f3      	bcc.n	86384 <L_shift+0xc>
   8639c:	bd70      	pop	{r4, r5, r6, pc}

0008639e <__hexnan>:
   8639e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863a2:	680b      	ldr	r3, [r1, #0]
   863a4:	b085      	sub	sp, #20
   863a6:	115e      	asrs	r6, r3, #5
   863a8:	9003      	str	r0, [sp, #12]
   863aa:	f013 031f 	ands.w	r3, r3, #31
   863ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   863b2:	9302      	str	r3, [sp, #8]
   863b4:	9b03      	ldr	r3, [sp, #12]
   863b6:	bf18      	it	ne
   863b8:	3604      	addne	r6, #4
   863ba:	f1a6 0804 	sub.w	r8, r6, #4
   863be:	4615      	mov	r5, r2
   863c0:	f8d3 9000 	ldr.w	r9, [r3]
   863c4:	2200      	movs	r2, #0
   863c6:	f846 2c04 	str.w	r2, [r6, #-4]
   863ca:	4647      	mov	r7, r8
   863cc:	4644      	mov	r4, r8
   863ce:	4692      	mov	sl, r2
   863d0:	4693      	mov	fp, r2
   863d2:	f899 1001 	ldrb.w	r1, [r9, #1]
   863d6:	2900      	cmp	r1, #0
   863d8:	d03a      	beq.n	86450 <__hexnan+0xb2>
   863da:	4608      	mov	r0, r1
   863dc:	e88d 0006 	stmia.w	sp, {r1, r2}
   863e0:	f7ff fd83 	bl	85eea <__hexdig_fun>
   863e4:	e89d 0006 	ldmia.w	sp, {r1, r2}
   863e8:	b9d8      	cbnz	r0, 86422 <__hexnan+0x84>
   863ea:	2920      	cmp	r1, #32
   863ec:	d812      	bhi.n	86414 <__hexnan+0x76>
   863ee:	45da      	cmp	sl, fp
   863f0:	da2b      	bge.n	8644a <__hexnan+0xac>
   863f2:	42bc      	cmp	r4, r7
   863f4:	d205      	bcs.n	86402 <__hexnan+0x64>
   863f6:	2a07      	cmp	r2, #7
   863f8:	dc03      	bgt.n	86402 <__hexnan+0x64>
   863fa:	4620      	mov	r0, r4
   863fc:	4639      	mov	r1, r7
   863fe:	f7ff ffbb 	bl	86378 <L_shift>
   86402:	42ac      	cmp	r4, r5
   86404:	d920      	bls.n	86448 <__hexnan+0xaa>
   86406:	1f27      	subs	r7, r4, #4
   86408:	2200      	movs	r2, #0
   8640a:	f844 2c04 	str.w	r2, [r4, #-4]
   8640e:	46da      	mov	sl, fp
   86410:	463c      	mov	r4, r7
   86412:	e01a      	b.n	8644a <__hexnan+0xac>
   86414:	2929      	cmp	r1, #41	; 0x29
   86416:	d14c      	bne.n	864b2 <__hexnan+0x114>
   86418:	9b03      	ldr	r3, [sp, #12]
   8641a:	f109 0102 	add.w	r1, r9, #2
   8641e:	6019      	str	r1, [r3, #0]
   86420:	e016      	b.n	86450 <__hexnan+0xb2>
   86422:	3201      	adds	r2, #1
   86424:	2a08      	cmp	r2, #8
   86426:	f10b 0b01 	add.w	fp, fp, #1
   8642a:	dd06      	ble.n	8643a <__hexnan+0x9c>
   8642c:	42ac      	cmp	r4, r5
   8642e:	d90c      	bls.n	8644a <__hexnan+0xac>
   86430:	2200      	movs	r2, #0
   86432:	f844 2c04 	str.w	r2, [r4, #-4]
   86436:	3c04      	subs	r4, #4
   86438:	2201      	movs	r2, #1
   8643a:	6821      	ldr	r1, [r4, #0]
   8643c:	f000 000f 	and.w	r0, r0, #15
   86440:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
   86444:	6021      	str	r1, [r4, #0]
   86446:	e000      	b.n	8644a <__hexnan+0xac>
   86448:	2208      	movs	r2, #8
   8644a:	f109 0901 	add.w	r9, r9, #1
   8644e:	e7c0      	b.n	863d2 <__hexnan+0x34>
   86450:	f1bb 0f00 	cmp.w	fp, #0
   86454:	d02d      	beq.n	864b2 <__hexnan+0x114>
   86456:	42bc      	cmp	r4, r7
   86458:	d205      	bcs.n	86466 <__hexnan+0xc8>
   8645a:	2a07      	cmp	r2, #7
   8645c:	dc03      	bgt.n	86466 <__hexnan+0xc8>
   8645e:	4620      	mov	r0, r4
   86460:	4639      	mov	r1, r7
   86462:	f7ff ff89 	bl	86378 <L_shift>
   86466:	42ac      	cmp	r4, r5
   86468:	d90c      	bls.n	86484 <__hexnan+0xe6>
   8646a:	462b      	mov	r3, r5
   8646c:	f854 2b04 	ldr.w	r2, [r4], #4
   86470:	4544      	cmp	r4, r8
   86472:	f843 2b04 	str.w	r2, [r3], #4
   86476:	d9f9      	bls.n	8646c <__hexnan+0xce>
   86478:	2200      	movs	r2, #0
   8647a:	f843 2b04 	str.w	r2, [r3], #4
   8647e:	4543      	cmp	r3, r8
   86480:	d9fa      	bls.n	86478 <__hexnan+0xda>
   86482:	e00d      	b.n	864a0 <__hexnan+0x102>
   86484:	9b02      	ldr	r3, [sp, #8]
   86486:	b15b      	cbz	r3, 864a0 <__hexnan+0x102>
   86488:	f1c3 0920 	rsb	r9, r3, #32
   8648c:	f04f 33ff 	mov.w	r3, #4294967295
   86490:	fa23 f909 	lsr.w	r9, r3, r9
   86494:	f856 3c04 	ldr.w	r3, [r6, #-4]
   86498:	ea03 0309 	and.w	r3, r3, r9
   8649c:	f846 3c04 	str.w	r3, [r6, #-4]
   864a0:	f856 3c04 	ldr.w	r3, [r6, #-4]
   864a4:	3e04      	subs	r6, #4
   864a6:	b933      	cbnz	r3, 864b6 <__hexnan+0x118>
   864a8:	42b5      	cmp	r5, r6
   864aa:	d1f9      	bne.n	864a0 <__hexnan+0x102>
   864ac:	2301      	movs	r3, #1
   864ae:	602b      	str	r3, [r5, #0]
   864b0:	e001      	b.n	864b6 <__hexnan+0x118>
   864b2:	2004      	movs	r0, #4
   864b4:	e000      	b.n	864b8 <__hexnan+0x11a>
   864b6:	2005      	movs	r0, #5
   864b8:	b005      	add	sp, #20
   864ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000864c0 <iswspace>:
   864c0:	28ff      	cmp	r0, #255	; 0xff
   864c2:	d807      	bhi.n	864d4 <iswspace+0x14>
   864c4:	4b04      	ldr	r3, [pc, #16]	; (864d8 <iswspace+0x18>)
   864c6:	681b      	ldr	r3, [r3, #0]
   864c8:	4418      	add	r0, r3
   864ca:	7840      	ldrb	r0, [r0, #1]
   864cc:	f000 0008 	and.w	r0, r0, #8
   864d0:	b2c0      	uxtb	r0, r0
   864d2:	4770      	bx	lr
   864d4:	2000      	movs	r0, #0
   864d6:	4770      	bx	lr
   864d8:	20070440 	.word	0x20070440

000864dc <_setlocale_r>:
   864dc:	b510      	push	{r4, lr}
   864de:	4614      	mov	r4, r2
   864e0:	b90a      	cbnz	r2, 864e6 <_setlocale_r+0xa>
   864e2:	480b      	ldr	r0, [pc, #44]	; (86510 <_setlocale_r+0x34>)
   864e4:	bd10      	pop	{r4, pc}
   864e6:	4610      	mov	r0, r2
   864e8:	490a      	ldr	r1, [pc, #40]	; (86514 <_setlocale_r+0x38>)
   864ea:	f001 fa0c 	bl	87906 <strcmp>
   864ee:	2800      	cmp	r0, #0
   864f0:	d0f7      	beq.n	864e2 <_setlocale_r+0x6>
   864f2:	4620      	mov	r0, r4
   864f4:	4906      	ldr	r1, [pc, #24]	; (86510 <_setlocale_r+0x34>)
   864f6:	f001 fa06 	bl	87906 <strcmp>
   864fa:	2800      	cmp	r0, #0
   864fc:	d0f1      	beq.n	864e2 <_setlocale_r+0x6>
   864fe:	4620      	mov	r0, r4
   86500:	4905      	ldr	r1, [pc, #20]	; (86518 <_setlocale_r+0x3c>)
   86502:	f001 fa00 	bl	87906 <strcmp>
   86506:	2800      	cmp	r0, #0
   86508:	4801      	ldr	r0, [pc, #4]	; (86510 <_setlocale_r+0x34>)
   8650a:	bf18      	it	ne
   8650c:	2000      	movne	r0, #0
   8650e:	bd10      	pop	{r4, pc}
   86510:	00088ae8 	.word	0x00088ae8
   86514:	00088cb1 	.word	0x00088cb1
   86518:	00088cb8 	.word	0x00088cb8

0008651c <__locale_charset>:
   8651c:	4800      	ldr	r0, [pc, #0]	; (86520 <__locale_charset+0x4>)
   8651e:	4770      	bx	lr
   86520:	20070444 	.word	0x20070444

00086524 <__locale_mb_cur_max>:
   86524:	4b01      	ldr	r3, [pc, #4]	; (8652c <__locale_mb_cur_max+0x8>)
   86526:	6a18      	ldr	r0, [r3, #32]
   86528:	4770      	bx	lr
   8652a:	bf00      	nop
   8652c:	20070444 	.word	0x20070444

00086530 <__locale_msgcharset>:
   86530:	4800      	ldr	r0, [pc, #0]	; (86534 <__locale_msgcharset+0x4>)
   86532:	4770      	bx	lr
   86534:	20070468 	.word	0x20070468

00086538 <__locale_cjk_lang>:
   86538:	2000      	movs	r0, #0
   8653a:	4770      	bx	lr

0008653c <_localeconv_r>:
   8653c:	4800      	ldr	r0, [pc, #0]	; (86540 <_localeconv_r+0x4>)
   8653e:	4770      	bx	lr
   86540:	20070488 	.word	0x20070488

00086544 <setlocale>:
   86544:	460a      	mov	r2, r1
   86546:	4903      	ldr	r1, [pc, #12]	; (86554 <setlocale+0x10>)
   86548:	4603      	mov	r3, r0
   8654a:	6808      	ldr	r0, [r1, #0]
   8654c:	4619      	mov	r1, r3
   8654e:	f7ff bfc5 	b.w	864dc <_setlocale_r>
   86552:	bf00      	nop
   86554:	20070010 	.word	0x20070010

00086558 <localeconv>:
   86558:	4800      	ldr	r0, [pc, #0]	; (8655c <localeconv+0x4>)
   8655a:	4770      	bx	lr
   8655c:	20070488 	.word	0x20070488

00086560 <__smakebuf_r>:
   86560:	b5f0      	push	{r4, r5, r6, r7, lr}
   86562:	898b      	ldrh	r3, [r1, #12]
   86564:	b091      	sub	sp, #68	; 0x44
   86566:	079d      	lsls	r5, r3, #30
   86568:	4606      	mov	r6, r0
   8656a:	460c      	mov	r4, r1
   8656c:	d43a      	bmi.n	865e4 <__smakebuf_r+0x84>
   8656e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86572:	2900      	cmp	r1, #0
   86574:	da0b      	bge.n	8658e <__smakebuf_r+0x2e>
   86576:	89a3      	ldrh	r3, [r4, #12]
   86578:	2700      	movs	r7, #0
   8657a:	f013 0f80 	tst.w	r3, #128	; 0x80
   8657e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   86582:	bf0c      	ite	eq
   86584:	f44f 6580 	moveq.w	r5, #1024	; 0x400
   86588:	2540      	movne	r5, #64	; 0x40
   8658a:	81a3      	strh	r3, [r4, #12]
   8658c:	e01f      	b.n	865ce <__smakebuf_r+0x6e>
   8658e:	aa01      	add	r2, sp, #4
   86590:	f001 fe28 	bl	881e4 <_fstat_r>
   86594:	2800      	cmp	r0, #0
   86596:	dbee      	blt.n	86576 <__smakebuf_r+0x16>
   86598:	9b02      	ldr	r3, [sp, #8]
   8659a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8659e:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   865a2:	424f      	negs	r7, r1
   865a4:	414f      	adcs	r7, r1
   865a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   865aa:	89a3      	ldrh	r3, [r4, #12]
   865ac:	d10a      	bne.n	865c4 <__smakebuf_r+0x64>
   865ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   865b0:	491b      	ldr	r1, [pc, #108]	; (86620 <__smakebuf_r+0xc0>)
   865b2:	428a      	cmp	r2, r1
   865b4:	d106      	bne.n	865c4 <__smakebuf_r+0x64>
   865b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   865ba:	f44f 6580 	mov.w	r5, #1024	; 0x400
   865be:	81a3      	strh	r3, [r4, #12]
   865c0:	64e5      	str	r5, [r4, #76]	; 0x4c
   865c2:	e004      	b.n	865ce <__smakebuf_r+0x6e>
   865c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   865c8:	81a3      	strh	r3, [r4, #12]
   865ca:	f44f 6580 	mov.w	r5, #1024	; 0x400
   865ce:	4630      	mov	r0, r6
   865d0:	4629      	mov	r1, r5
   865d2:	f000 f839 	bl	86648 <_malloc_r>
   865d6:	b960      	cbnz	r0, 865f2 <__smakebuf_r+0x92>
   865d8:	89a3      	ldrh	r3, [r4, #12]
   865da:	059a      	lsls	r2, r3, #22
   865dc:	d41d      	bmi.n	8661a <__smakebuf_r+0xba>
   865de:	f043 0302 	orr.w	r3, r3, #2
   865e2:	81a3      	strh	r3, [r4, #12]
   865e4:	f104 0343 	add.w	r3, r4, #67	; 0x43
   865e8:	6023      	str	r3, [r4, #0]
   865ea:	6123      	str	r3, [r4, #16]
   865ec:	2301      	movs	r3, #1
   865ee:	6163      	str	r3, [r4, #20]
   865f0:	e013      	b.n	8661a <__smakebuf_r+0xba>
   865f2:	4b0c      	ldr	r3, [pc, #48]	; (86624 <__smakebuf_r+0xc4>)
   865f4:	63f3      	str	r3, [r6, #60]	; 0x3c
   865f6:	89a3      	ldrh	r3, [r4, #12]
   865f8:	6020      	str	r0, [r4, #0]
   865fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   865fe:	81a3      	strh	r3, [r4, #12]
   86600:	6120      	str	r0, [r4, #16]
   86602:	6165      	str	r5, [r4, #20]
   86604:	b14f      	cbz	r7, 8661a <__smakebuf_r+0xba>
   86606:	4630      	mov	r0, r6
   86608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8660c:	f001 fdfc 	bl	88208 <_isatty_r>
   86610:	b118      	cbz	r0, 8661a <__smakebuf_r+0xba>
   86612:	89a3      	ldrh	r3, [r4, #12]
   86614:	f043 0301 	orr.w	r3, r3, #1
   86618:	81a3      	strh	r3, [r4, #12]
   8661a:	b011      	add	sp, #68	; 0x44
   8661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8661e:	bf00      	nop
   86620:	000878db 	.word	0x000878db
   86624:	00085609 	.word	0x00085609

00086628 <malloc>:
   86628:	4b02      	ldr	r3, [pc, #8]	; (86634 <malloc+0xc>)
   8662a:	4601      	mov	r1, r0
   8662c:	6818      	ldr	r0, [r3, #0]
   8662e:	f000 b80b 	b.w	86648 <_malloc_r>
   86632:	bf00      	nop
   86634:	20070010 	.word	0x20070010

00086638 <free>:
   86638:	4b02      	ldr	r3, [pc, #8]	; (86644 <free+0xc>)
   8663a:	4601      	mov	r1, r0
   8663c:	6818      	ldr	r0, [r3, #0]
   8663e:	f7ff b9e1 	b.w	85a04 <_free_r>
   86642:	bf00      	nop
   86644:	20070010 	.word	0x20070010

00086648 <_malloc_r>:
   86648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8664c:	f101 040b 	add.w	r4, r1, #11
   86650:	2c16      	cmp	r4, #22
   86652:	4607      	mov	r7, r0
   86654:	d903      	bls.n	8665e <_malloc_r+0x16>
   86656:	f034 0407 	bics.w	r4, r4, #7
   8665a:	d501      	bpl.n	86660 <_malloc_r+0x18>
   8665c:	e002      	b.n	86664 <_malloc_r+0x1c>
   8665e:	2410      	movs	r4, #16
   86660:	428c      	cmp	r4, r1
   86662:	d202      	bcs.n	8666a <_malloc_r+0x22>
   86664:	230c      	movs	r3, #12
   86666:	603b      	str	r3, [r7, #0]
   86668:	e1de      	b.n	86a28 <_malloc_r+0x3e0>
   8666a:	4638      	mov	r0, r7
   8666c:	f000 fa81 	bl	86b72 <__malloc_lock>
   86670:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   86674:	4da3      	ldr	r5, [pc, #652]	; (86904 <_malloc_r+0x2bc>)
   86676:	d214      	bcs.n	866a2 <_malloc_r+0x5a>
   86678:	08e2      	lsrs	r2, r4, #3
   8667a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   8667e:	68de      	ldr	r6, [r3, #12]
   86680:	429e      	cmp	r6, r3
   86682:	d106      	bne.n	86692 <_malloc_r+0x4a>
   86684:	f106 0308 	add.w	r3, r6, #8
   86688:	6976      	ldr	r6, [r6, #20]
   8668a:	429e      	cmp	r6, r3
   8668c:	bf08      	it	eq
   8668e:	3202      	addeq	r2, #2
   86690:	d043      	beq.n	8671a <_malloc_r+0xd2>
   86692:	6873      	ldr	r3, [r6, #4]
   86694:	68f2      	ldr	r2, [r6, #12]
   86696:	68b1      	ldr	r1, [r6, #8]
   86698:	f023 0303 	bic.w	r3, r3, #3
   8669c:	60ca      	str	r2, [r1, #12]
   8669e:	6091      	str	r1, [r2, #8]
   866a0:	e05d      	b.n	8675e <_malloc_r+0x116>
   866a2:	0a62      	lsrs	r2, r4, #9
   866a4:	d01a      	beq.n	866dc <_malloc_r+0x94>
   866a6:	2a04      	cmp	r2, #4
   866a8:	d802      	bhi.n	866b0 <_malloc_r+0x68>
   866aa:	09a2      	lsrs	r2, r4, #6
   866ac:	3238      	adds	r2, #56	; 0x38
   866ae:	e018      	b.n	866e2 <_malloc_r+0x9a>
   866b0:	2a14      	cmp	r2, #20
   866b2:	d801      	bhi.n	866b8 <_malloc_r+0x70>
   866b4:	325b      	adds	r2, #91	; 0x5b
   866b6:	e014      	b.n	866e2 <_malloc_r+0x9a>
   866b8:	2a54      	cmp	r2, #84	; 0x54
   866ba:	d802      	bhi.n	866c2 <_malloc_r+0x7a>
   866bc:	0b22      	lsrs	r2, r4, #12
   866be:	326e      	adds	r2, #110	; 0x6e
   866c0:	e00f      	b.n	866e2 <_malloc_r+0x9a>
   866c2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   866c6:	d802      	bhi.n	866ce <_malloc_r+0x86>
   866c8:	0be2      	lsrs	r2, r4, #15
   866ca:	3277      	adds	r2, #119	; 0x77
   866cc:	e009      	b.n	866e2 <_malloc_r+0x9a>
   866ce:	f240 5354 	movw	r3, #1364	; 0x554
   866d2:	429a      	cmp	r2, r3
   866d4:	d804      	bhi.n	866e0 <_malloc_r+0x98>
   866d6:	0ca2      	lsrs	r2, r4, #18
   866d8:	327c      	adds	r2, #124	; 0x7c
   866da:	e002      	b.n	866e2 <_malloc_r+0x9a>
   866dc:	223f      	movs	r2, #63	; 0x3f
   866de:	e000      	b.n	866e2 <_malloc_r+0x9a>
   866e0:	227e      	movs	r2, #126	; 0x7e
   866e2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   866e6:	68de      	ldr	r6, [r3, #12]
   866e8:	429e      	cmp	r6, r3
   866ea:	d015      	beq.n	86718 <_malloc_r+0xd0>
   866ec:	6871      	ldr	r1, [r6, #4]
   866ee:	f021 0103 	bic.w	r1, r1, #3
   866f2:	1b08      	subs	r0, r1, r4
   866f4:	280f      	cmp	r0, #15
   866f6:	dd01      	ble.n	866fc <_malloc_r+0xb4>
   866f8:	3a01      	subs	r2, #1
   866fa:	e00d      	b.n	86718 <_malloc_r+0xd0>
   866fc:	2800      	cmp	r0, #0
   866fe:	db09      	blt.n	86714 <_malloc_r+0xcc>
   86700:	68f3      	ldr	r3, [r6, #12]
   86702:	68b2      	ldr	r2, [r6, #8]
   86704:	60d3      	str	r3, [r2, #12]
   86706:	609a      	str	r2, [r3, #8]
   86708:	1873      	adds	r3, r6, r1
   8670a:	685a      	ldr	r2, [r3, #4]
   8670c:	f042 0201 	orr.w	r2, r2, #1
   86710:	605a      	str	r2, [r3, #4]
   86712:	e194      	b.n	86a3e <_malloc_r+0x3f6>
   86714:	68f6      	ldr	r6, [r6, #12]
   86716:	e7e7      	b.n	866e8 <_malloc_r+0xa0>
   86718:	3201      	adds	r2, #1
   8671a:	497a      	ldr	r1, [pc, #488]	; (86904 <_malloc_r+0x2bc>)
   8671c:	692e      	ldr	r6, [r5, #16]
   8671e:	f101 0008 	add.w	r0, r1, #8
   86722:	4286      	cmp	r6, r0
   86724:	4686      	mov	lr, r0
   86726:	d06d      	beq.n	86804 <_malloc_r+0x1bc>
   86728:	6873      	ldr	r3, [r6, #4]
   8672a:	f023 0303 	bic.w	r3, r3, #3
   8672e:	ebc4 0c03 	rsb	ip, r4, r3
   86732:	f1bc 0f0f 	cmp.w	ip, #15
   86736:	dd0d      	ble.n	86754 <_malloc_r+0x10c>
   86738:	1933      	adds	r3, r6, r4
   8673a:	f04c 0201 	orr.w	r2, ip, #1
   8673e:	f044 0401 	orr.w	r4, r4, #1
   86742:	6074      	str	r4, [r6, #4]
   86744:	614b      	str	r3, [r1, #20]
   86746:	610b      	str	r3, [r1, #16]
   86748:	60d8      	str	r0, [r3, #12]
   8674a:	6098      	str	r0, [r3, #8]
   8674c:	605a      	str	r2, [r3, #4]
   8674e:	f843 c00c 	str.w	ip, [r3, ip]
   86752:	e174      	b.n	86a3e <_malloc_r+0x3f6>
   86754:	f1bc 0f00 	cmp.w	ip, #0
   86758:	6148      	str	r0, [r1, #20]
   8675a:	6108      	str	r0, [r1, #16]
   8675c:	db01      	blt.n	86762 <_malloc_r+0x11a>
   8675e:	4433      	add	r3, r6
   86760:	e7d3      	b.n	8670a <_malloc_r+0xc2>
   86762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86766:	d211      	bcs.n	8678c <_malloc_r+0x144>
   86768:	08db      	lsrs	r3, r3, #3
   8676a:	1098      	asrs	r0, r3, #2
   8676c:	f04f 0c01 	mov.w	ip, #1
   86770:	fa0c fc00 	lsl.w	ip, ip, r0
   86774:	6848      	ldr	r0, [r1, #4]
   86776:	ea4c 0000 	orr.w	r0, ip, r0
   8677a:	6048      	str	r0, [r1, #4]
   8677c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   86780:	688b      	ldr	r3, [r1, #8]
   86782:	60f1      	str	r1, [r6, #12]
   86784:	60b3      	str	r3, [r6, #8]
   86786:	608e      	str	r6, [r1, #8]
   86788:	60de      	str	r6, [r3, #12]
   8678a:	e03b      	b.n	86804 <_malloc_r+0x1bc>
   8678c:	0a58      	lsrs	r0, r3, #9
   8678e:	2804      	cmp	r0, #4
   86790:	d802      	bhi.n	86798 <_malloc_r+0x150>
   86792:	0998      	lsrs	r0, r3, #6
   86794:	3038      	adds	r0, #56	; 0x38
   86796:	e015      	b.n	867c4 <_malloc_r+0x17c>
   86798:	2814      	cmp	r0, #20
   8679a:	d801      	bhi.n	867a0 <_malloc_r+0x158>
   8679c:	305b      	adds	r0, #91	; 0x5b
   8679e:	e011      	b.n	867c4 <_malloc_r+0x17c>
   867a0:	2854      	cmp	r0, #84	; 0x54
   867a2:	d802      	bhi.n	867aa <_malloc_r+0x162>
   867a4:	0b18      	lsrs	r0, r3, #12
   867a6:	306e      	adds	r0, #110	; 0x6e
   867a8:	e00c      	b.n	867c4 <_malloc_r+0x17c>
   867aa:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   867ae:	d802      	bhi.n	867b6 <_malloc_r+0x16e>
   867b0:	0bd8      	lsrs	r0, r3, #15
   867b2:	3077      	adds	r0, #119	; 0x77
   867b4:	e006      	b.n	867c4 <_malloc_r+0x17c>
   867b6:	f240 5154 	movw	r1, #1364	; 0x554
   867ba:	4288      	cmp	r0, r1
   867bc:	bf9a      	itte	ls
   867be:	0c98      	lsrls	r0, r3, #18
   867c0:	307c      	addls	r0, #124	; 0x7c
   867c2:	207e      	movhi	r0, #126	; 0x7e
   867c4:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
   867c8:	f8dc 1008 	ldr.w	r1, [ip, #8]
   867cc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 86904 <_malloc_r+0x2bc>
   867d0:	4561      	cmp	r1, ip
   867d2:	d10d      	bne.n	867f0 <_malloc_r+0x1a8>
   867d4:	2301      	movs	r3, #1
   867d6:	1080      	asrs	r0, r0, #2
   867d8:	fa03 f000 	lsl.w	r0, r3, r0
   867dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   867e0:	4303      	orrs	r3, r0
   867e2:	f8c8 3004 	str.w	r3, [r8, #4]
   867e6:	460b      	mov	r3, r1
   867e8:	e008      	b.n	867fc <_malloc_r+0x1b4>
   867ea:	6889      	ldr	r1, [r1, #8]
   867ec:	4561      	cmp	r1, ip
   867ee:	d004      	beq.n	867fa <_malloc_r+0x1b2>
   867f0:	6848      	ldr	r0, [r1, #4]
   867f2:	f020 0003 	bic.w	r0, r0, #3
   867f6:	4283      	cmp	r3, r0
   867f8:	d3f7      	bcc.n	867ea <_malloc_r+0x1a2>
   867fa:	68cb      	ldr	r3, [r1, #12]
   867fc:	60f3      	str	r3, [r6, #12]
   867fe:	60b1      	str	r1, [r6, #8]
   86800:	609e      	str	r6, [r3, #8]
   86802:	60ce      	str	r6, [r1, #12]
   86804:	2101      	movs	r1, #1
   86806:	1093      	asrs	r3, r2, #2
   86808:	fa01 f303 	lsl.w	r3, r1, r3
   8680c:	6869      	ldr	r1, [r5, #4]
   8680e:	428b      	cmp	r3, r1
   86810:	d85d      	bhi.n	868ce <_malloc_r+0x286>
   86812:	420b      	tst	r3, r1
   86814:	d106      	bne.n	86824 <_malloc_r+0x1dc>
   86816:	f022 0203 	bic.w	r2, r2, #3
   8681a:	005b      	lsls	r3, r3, #1
   8681c:	420b      	tst	r3, r1
   8681e:	f102 0204 	add.w	r2, r2, #4
   86822:	d0fa      	beq.n	8681a <_malloc_r+0x1d2>
   86824:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
   86828:	4680      	mov	r8, r0
   8682a:	4694      	mov	ip, r2
   8682c:	f8d8 600c 	ldr.w	r6, [r8, #12]
   86830:	4546      	cmp	r6, r8
   86832:	d02d      	beq.n	86890 <_malloc_r+0x248>
   86834:	6871      	ldr	r1, [r6, #4]
   86836:	f021 0903 	bic.w	r9, r1, #3
   8683a:	ebc4 0109 	rsb	r1, r4, r9
   8683e:	290f      	cmp	r1, #15
   86840:	dd13      	ble.n	8686a <_malloc_r+0x222>
   86842:	1933      	adds	r3, r6, r4
   86844:	f044 0401 	orr.w	r4, r4, #1
   86848:	68f2      	ldr	r2, [r6, #12]
   8684a:	6074      	str	r4, [r6, #4]
   8684c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   86850:	60c2      	str	r2, [r0, #12]
   86852:	6090      	str	r0, [r2, #8]
   86854:	f041 0201 	orr.w	r2, r1, #1
   86858:	616b      	str	r3, [r5, #20]
   8685a:	612b      	str	r3, [r5, #16]
   8685c:	f8c3 e00c 	str.w	lr, [r3, #12]
   86860:	f8c3 e008 	str.w	lr, [r3, #8]
   86864:	605a      	str	r2, [r3, #4]
   86866:	5059      	str	r1, [r3, r1]
   86868:	e00c      	b.n	86884 <_malloc_r+0x23c>
   8686a:	2900      	cmp	r1, #0
   8686c:	db0e      	blt.n	8688c <_malloc_r+0x244>
   8686e:	eb06 0109 	add.w	r1, r6, r9
   86872:	684b      	ldr	r3, [r1, #4]
   86874:	f043 0301 	orr.w	r3, r3, #1
   86878:	604b      	str	r3, [r1, #4]
   8687a:	68f3      	ldr	r3, [r6, #12]
   8687c:	f856 2f08 	ldr.w	r2, [r6, #8]!
   86880:	60d3      	str	r3, [r2, #12]
   86882:	609a      	str	r2, [r3, #8]
   86884:	4638      	mov	r0, r7
   86886:	f000 f975 	bl	86b74 <__malloc_unlock>
   8688a:	e0dc      	b.n	86a46 <_malloc_r+0x3fe>
   8688c:	68f6      	ldr	r6, [r6, #12]
   8688e:	e7cf      	b.n	86830 <_malloc_r+0x1e8>
   86890:	f10c 0c01 	add.w	ip, ip, #1
   86894:	f01c 0f03 	tst.w	ip, #3
   86898:	f108 0808 	add.w	r8, r8, #8
   8689c:	d1c6      	bne.n	8682c <_malloc_r+0x1e4>
   8689e:	0791      	lsls	r1, r2, #30
   868a0:	d104      	bne.n	868ac <_malloc_r+0x264>
   868a2:	686a      	ldr	r2, [r5, #4]
   868a4:	ea22 0203 	bic.w	r2, r2, r3
   868a8:	606a      	str	r2, [r5, #4]
   868aa:	e005      	b.n	868b8 <_malloc_r+0x270>
   868ac:	f1a0 0108 	sub.w	r1, r0, #8
   868b0:	6800      	ldr	r0, [r0, #0]
   868b2:	3a01      	subs	r2, #1
   868b4:	4288      	cmp	r0, r1
   868b6:	d0f2      	beq.n	8689e <_malloc_r+0x256>
   868b8:	6869      	ldr	r1, [r5, #4]
   868ba:	005b      	lsls	r3, r3, #1
   868bc:	428b      	cmp	r3, r1
   868be:	d806      	bhi.n	868ce <_malloc_r+0x286>
   868c0:	b12b      	cbz	r3, 868ce <_malloc_r+0x286>
   868c2:	4662      	mov	r2, ip
   868c4:	420b      	tst	r3, r1
   868c6:	d1ad      	bne.n	86824 <_malloc_r+0x1dc>
   868c8:	3204      	adds	r2, #4
   868ca:	005b      	lsls	r3, r3, #1
   868cc:	e7fa      	b.n	868c4 <_malloc_r+0x27c>
   868ce:	f8d5 9008 	ldr.w	r9, [r5, #8]
   868d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   868d6:	f023 0b03 	bic.w	fp, r3, #3
   868da:	45a3      	cmp	fp, r4
   868dc:	d304      	bcc.n	868e8 <_malloc_r+0x2a0>
   868de:	ebc4 030b 	rsb	r3, r4, fp
   868e2:	2b0f      	cmp	r3, #15
   868e4:	f300 80a2 	bgt.w	86a2c <_malloc_r+0x3e4>
   868e8:	4907      	ldr	r1, [pc, #28]	; (86908 <_malloc_r+0x2c0>)
   868ea:	eb09 030b 	add.w	r3, r9, fp
   868ee:	680a      	ldr	r2, [r1, #0]
   868f0:	4688      	mov	r8, r1
   868f2:	eb04 0a02 	add.w	sl, r4, r2
   868f6:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
   868fa:	3201      	adds	r2, #1
   868fc:	d106      	bne.n	8690c <_malloc_r+0x2c4>
   868fe:	f10a 0a10 	add.w	sl, sl, #16
   86902:	e00b      	b.n	8691c <_malloc_r+0x2d4>
   86904:	200704c0 	.word	0x200704c0
   86908:	2007abd8 	.word	0x2007abd8
   8690c:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   86910:	f10a 0a0f 	add.w	sl, sl, #15
   86914:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   86918:	f02a 0a0f 	bic.w	sl, sl, #15
   8691c:	4638      	mov	r0, r7
   8691e:	4651      	mov	r1, sl
   86920:	9301      	str	r3, [sp, #4]
   86922:	f000 ff65 	bl	877f0 <_sbrk_r>
   86926:	1c42      	adds	r2, r0, #1
   86928:	4606      	mov	r6, r0
   8692a:	9b01      	ldr	r3, [sp, #4]
   8692c:	d06f      	beq.n	86a0e <_malloc_r+0x3c6>
   8692e:	4298      	cmp	r0, r3
   86930:	d201      	bcs.n	86936 <_malloc_r+0x2ee>
   86932:	45a9      	cmp	r9, r5
   86934:	d16b      	bne.n	86a0e <_malloc_r+0x3c6>
   86936:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8693a:	429e      	cmp	r6, r3
   8693c:	4452      	add	r2, sl
   8693e:	f8c8 2004 	str.w	r2, [r8, #4]
   86942:	d108      	bne.n	86956 <_malloc_r+0x30e>
   86944:	f3c6 010b 	ubfx	r1, r6, #0, #12
   86948:	b929      	cbnz	r1, 86956 <_malloc_r+0x30e>
   8694a:	68ab      	ldr	r3, [r5, #8]
   8694c:	44da      	add	sl, fp
   8694e:	f04a 0201 	orr.w	r2, sl, #1
   86952:	605a      	str	r2, [r3, #4]
   86954:	e04d      	b.n	869f2 <_malloc_r+0x3aa>
   86956:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
   8695a:	3101      	adds	r1, #1
   8695c:	d103      	bne.n	86966 <_malloc_r+0x31e>
   8695e:	4b3c      	ldr	r3, [pc, #240]	; (86a50 <_malloc_r+0x408>)
   86960:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
   86964:	e003      	b.n	8696e <_malloc_r+0x326>
   86966:	1af3      	subs	r3, r6, r3
   86968:	441a      	add	r2, r3
   8696a:	f8c8 2004 	str.w	r2, [r8, #4]
   8696e:	f016 0307 	ands.w	r3, r6, #7
   86972:	bf1c      	itt	ne
   86974:	f1c3 0308 	rsbne	r3, r3, #8
   86978:	18f6      	addne	r6, r6, r3
   8697a:	44b2      	add	sl, r6
   8697c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   86980:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   86984:	ebca 0a03 	rsb	sl, sl, r3
   86988:	4651      	mov	r1, sl
   8698a:	4638      	mov	r0, r7
   8698c:	f000 ff30 	bl	877f0 <_sbrk_r>
   86990:	1c43      	adds	r3, r0, #1
   86992:	bf04      	itt	eq
   86994:	4630      	moveq	r0, r6
   86996:	f04f 0a00 	moveq.w	sl, #0
   8699a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8699e:	1b80      	subs	r0, r0, r6
   869a0:	4450      	add	r0, sl
   869a2:	4453      	add	r3, sl
   869a4:	f040 0001 	orr.w	r0, r0, #1
   869a8:	45a9      	cmp	r9, r5
   869aa:	60ae      	str	r6, [r5, #8]
   869ac:	f8c8 3004 	str.w	r3, [r8, #4]
   869b0:	6070      	str	r0, [r6, #4]
   869b2:	d01e      	beq.n	869f2 <_malloc_r+0x3aa>
   869b4:	f1bb 0f0f 	cmp.w	fp, #15
   869b8:	d802      	bhi.n	869c0 <_malloc_r+0x378>
   869ba:	2301      	movs	r3, #1
   869bc:	6073      	str	r3, [r6, #4]
   869be:	e026      	b.n	86a0e <_malloc_r+0x3c6>
   869c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   869c4:	f1ab 0b0c 	sub.w	fp, fp, #12
   869c8:	f02b 0b07 	bic.w	fp, fp, #7
   869cc:	f003 0301 	and.w	r3, r3, #1
   869d0:	ea4b 0303 	orr.w	r3, fp, r3
   869d4:	f8c9 3004 	str.w	r3, [r9, #4]
   869d8:	2205      	movs	r2, #5
   869da:	eb09 030b 	add.w	r3, r9, fp
   869de:	f1bb 0f0f 	cmp.w	fp, #15
   869e2:	605a      	str	r2, [r3, #4]
   869e4:	609a      	str	r2, [r3, #8]
   869e6:	d904      	bls.n	869f2 <_malloc_r+0x3aa>
   869e8:	4638      	mov	r0, r7
   869ea:	f109 0108 	add.w	r1, r9, #8
   869ee:	f7ff f809 	bl	85a04 <_free_r>
   869f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   869f6:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
   869fa:	4293      	cmp	r3, r2
   869fc:	bf84      	itt	hi
   869fe:	4a15      	ldrhi	r2, [pc, #84]	; (86a54 <_malloc_r+0x40c>)
   86a00:	62d3      	strhi	r3, [r2, #44]	; 0x2c
   86a02:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
   86a06:	4293      	cmp	r3, r2
   86a08:	bf84      	itt	hi
   86a0a:	4a12      	ldrhi	r2, [pc, #72]	; (86a54 <_malloc_r+0x40c>)
   86a0c:	6313      	strhi	r3, [r2, #48]	; 0x30
   86a0e:	68ab      	ldr	r3, [r5, #8]
   86a10:	685a      	ldr	r2, [r3, #4]
   86a12:	f022 0203 	bic.w	r2, r2, #3
   86a16:	42a2      	cmp	r2, r4
   86a18:	ebc4 0302 	rsb	r3, r4, r2
   86a1c:	d301      	bcc.n	86a22 <_malloc_r+0x3da>
   86a1e:	2b0f      	cmp	r3, #15
   86a20:	dc04      	bgt.n	86a2c <_malloc_r+0x3e4>
   86a22:	4638      	mov	r0, r7
   86a24:	f000 f8a6 	bl	86b74 <__malloc_unlock>
   86a28:	2600      	movs	r6, #0
   86a2a:	e00c      	b.n	86a46 <_malloc_r+0x3fe>
   86a2c:	68ae      	ldr	r6, [r5, #8]
   86a2e:	f044 0201 	orr.w	r2, r4, #1
   86a32:	f043 0301 	orr.w	r3, r3, #1
   86a36:	4434      	add	r4, r6
   86a38:	6072      	str	r2, [r6, #4]
   86a3a:	60ac      	str	r4, [r5, #8]
   86a3c:	6063      	str	r3, [r4, #4]
   86a3e:	4638      	mov	r0, r7
   86a40:	f000 f898 	bl	86b74 <__malloc_unlock>
   86a44:	3608      	adds	r6, #8
   86a46:	4630      	mov	r0, r6
   86a48:	b003      	add	sp, #12
   86a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86a4e:	bf00      	nop
   86a50:	200704c0 	.word	0x200704c0
   86a54:	2007abd8 	.word	0x2007abd8

00086a58 <_mbrtowc_r>:
   86a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   86a5c:	4616      	mov	r6, r2
   86a5e:	4a11      	ldr	r2, [pc, #68]	; (86aa4 <_mbrtowc_r+0x4c>)
   86a60:	4604      	mov	r4, r0
   86a62:	4689      	mov	r9, r1
   86a64:	4698      	mov	r8, r3
   86a66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86a68:	6817      	ldr	r7, [r2, #0]
   86a6a:	b946      	cbnz	r6, 86a7e <_mbrtowc_r+0x26>
   86a6c:	f7ff fd56 	bl	8651c <__locale_charset>
   86a70:	4631      	mov	r1, r6
   86a72:	e88d 0021 	stmia.w	sp, {r0, r5}
   86a76:	4a0c      	ldr	r2, [pc, #48]	; (86aa8 <_mbrtowc_r+0x50>)
   86a78:	4620      	mov	r0, r4
   86a7a:	2301      	movs	r3, #1
   86a7c:	e007      	b.n	86a8e <_mbrtowc_r+0x36>
   86a7e:	f7ff fd4d 	bl	8651c <__locale_charset>
   86a82:	4649      	mov	r1, r9
   86a84:	e88d 0021 	stmia.w	sp, {r0, r5}
   86a88:	4632      	mov	r2, r6
   86a8a:	4620      	mov	r0, r4
   86a8c:	4643      	mov	r3, r8
   86a8e:	47b8      	blx	r7
   86a90:	1c43      	adds	r3, r0, #1
   86a92:	d103      	bne.n	86a9c <_mbrtowc_r+0x44>
   86a94:	2300      	movs	r3, #0
   86a96:	602b      	str	r3, [r5, #0]
   86a98:	238a      	movs	r3, #138	; 0x8a
   86a9a:	6023      	str	r3, [r4, #0]
   86a9c:	b003      	add	sp, #12
   86a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86aa2:	bf00      	nop
   86aa4:	200708d0 	.word	0x200708d0
   86aa8:	00088cb8 	.word	0x00088cb8

00086aac <mbrtowc>:
   86aac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   86aae:	9300      	str	r3, [sp, #0]
   86ab0:	4b05      	ldr	r3, [pc, #20]	; (86ac8 <mbrtowc+0x1c>)
   86ab2:	4606      	mov	r6, r0
   86ab4:	460d      	mov	r5, r1
   86ab6:	4614      	mov	r4, r2
   86ab8:	6818      	ldr	r0, [r3, #0]
   86aba:	4631      	mov	r1, r6
   86abc:	462a      	mov	r2, r5
   86abe:	4623      	mov	r3, r4
   86ac0:	f7ff ffca 	bl	86a58 <_mbrtowc_r>
   86ac4:	b002      	add	sp, #8
   86ac6:	bd70      	pop	{r4, r5, r6, pc}
   86ac8:	20070010 	.word	0x20070010

00086acc <__ascii_mbtowc>:
   86acc:	b082      	sub	sp, #8
   86ace:	b901      	cbnz	r1, 86ad2 <__ascii_mbtowc+0x6>
   86ad0:	a901      	add	r1, sp, #4
   86ad2:	b13a      	cbz	r2, 86ae4 <__ascii_mbtowc+0x18>
   86ad4:	b143      	cbz	r3, 86ae8 <__ascii_mbtowc+0x1c>
   86ad6:	7813      	ldrb	r3, [r2, #0]
   86ad8:	600b      	str	r3, [r1, #0]
   86ada:	7810      	ldrb	r0, [r2, #0]
   86adc:	3000      	adds	r0, #0
   86ade:	bf18      	it	ne
   86ae0:	2001      	movne	r0, #1
   86ae2:	e003      	b.n	86aec <__ascii_mbtowc+0x20>
   86ae4:	4610      	mov	r0, r2
   86ae6:	e001      	b.n	86aec <__ascii_mbtowc+0x20>
   86ae8:	f06f 0001 	mvn.w	r0, #1
   86aec:	b002      	add	sp, #8
   86aee:	4770      	bx	lr

00086af0 <_mbtowc_r>:
   86af0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   86af4:	461f      	mov	r7, r3
   86af6:	4b09      	ldr	r3, [pc, #36]	; (86b1c <_mbtowc_r+0x2c>)
   86af8:	4606      	mov	r6, r0
   86afa:	681c      	ldr	r4, [r3, #0]
   86afc:	4689      	mov	r9, r1
   86afe:	4690      	mov	r8, r2
   86b00:	f7ff fd0c 	bl	8651c <__locale_charset>
   86b04:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86b06:	9000      	str	r0, [sp, #0]
   86b08:	9501      	str	r5, [sp, #4]
   86b0a:	4630      	mov	r0, r6
   86b0c:	4649      	mov	r1, r9
   86b0e:	4642      	mov	r2, r8
   86b10:	463b      	mov	r3, r7
   86b12:	47a0      	blx	r4
   86b14:	b003      	add	sp, #12
   86b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86b1a:	bf00      	nop
   86b1c:	200708d0 	.word	0x200708d0

00086b20 <memchr>:
   86b20:	b510      	push	{r4, lr}
   86b22:	b2c9      	uxtb	r1, r1
   86b24:	4402      	add	r2, r0
   86b26:	4290      	cmp	r0, r2
   86b28:	4603      	mov	r3, r0
   86b2a:	d005      	beq.n	86b38 <memchr+0x18>
   86b2c:	781c      	ldrb	r4, [r3, #0]
   86b2e:	3001      	adds	r0, #1
   86b30:	428c      	cmp	r4, r1
   86b32:	d1f8      	bne.n	86b26 <memchr+0x6>
   86b34:	4618      	mov	r0, r3
   86b36:	bd10      	pop	{r4, pc}
   86b38:	2000      	movs	r0, #0
   86b3a:	bd10      	pop	{r4, pc}

00086b3c <memmove>:
   86b3c:	4281      	cmp	r1, r0
   86b3e:	b570      	push	{r4, r5, r6, lr}
   86b40:	d301      	bcc.n	86b46 <memmove+0xa>
   86b42:	2300      	movs	r3, #0
   86b44:	e00e      	b.n	86b64 <memmove+0x28>
   86b46:	188c      	adds	r4, r1, r2
   86b48:	42a0      	cmp	r0, r4
   86b4a:	d2fa      	bcs.n	86b42 <memmove+0x6>
   86b4c:	1885      	adds	r5, r0, r2
   86b4e:	4613      	mov	r3, r2
   86b50:	f113 33ff 	adds.w	r3, r3, #4294967295
   86b54:	d305      	bcc.n	86b62 <memmove+0x26>
   86b56:	4251      	negs	r1, r2
   86b58:	1866      	adds	r6, r4, r1
   86b5a:	5cf6      	ldrb	r6, [r6, r3]
   86b5c:	4429      	add	r1, r5
   86b5e:	54ce      	strb	r6, [r1, r3]
   86b60:	e7f6      	b.n	86b50 <memmove+0x14>
   86b62:	bd70      	pop	{r4, r5, r6, pc}
   86b64:	4293      	cmp	r3, r2
   86b66:	d003      	beq.n	86b70 <memmove+0x34>
   86b68:	5ccc      	ldrb	r4, [r1, r3]
   86b6a:	54c4      	strb	r4, [r0, r3]
   86b6c:	3301      	adds	r3, #1
   86b6e:	e7f9      	b.n	86b64 <memmove+0x28>
   86b70:	bd70      	pop	{r4, r5, r6, pc}

00086b72 <__malloc_lock>:
   86b72:	4770      	bx	lr

00086b74 <__malloc_unlock>:
   86b74:	4770      	bx	lr
	...

00086b78 <_Balloc>:
   86b78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86b7a:	b570      	push	{r4, r5, r6, lr}
   86b7c:	4605      	mov	r5, r0
   86b7e:	460c      	mov	r4, r1
   86b80:	b13b      	cbz	r3, 86b92 <_Balloc+0x1a>
   86b82:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86b84:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   86b88:	b160      	cbz	r0, 86ba4 <_Balloc+0x2c>
   86b8a:	6801      	ldr	r1, [r0, #0]
   86b8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   86b90:	e014      	b.n	86bbc <_Balloc+0x44>
   86b92:	2104      	movs	r1, #4
   86b94:	2221      	movs	r2, #33	; 0x21
   86b96:	f001 faa1 	bl	880dc <_calloc_r>
   86b9a:	64e8      	str	r0, [r5, #76]	; 0x4c
   86b9c:	2800      	cmp	r0, #0
   86b9e:	d1f0      	bne.n	86b82 <_Balloc+0xa>
   86ba0:	2000      	movs	r0, #0
   86ba2:	bd70      	pop	{r4, r5, r6, pc}
   86ba4:	2101      	movs	r1, #1
   86ba6:	fa01 f604 	lsl.w	r6, r1, r4
   86baa:	1d72      	adds	r2, r6, #5
   86bac:	4628      	mov	r0, r5
   86bae:	0092      	lsls	r2, r2, #2
   86bb0:	f001 fa94 	bl	880dc <_calloc_r>
   86bb4:	2800      	cmp	r0, #0
   86bb6:	d0f3      	beq.n	86ba0 <_Balloc+0x28>
   86bb8:	6044      	str	r4, [r0, #4]
   86bba:	6086      	str	r6, [r0, #8]
   86bbc:	2200      	movs	r2, #0
   86bbe:	6102      	str	r2, [r0, #16]
   86bc0:	60c2      	str	r2, [r0, #12]
   86bc2:	bd70      	pop	{r4, r5, r6, pc}

00086bc4 <_Bfree>:
   86bc4:	b131      	cbz	r1, 86bd4 <_Bfree+0x10>
   86bc6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86bc8:	684a      	ldr	r2, [r1, #4]
   86bca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86bce:	6008      	str	r0, [r1, #0]
   86bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86bd4:	4770      	bx	lr

00086bd6 <__multadd>:
   86bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86bda:	460c      	mov	r4, r1
   86bdc:	461e      	mov	r6, r3
   86bde:	690d      	ldr	r5, [r1, #16]
   86be0:	4607      	mov	r7, r0
   86be2:	3114      	adds	r1, #20
   86be4:	2300      	movs	r3, #0
   86be6:	6808      	ldr	r0, [r1, #0]
   86be8:	3301      	adds	r3, #1
   86bea:	fa1f fc80 	uxth.w	ip, r0
   86bee:	0c00      	lsrs	r0, r0, #16
   86bf0:	fb02 6c0c 	mla	ip, r2, ip, r6
   86bf4:	4350      	muls	r0, r2
   86bf6:	eb00 401c 	add.w	r0, r0, ip, lsr #16
   86bfa:	fa1f fc8c 	uxth.w	ip, ip
   86bfe:	0c06      	lsrs	r6, r0, #16
   86c00:	42ab      	cmp	r3, r5
   86c02:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
   86c06:	f841 0b04 	str.w	r0, [r1], #4
   86c0a:	dbec      	blt.n	86be6 <__multadd+0x10>
   86c0c:	b1d6      	cbz	r6, 86c44 <__multadd+0x6e>
   86c0e:	68a3      	ldr	r3, [r4, #8]
   86c10:	429d      	cmp	r5, r3
   86c12:	db12      	blt.n	86c3a <__multadd+0x64>
   86c14:	6861      	ldr	r1, [r4, #4]
   86c16:	4638      	mov	r0, r7
   86c18:	3101      	adds	r1, #1
   86c1a:	f7ff ffad 	bl	86b78 <_Balloc>
   86c1e:	6922      	ldr	r2, [r4, #16]
   86c20:	f104 010c 	add.w	r1, r4, #12
   86c24:	3202      	adds	r2, #2
   86c26:	4680      	mov	r8, r0
   86c28:	0092      	lsls	r2, r2, #2
   86c2a:	300c      	adds	r0, #12
   86c2c:	f7fc fbce 	bl	833cc <memcpy>
   86c30:	4621      	mov	r1, r4
   86c32:	4638      	mov	r0, r7
   86c34:	f7ff ffc6 	bl	86bc4 <_Bfree>
   86c38:	4644      	mov	r4, r8
   86c3a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   86c3e:	3501      	adds	r5, #1
   86c40:	615e      	str	r6, [r3, #20]
   86c42:	6125      	str	r5, [r4, #16]
   86c44:	4620      	mov	r0, r4
   86c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00086c4a <__s2b>:
   86c4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86c4e:	4614      	mov	r4, r2
   86c50:	4698      	mov	r8, r3
   86c52:	f103 0208 	add.w	r2, r3, #8
   86c56:	2309      	movs	r3, #9
   86c58:	460d      	mov	r5, r1
   86c5a:	fb92 f2f3 	sdiv	r2, r2, r3
   86c5e:	4606      	mov	r6, r0
   86c60:	2301      	movs	r3, #1
   86c62:	2100      	movs	r1, #0
   86c64:	429a      	cmp	r2, r3
   86c66:	dd02      	ble.n	86c6e <__s2b+0x24>
   86c68:	005b      	lsls	r3, r3, #1
   86c6a:	3101      	adds	r1, #1
   86c6c:	e7fa      	b.n	86c64 <__s2b+0x1a>
   86c6e:	4630      	mov	r0, r6
   86c70:	f7ff ff82 	bl	86b78 <_Balloc>
   86c74:	9b08      	ldr	r3, [sp, #32]
   86c76:	2c09      	cmp	r4, #9
   86c78:	6143      	str	r3, [r0, #20]
   86c7a:	f04f 0301 	mov.w	r3, #1
   86c7e:	4601      	mov	r1, r0
   86c80:	6103      	str	r3, [r0, #16]
   86c82:	dd11      	ble.n	86ca8 <__s2b+0x5e>
   86c84:	f105 0909 	add.w	r9, r5, #9
   86c88:	464f      	mov	r7, r9
   86c8a:	4425      	add	r5, r4
   86c8c:	f817 3b01 	ldrb.w	r3, [r7], #1
   86c90:	4630      	mov	r0, r6
   86c92:	220a      	movs	r2, #10
   86c94:	3b30      	subs	r3, #48	; 0x30
   86c96:	f7ff ff9e 	bl	86bd6 <__multadd>
   86c9a:	42af      	cmp	r7, r5
   86c9c:	4601      	mov	r1, r0
   86c9e:	d1f5      	bne.n	86c8c <__s2b+0x42>
   86ca0:	eb09 0704 	add.w	r7, r9, r4
   86ca4:	3f08      	subs	r7, #8
   86ca6:	e002      	b.n	86cae <__s2b+0x64>
   86ca8:	f105 070a 	add.w	r7, r5, #10
   86cac:	2409      	movs	r4, #9
   86cae:	4625      	mov	r5, r4
   86cb0:	4545      	cmp	r5, r8
   86cb2:	da09      	bge.n	86cc8 <__s2b+0x7e>
   86cb4:	1b3b      	subs	r3, r7, r4
   86cb6:	5d5b      	ldrb	r3, [r3, r5]
   86cb8:	4630      	mov	r0, r6
   86cba:	220a      	movs	r2, #10
   86cbc:	3b30      	subs	r3, #48	; 0x30
   86cbe:	f7ff ff8a 	bl	86bd6 <__multadd>
   86cc2:	3501      	adds	r5, #1
   86cc4:	4601      	mov	r1, r0
   86cc6:	e7f3      	b.n	86cb0 <__s2b+0x66>
   86cc8:	4608      	mov	r0, r1
   86cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00086cce <__hi0bits>:
   86cce:	0c03      	lsrs	r3, r0, #16
   86cd0:	041b      	lsls	r3, r3, #16
   86cd2:	b913      	cbnz	r3, 86cda <__hi0bits+0xc>
   86cd4:	0400      	lsls	r0, r0, #16
   86cd6:	2310      	movs	r3, #16
   86cd8:	e000      	b.n	86cdc <__hi0bits+0xe>
   86cda:	2300      	movs	r3, #0
   86cdc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   86ce0:	bf04      	itt	eq
   86ce2:	0200      	lsleq	r0, r0, #8
   86ce4:	3308      	addeq	r3, #8
   86ce6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   86cea:	bf04      	itt	eq
   86cec:	0100      	lsleq	r0, r0, #4
   86cee:	3304      	addeq	r3, #4
   86cf0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   86cf4:	bf04      	itt	eq
   86cf6:	0080      	lsleq	r0, r0, #2
   86cf8:	3302      	addeq	r3, #2
   86cfa:	2800      	cmp	r0, #0
   86cfc:	db03      	blt.n	86d06 <__hi0bits+0x38>
   86cfe:	0042      	lsls	r2, r0, #1
   86d00:	d503      	bpl.n	86d0a <__hi0bits+0x3c>
   86d02:	1c58      	adds	r0, r3, #1
   86d04:	4770      	bx	lr
   86d06:	4618      	mov	r0, r3
   86d08:	4770      	bx	lr
   86d0a:	2020      	movs	r0, #32
   86d0c:	4770      	bx	lr

00086d0e <__lo0bits>:
   86d0e:	6803      	ldr	r3, [r0, #0]
   86d10:	f013 0207 	ands.w	r2, r3, #7
   86d14:	d00b      	beq.n	86d2e <__lo0bits+0x20>
   86d16:	07d9      	lsls	r1, r3, #31
   86d18:	d422      	bmi.n	86d60 <__lo0bits+0x52>
   86d1a:	079a      	lsls	r2, r3, #30
   86d1c:	d503      	bpl.n	86d26 <__lo0bits+0x18>
   86d1e:	085b      	lsrs	r3, r3, #1
   86d20:	6003      	str	r3, [r0, #0]
   86d22:	2001      	movs	r0, #1
   86d24:	4770      	bx	lr
   86d26:	089b      	lsrs	r3, r3, #2
   86d28:	6003      	str	r3, [r0, #0]
   86d2a:	2002      	movs	r0, #2
   86d2c:	4770      	bx	lr
   86d2e:	b299      	uxth	r1, r3
   86d30:	b909      	cbnz	r1, 86d36 <__lo0bits+0x28>
   86d32:	0c1b      	lsrs	r3, r3, #16
   86d34:	2210      	movs	r2, #16
   86d36:	f013 0fff 	tst.w	r3, #255	; 0xff
   86d3a:	bf04      	itt	eq
   86d3c:	0a1b      	lsreq	r3, r3, #8
   86d3e:	3208      	addeq	r2, #8
   86d40:	0719      	lsls	r1, r3, #28
   86d42:	bf04      	itt	eq
   86d44:	091b      	lsreq	r3, r3, #4
   86d46:	3204      	addeq	r2, #4
   86d48:	0799      	lsls	r1, r3, #30
   86d4a:	bf04      	itt	eq
   86d4c:	089b      	lsreq	r3, r3, #2
   86d4e:	3202      	addeq	r2, #2
   86d50:	07d9      	lsls	r1, r3, #31
   86d52:	d402      	bmi.n	86d5a <__lo0bits+0x4c>
   86d54:	085b      	lsrs	r3, r3, #1
   86d56:	d005      	beq.n	86d64 <__lo0bits+0x56>
   86d58:	3201      	adds	r2, #1
   86d5a:	6003      	str	r3, [r0, #0]
   86d5c:	4610      	mov	r0, r2
   86d5e:	4770      	bx	lr
   86d60:	2000      	movs	r0, #0
   86d62:	4770      	bx	lr
   86d64:	2020      	movs	r0, #32
   86d66:	4770      	bx	lr

00086d68 <__i2b>:
   86d68:	b510      	push	{r4, lr}
   86d6a:	460c      	mov	r4, r1
   86d6c:	2101      	movs	r1, #1
   86d6e:	f7ff ff03 	bl	86b78 <_Balloc>
   86d72:	2201      	movs	r2, #1
   86d74:	6144      	str	r4, [r0, #20]
   86d76:	6102      	str	r2, [r0, #16]
   86d78:	bd10      	pop	{r4, pc}

00086d7a <__multiply>:
   86d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86d7e:	4616      	mov	r6, r2
   86d80:	6933      	ldr	r3, [r6, #16]
   86d82:	690a      	ldr	r2, [r1, #16]
   86d84:	b085      	sub	sp, #20
   86d86:	429a      	cmp	r2, r3
   86d88:	460d      	mov	r5, r1
   86d8a:	da01      	bge.n	86d90 <__multiply+0x16>
   86d8c:	4635      	mov	r5, r6
   86d8e:	460e      	mov	r6, r1
   86d90:	f8d5 8010 	ldr.w	r8, [r5, #16]
   86d94:	6937      	ldr	r7, [r6, #16]
   86d96:	68ab      	ldr	r3, [r5, #8]
   86d98:	6869      	ldr	r1, [r5, #4]
   86d9a:	eb08 0407 	add.w	r4, r8, r7
   86d9e:	429c      	cmp	r4, r3
   86da0:	bfc8      	it	gt
   86da2:	3101      	addgt	r1, #1
   86da4:	f7ff fee8 	bl	86b78 <_Balloc>
   86da8:	f100 0314 	add.w	r3, r0, #20
   86dac:	eb03 0184 	add.w	r1, r3, r4, lsl #2
   86db0:	9101      	str	r1, [sp, #4]
   86db2:	461a      	mov	r2, r3
   86db4:	f8dd a004 	ldr.w	sl, [sp, #4]
   86db8:	4552      	cmp	r2, sl
   86dba:	d203      	bcs.n	86dc4 <__multiply+0x4a>
   86dbc:	2100      	movs	r1, #0
   86dbe:	f842 1b04 	str.w	r1, [r2], #4
   86dc2:	e7f7      	b.n	86db4 <__multiply+0x3a>
   86dc4:	f105 0114 	add.w	r1, r5, #20
   86dc8:	f106 0214 	add.w	r2, r6, #20
   86dcc:	eb01 0888 	add.w	r8, r1, r8, lsl #2
   86dd0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   86dd4:	f8cd 8008 	str.w	r8, [sp, #8]
   86dd8:	9703      	str	r7, [sp, #12]
   86dda:	9e03      	ldr	r6, [sp, #12]
   86ddc:	4615      	mov	r5, r2
   86dde:	42b2      	cmp	r2, r6
   86de0:	d256      	bcs.n	86e90 <__multiply+0x116>
   86de2:	f8b5 c000 	ldrh.w	ip, [r5]
   86de6:	3204      	adds	r2, #4
   86de8:	f1bc 0f00 	cmp.w	ip, #0
   86dec:	d025      	beq.n	86e3a <__multiply+0xc0>
   86dee:	460f      	mov	r7, r1
   86df0:	461d      	mov	r5, r3
   86df2:	2600      	movs	r6, #0
   86df4:	f857 9b04 	ldr.w	r9, [r7], #4
   86df8:	f8d5 8000 	ldr.w	r8, [r5]
   86dfc:	fa1f fb89 	uxth.w	fp, r9
   86e00:	fa1f fa88 	uxth.w	sl, r8
   86e04:	fb0c aa0b 	mla	sl, ip, fp, sl
   86e08:	ea4f 4919 	mov.w	r9, r9, lsr #16
   86e0c:	ea4f 4818 	mov.w	r8, r8, lsr #16
   86e10:	fb0c 8809 	mla	r8, ip, r9, r8
   86e14:	44b2      	add	sl, r6
   86e16:	eb08 481a 	add.w	r8, r8, sl, lsr #16
   86e1a:	fa1f fa8a 	uxth.w	sl, sl
   86e1e:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
   86e22:	ea4f 4618 	mov.w	r6, r8, lsr #16
   86e26:	f8dd 8008 	ldr.w	r8, [sp, #8]
   86e2a:	46ab      	mov	fp, r5
   86e2c:	45b8      	cmp	r8, r7
   86e2e:	f84b ab04 	str.w	sl, [fp], #4
   86e32:	d901      	bls.n	86e38 <__multiply+0xbe>
   86e34:	465d      	mov	r5, fp
   86e36:	e7dd      	b.n	86df4 <__multiply+0x7a>
   86e38:	606e      	str	r6, [r5, #4]
   86e3a:	f832 8c02 	ldrh.w	r8, [r2, #-2]
   86e3e:	f1b8 0f00 	cmp.w	r8, #0
   86e42:	d023      	beq.n	86e8c <__multiply+0x112>
   86e44:	681e      	ldr	r6, [r3, #0]
   86e46:	460f      	mov	r7, r1
   86e48:	461d      	mov	r5, r3
   86e4a:	f04f 0900 	mov.w	r9, #0
   86e4e:	f8b7 a000 	ldrh.w	sl, [r7]
   86e52:	f8b5 c002 	ldrh.w	ip, [r5, #2]
   86e56:	b2b6      	uxth	r6, r6
   86e58:	fb08 cc0a 	mla	ip, r8, sl, ip
   86e5c:	44e1      	add	r9, ip
   86e5e:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
   86e62:	46ac      	mov	ip, r5
   86e64:	f84c 6b04 	str.w	r6, [ip], #4
   86e68:	f857 6b04 	ldr.w	r6, [r7], #4
   86e6c:	f8b5 a004 	ldrh.w	sl, [r5, #4]
   86e70:	0c36      	lsrs	r6, r6, #16
   86e72:	fb08 a606 	mla	r6, r8, r6, sl
   86e76:	f8dd a008 	ldr.w	sl, [sp, #8]
   86e7a:	eb06 4619 	add.w	r6, r6, r9, lsr #16
   86e7e:	4557      	cmp	r7, sl
   86e80:	ea4f 4916 	mov.w	r9, r6, lsr #16
   86e84:	d201      	bcs.n	86e8a <__multiply+0x110>
   86e86:	4665      	mov	r5, ip
   86e88:	e7e1      	b.n	86e4e <__multiply+0xd4>
   86e8a:	606e      	str	r6, [r5, #4]
   86e8c:	3304      	adds	r3, #4
   86e8e:	e7a4      	b.n	86dda <__multiply+0x60>
   86e90:	9b01      	ldr	r3, [sp, #4]
   86e92:	2c00      	cmp	r4, #0
   86e94:	dc03      	bgt.n	86e9e <__multiply+0x124>
   86e96:	6104      	str	r4, [r0, #16]
   86e98:	b005      	add	sp, #20
   86e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   86ea2:	2a00      	cmp	r2, #0
   86ea4:	d1f7      	bne.n	86e96 <__multiply+0x11c>
   86ea6:	3c01      	subs	r4, #1
   86ea8:	e7f3      	b.n	86e92 <__multiply+0x118>

00086eaa <__pow5mult>:
   86eaa:	f012 0303 	ands.w	r3, r2, #3
   86eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86eb2:	4605      	mov	r5, r0
   86eb4:	460e      	mov	r6, r1
   86eb6:	4617      	mov	r7, r2
   86eb8:	d007      	beq.n	86eca <__pow5mult+0x20>
   86eba:	4a1a      	ldr	r2, [pc, #104]	; (86f24 <__pow5mult+0x7a>)
   86ebc:	3b01      	subs	r3, #1
   86ebe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86ec2:	2300      	movs	r3, #0
   86ec4:	f7ff fe87 	bl	86bd6 <__multadd>
   86ec8:	4606      	mov	r6, r0
   86eca:	10bf      	asrs	r7, r7, #2
   86ecc:	d027      	beq.n	86f1e <__pow5mult+0x74>
   86ece:	6cac      	ldr	r4, [r5, #72]	; 0x48
   86ed0:	b974      	cbnz	r4, 86ef0 <__pow5mult+0x46>
   86ed2:	4628      	mov	r0, r5
   86ed4:	f240 2171 	movw	r1, #625	; 0x271
   86ed8:	f7ff ff46 	bl	86d68 <__i2b>
   86edc:	2300      	movs	r3, #0
   86ede:	64a8      	str	r0, [r5, #72]	; 0x48
   86ee0:	4604      	mov	r4, r0
   86ee2:	6003      	str	r3, [r0, #0]
   86ee4:	e004      	b.n	86ef0 <__pow5mult+0x46>
   86ee6:	107f      	asrs	r7, r7, #1
   86ee8:	d019      	beq.n	86f1e <__pow5mult+0x74>
   86eea:	6820      	ldr	r0, [r4, #0]
   86eec:	b170      	cbz	r0, 86f0c <__pow5mult+0x62>
   86eee:	4604      	mov	r4, r0
   86ef0:	07fb      	lsls	r3, r7, #31
   86ef2:	d5f8      	bpl.n	86ee6 <__pow5mult+0x3c>
   86ef4:	4631      	mov	r1, r6
   86ef6:	4622      	mov	r2, r4
   86ef8:	4628      	mov	r0, r5
   86efa:	f7ff ff3e 	bl	86d7a <__multiply>
   86efe:	4631      	mov	r1, r6
   86f00:	4680      	mov	r8, r0
   86f02:	4628      	mov	r0, r5
   86f04:	f7ff fe5e 	bl	86bc4 <_Bfree>
   86f08:	4646      	mov	r6, r8
   86f0a:	e7ec      	b.n	86ee6 <__pow5mult+0x3c>
   86f0c:	4628      	mov	r0, r5
   86f0e:	4621      	mov	r1, r4
   86f10:	4622      	mov	r2, r4
   86f12:	f7ff ff32 	bl	86d7a <__multiply>
   86f16:	2300      	movs	r3, #0
   86f18:	6020      	str	r0, [r4, #0]
   86f1a:	6003      	str	r3, [r0, #0]
   86f1c:	e7e7      	b.n	86eee <__pow5mult+0x44>
   86f1e:	4630      	mov	r0, r6
   86f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86f24:	00088cc0 	.word	0x00088cc0

00086f28 <__lshift>:
   86f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86f2c:	460c      	mov	r4, r1
   86f2e:	6923      	ldr	r3, [r4, #16]
   86f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
   86f34:	eb0a 0903 	add.w	r9, sl, r3
   86f38:	6849      	ldr	r1, [r1, #4]
   86f3a:	68a3      	ldr	r3, [r4, #8]
   86f3c:	4680      	mov	r8, r0
   86f3e:	4615      	mov	r5, r2
   86f40:	f109 0701 	add.w	r7, r9, #1
   86f44:	429f      	cmp	r7, r3
   86f46:	dd02      	ble.n	86f4e <__lshift+0x26>
   86f48:	3101      	adds	r1, #1
   86f4a:	005b      	lsls	r3, r3, #1
   86f4c:	e7fa      	b.n	86f44 <__lshift+0x1c>
   86f4e:	4640      	mov	r0, r8
   86f50:	f7ff fe12 	bl	86b78 <_Balloc>
   86f54:	2300      	movs	r3, #0
   86f56:	4606      	mov	r6, r0
   86f58:	f100 0214 	add.w	r2, r0, #20
   86f5c:	4553      	cmp	r3, sl
   86f5e:	da04      	bge.n	86f6a <__lshift+0x42>
   86f60:	2100      	movs	r1, #0
   86f62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   86f66:	3301      	adds	r3, #1
   86f68:	e7f8      	b.n	86f5c <__lshift+0x34>
   86f6a:	6920      	ldr	r0, [r4, #16]
   86f6c:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
   86f70:	f104 0314 	add.w	r3, r4, #20
   86f74:	f015 0c1f 	ands.w	ip, r5, #31
   86f78:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   86f7c:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
   86f80:	d016      	beq.n	86fb0 <__lshift+0x88>
   86f82:	f1cc 0a20 	rsb	sl, ip, #32
   86f86:	2500      	movs	r5, #0
   86f88:	6818      	ldr	r0, [r3, #0]
   86f8a:	460a      	mov	r2, r1
   86f8c:	fa00 f00c 	lsl.w	r0, r0, ip
   86f90:	4305      	orrs	r5, r0
   86f92:	f842 5b04 	str.w	r5, [r2], #4
   86f96:	f853 5b04 	ldr.w	r5, [r3], #4
   86f9a:	4573      	cmp	r3, lr
   86f9c:	fa25 f50a 	lsr.w	r5, r5, sl
   86fa0:	d201      	bcs.n	86fa6 <__lshift+0x7e>
   86fa2:	4611      	mov	r1, r2
   86fa4:	e7f0      	b.n	86f88 <__lshift+0x60>
   86fa6:	604d      	str	r5, [r1, #4]
   86fa8:	b145      	cbz	r5, 86fbc <__lshift+0x94>
   86faa:	f109 0702 	add.w	r7, r9, #2
   86fae:	e005      	b.n	86fbc <__lshift+0x94>
   86fb0:	f853 2b04 	ldr.w	r2, [r3], #4
   86fb4:	4573      	cmp	r3, lr
   86fb6:	f841 2b04 	str.w	r2, [r1], #4
   86fba:	d3f9      	bcc.n	86fb0 <__lshift+0x88>
   86fbc:	3f01      	subs	r7, #1
   86fbe:	4640      	mov	r0, r8
   86fc0:	6137      	str	r7, [r6, #16]
   86fc2:	4621      	mov	r1, r4
   86fc4:	f7ff fdfe 	bl	86bc4 <_Bfree>
   86fc8:	4630      	mov	r0, r6
   86fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00086fce <__mcmp>:
   86fce:	6902      	ldr	r2, [r0, #16]
   86fd0:	690b      	ldr	r3, [r1, #16]
   86fd2:	b510      	push	{r4, lr}
   86fd4:	1ad2      	subs	r2, r2, r3
   86fd6:	d113      	bne.n	87000 <__mcmp+0x32>
   86fd8:	009c      	lsls	r4, r3, #2
   86fda:	3014      	adds	r0, #20
   86fdc:	f101 0214 	add.w	r2, r1, #20
   86fe0:	1903      	adds	r3, r0, r4
   86fe2:	4422      	add	r2, r4
   86fe4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   86fe8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   86fec:	428c      	cmp	r4, r1
   86fee:	d003      	beq.n	86ff8 <__mcmp+0x2a>
   86ff0:	d208      	bcs.n	87004 <__mcmp+0x36>
   86ff2:	f04f 30ff 	mov.w	r0, #4294967295
   86ff6:	bd10      	pop	{r4, pc}
   86ff8:	4298      	cmp	r0, r3
   86ffa:	d3f3      	bcc.n	86fe4 <__mcmp+0x16>
   86ffc:	2000      	movs	r0, #0
   86ffe:	bd10      	pop	{r4, pc}
   87000:	4610      	mov	r0, r2
   87002:	bd10      	pop	{r4, pc}
   87004:	2001      	movs	r0, #1
   87006:	bd10      	pop	{r4, pc}

00087008 <__mdiff>:
   87008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8700c:	4606      	mov	r6, r0
   8700e:	460c      	mov	r4, r1
   87010:	4608      	mov	r0, r1
   87012:	4611      	mov	r1, r2
   87014:	4615      	mov	r5, r2
   87016:	f7ff ffda 	bl	86fce <__mcmp>
   8701a:	1e07      	subs	r7, r0, #0
   8701c:	d108      	bne.n	87030 <__mdiff+0x28>
   8701e:	4630      	mov	r0, r6
   87020:	4639      	mov	r1, r7
   87022:	f7ff fda9 	bl	86b78 <_Balloc>
   87026:	2301      	movs	r3, #1
   87028:	6103      	str	r3, [r0, #16]
   8702a:	6147      	str	r7, [r0, #20]
   8702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87030:	db01      	blt.n	87036 <__mdiff+0x2e>
   87032:	2700      	movs	r7, #0
   87034:	e003      	b.n	8703e <__mdiff+0x36>
   87036:	4623      	mov	r3, r4
   87038:	2701      	movs	r7, #1
   8703a:	462c      	mov	r4, r5
   8703c:	461d      	mov	r5, r3
   8703e:	6861      	ldr	r1, [r4, #4]
   87040:	4630      	mov	r0, r6
   87042:	f7ff fd99 	bl	86b78 <_Balloc>
   87046:	6922      	ldr	r2, [r4, #16]
   87048:	692b      	ldr	r3, [r5, #16]
   8704a:	3414      	adds	r4, #20
   8704c:	f105 0614 	add.w	r6, r5, #20
   87050:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
   87054:	60c7      	str	r7, [r0, #12]
   87056:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
   8705a:	f100 0314 	add.w	r3, r0, #20
   8705e:	2100      	movs	r1, #0
   87060:	f854 7b04 	ldr.w	r7, [r4], #4
   87064:	f856 9b04 	ldr.w	r9, [r6], #4
   87068:	fa1f f887 	uxth.w	r8, r7
   8706c:	fa1f f589 	uxth.w	r5, r9
   87070:	4441      	add	r1, r8
   87072:	ea4f 4919 	mov.w	r9, r9, lsr #16
   87076:	ebc5 0801 	rsb	r8, r5, r1
   8707a:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
   8707e:	eb07 4728 	add.w	r7, r7, r8, asr #16
   87082:	fa1f f888 	uxth.w	r8, r8
   87086:	1439      	asrs	r1, r7, #16
   87088:	45b2      	cmp	sl, r6
   8708a:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   8708e:	4625      	mov	r5, r4
   87090:	f843 7b04 	str.w	r7, [r3], #4
   87094:	d8e4      	bhi.n	87060 <__mdiff+0x58>
   87096:	4565      	cmp	r5, ip
   87098:	d20d      	bcs.n	870b6 <__mdiff+0xae>
   8709a:	f855 4b04 	ldr.w	r4, [r5], #4
   8709e:	b2a6      	uxth	r6, r4
   870a0:	440e      	add	r6, r1
   870a2:	0c24      	lsrs	r4, r4, #16
   870a4:	eb04 4426 	add.w	r4, r4, r6, asr #16
   870a8:	b2b6      	uxth	r6, r6
   870aa:	1421      	asrs	r1, r4, #16
   870ac:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   870b0:	f843 4b04 	str.w	r4, [r3], #4
   870b4:	e7ef      	b.n	87096 <__mdiff+0x8e>
   870b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   870ba:	b909      	cbnz	r1, 870c0 <__mdiff+0xb8>
   870bc:	3a01      	subs	r2, #1
   870be:	e7fa      	b.n	870b6 <__mdiff+0xae>
   870c0:	6102      	str	r2, [r0, #16]
   870c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000870c6 <__ulp>:
   870c6:	4b0f      	ldr	r3, [pc, #60]	; (87104 <__ulp+0x3e>)
   870c8:	400b      	ands	r3, r1
   870ca:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   870ce:	2b00      	cmp	r3, #0
   870d0:	dd01      	ble.n	870d6 <__ulp+0x10>
   870d2:	4619      	mov	r1, r3
   870d4:	e009      	b.n	870ea <__ulp+0x24>
   870d6:	425b      	negs	r3, r3
   870d8:	151b      	asrs	r3, r3, #20
   870da:	2b13      	cmp	r3, #19
   870dc:	f04f 0100 	mov.w	r1, #0
   870e0:	dc05      	bgt.n	870ee <__ulp+0x28>
   870e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   870e6:	fa42 f103 	asr.w	r1, r2, r3
   870ea:	2000      	movs	r0, #0
   870ec:	4770      	bx	lr
   870ee:	2b32      	cmp	r3, #50	; 0x32
   870f0:	f04f 0201 	mov.w	r2, #1
   870f4:	bfda      	itte	le
   870f6:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
   870fa:	fa02 f303 	lslle.w	r3, r2, r3
   870fe:	4613      	movgt	r3, r2
   87100:	4618      	mov	r0, r3
   87102:	4770      	bx	lr
   87104:	7ff00000 	.word	0x7ff00000

00087108 <__b2d>:
   87108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8710c:	6906      	ldr	r6, [r0, #16]
   8710e:	f100 0714 	add.w	r7, r0, #20
   87112:	eb07 0686 	add.w	r6, r7, r6, lsl #2
   87116:	f856 4c04 	ldr.w	r4, [r6, #-4]
   8711a:	4688      	mov	r8, r1
   8711c:	4620      	mov	r0, r4
   8711e:	f7ff fdd6 	bl	86cce <__hi0bits>
   87122:	f1c0 0320 	rsb	r3, r0, #32
   87126:	280a      	cmp	r0, #10
   87128:	f1a6 0504 	sub.w	r5, r6, #4
   8712c:	f8c8 3000 	str.w	r3, [r8]
   87130:	dc14      	bgt.n	8715c <__b2d+0x54>
   87132:	42bd      	cmp	r5, r7
   87134:	f1c0 010b 	rsb	r1, r0, #11
   87138:	bf88      	it	hi
   8713a:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
   8713e:	fa24 fc01 	lsr.w	ip, r4, r1
   87142:	bf98      	it	ls
   87144:	2500      	movls	r5, #0
   87146:	3015      	adds	r0, #21
   87148:	fa25 f101 	lsr.w	r1, r5, r1
   8714c:	4084      	lsls	r4, r0
   8714e:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
   87152:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   87156:	ea41 0204 	orr.w	r2, r1, r4
   8715a:	e024      	b.n	871a6 <__b2d+0x9e>
   8715c:	42bd      	cmp	r5, r7
   8715e:	bf86      	itte	hi
   87160:	f1a6 0508 	subhi.w	r5, r6, #8
   87164:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
   87168:	2100      	movls	r1, #0
   8716a:	f1b0 060b 	subs.w	r6, r0, #11
   8716e:	d015      	beq.n	8719c <__b2d+0x94>
   87170:	40b4      	lsls	r4, r6
   87172:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
   87176:	fa21 fc00 	lsr.w	ip, r1, r0
   8717a:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   8717e:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   87182:	42bd      	cmp	r5, r7
   87184:	ea44 030c 	orr.w	r3, r4, ip
   87188:	bf8c      	ite	hi
   8718a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   8718e:	2400      	movls	r4, #0
   87190:	fa24 f000 	lsr.w	r0, r4, r0
   87194:	40b1      	lsls	r1, r6
   87196:	ea40 0201 	orr.w	r2, r0, r1
   8719a:	e004      	b.n	871a6 <__b2d+0x9e>
   8719c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   871a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   871a4:	460a      	mov	r2, r1
   871a6:	4610      	mov	r0, r2
   871a8:	4619      	mov	r1, r3
   871aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000871ae <__d2b>:
   871ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   871b2:	2101      	movs	r1, #1
   871b4:	461d      	mov	r5, r3
   871b6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   871ba:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   871be:	4614      	mov	r4, r2
   871c0:	f7ff fcda 	bl	86b78 <_Balloc>
   871c4:	f3c5 570a 	ubfx	r7, r5, #20, #11
   871c8:	4606      	mov	r6, r0
   871ca:	f3c5 0313 	ubfx	r3, r5, #0, #20
   871ce:	b10f      	cbz	r7, 871d4 <__d2b+0x26>
   871d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   871d4:	9301      	str	r3, [sp, #4]
   871d6:	b1d4      	cbz	r4, 8720e <__d2b+0x60>
   871d8:	a802      	add	r0, sp, #8
   871da:	f840 4d08 	str.w	r4, [r0, #-8]!
   871de:	4668      	mov	r0, sp
   871e0:	f7ff fd95 	bl	86d0e <__lo0bits>
   871e4:	9b00      	ldr	r3, [sp, #0]
   871e6:	b148      	cbz	r0, 871fc <__d2b+0x4e>
   871e8:	9a01      	ldr	r2, [sp, #4]
   871ea:	f1c0 0120 	rsb	r1, r0, #32
   871ee:	fa02 f101 	lsl.w	r1, r2, r1
   871f2:	40c2      	lsrs	r2, r0
   871f4:	430b      	orrs	r3, r1
   871f6:	6173      	str	r3, [r6, #20]
   871f8:	9201      	str	r2, [sp, #4]
   871fa:	e000      	b.n	871fe <__d2b+0x50>
   871fc:	6173      	str	r3, [r6, #20]
   871fe:	9b01      	ldr	r3, [sp, #4]
   87200:	2b00      	cmp	r3, #0
   87202:	bf0c      	ite	eq
   87204:	2401      	moveq	r4, #1
   87206:	2402      	movne	r4, #2
   87208:	61b3      	str	r3, [r6, #24]
   8720a:	6134      	str	r4, [r6, #16]
   8720c:	e007      	b.n	8721e <__d2b+0x70>
   8720e:	a801      	add	r0, sp, #4
   87210:	f7ff fd7d 	bl	86d0e <__lo0bits>
   87214:	9b01      	ldr	r3, [sp, #4]
   87216:	2401      	movs	r4, #1
   87218:	6173      	str	r3, [r6, #20]
   8721a:	6134      	str	r4, [r6, #16]
   8721c:	3020      	adds	r0, #32
   8721e:	b13f      	cbz	r7, 87230 <__d2b+0x82>
   87220:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   87224:	4407      	add	r7, r0
   87226:	f8c9 7000 	str.w	r7, [r9]
   8722a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8722e:	e00a      	b.n	87246 <__d2b+0x98>
   87230:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   87234:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   87238:	f8c9 0000 	str.w	r0, [r9]
   8723c:	6918      	ldr	r0, [r3, #16]
   8723e:	f7ff fd46 	bl	86cce <__hi0bits>
   87242:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   87246:	f8c8 0000 	str.w	r0, [r8]
   8724a:	4630      	mov	r0, r6
   8724c:	b003      	add	sp, #12
   8724e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00087252 <__ratio>:
   87252:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   87256:	460e      	mov	r6, r1
   87258:	4669      	mov	r1, sp
   8725a:	4680      	mov	r8, r0
   8725c:	f7ff ff54 	bl	87108 <__b2d>
   87260:	460d      	mov	r5, r1
   87262:	4604      	mov	r4, r0
   87264:	a901      	add	r1, sp, #4
   87266:	4630      	mov	r0, r6
   87268:	f7ff ff4e 	bl	87108 <__b2d>
   8726c:	9f00      	ldr	r7, [sp, #0]
   8726e:	460b      	mov	r3, r1
   87270:	9901      	ldr	r1, [sp, #4]
   87272:	4602      	mov	r2, r0
   87274:	1a7f      	subs	r7, r7, r1
   87276:	f8d8 0010 	ldr.w	r0, [r8, #16]
   8727a:	6931      	ldr	r1, [r6, #16]
   8727c:	1a41      	subs	r1, r0, r1
   8727e:	eb07 1141 	add.w	r1, r7, r1, lsl #5
   87282:	2900      	cmp	r1, #0
   87284:	bfcc      	ite	gt
   87286:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
   8728a:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
   8728e:	4620      	mov	r0, r4
   87290:	4629      	mov	r1, r5
   87292:	f7fb ff05 	bl	830a0 <__aeabi_ddiv>
   87296:	b002      	add	sp, #8
   87298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008729c <_mprec_log10>:
   8729c:	2817      	cmp	r0, #23
   8729e:	b510      	push	{r4, lr}
   872a0:	4604      	mov	r4, r0
   872a2:	dc05      	bgt.n	872b0 <_mprec_log10+0x14>
   872a4:	4b07      	ldr	r3, [pc, #28]	; (872c4 <_mprec_log10+0x28>)
   872a6:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
   872aa:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   872ae:	bd10      	pop	{r4, pc}
   872b0:	4905      	ldr	r1, [pc, #20]	; (872c8 <_mprec_log10+0x2c>)
   872b2:	2000      	movs	r0, #0
   872b4:	2200      	movs	r2, #0
   872b6:	4b05      	ldr	r3, [pc, #20]	; (872cc <_mprec_log10+0x30>)
   872b8:	f7fb fdc8 	bl	82e4c <__aeabi_dmul>
   872bc:	3c01      	subs	r4, #1
   872be:	d1f9      	bne.n	872b4 <_mprec_log10+0x18>
   872c0:	bd10      	pop	{r4, pc}
   872c2:	bf00      	nop
   872c4:	00088cc0 	.word	0x00088cc0
   872c8:	3ff00000 	.word	0x3ff00000
   872cc:	40240000 	.word	0x40240000

000872d0 <__copybits>:
   872d0:	b510      	push	{r4, lr}
   872d2:	3901      	subs	r1, #1
   872d4:	f102 0314 	add.w	r3, r2, #20
   872d8:	1149      	asrs	r1, r1, #5
   872da:	6912      	ldr	r2, [r2, #16]
   872dc:	3101      	adds	r1, #1
   872de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   872e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   872e6:	4293      	cmp	r3, r2
   872e8:	d204      	bcs.n	872f4 <__copybits+0x24>
   872ea:	f853 4b04 	ldr.w	r4, [r3], #4
   872ee:	f840 4b04 	str.w	r4, [r0], #4
   872f2:	e7f8      	b.n	872e6 <__copybits+0x16>
   872f4:	4288      	cmp	r0, r1
   872f6:	d203      	bcs.n	87300 <__copybits+0x30>
   872f8:	2300      	movs	r3, #0
   872fa:	f840 3b04 	str.w	r3, [r0], #4
   872fe:	e7f9      	b.n	872f4 <__copybits+0x24>
   87300:	bd10      	pop	{r4, pc}

00087302 <__any_on>:
   87302:	f100 0214 	add.w	r2, r0, #20
   87306:	6900      	ldr	r0, [r0, #16]
   87308:	114b      	asrs	r3, r1, #5
   8730a:	4283      	cmp	r3, r0
   8730c:	b510      	push	{r4, lr}
   8730e:	dc0c      	bgt.n	8732a <__any_on+0x28>
   87310:	da0c      	bge.n	8732c <__any_on+0x2a>
   87312:	f011 011f 	ands.w	r1, r1, #31
   87316:	d009      	beq.n	8732c <__any_on+0x2a>
   87318:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   8731c:	fa20 f401 	lsr.w	r4, r0, r1
   87320:	fa04 f101 	lsl.w	r1, r4, r1
   87324:	4281      	cmp	r1, r0
   87326:	d10e      	bne.n	87346 <__any_on+0x44>
   87328:	e000      	b.n	8732c <__any_on+0x2a>
   8732a:	4603      	mov	r3, r0
   8732c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   87330:	4293      	cmp	r3, r2
   87332:	4619      	mov	r1, r3
   87334:	d905      	bls.n	87342 <__any_on+0x40>
   87336:	f851 1c04 	ldr.w	r1, [r1, #-4]
   8733a:	3b04      	subs	r3, #4
   8733c:	2900      	cmp	r1, #0
   8733e:	d0f7      	beq.n	87330 <__any_on+0x2e>
   87340:	e001      	b.n	87346 <__any_on+0x44>
   87342:	2000      	movs	r0, #0
   87344:	bd10      	pop	{r4, pc}
   87346:	2001      	movs	r0, #1
   87348:	bd10      	pop	{r4, pc}
   8734a:	bf00      	nop

0008734c <_realloc_r>:
   8734c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87350:	4681      	mov	r9, r0
   87352:	460c      	mov	r4, r1
   87354:	b929      	cbnz	r1, 87362 <_realloc_r+0x16>
   87356:	4611      	mov	r1, r2
   87358:	b003      	add	sp, #12
   8735a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8735e:	f7ff b973 	b.w	86648 <_malloc_r>
   87362:	9201      	str	r2, [sp, #4]
   87364:	f7ff fc05 	bl	86b72 <__malloc_lock>
   87368:	9a01      	ldr	r2, [sp, #4]
   8736a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   8736e:	f102 070b 	add.w	r7, r2, #11
   87372:	2f16      	cmp	r7, #22
   87374:	f1a4 0808 	sub.w	r8, r4, #8
   87378:	f025 0603 	bic.w	r6, r5, #3
   8737c:	d903      	bls.n	87386 <_realloc_r+0x3a>
   8737e:	f037 0707 	bics.w	r7, r7, #7
   87382:	d501      	bpl.n	87388 <_realloc_r+0x3c>
   87384:	e002      	b.n	8738c <_realloc_r+0x40>
   87386:	2710      	movs	r7, #16
   87388:	4297      	cmp	r7, r2
   8738a:	d204      	bcs.n	87396 <_realloc_r+0x4a>
   8738c:	230c      	movs	r3, #12
   8738e:	f8c9 3000 	str.w	r3, [r9]
   87392:	2000      	movs	r0, #0
   87394:	e180      	b.n	87698 <_realloc_r+0x34c>
   87396:	42be      	cmp	r6, r7
   87398:	f280 8156 	bge.w	87648 <_realloc_r+0x2fc>
   8739c:	49a3      	ldr	r1, [pc, #652]	; (8762c <_realloc_r+0x2e0>)
   8739e:	eb08 0306 	add.w	r3, r8, r6
   873a2:	f8d1 e008 	ldr.w	lr, [r1, #8]
   873a6:	468b      	mov	fp, r1
   873a8:	4573      	cmp	r3, lr
   873aa:	6858      	ldr	r0, [r3, #4]
   873ac:	d005      	beq.n	873ba <_realloc_r+0x6e>
   873ae:	f020 0101 	bic.w	r1, r0, #1
   873b2:	4419      	add	r1, r3
   873b4:	6849      	ldr	r1, [r1, #4]
   873b6:	07c9      	lsls	r1, r1, #31
   873b8:	d425      	bmi.n	87406 <_realloc_r+0xba>
   873ba:	f020 0003 	bic.w	r0, r0, #3
   873be:	4573      	cmp	r3, lr
   873c0:	eb00 0106 	add.w	r1, r0, r6
   873c4:	d117      	bne.n	873f6 <_realloc_r+0xaa>
   873c6:	f107 0c10 	add.w	ip, r7, #16
   873ca:	4561      	cmp	r1, ip
   873cc:	db1d      	blt.n	8740a <_realloc_r+0xbe>
   873ce:	1bc9      	subs	r1, r1, r7
   873d0:	eb08 0507 	add.w	r5, r8, r7
   873d4:	f041 0101 	orr.w	r1, r1, #1
   873d8:	f8cb 5008 	str.w	r5, [fp, #8]
   873dc:	6069      	str	r1, [r5, #4]
   873de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   873e2:	4648      	mov	r0, r9
   873e4:	f003 0301 	and.w	r3, r3, #1
   873e8:	431f      	orrs	r7, r3
   873ea:	f844 7c04 	str.w	r7, [r4, #-4]
   873ee:	f7ff fbc1 	bl	86b74 <__malloc_unlock>
   873f2:	4620      	mov	r0, r4
   873f4:	e150      	b.n	87698 <_realloc_r+0x34c>
   873f6:	42b9      	cmp	r1, r7
   873f8:	db07      	blt.n	8740a <_realloc_r+0xbe>
   873fa:	68da      	ldr	r2, [r3, #12]
   873fc:	689b      	ldr	r3, [r3, #8]
   873fe:	460e      	mov	r6, r1
   87400:	60da      	str	r2, [r3, #12]
   87402:	6093      	str	r3, [r2, #8]
   87404:	e120      	b.n	87648 <_realloc_r+0x2fc>
   87406:	2000      	movs	r0, #0
   87408:	4603      	mov	r3, r0
   8740a:	07e9      	lsls	r1, r5, #31
   8740c:	f100 80cb 	bmi.w	875a6 <_realloc_r+0x25a>
   87410:	f854 5c08 	ldr.w	r5, [r4, #-8]
   87414:	ebc5 0508 	rsb	r5, r5, r8
   87418:	6869      	ldr	r1, [r5, #4]
   8741a:	f021 0103 	bic.w	r1, r1, #3
   8741e:	eb01 0a06 	add.w	sl, r1, r6
   87422:	2b00      	cmp	r3, #0
   87424:	f000 808a 	beq.w	8753c <_realloc_r+0x1f0>
   87428:	4573      	cmp	r3, lr
   8742a:	d14d      	bne.n	874c8 <_realloc_r+0x17c>
   8742c:	eb0a 0300 	add.w	r3, sl, r0
   87430:	f107 0110 	add.w	r1, r7, #16
   87434:	428b      	cmp	r3, r1
   87436:	f2c0 8081 	blt.w	8753c <_realloc_r+0x1f0>
   8743a:	46a8      	mov	r8, r5
   8743c:	68ea      	ldr	r2, [r5, #12]
   8743e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   87442:	60ca      	str	r2, [r1, #12]
   87444:	6091      	str	r1, [r2, #8]
   87446:	1f32      	subs	r2, r6, #4
   87448:	2a24      	cmp	r2, #36	; 0x24
   8744a:	d826      	bhi.n	8749a <_realloc_r+0x14e>
   8744c:	2a13      	cmp	r2, #19
   8744e:	d91c      	bls.n	8748a <_realloc_r+0x13e>
   87450:	6821      	ldr	r1, [r4, #0]
   87452:	2a1b      	cmp	r2, #27
   87454:	60a9      	str	r1, [r5, #8]
   87456:	6861      	ldr	r1, [r4, #4]
   87458:	60e9      	str	r1, [r5, #12]
   8745a:	d803      	bhi.n	87464 <_realloc_r+0x118>
   8745c:	f105 0210 	add.w	r2, r5, #16
   87460:	3408      	adds	r4, #8
   87462:	e013      	b.n	8748c <_realloc_r+0x140>
   87464:	68a1      	ldr	r1, [r4, #8]
   87466:	2a24      	cmp	r2, #36	; 0x24
   87468:	6129      	str	r1, [r5, #16]
   8746a:	68e1      	ldr	r1, [r4, #12]
   8746c:	6169      	str	r1, [r5, #20]
   8746e:	d003      	beq.n	87478 <_realloc_r+0x12c>
   87470:	f105 0218 	add.w	r2, r5, #24
   87474:	3410      	adds	r4, #16
   87476:	e009      	b.n	8748c <_realloc_r+0x140>
   87478:	6922      	ldr	r2, [r4, #16]
   8747a:	3418      	adds	r4, #24
   8747c:	61aa      	str	r2, [r5, #24]
   8747e:	f854 1c04 	ldr.w	r1, [r4, #-4]
   87482:	f105 0220 	add.w	r2, r5, #32
   87486:	61e9      	str	r1, [r5, #28]
   87488:	e000      	b.n	8748c <_realloc_r+0x140>
   8748a:	4642      	mov	r2, r8
   8748c:	6821      	ldr	r1, [r4, #0]
   8748e:	6011      	str	r1, [r2, #0]
   87490:	6861      	ldr	r1, [r4, #4]
   87492:	6051      	str	r1, [r2, #4]
   87494:	68a1      	ldr	r1, [r4, #8]
   87496:	6091      	str	r1, [r2, #8]
   87498:	e005      	b.n	874a6 <_realloc_r+0x15a>
   8749a:	4640      	mov	r0, r8
   8749c:	4621      	mov	r1, r4
   8749e:	9301      	str	r3, [sp, #4]
   874a0:	f7ff fb4c 	bl	86b3c <memmove>
   874a4:	9b01      	ldr	r3, [sp, #4]
   874a6:	1bdb      	subs	r3, r3, r7
   874a8:	19ea      	adds	r2, r5, r7
   874aa:	f043 0301 	orr.w	r3, r3, #1
   874ae:	f8cb 2008 	str.w	r2, [fp, #8]
   874b2:	6053      	str	r3, [r2, #4]
   874b4:	686b      	ldr	r3, [r5, #4]
   874b6:	4648      	mov	r0, r9
   874b8:	f003 0301 	and.w	r3, r3, #1
   874bc:	431f      	orrs	r7, r3
   874be:	606f      	str	r7, [r5, #4]
   874c0:	f7ff fb58 	bl	86b74 <__malloc_unlock>
   874c4:	4640      	mov	r0, r8
   874c6:	e0e7      	b.n	87698 <_realloc_r+0x34c>
   874c8:	eb0a 0b00 	add.w	fp, sl, r0
   874cc:	45bb      	cmp	fp, r7
   874ce:	db35      	blt.n	8753c <_realloc_r+0x1f0>
   874d0:	68da      	ldr	r2, [r3, #12]
   874d2:	689b      	ldr	r3, [r3, #8]
   874d4:	4628      	mov	r0, r5
   874d6:	60da      	str	r2, [r3, #12]
   874d8:	6093      	str	r3, [r2, #8]
   874da:	f850 2f08 	ldr.w	r2, [r0, #8]!
   874de:	68eb      	ldr	r3, [r5, #12]
   874e0:	60d3      	str	r3, [r2, #12]
   874e2:	609a      	str	r2, [r3, #8]
   874e4:	1f32      	subs	r2, r6, #4
   874e6:	2a24      	cmp	r2, #36	; 0x24
   874e8:	d823      	bhi.n	87532 <_realloc_r+0x1e6>
   874ea:	2a13      	cmp	r2, #19
   874ec:	d91a      	bls.n	87524 <_realloc_r+0x1d8>
   874ee:	6823      	ldr	r3, [r4, #0]
   874f0:	2a1b      	cmp	r2, #27
   874f2:	60ab      	str	r3, [r5, #8]
   874f4:	6863      	ldr	r3, [r4, #4]
   874f6:	60eb      	str	r3, [r5, #12]
   874f8:	d803      	bhi.n	87502 <_realloc_r+0x1b6>
   874fa:	f105 0010 	add.w	r0, r5, #16
   874fe:	3408      	adds	r4, #8
   87500:	e010      	b.n	87524 <_realloc_r+0x1d8>
   87502:	68a3      	ldr	r3, [r4, #8]
   87504:	2a24      	cmp	r2, #36	; 0x24
   87506:	612b      	str	r3, [r5, #16]
   87508:	68e3      	ldr	r3, [r4, #12]
   8750a:	616b      	str	r3, [r5, #20]
   8750c:	d003      	beq.n	87516 <_realloc_r+0x1ca>
   8750e:	f105 0018 	add.w	r0, r5, #24
   87512:	3410      	adds	r4, #16
   87514:	e006      	b.n	87524 <_realloc_r+0x1d8>
   87516:	6923      	ldr	r3, [r4, #16]
   87518:	f105 0020 	add.w	r0, r5, #32
   8751c:	61ab      	str	r3, [r5, #24]
   8751e:	6963      	ldr	r3, [r4, #20]
   87520:	3418      	adds	r4, #24
   87522:	61eb      	str	r3, [r5, #28]
   87524:	6823      	ldr	r3, [r4, #0]
   87526:	6003      	str	r3, [r0, #0]
   87528:	6863      	ldr	r3, [r4, #4]
   8752a:	6043      	str	r3, [r0, #4]
   8752c:	68a3      	ldr	r3, [r4, #8]
   8752e:	6083      	str	r3, [r0, #8]
   87530:	e002      	b.n	87538 <_realloc_r+0x1ec>
   87532:	4621      	mov	r1, r4
   87534:	f7ff fb02 	bl	86b3c <memmove>
   87538:	465e      	mov	r6, fp
   8753a:	e02e      	b.n	8759a <_realloc_r+0x24e>
   8753c:	45ba      	cmp	sl, r7
   8753e:	db32      	blt.n	875a6 <_realloc_r+0x25a>
   87540:	4628      	mov	r0, r5
   87542:	f850 2f08 	ldr.w	r2, [r0, #8]!
   87546:	68eb      	ldr	r3, [r5, #12]
   87548:	60d3      	str	r3, [r2, #12]
   8754a:	609a      	str	r2, [r3, #8]
   8754c:	1f32      	subs	r2, r6, #4
   8754e:	2a24      	cmp	r2, #36	; 0x24
   87550:	d825      	bhi.n	8759e <_realloc_r+0x252>
   87552:	2a13      	cmp	r2, #19
   87554:	d91a      	bls.n	8758c <_realloc_r+0x240>
   87556:	6823      	ldr	r3, [r4, #0]
   87558:	2a1b      	cmp	r2, #27
   8755a:	60ab      	str	r3, [r5, #8]
   8755c:	6863      	ldr	r3, [r4, #4]
   8755e:	60eb      	str	r3, [r5, #12]
   87560:	d803      	bhi.n	8756a <_realloc_r+0x21e>
   87562:	f105 0010 	add.w	r0, r5, #16
   87566:	3408      	adds	r4, #8
   87568:	e010      	b.n	8758c <_realloc_r+0x240>
   8756a:	68a3      	ldr	r3, [r4, #8]
   8756c:	2a24      	cmp	r2, #36	; 0x24
   8756e:	612b      	str	r3, [r5, #16]
   87570:	68e3      	ldr	r3, [r4, #12]
   87572:	616b      	str	r3, [r5, #20]
   87574:	d003      	beq.n	8757e <_realloc_r+0x232>
   87576:	f105 0018 	add.w	r0, r5, #24
   8757a:	3410      	adds	r4, #16
   8757c:	e006      	b.n	8758c <_realloc_r+0x240>
   8757e:	6923      	ldr	r3, [r4, #16]
   87580:	f105 0020 	add.w	r0, r5, #32
   87584:	61ab      	str	r3, [r5, #24]
   87586:	6963      	ldr	r3, [r4, #20]
   87588:	3418      	adds	r4, #24
   8758a:	61eb      	str	r3, [r5, #28]
   8758c:	6823      	ldr	r3, [r4, #0]
   8758e:	6003      	str	r3, [r0, #0]
   87590:	6863      	ldr	r3, [r4, #4]
   87592:	6043      	str	r3, [r0, #4]
   87594:	68a3      	ldr	r3, [r4, #8]
   87596:	6083      	str	r3, [r0, #8]
   87598:	4656      	mov	r6, sl
   8759a:	46a8      	mov	r8, r5
   8759c:	e054      	b.n	87648 <_realloc_r+0x2fc>
   8759e:	4621      	mov	r1, r4
   875a0:	f7ff facc 	bl	86b3c <memmove>
   875a4:	e7f8      	b.n	87598 <_realloc_r+0x24c>
   875a6:	4648      	mov	r0, r9
   875a8:	4611      	mov	r1, r2
   875aa:	f7ff f84d 	bl	86648 <_malloc_r>
   875ae:	4605      	mov	r5, r0
   875b0:	2800      	cmp	r0, #0
   875b2:	d044      	beq.n	8763e <_realloc_r+0x2f2>
   875b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   875b8:	f1a0 0208 	sub.w	r2, r0, #8
   875bc:	f023 0301 	bic.w	r3, r3, #1
   875c0:	4443      	add	r3, r8
   875c2:	429a      	cmp	r2, r3
   875c4:	d105      	bne.n	875d2 <_realloc_r+0x286>
   875c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   875ca:	f023 0303 	bic.w	r3, r3, #3
   875ce:	441e      	add	r6, r3
   875d0:	e03a      	b.n	87648 <_realloc_r+0x2fc>
   875d2:	1f32      	subs	r2, r6, #4
   875d4:	2a24      	cmp	r2, #36	; 0x24
   875d6:	d82b      	bhi.n	87630 <_realloc_r+0x2e4>
   875d8:	2a13      	cmp	r2, #19
   875da:	d91e      	bls.n	8761a <_realloc_r+0x2ce>
   875dc:	6823      	ldr	r3, [r4, #0]
   875de:	2a1b      	cmp	r2, #27
   875e0:	6003      	str	r3, [r0, #0]
   875e2:	6863      	ldr	r3, [r4, #4]
   875e4:	6043      	str	r3, [r0, #4]
   875e6:	d804      	bhi.n	875f2 <_realloc_r+0x2a6>
   875e8:	f100 0308 	add.w	r3, r0, #8
   875ec:	f104 0208 	add.w	r2, r4, #8
   875f0:	e015      	b.n	8761e <_realloc_r+0x2d2>
   875f2:	68a3      	ldr	r3, [r4, #8]
   875f4:	2a24      	cmp	r2, #36	; 0x24
   875f6:	6083      	str	r3, [r0, #8]
   875f8:	68e3      	ldr	r3, [r4, #12]
   875fa:	60c3      	str	r3, [r0, #12]
   875fc:	d004      	beq.n	87608 <_realloc_r+0x2bc>
   875fe:	f100 0310 	add.w	r3, r0, #16
   87602:	f104 0210 	add.w	r2, r4, #16
   87606:	e00a      	b.n	8761e <_realloc_r+0x2d2>
   87608:	6923      	ldr	r3, [r4, #16]
   8760a:	f104 0218 	add.w	r2, r4, #24
   8760e:	6103      	str	r3, [r0, #16]
   87610:	6961      	ldr	r1, [r4, #20]
   87612:	f100 0318 	add.w	r3, r0, #24
   87616:	6141      	str	r1, [r0, #20]
   87618:	e001      	b.n	8761e <_realloc_r+0x2d2>
   8761a:	4603      	mov	r3, r0
   8761c:	4622      	mov	r2, r4
   8761e:	6811      	ldr	r1, [r2, #0]
   87620:	6019      	str	r1, [r3, #0]
   87622:	6851      	ldr	r1, [r2, #4]
   87624:	6059      	str	r1, [r3, #4]
   87626:	6892      	ldr	r2, [r2, #8]
   87628:	609a      	str	r2, [r3, #8]
   8762a:	e004      	b.n	87636 <_realloc_r+0x2ea>
   8762c:	200704c0 	.word	0x200704c0
   87630:	4621      	mov	r1, r4
   87632:	f7ff fa83 	bl	86b3c <memmove>
   87636:	4648      	mov	r0, r9
   87638:	4621      	mov	r1, r4
   8763a:	f7fe f9e3 	bl	85a04 <_free_r>
   8763e:	4648      	mov	r0, r9
   87640:	f7ff fa98 	bl	86b74 <__malloc_unlock>
   87644:	4628      	mov	r0, r5
   87646:	e027      	b.n	87698 <_realloc_r+0x34c>
   87648:	1bf3      	subs	r3, r6, r7
   8764a:	2b0f      	cmp	r3, #15
   8764c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   87650:	d913      	bls.n	8767a <_realloc_r+0x32e>
   87652:	f002 0201 	and.w	r2, r2, #1
   87656:	eb08 0107 	add.w	r1, r8, r7
   8765a:	4317      	orrs	r7, r2
   8765c:	f043 0201 	orr.w	r2, r3, #1
   87660:	f8c8 7004 	str.w	r7, [r8, #4]
   87664:	440b      	add	r3, r1
   87666:	604a      	str	r2, [r1, #4]
   87668:	685a      	ldr	r2, [r3, #4]
   8766a:	4648      	mov	r0, r9
   8766c:	f042 0201 	orr.w	r2, r2, #1
   87670:	605a      	str	r2, [r3, #4]
   87672:	3108      	adds	r1, #8
   87674:	f7fe f9c6 	bl	85a04 <_free_r>
   87678:	e009      	b.n	8768e <_realloc_r+0x342>
   8767a:	f002 0201 	and.w	r2, r2, #1
   8767e:	4332      	orrs	r2, r6
   87680:	f8c8 2004 	str.w	r2, [r8, #4]
   87684:	4446      	add	r6, r8
   87686:	6873      	ldr	r3, [r6, #4]
   87688:	f043 0301 	orr.w	r3, r3, #1
   8768c:	6073      	str	r3, [r6, #4]
   8768e:	4648      	mov	r0, r9
   87690:	f7ff fa70 	bl	86b74 <__malloc_unlock>
   87694:	f108 0008 	add.w	r0, r8, #8
   87698:	b003      	add	sp, #12
   8769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8769e:	bf00      	nop

000876a0 <lflush>:
   876a0:	8983      	ldrh	r3, [r0, #12]
   876a2:	f003 0309 	and.w	r3, r3, #9
   876a6:	2b09      	cmp	r3, #9
   876a8:	d101      	bne.n	876ae <lflush+0xe>
   876aa:	f7fd bf98 	b.w	855de <fflush>
   876ae:	2000      	movs	r0, #0
   876b0:	4770      	bx	lr

000876b2 <__srefill_r>:
   876b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   876b4:	460c      	mov	r4, r1
   876b6:	4605      	mov	r5, r0
   876b8:	b118      	cbz	r0, 876c2 <__srefill_r+0x10>
   876ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   876bc:	b90b      	cbnz	r3, 876c2 <__srefill_r+0x10>
   876be:	f7fd ffc5 	bl	8564c <__sinit>
   876c2:	89a3      	ldrh	r3, [r4, #12]
   876c4:	049f      	lsls	r7, r3, #18
   876c6:	d406      	bmi.n	876d6 <__srefill_r+0x24>
   876c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   876cc:	81a3      	strh	r3, [r4, #12]
   876ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   876d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   876d4:	6663      	str	r3, [r4, #100]	; 0x64
   876d6:	89a2      	ldrh	r2, [r4, #12]
   876d8:	2300      	movs	r3, #0
   876da:	6063      	str	r3, [r4, #4]
   876dc:	b293      	uxth	r3, r2
   876de:	069e      	lsls	r6, r3, #26
   876e0:	d45a      	bmi.n	87798 <__srefill_r+0xe6>
   876e2:	0758      	lsls	r0, r3, #29
   876e4:	d41a      	bmi.n	8771c <__srefill_r+0x6a>
   876e6:	06d9      	lsls	r1, r3, #27
   876e8:	d405      	bmi.n	876f6 <__srefill_r+0x44>
   876ea:	2309      	movs	r3, #9
   876ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   876f0:	602b      	str	r3, [r5, #0]
   876f2:	81a2      	strh	r2, [r4, #12]
   876f4:	e050      	b.n	87798 <__srefill_r+0xe6>
   876f6:	071a      	lsls	r2, r3, #28
   876f8:	d50b      	bpl.n	87712 <__srefill_r+0x60>
   876fa:	4628      	mov	r0, r5
   876fc:	4621      	mov	r1, r4
   876fe:	f7fd ff5c 	bl	855ba <_fflush_r>
   87702:	2800      	cmp	r0, #0
   87704:	d148      	bne.n	87798 <__srefill_r+0xe6>
   87706:	89a3      	ldrh	r3, [r4, #12]
   87708:	60a0      	str	r0, [r4, #8]
   8770a:	f023 0308 	bic.w	r3, r3, #8
   8770e:	81a3      	strh	r3, [r4, #12]
   87710:	61a0      	str	r0, [r4, #24]
   87712:	89a3      	ldrh	r3, [r4, #12]
   87714:	f043 0304 	orr.w	r3, r3, #4
   87718:	81a3      	strh	r3, [r4, #12]
   8771a:	e010      	b.n	8773e <__srefill_r+0x8c>
   8771c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8771e:	b171      	cbz	r1, 8773e <__srefill_r+0x8c>
   87720:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87724:	4299      	cmp	r1, r3
   87726:	d002      	beq.n	8772e <__srefill_r+0x7c>
   87728:	4628      	mov	r0, r5
   8772a:	f7fe f96b 	bl	85a04 <_free_r>
   8772e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   87730:	2000      	movs	r0, #0
   87732:	6320      	str	r0, [r4, #48]	; 0x30
   87734:	6063      	str	r3, [r4, #4]
   87736:	b113      	cbz	r3, 8773e <__srefill_r+0x8c>
   87738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8773a:	6023      	str	r3, [r4, #0]
   8773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8773e:	6923      	ldr	r3, [r4, #16]
   87740:	b91b      	cbnz	r3, 8774a <__srefill_r+0x98>
   87742:	4628      	mov	r0, r5
   87744:	4621      	mov	r1, r4
   87746:	f7fe ff0b 	bl	86560 <__smakebuf_r>
   8774a:	89a7      	ldrh	r7, [r4, #12]
   8774c:	b2be      	uxth	r6, r7
   8774e:	07b3      	lsls	r3, r6, #30
   87750:	d00f      	beq.n	87772 <__srefill_r+0xc0>
   87752:	2301      	movs	r3, #1
   87754:	81a3      	strh	r3, [r4, #12]
   87756:	4b13      	ldr	r3, [pc, #76]	; (877a4 <__srefill_r+0xf2>)
   87758:	4913      	ldr	r1, [pc, #76]	; (877a8 <__srefill_r+0xf6>)
   8775a:	6818      	ldr	r0, [r3, #0]
   8775c:	f006 0609 	and.w	r6, r6, #9
   87760:	f7fe fb54 	bl	85e0c <_fwalk>
   87764:	2e09      	cmp	r6, #9
   87766:	81a7      	strh	r7, [r4, #12]
   87768:	d103      	bne.n	87772 <__srefill_r+0xc0>
   8776a:	4628      	mov	r0, r5
   8776c:	4621      	mov	r1, r4
   8776e:	f7fd fe99 	bl	854a4 <__sflush_r>
   87772:	6922      	ldr	r2, [r4, #16]
   87774:	6a26      	ldr	r6, [r4, #32]
   87776:	6022      	str	r2, [r4, #0]
   87778:	4628      	mov	r0, r5
   8777a:	69e1      	ldr	r1, [r4, #28]
   8777c:	6963      	ldr	r3, [r4, #20]
   8777e:	47b0      	blx	r6
   87780:	2800      	cmp	r0, #0
   87782:	6060      	str	r0, [r4, #4]
   87784:	dc0b      	bgt.n	8779e <__srefill_r+0xec>
   87786:	89a3      	ldrh	r3, [r4, #12]
   87788:	bf17      	itett	ne
   8778a:	2200      	movne	r2, #0
   8778c:	f043 0320 	orreq.w	r3, r3, #32
   87790:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
   87794:	6062      	strne	r2, [r4, #4]
   87796:	81a3      	strh	r3, [r4, #12]
   87798:	f04f 30ff 	mov.w	r0, #4294967295
   8779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8779e:	2000      	movs	r0, #0
   877a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   877a2:	bf00      	nop
   877a4:	00088ae4 	.word	0x00088ae4
   877a8:	000876a1 	.word	0x000876a1

000877ac <__fpclassifyd>:
   877ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   877b0:	b510      	push	{r4, lr}
   877b2:	d100      	bne.n	877b6 <__fpclassifyd+0xa>
   877b4:	b178      	cbz	r0, 877d6 <__fpclassifyd+0x2a>
   877b6:	4a0c      	ldr	r2, [pc, #48]	; (877e8 <__fpclassifyd+0x3c>)
   877b8:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   877bc:	4294      	cmp	r4, r2
   877be:	d90c      	bls.n	877da <__fpclassifyd+0x2e>
   877c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   877c4:	d30b      	bcc.n	877de <__fpclassifyd+0x32>
   877c6:	4a09      	ldr	r2, [pc, #36]	; (877ec <__fpclassifyd+0x40>)
   877c8:	4293      	cmp	r3, r2
   877ca:	d10a      	bne.n	877e2 <__fpclassifyd+0x36>
   877cc:	f1d0 0001 	rsbs	r0, r0, #1
   877d0:	bf38      	it	cc
   877d2:	2000      	movcc	r0, #0
   877d4:	bd10      	pop	{r4, pc}
   877d6:	2002      	movs	r0, #2
   877d8:	bd10      	pop	{r4, pc}
   877da:	2004      	movs	r0, #4
   877dc:	bd10      	pop	{r4, pc}
   877de:	2003      	movs	r0, #3
   877e0:	bd10      	pop	{r4, pc}
   877e2:	2000      	movs	r0, #0
   877e4:	bd10      	pop	{r4, pc}
   877e6:	bf00      	nop
   877e8:	7fdfffff 	.word	0x7fdfffff
   877ec:	7ff00000 	.word	0x7ff00000

000877f0 <_sbrk_r>:
   877f0:	b538      	push	{r3, r4, r5, lr}
   877f2:	4c06      	ldr	r4, [pc, #24]	; (8780c <_sbrk_r+0x1c>)
   877f4:	2300      	movs	r3, #0
   877f6:	4605      	mov	r5, r0
   877f8:	4608      	mov	r0, r1
   877fa:	6023      	str	r3, [r4, #0]
   877fc:	f7fb f808 	bl	82810 <_sbrk>
   87800:	1c43      	adds	r3, r0, #1
   87802:	d102      	bne.n	8780a <_sbrk_r+0x1a>
   87804:	6823      	ldr	r3, [r4, #0]
   87806:	b103      	cbz	r3, 8780a <_sbrk_r+0x1a>
   87808:	602b      	str	r3, [r5, #0]
   8780a:	bd38      	pop	{r3, r4, r5, pc}
   8780c:	2007ac40 	.word	0x2007ac40

00087810 <__sccl>:
   87810:	b5f0      	push	{r4, r5, r6, r7, lr}
   87812:	780b      	ldrb	r3, [r1, #0]
   87814:	2b5e      	cmp	r3, #94	; 0x5e
   87816:	d002      	beq.n	8781e <__sccl+0xe>
   87818:	1c4c      	adds	r4, r1, #1
   8781a:	2100      	movs	r1, #0
   8781c:	e002      	b.n	87824 <__sccl+0x14>
   8781e:	1c8c      	adds	r4, r1, #2
   87820:	784b      	ldrb	r3, [r1, #1]
   87822:	2101      	movs	r1, #1
   87824:	2200      	movs	r2, #0
   87826:	5481      	strb	r1, [r0, r2]
   87828:	3201      	adds	r2, #1
   8782a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   8782e:	d1fa      	bne.n	87826 <__sccl+0x16>
   87830:	b90b      	cbnz	r3, 87836 <__sccl+0x26>
   87832:	1e65      	subs	r5, r4, #1
   87834:	e01b      	b.n	8786e <__sccl+0x5e>
   87836:	f1c1 0701 	rsb	r7, r1, #1
   8783a:	b2fe      	uxtb	r6, r7
   8783c:	54c6      	strb	r6, [r0, r3]
   8783e:	1c62      	adds	r2, r4, #1
   87840:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   87844:	1e55      	subs	r5, r2, #1
   87846:	292d      	cmp	r1, #45	; 0x2d
   87848:	4614      	mov	r4, r2
   8784a:	d004      	beq.n	87856 <__sccl+0x46>
   8784c:	295d      	cmp	r1, #93	; 0x5d
   8784e:	d00d      	beq.n	8786c <__sccl+0x5c>
   87850:	b169      	cbz	r1, 8786e <__sccl+0x5e>
   87852:	460b      	mov	r3, r1
   87854:	e7f1      	b.n	8783a <__sccl+0x2a>
   87856:	7815      	ldrb	r5, [r2, #0]
   87858:	2d5d      	cmp	r5, #93	; 0x5d
   8785a:	d0fa      	beq.n	87852 <__sccl+0x42>
   8785c:	429d      	cmp	r5, r3
   8785e:	dbf8      	blt.n	87852 <__sccl+0x42>
   87860:	3301      	adds	r3, #1
   87862:	42ab      	cmp	r3, r5
   87864:	54c6      	strb	r6, [r0, r3]
   87866:	dbfb      	blt.n	87860 <__sccl+0x50>
   87868:	3202      	adds	r2, #2
   8786a:	e7e9      	b.n	87840 <__sccl+0x30>
   8786c:	4615      	mov	r5, r2
   8786e:	4628      	mov	r0, r5
   87870:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00087874 <nanf>:
   87874:	4800      	ldr	r0, [pc, #0]	; (87878 <nanf+0x4>)
   87876:	4770      	bx	lr
   87878:	7fc00000 	.word	0x7fc00000

0008787c <__sread>:
   8787c:	b510      	push	{r4, lr}
   8787e:	460c      	mov	r4, r1
   87880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87884:	f000 fce2 	bl	8824c <_read_r>
   87888:	2800      	cmp	r0, #0
   8788a:	db03      	blt.n	87894 <__sread+0x18>
   8788c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8788e:	4403      	add	r3, r0
   87890:	6523      	str	r3, [r4, #80]	; 0x50
   87892:	bd10      	pop	{r4, pc}
   87894:	89a3      	ldrh	r3, [r4, #12]
   87896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8789a:	81a3      	strh	r3, [r4, #12]
   8789c:	bd10      	pop	{r4, pc}

0008789e <__seofread>:
   8789e:	2000      	movs	r0, #0
   878a0:	4770      	bx	lr

000878a2 <__swrite>:
   878a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   878a6:	461d      	mov	r5, r3
   878a8:	898b      	ldrh	r3, [r1, #12]
   878aa:	4607      	mov	r7, r0
   878ac:	05db      	lsls	r3, r3, #23
   878ae:	460c      	mov	r4, r1
   878b0:	4616      	mov	r6, r2
   878b2:	d505      	bpl.n	878c0 <__swrite+0x1e>
   878b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   878b8:	2200      	movs	r2, #0
   878ba:	2302      	movs	r3, #2
   878bc:	f000 fcb4 	bl	88228 <_lseek_r>
   878c0:	89a3      	ldrh	r3, [r4, #12]
   878c2:	4638      	mov	r0, r7
   878c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   878c8:	81a3      	strh	r3, [r4, #12]
   878ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   878ce:	4632      	mov	r2, r6
   878d0:	462b      	mov	r3, r5
   878d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   878d6:	f000 bbef 	b.w	880b8 <_write_r>

000878da <__sseek>:
   878da:	b510      	push	{r4, lr}
   878dc:	460c      	mov	r4, r1
   878de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   878e2:	f000 fca1 	bl	88228 <_lseek_r>
   878e6:	1c43      	adds	r3, r0, #1
   878e8:	89a3      	ldrh	r3, [r4, #12]
   878ea:	d103      	bne.n	878f4 <__sseek+0x1a>
   878ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   878f0:	81a3      	strh	r3, [r4, #12]
   878f2:	bd10      	pop	{r4, pc}
   878f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   878f8:	81a3      	strh	r3, [r4, #12]
   878fa:	6520      	str	r0, [r4, #80]	; 0x50
   878fc:	bd10      	pop	{r4, pc}

000878fe <__sclose>:
   878fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87902:	f000 bc19 	b.w	88138 <_close_r>

00087906 <strcmp>:
   87906:	f810 2b01 	ldrb.w	r2, [r0], #1
   8790a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8790e:	2a01      	cmp	r2, #1
   87910:	bf28      	it	cs
   87912:	429a      	cmpcs	r2, r3
   87914:	d0f7      	beq.n	87906 <strcmp>
   87916:	1ad0      	subs	r0, r2, r3
   87918:	4770      	bx	lr
	...

0008791c <_strtol_r>:
   8791c:	4684      	mov	ip, r0
   8791e:	483f      	ldr	r0, [pc, #252]	; (87a1c <_strtol_r+0x100>)
   87920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87924:	f8d0 8000 	ldr.w	r8, [r0]
   87928:	460e      	mov	r6, r1
   8792a:	4634      	mov	r4, r6
   8792c:	f814 5b01 	ldrb.w	r5, [r4], #1
   87930:	eb08 0005 	add.w	r0, r8, r5
   87934:	7840      	ldrb	r0, [r0, #1]
   87936:	f000 0008 	and.w	r0, r0, #8
   8793a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   8793e:	b108      	cbz	r0, 87944 <_strtol_r+0x28>
   87940:	4626      	mov	r6, r4
   87942:	e7f2      	b.n	8792a <_strtol_r+0xe>
   87944:	2d2d      	cmp	r5, #45	; 0x2d
   87946:	d103      	bne.n	87950 <_strtol_r+0x34>
   87948:	1cb4      	adds	r4, r6, #2
   8794a:	7875      	ldrb	r5, [r6, #1]
   8794c:	2701      	movs	r7, #1
   8794e:	e003      	b.n	87958 <_strtol_r+0x3c>
   87950:	2d2b      	cmp	r5, #43	; 0x2b
   87952:	bf04      	itt	eq
   87954:	7875      	ldrbeq	r5, [r6, #1]
   87956:	1cb4      	addeq	r4, r6, #2
   87958:	f033 0010 	bics.w	r0, r3, #16
   8795c:	d10d      	bne.n	8797a <_strtol_r+0x5e>
   8795e:	2d30      	cmp	r5, #48	; 0x30
   87960:	d108      	bne.n	87974 <_strtol_r+0x58>
   87962:	7820      	ldrb	r0, [r4, #0]
   87964:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   87968:	2858      	cmp	r0, #88	; 0x58
   8796a:	d151      	bne.n	87a10 <_strtol_r+0xf4>
   8796c:	7865      	ldrb	r5, [r4, #1]
   8796e:	2310      	movs	r3, #16
   87970:	3402      	adds	r4, #2
   87972:	e002      	b.n	8797a <_strtol_r+0x5e>
   87974:	2b00      	cmp	r3, #0
   87976:	bf08      	it	eq
   87978:	230a      	moveq	r3, #10
   8797a:	2f00      	cmp	r7, #0
   8797c:	bf0c      	ite	eq
   8797e:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
   87982:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
   87986:	fbba f9f3 	udiv	r9, sl, r3
   8798a:	fb03 aa19 	mls	sl, r3, r9, sl
   8798e:	2600      	movs	r6, #0
   87990:	4630      	mov	r0, r6
   87992:	eb08 0b05 	add.w	fp, r8, r5
   87996:	f89b b001 	ldrb.w	fp, [fp, #1]
   8799a:	f01b 0f04 	tst.w	fp, #4
   8799e:	d001      	beq.n	879a4 <_strtol_r+0x88>
   879a0:	3d30      	subs	r5, #48	; 0x30
   879a2:	e00b      	b.n	879bc <_strtol_r+0xa0>
   879a4:	f01b 0b03 	ands.w	fp, fp, #3
   879a8:	d01b      	beq.n	879e2 <_strtol_r+0xc6>
   879aa:	f1bb 0f01 	cmp.w	fp, #1
   879ae:	bf14      	ite	ne
   879b0:	f04f 0b57 	movne.w	fp, #87	; 0x57
   879b4:	f04f 0b37 	moveq.w	fp, #55	; 0x37
   879b8:	ebcb 0505 	rsb	r5, fp, r5
   879bc:	429d      	cmp	r5, r3
   879be:	da10      	bge.n	879e2 <_strtol_r+0xc6>
   879c0:	f1b6 3fff 	cmp.w	r6, #4294967295
   879c4:	d00a      	beq.n	879dc <_strtol_r+0xc0>
   879c6:	4548      	cmp	r0, r9
   879c8:	d806      	bhi.n	879d8 <_strtol_r+0xbc>
   879ca:	d101      	bne.n	879d0 <_strtol_r+0xb4>
   879cc:	4555      	cmp	r5, sl
   879ce:	dc03      	bgt.n	879d8 <_strtol_r+0xbc>
   879d0:	fb03 5000 	mla	r0, r3, r0, r5
   879d4:	2601      	movs	r6, #1
   879d6:	e001      	b.n	879dc <_strtol_r+0xc0>
   879d8:	f04f 36ff 	mov.w	r6, #4294967295
   879dc:	f814 5b01 	ldrb.w	r5, [r4], #1
   879e0:	e7d7      	b.n	87992 <_strtol_r+0x76>
   879e2:	1c73      	adds	r3, r6, #1
   879e4:	d10c      	bne.n	87a00 <_strtol_r+0xe4>
   879e6:	2f00      	cmp	r7, #0
   879e8:	f04f 0322 	mov.w	r3, #34	; 0x22
   879ec:	bf0c      	ite	eq
   879ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   879f2:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   879f6:	f8cc 3000 	str.w	r3, [ip]
   879fa:	b92a      	cbnz	r2, 87a08 <_strtol_r+0xec>
   879fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a00:	b107      	cbz	r7, 87a04 <_strtol_r+0xe8>
   87a02:	4240      	negs	r0, r0
   87a04:	b142      	cbz	r2, 87a18 <_strtol_r+0xfc>
   87a06:	b106      	cbz	r6, 87a0a <_strtol_r+0xee>
   87a08:	1e61      	subs	r1, r4, #1
   87a0a:	6011      	str	r1, [r2, #0]
   87a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a10:	2b00      	cmp	r3, #0
   87a12:	bf08      	it	eq
   87a14:	2308      	moveq	r3, #8
   87a16:	e7b0      	b.n	8797a <_strtol_r+0x5e>
   87a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a1c:	20070440 	.word	0x20070440

00087a20 <strtol>:
   87a20:	b530      	push	{r4, r5, lr}
   87a22:	4613      	mov	r3, r2
   87a24:	4a04      	ldr	r2, [pc, #16]	; (87a38 <strtol+0x18>)
   87a26:	4605      	mov	r5, r0
   87a28:	460c      	mov	r4, r1
   87a2a:	6810      	ldr	r0, [r2, #0]
   87a2c:	4629      	mov	r1, r5
   87a2e:	4622      	mov	r2, r4
   87a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   87a34:	f7ff bf72 	b.w	8791c <_strtol_r>
   87a38:	20070010 	.word	0x20070010

00087a3c <_strtoll_r>:
   87a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87a40:	461f      	mov	r7, r3
   87a42:	4b5d      	ldr	r3, [pc, #372]	; (87bb8 <_strtoll_r+0x17c>)
   87a44:	b087      	sub	sp, #28
   87a46:	f8d3 b000 	ldr.w	fp, [r3]
   87a4a:	9005      	str	r0, [sp, #20]
   87a4c:	468c      	mov	ip, r1
   87a4e:	4692      	mov	sl, r2
   87a50:	460b      	mov	r3, r1
   87a52:	461e      	mov	r6, r3
   87a54:	f816 8b01 	ldrb.w	r8, [r6], #1
   87a58:	eb0b 0208 	add.w	r2, fp, r8
   87a5c:	7852      	ldrb	r2, [r2, #1]
   87a5e:	f002 0208 	and.w	r2, r2, #8
   87a62:	f002 09ff 	and.w	r9, r2, #255	; 0xff
   87a66:	b10a      	cbz	r2, 87a6c <_strtoll_r+0x30>
   87a68:	4633      	mov	r3, r6
   87a6a:	e7f2      	b.n	87a52 <_strtoll_r+0x16>
   87a6c:	f1b8 0f2d 	cmp.w	r8, #45	; 0x2d
   87a70:	d105      	bne.n	87a7e <_strtoll_r+0x42>
   87a72:	1c9e      	adds	r6, r3, #2
   87a74:	f893 8001 	ldrb.w	r8, [r3, #1]
   87a78:	f04f 0901 	mov.w	r9, #1
   87a7c:	e005      	b.n	87a8a <_strtoll_r+0x4e>
   87a7e:	f1b8 0f2b 	cmp.w	r8, #43	; 0x2b
   87a82:	bf04      	itt	eq
   87a84:	f893 8001 	ldrbeq.w	r8, [r3, #1]
   87a88:	1c9e      	addeq	r6, r3, #2
   87a8a:	f037 0210 	bics.w	r2, r7, #16
   87a8e:	d110      	bne.n	87ab2 <_strtoll_r+0x76>
   87a90:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
   87a94:	d10a      	bne.n	87aac <_strtoll_r+0x70>
   87a96:	7833      	ldrb	r3, [r6, #0]
   87a98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   87a9c:	2b58      	cmp	r3, #88	; 0x58
   87a9e:	f040 8084 	bne.w	87baa <_strtoll_r+0x16e>
   87aa2:	f896 8001 	ldrb.w	r8, [r6, #1]
   87aa6:	2710      	movs	r7, #16
   87aa8:	3602      	adds	r6, #2
   87aaa:	e002      	b.n	87ab2 <_strtoll_r+0x76>
   87aac:	2f00      	cmp	r7, #0
   87aae:	bf08      	it	eq
   87ab0:	270a      	moveq	r7, #10
   87ab2:	f1b9 0f00 	cmp.w	r9, #0
   87ab6:	d003      	beq.n	87ac0 <_strtoll_r+0x84>
   87ab8:	2400      	movs	r4, #0
   87aba:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   87abe:	e003      	b.n	87ac8 <_strtoll_r+0x8c>
   87ac0:	f04f 34ff 	mov.w	r4, #4294967295
   87ac4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   87ac8:	463a      	mov	r2, r7
   87aca:	17fb      	asrs	r3, r7, #31
   87acc:	4620      	mov	r0, r4
   87ace:	4629      	mov	r1, r5
   87ad0:	f8cd c004 	str.w	ip, [sp, #4]
   87ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   87ad8:	f000 fcc2 	bl	88460 <__aeabi_uldivmod>
   87adc:	4620      	mov	r0, r4
   87ade:	9204      	str	r2, [sp, #16]
   87ae0:	4629      	mov	r1, r5
   87ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87ae6:	f000 fcbb 	bl	88460 <__aeabi_uldivmod>
   87aea:	f8dd c004 	ldr.w	ip, [sp, #4]
   87aee:	4604      	mov	r4, r0
   87af0:	460d      	mov	r5, r1
   87af2:	2300      	movs	r3, #0
   87af4:	2000      	movs	r0, #0
   87af6:	2100      	movs	r1, #0
   87af8:	eb0b 0208 	add.w	r2, fp, r8
   87afc:	7852      	ldrb	r2, [r2, #1]
   87afe:	f012 0f04 	tst.w	r2, #4
   87b02:	d002      	beq.n	87b0a <_strtoll_r+0xce>
   87b04:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   87b08:	e008      	b.n	87b1c <_strtoll_r+0xe0>
   87b0a:	f012 0203 	ands.w	r2, r2, #3
   87b0e:	d028      	beq.n	87b62 <_strtoll_r+0x126>
   87b10:	2a01      	cmp	r2, #1
   87b12:	bf14      	ite	ne
   87b14:	2257      	movne	r2, #87	; 0x57
   87b16:	2237      	moveq	r2, #55	; 0x37
   87b18:	ebc2 0808 	rsb	r8, r2, r8
   87b1c:	45b8      	cmp	r8, r7
   87b1e:	da20      	bge.n	87b62 <_strtoll_r+0x126>
   87b20:	1c5a      	adds	r2, r3, #1
   87b22:	d01b      	beq.n	87b5c <_strtoll_r+0x120>
   87b24:	428d      	cmp	r5, r1
   87b26:	bf08      	it	eq
   87b28:	4284      	cmpeq	r4, r0
   87b2a:	d315      	bcc.n	87b58 <_strtoll_r+0x11c>
   87b2c:	42a9      	cmp	r1, r5
   87b2e:	bf08      	it	eq
   87b30:	42a0      	cmpeq	r0, r4
   87b32:	d102      	bne.n	87b3a <_strtoll_r+0xfe>
   87b34:	9b04      	ldr	r3, [sp, #16]
   87b36:	4598      	cmp	r8, r3
   87b38:	dc0e      	bgt.n	87b58 <_strtoll_r+0x11c>
   87b3a:	9a03      	ldr	r2, [sp, #12]
   87b3c:	fb00 f302 	mul.w	r3, r0, r2
   87b40:	9a02      	ldr	r2, [sp, #8]
   87b42:	fb02 3301 	mla	r3, r2, r1, r3
   87b46:	fba0 0102 	umull	r0, r1, r0, r2
   87b4a:	4419      	add	r1, r3
   87b4c:	eb10 0008 	adds.w	r0, r0, r8
   87b50:	eb41 71e8 	adc.w	r1, r1, r8, asr #31
   87b54:	2301      	movs	r3, #1
   87b56:	e001      	b.n	87b5c <_strtoll_r+0x120>
   87b58:	f04f 33ff 	mov.w	r3, #4294967295
   87b5c:	f816 8b01 	ldrb.w	r8, [r6], #1
   87b60:	e7ca      	b.n	87af8 <_strtoll_r+0xbc>
   87b62:	1c5a      	adds	r2, r3, #1
   87b64:	d111      	bne.n	87b8a <_strtoll_r+0x14e>
   87b66:	f1b9 0f00 	cmp.w	r9, #0
   87b6a:	d003      	beq.n	87b74 <_strtoll_r+0x138>
   87b6c:	2000      	movs	r0, #0
   87b6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   87b72:	e003      	b.n	87b7c <_strtoll_r+0x140>
   87b74:	f04f 30ff 	mov.w	r0, #4294967295
   87b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   87b7c:	9a05      	ldr	r2, [sp, #20]
   87b7e:	2322      	movs	r3, #34	; 0x22
   87b80:	6013      	str	r3, [r2, #0]
   87b82:	f1ba 0f00 	cmp.w	sl, #0
   87b86:	d10a      	bne.n	87b9e <_strtoll_r+0x162>
   87b88:	e013      	b.n	87bb2 <_strtoll_r+0x176>
   87b8a:	f1b9 0f00 	cmp.w	r9, #0
   87b8e:	d002      	beq.n	87b96 <_strtoll_r+0x15a>
   87b90:	4240      	negs	r0, r0
   87b92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87b96:	f1ba 0f00 	cmp.w	sl, #0
   87b9a:	d00a      	beq.n	87bb2 <_strtoll_r+0x176>
   87b9c:	b10b      	cbz	r3, 87ba2 <_strtoll_r+0x166>
   87b9e:	3e01      	subs	r6, #1
   87ba0:	e000      	b.n	87ba4 <_strtoll_r+0x168>
   87ba2:	4666      	mov	r6, ip
   87ba4:	f8ca 6000 	str.w	r6, [sl]
   87ba8:	e003      	b.n	87bb2 <_strtoll_r+0x176>
   87baa:	2f00      	cmp	r7, #0
   87bac:	bf08      	it	eq
   87bae:	2708      	moveq	r7, #8
   87bb0:	e77f      	b.n	87ab2 <_strtoll_r+0x76>
   87bb2:	b007      	add	sp, #28
   87bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bb8:	20070440 	.word	0x20070440

00087bbc <_strtoul_r>:
   87bbc:	4684      	mov	ip, r0
   87bbe:	483a      	ldr	r0, [pc, #232]	; (87ca8 <_strtoul_r+0xec>)
   87bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87bc4:	f8d0 8000 	ldr.w	r8, [r0]
   87bc8:	460e      	mov	r6, r1
   87bca:	4634      	mov	r4, r6
   87bcc:	f814 5b01 	ldrb.w	r5, [r4], #1
   87bd0:	eb08 0005 	add.w	r0, r8, r5
   87bd4:	7840      	ldrb	r0, [r0, #1]
   87bd6:	f000 0008 	and.w	r0, r0, #8
   87bda:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   87bde:	b108      	cbz	r0, 87be4 <_strtoul_r+0x28>
   87be0:	4626      	mov	r6, r4
   87be2:	e7f2      	b.n	87bca <_strtoul_r+0xe>
   87be4:	2d2d      	cmp	r5, #45	; 0x2d
   87be6:	d103      	bne.n	87bf0 <_strtoul_r+0x34>
   87be8:	1cb4      	adds	r4, r6, #2
   87bea:	7875      	ldrb	r5, [r6, #1]
   87bec:	2701      	movs	r7, #1
   87bee:	e003      	b.n	87bf8 <_strtoul_r+0x3c>
   87bf0:	2d2b      	cmp	r5, #43	; 0x2b
   87bf2:	bf04      	itt	eq
   87bf4:	7875      	ldrbeq	r5, [r6, #1]
   87bf6:	1cb4      	addeq	r4, r6, #2
   87bf8:	f033 0010 	bics.w	r0, r3, #16
   87bfc:	d10d      	bne.n	87c1a <_strtoul_r+0x5e>
   87bfe:	2d30      	cmp	r5, #48	; 0x30
   87c00:	d108      	bne.n	87c14 <_strtoul_r+0x58>
   87c02:	7820      	ldrb	r0, [r4, #0]
   87c04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   87c08:	2858      	cmp	r0, #88	; 0x58
   87c0a:	d147      	bne.n	87c9c <_strtoul_r+0xe0>
   87c0c:	7865      	ldrb	r5, [r4, #1]
   87c0e:	2310      	movs	r3, #16
   87c10:	3402      	adds	r4, #2
   87c12:	e002      	b.n	87c1a <_strtoul_r+0x5e>
   87c14:	2b00      	cmp	r3, #0
   87c16:	bf08      	it	eq
   87c18:	230a      	moveq	r3, #10
   87c1a:	f04f 39ff 	mov.w	r9, #4294967295
   87c1e:	fbb9 f9f3 	udiv	r9, r9, r3
   87c22:	fb03 fa09 	mul.w	sl, r3, r9
   87c26:	2600      	movs	r6, #0
   87c28:	ea6f 0a0a 	mvn.w	sl, sl
   87c2c:	4630      	mov	r0, r6
   87c2e:	eb08 0b05 	add.w	fp, r8, r5
   87c32:	f89b b001 	ldrb.w	fp, [fp, #1]
   87c36:	f01b 0f04 	tst.w	fp, #4
   87c3a:	d001      	beq.n	87c40 <_strtoul_r+0x84>
   87c3c:	3d30      	subs	r5, #48	; 0x30
   87c3e:	e00b      	b.n	87c58 <_strtoul_r+0x9c>
   87c40:	f01b 0b03 	ands.w	fp, fp, #3
   87c44:	d01a      	beq.n	87c7c <_strtoul_r+0xc0>
   87c46:	f1bb 0f01 	cmp.w	fp, #1
   87c4a:	bf14      	ite	ne
   87c4c:	f04f 0b57 	movne.w	fp, #87	; 0x57
   87c50:	f04f 0b37 	moveq.w	fp, #55	; 0x37
   87c54:	ebcb 0505 	rsb	r5, fp, r5
   87c58:	429d      	cmp	r5, r3
   87c5a:	da0f      	bge.n	87c7c <_strtoul_r+0xc0>
   87c5c:	2e00      	cmp	r6, #0
   87c5e:	db08      	blt.n	87c72 <_strtoul_r+0xb6>
   87c60:	4548      	cmp	r0, r9
   87c62:	d806      	bhi.n	87c72 <_strtoul_r+0xb6>
   87c64:	d101      	bne.n	87c6a <_strtoul_r+0xae>
   87c66:	4555      	cmp	r5, sl
   87c68:	dc03      	bgt.n	87c72 <_strtoul_r+0xb6>
   87c6a:	fb03 5000 	mla	r0, r3, r0, r5
   87c6e:	2601      	movs	r6, #1
   87c70:	e001      	b.n	87c76 <_strtoul_r+0xba>
   87c72:	f04f 36ff 	mov.w	r6, #4294967295
   87c76:	f814 5b01 	ldrb.w	r5, [r4], #1
   87c7a:	e7d8      	b.n	87c2e <_strtoul_r+0x72>
   87c7c:	2e00      	cmp	r6, #0
   87c7e:	da05      	bge.n	87c8c <_strtoul_r+0xd0>
   87c80:	2322      	movs	r3, #34	; 0x22
   87c82:	f8cc 3000 	str.w	r3, [ip]
   87c86:	f04f 30ff 	mov.w	r0, #4294967295
   87c8a:	e001      	b.n	87c90 <_strtoul_r+0xd4>
   87c8c:	b107      	cbz	r7, 87c90 <_strtoul_r+0xd4>
   87c8e:	4240      	negs	r0, r0
   87c90:	b142      	cbz	r2, 87ca4 <_strtoul_r+0xe8>
   87c92:	b106      	cbz	r6, 87c96 <_strtoul_r+0xda>
   87c94:	1e61      	subs	r1, r4, #1
   87c96:	6011      	str	r1, [r2, #0]
   87c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c9c:	2b00      	cmp	r3, #0
   87c9e:	bf08      	it	eq
   87ca0:	2308      	moveq	r3, #8
   87ca2:	e7ba      	b.n	87c1a <_strtoul_r+0x5e>
   87ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ca8:	20070440 	.word	0x20070440

00087cac <strtoul>:
   87cac:	b530      	push	{r4, r5, lr}
   87cae:	4613      	mov	r3, r2
   87cb0:	4a04      	ldr	r2, [pc, #16]	; (87cc4 <strtoul+0x18>)
   87cb2:	4605      	mov	r5, r0
   87cb4:	460c      	mov	r4, r1
   87cb6:	6810      	ldr	r0, [r2, #0]
   87cb8:	4629      	mov	r1, r5
   87cba:	4622      	mov	r2, r4
   87cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   87cc0:	f7ff bf7c 	b.w	87bbc <_strtoul_r>
   87cc4:	20070010 	.word	0x20070010

00087cc8 <_strtoull_r>:
   87cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87ccc:	461d      	mov	r5, r3
   87cce:	4b4f      	ldr	r3, [pc, #316]	; (87e0c <_strtoull_r+0x144>)
   87cd0:	b087      	sub	sp, #28
   87cd2:	f8d3 8000 	ldr.w	r8, [r3]
   87cd6:	9005      	str	r0, [sp, #20]
   87cd8:	4689      	mov	r9, r1
   87cda:	9204      	str	r2, [sp, #16]
   87cdc:	460b      	mov	r3, r1
   87cde:	461c      	mov	r4, r3
   87ce0:	f814 6b01 	ldrb.w	r6, [r4], #1
   87ce4:	eb08 0206 	add.w	r2, r8, r6
   87ce8:	7852      	ldrb	r2, [r2, #1]
   87cea:	f002 0208 	and.w	r2, r2, #8
   87cee:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   87cf2:	b10a      	cbz	r2, 87cf8 <_strtoull_r+0x30>
   87cf4:	4623      	mov	r3, r4
   87cf6:	e7f2      	b.n	87cde <_strtoull_r+0x16>
   87cf8:	2e2d      	cmp	r6, #45	; 0x2d
   87cfa:	d103      	bne.n	87d04 <_strtoull_r+0x3c>
   87cfc:	1c9c      	adds	r4, r3, #2
   87cfe:	785e      	ldrb	r6, [r3, #1]
   87d00:	2701      	movs	r7, #1
   87d02:	e003      	b.n	87d0c <_strtoull_r+0x44>
   87d04:	2e2b      	cmp	r6, #43	; 0x2b
   87d06:	bf04      	itt	eq
   87d08:	785e      	ldrbeq	r6, [r3, #1]
   87d0a:	1c9c      	addeq	r4, r3, #2
   87d0c:	f035 0110 	bics.w	r1, r5, #16
   87d10:	d10d      	bne.n	87d2e <_strtoull_r+0x66>
   87d12:	2e30      	cmp	r6, #48	; 0x30
   87d14:	d108      	bne.n	87d28 <_strtoull_r+0x60>
   87d16:	7823      	ldrb	r3, [r4, #0]
   87d18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   87d1c:	2b58      	cmp	r3, #88	; 0x58
   87d1e:	d16d      	bne.n	87dfc <_strtoull_r+0x134>
   87d20:	7866      	ldrb	r6, [r4, #1]
   87d22:	2510      	movs	r5, #16
   87d24:	3402      	adds	r4, #2
   87d26:	e002      	b.n	87d2e <_strtoull_r+0x66>
   87d28:	2d00      	cmp	r5, #0
   87d2a:	bf08      	it	eq
   87d2c:	250a      	moveq	r5, #10
   87d2e:	ea4f 7be5 	mov.w	fp, r5, asr #31
   87d32:	462a      	mov	r2, r5
   87d34:	465b      	mov	r3, fp
   87d36:	f04f 30ff 	mov.w	r0, #4294967295
   87d3a:	f04f 31ff 	mov.w	r1, #4294967295
   87d3e:	f000 fb8f 	bl	88460 <__aeabi_uldivmod>
   87d42:	462a      	mov	r2, r5
   87d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87d48:	465b      	mov	r3, fp
   87d4a:	f04f 30ff 	mov.w	r0, #4294967295
   87d4e:	f04f 31ff 	mov.w	r1, #4294967295
   87d52:	f000 fb85 	bl	88460 <__aeabi_uldivmod>
   87d56:	46aa      	mov	sl, r5
   87d58:	9201      	str	r2, [sp, #4]
   87d5a:	2300      	movs	r3, #0
   87d5c:	2000      	movs	r0, #0
   87d5e:	2100      	movs	r1, #0
   87d60:	eb08 0c06 	add.w	ip, r8, r6
   87d64:	f89c c001 	ldrb.w	ip, [ip, #1]
   87d68:	f01c 0f04 	tst.w	ip, #4
   87d6c:	d001      	beq.n	87d72 <_strtoull_r+0xaa>
   87d6e:	3e30      	subs	r6, #48	; 0x30
   87d70:	e00b      	b.n	87d8a <_strtoull_r+0xc2>
   87d72:	f01c 0c03 	ands.w	ip, ip, #3
   87d76:	d02a      	beq.n	87dce <_strtoull_r+0x106>
   87d78:	f1bc 0f01 	cmp.w	ip, #1
   87d7c:	bf14      	ite	ne
   87d7e:	f04f 0c57 	movne.w	ip, #87	; 0x57
   87d82:	f04f 0c37 	moveq.w	ip, #55	; 0x37
   87d86:	ebcc 0606 	rsb	r6, ip, r6
   87d8a:	42ae      	cmp	r6, r5
   87d8c:	da1f      	bge.n	87dce <_strtoull_r+0x106>
   87d8e:	2b00      	cmp	r3, #0
   87d90:	db18      	blt.n	87dc4 <_strtoull_r+0xfc>
   87d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87d96:	428b      	cmp	r3, r1
   87d98:	bf08      	it	eq
   87d9a:	4282      	cmpeq	r2, r0
   87d9c:	d312      	bcc.n	87dc4 <_strtoull_r+0xfc>
   87d9e:	4299      	cmp	r1, r3
   87da0:	bf08      	it	eq
   87da2:	4290      	cmpeq	r0, r2
   87da4:	d102      	bne.n	87dac <_strtoull_r+0xe4>
   87da6:	9b01      	ldr	r3, [sp, #4]
   87da8:	429e      	cmp	r6, r3
   87daa:	dc0b      	bgt.n	87dc4 <_strtoull_r+0xfc>
   87dac:	fb00 f30b 	mul.w	r3, r0, fp
   87db0:	fb0a 3301 	mla	r3, sl, r1, r3
   87db4:	fba0 010a 	umull	r0, r1, r0, sl
   87db8:	4419      	add	r1, r3
   87dba:	1980      	adds	r0, r0, r6
   87dbc:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   87dc0:	2301      	movs	r3, #1
   87dc2:	e001      	b.n	87dc8 <_strtoull_r+0x100>
   87dc4:	f04f 33ff 	mov.w	r3, #4294967295
   87dc8:	f814 6b01 	ldrb.w	r6, [r4], #1
   87dcc:	e7c8      	b.n	87d60 <_strtoull_r+0x98>
   87dce:	2b00      	cmp	r3, #0
   87dd0:	da07      	bge.n	87de2 <_strtoull_r+0x11a>
   87dd2:	9905      	ldr	r1, [sp, #20]
   87dd4:	2222      	movs	r2, #34	; 0x22
   87dd6:	600a      	str	r2, [r1, #0]
   87dd8:	f04f 30ff 	mov.w	r0, #4294967295
   87ddc:	f04f 31ff 	mov.w	r1, #4294967295
   87de0:	e003      	b.n	87dea <_strtoull_r+0x122>
   87de2:	b117      	cbz	r7, 87dea <_strtoull_r+0x122>
   87de4:	4240      	negs	r0, r0
   87de6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87dea:	9a04      	ldr	r2, [sp, #16]
   87dec:	b152      	cbz	r2, 87e04 <_strtoull_r+0x13c>
   87dee:	b10b      	cbz	r3, 87df4 <_strtoull_r+0x12c>
   87df0:	3c01      	subs	r4, #1
   87df2:	e000      	b.n	87df6 <_strtoull_r+0x12e>
   87df4:	464c      	mov	r4, r9
   87df6:	9b04      	ldr	r3, [sp, #16]
   87df8:	601c      	str	r4, [r3, #0]
   87dfa:	e003      	b.n	87e04 <_strtoull_r+0x13c>
   87dfc:	2d00      	cmp	r5, #0
   87dfe:	bf08      	it	eq
   87e00:	2508      	moveq	r5, #8
   87e02:	e794      	b.n	87d2e <_strtoull_r+0x66>
   87e04:	b007      	add	sp, #28
   87e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87e0a:	bf00      	nop
   87e0c:	20070440 	.word	0x20070440

00087e10 <__submore>:
   87e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87e14:	460c      	mov	r4, r1
   87e16:	6b09      	ldr	r1, [r1, #48]	; 0x30
   87e18:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87e1c:	4299      	cmp	r1, r3
   87e1e:	d11a      	bne.n	87e56 <__submore+0x46>
   87e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
   87e24:	f7fe fc10 	bl	86648 <_malloc_r>
   87e28:	b918      	cbnz	r0, 87e32 <__submore+0x22>
   87e2a:	f04f 30ff 	mov.w	r0, #4294967295
   87e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
   87e36:	6363      	str	r3, [r4, #52]	; 0x34
   87e38:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   87e3c:	6320      	str	r0, [r4, #48]	; 0x30
   87e3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   87e42:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   87e46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   87e4a:	7043      	strb	r3, [r0, #1]
   87e4c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   87e50:	7003      	strb	r3, [r0, #0]
   87e52:	6020      	str	r0, [r4, #0]
   87e54:	e012      	b.n	87e7c <__submore+0x6c>
   87e56:	6b66      	ldr	r6, [r4, #52]	; 0x34
   87e58:	0077      	lsls	r7, r6, #1
   87e5a:	463a      	mov	r2, r7
   87e5c:	f7ff fa76 	bl	8734c <_realloc_r>
   87e60:	4605      	mov	r5, r0
   87e62:	2800      	cmp	r0, #0
   87e64:	d0e1      	beq.n	87e2a <__submore+0x1a>
   87e66:	eb00 0806 	add.w	r8, r0, r6
   87e6a:	4640      	mov	r0, r8
   87e6c:	4629      	mov	r1, r5
   87e6e:	4632      	mov	r2, r6
   87e70:	f7fb faac 	bl	833cc <memcpy>
   87e74:	f8c4 8000 	str.w	r8, [r4]
   87e78:	6325      	str	r5, [r4, #48]	; 0x30
   87e7a:	6367      	str	r7, [r4, #52]	; 0x34
   87e7c:	2000      	movs	r0, #0
   87e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00087e82 <_ungetc_r>:
   87e82:	1c4b      	adds	r3, r1, #1
   87e84:	b570      	push	{r4, r5, r6, lr}
   87e86:	4606      	mov	r6, r0
   87e88:	460d      	mov	r5, r1
   87e8a:	4614      	mov	r4, r2
   87e8c:	d102      	bne.n	87e94 <_ungetc_r+0x12>
   87e8e:	f04f 30ff 	mov.w	r0, #4294967295
   87e92:	bd70      	pop	{r4, r5, r6, pc}
   87e94:	b118      	cbz	r0, 87e9e <_ungetc_r+0x1c>
   87e96:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87e98:	b90b      	cbnz	r3, 87e9e <_ungetc_r+0x1c>
   87e9a:	f7fd fbd7 	bl	8564c <__sinit>
   87e9e:	89a3      	ldrh	r3, [r4, #12]
   87ea0:	0498      	lsls	r0, r3, #18
   87ea2:	d406      	bmi.n	87eb2 <_ungetc_r+0x30>
   87ea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   87ea8:	81a3      	strh	r3, [r4, #12]
   87eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87eac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87eb0:	6663      	str	r3, [r4, #100]	; 0x64
   87eb2:	89a3      	ldrh	r3, [r4, #12]
   87eb4:	f023 0320 	bic.w	r3, r3, #32
   87eb8:	b29b      	uxth	r3, r3
   87eba:	81a3      	strh	r3, [r4, #12]
   87ebc:	b29b      	uxth	r3, r3
   87ebe:	0759      	lsls	r1, r3, #29
   87ec0:	d413      	bmi.n	87eea <_ungetc_r+0x68>
   87ec2:	06da      	lsls	r2, r3, #27
   87ec4:	d5e3      	bpl.n	87e8e <_ungetc_r+0xc>
   87ec6:	071b      	lsls	r3, r3, #28
   87ec8:	d50b      	bpl.n	87ee2 <_ungetc_r+0x60>
   87eca:	4630      	mov	r0, r6
   87ecc:	4621      	mov	r1, r4
   87ece:	f7fd fb74 	bl	855ba <_fflush_r>
   87ed2:	2800      	cmp	r0, #0
   87ed4:	d1db      	bne.n	87e8e <_ungetc_r+0xc>
   87ed6:	89a3      	ldrh	r3, [r4, #12]
   87ed8:	60a0      	str	r0, [r4, #8]
   87eda:	f023 0308 	bic.w	r3, r3, #8
   87ede:	81a3      	strh	r3, [r4, #12]
   87ee0:	61a0      	str	r0, [r4, #24]
   87ee2:	89a3      	ldrh	r3, [r4, #12]
   87ee4:	f043 0304 	orr.w	r3, r3, #4
   87ee8:	81a3      	strh	r3, [r4, #12]
   87eea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   87eec:	b2ed      	uxtb	r5, r5
   87eee:	6862      	ldr	r2, [r4, #4]
   87ef0:	b18b      	cbz	r3, 87f16 <_ungetc_r+0x94>
   87ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   87ef4:	429a      	cmp	r2, r3
   87ef6:	da07      	bge.n	87f08 <_ungetc_r+0x86>
   87ef8:	6823      	ldr	r3, [r4, #0]
   87efa:	1e5a      	subs	r2, r3, #1
   87efc:	6022      	str	r2, [r4, #0]
   87efe:	f803 5c01 	strb.w	r5, [r3, #-1]
   87f02:	6863      	ldr	r3, [r4, #4]
   87f04:	3301      	adds	r3, #1
   87f06:	e020      	b.n	87f4a <_ungetc_r+0xc8>
   87f08:	4630      	mov	r0, r6
   87f0a:	4621      	mov	r1, r4
   87f0c:	f7ff ff80 	bl	87e10 <__submore>
   87f10:	2800      	cmp	r0, #0
   87f12:	d0f1      	beq.n	87ef8 <_ungetc_r+0x76>
   87f14:	e7bb      	b.n	87e8e <_ungetc_r+0xc>
   87f16:	6921      	ldr	r1, [r4, #16]
   87f18:	6823      	ldr	r3, [r4, #0]
   87f1a:	b151      	cbz	r1, 87f32 <_ungetc_r+0xb0>
   87f1c:	428b      	cmp	r3, r1
   87f1e:	d908      	bls.n	87f32 <_ungetc_r+0xb0>
   87f20:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   87f24:	42a8      	cmp	r0, r5
   87f26:	d104      	bne.n	87f32 <_ungetc_r+0xb0>
   87f28:	3b01      	subs	r3, #1
   87f2a:	3201      	adds	r2, #1
   87f2c:	6023      	str	r3, [r4, #0]
   87f2e:	6062      	str	r2, [r4, #4]
   87f30:	bd70      	pop	{r4, r5, r6, pc}
   87f32:	63a3      	str	r3, [r4, #56]	; 0x38
   87f34:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87f38:	6323      	str	r3, [r4, #48]	; 0x30
   87f3a:	2303      	movs	r3, #3
   87f3c:	6363      	str	r3, [r4, #52]	; 0x34
   87f3e:	4623      	mov	r3, r4
   87f40:	63e2      	str	r2, [r4, #60]	; 0x3c
   87f42:	f803 5f42 	strb.w	r5, [r3, #66]!
   87f46:	6023      	str	r3, [r4, #0]
   87f48:	2301      	movs	r3, #1
   87f4a:	6063      	str	r3, [r4, #4]
   87f4c:	4628      	mov	r0, r5
   87f4e:	bd70      	pop	{r4, r5, r6, pc}

00087f50 <ungetc>:
   87f50:	460a      	mov	r2, r1
   87f52:	4903      	ldr	r1, [pc, #12]	; (87f60 <ungetc+0x10>)
   87f54:	4603      	mov	r3, r0
   87f56:	6808      	ldr	r0, [r1, #0]
   87f58:	4619      	mov	r1, r3
   87f5a:	f7ff bf92 	b.w	87e82 <_ungetc_r>
   87f5e:	bf00      	nop
   87f60:	20070010 	.word	0x20070010

00087f64 <__swbuf_r>:
   87f64:	b570      	push	{r4, r5, r6, lr}
   87f66:	460d      	mov	r5, r1
   87f68:	4614      	mov	r4, r2
   87f6a:	4606      	mov	r6, r0
   87f6c:	b118      	cbz	r0, 87f76 <__swbuf_r+0x12>
   87f6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87f70:	b90b      	cbnz	r3, 87f76 <__swbuf_r+0x12>
   87f72:	f7fd fb6b 	bl	8564c <__sinit>
   87f76:	69a3      	ldr	r3, [r4, #24]
   87f78:	60a3      	str	r3, [r4, #8]
   87f7a:	89a3      	ldrh	r3, [r4, #12]
   87f7c:	0719      	lsls	r1, r3, #28
   87f7e:	d50d      	bpl.n	87f9c <__swbuf_r+0x38>
   87f80:	6923      	ldr	r3, [r4, #16]
   87f82:	b15b      	cbz	r3, 87f9c <__swbuf_r+0x38>
   87f84:	89a3      	ldrh	r3, [r4, #12]
   87f86:	b2ed      	uxtb	r5, r5
   87f88:	049a      	lsls	r2, r3, #18
   87f8a:	d410      	bmi.n	87fae <__swbuf_r+0x4a>
   87f8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   87f90:	81a3      	strh	r3, [r4, #12]
   87f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87f98:	6663      	str	r3, [r4, #100]	; 0x64
   87f9a:	e008      	b.n	87fae <__swbuf_r+0x4a>
   87f9c:	4630      	mov	r0, r6
   87f9e:	4621      	mov	r1, r4
   87fa0:	f7fd f9d0 	bl	85344 <__swsetup_r>
   87fa4:	2800      	cmp	r0, #0
   87fa6:	d0ed      	beq.n	87f84 <__swbuf_r+0x20>
   87fa8:	f04f 30ff 	mov.w	r0, #4294967295
   87fac:	bd70      	pop	{r4, r5, r6, pc}
   87fae:	6923      	ldr	r3, [r4, #16]
   87fb0:	6820      	ldr	r0, [r4, #0]
   87fb2:	1ac0      	subs	r0, r0, r3
   87fb4:	6963      	ldr	r3, [r4, #20]
   87fb6:	4298      	cmp	r0, r3
   87fb8:	db05      	blt.n	87fc6 <__swbuf_r+0x62>
   87fba:	4630      	mov	r0, r6
   87fbc:	4621      	mov	r1, r4
   87fbe:	f7fd fafc 	bl	855ba <_fflush_r>
   87fc2:	2800      	cmp	r0, #0
   87fc4:	d1f0      	bne.n	87fa8 <__swbuf_r+0x44>
   87fc6:	68a3      	ldr	r3, [r4, #8]
   87fc8:	3001      	adds	r0, #1
   87fca:	3b01      	subs	r3, #1
   87fcc:	60a3      	str	r3, [r4, #8]
   87fce:	6823      	ldr	r3, [r4, #0]
   87fd0:	1c5a      	adds	r2, r3, #1
   87fd2:	6022      	str	r2, [r4, #0]
   87fd4:	701d      	strb	r5, [r3, #0]
   87fd6:	6963      	ldr	r3, [r4, #20]
   87fd8:	4298      	cmp	r0, r3
   87fda:	d004      	beq.n	87fe6 <__swbuf_r+0x82>
   87fdc:	89a3      	ldrh	r3, [r4, #12]
   87fde:	07db      	lsls	r3, r3, #31
   87fe0:	d507      	bpl.n	87ff2 <__swbuf_r+0x8e>
   87fe2:	2d0a      	cmp	r5, #10
   87fe4:	d105      	bne.n	87ff2 <__swbuf_r+0x8e>
   87fe6:	4630      	mov	r0, r6
   87fe8:	4621      	mov	r1, r4
   87fea:	f7fd fae6 	bl	855ba <_fflush_r>
   87fee:	2800      	cmp	r0, #0
   87ff0:	d1da      	bne.n	87fa8 <__swbuf_r+0x44>
   87ff2:	4628      	mov	r0, r5
   87ff4:	bd70      	pop	{r4, r5, r6, pc}

00087ff6 <__swbuf>:
   87ff6:	460a      	mov	r2, r1
   87ff8:	4902      	ldr	r1, [pc, #8]	; (88004 <__swbuf+0xe>)
   87ffa:	4603      	mov	r3, r0
   87ffc:	6808      	ldr	r0, [r1, #0]
   87ffe:	4619      	mov	r1, r3
   88000:	f7ff bfb0 	b.w	87f64 <__swbuf_r>
   88004:	20070010 	.word	0x20070010

00088008 <_wcrtomb_r>:
   88008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8800c:	461d      	mov	r5, r3
   8800e:	4b10      	ldr	r3, [pc, #64]	; (88050 <_wcrtomb_r+0x48>)
   88010:	b086      	sub	sp, #24
   88012:	4604      	mov	r4, r0
   88014:	4690      	mov	r8, r2
   88016:	460e      	mov	r6, r1
   88018:	681f      	ldr	r7, [r3, #0]
   8801a:	b939      	cbnz	r1, 8802c <_wcrtomb_r+0x24>
   8801c:	f7fe fa7e 	bl	8651c <__locale_charset>
   88020:	9500      	str	r5, [sp, #0]
   88022:	4603      	mov	r3, r0
   88024:	a903      	add	r1, sp, #12
   88026:	4620      	mov	r0, r4
   88028:	4632      	mov	r2, r6
   8802a:	e006      	b.n	8803a <_wcrtomb_r+0x32>
   8802c:	f7fe fa76 	bl	8651c <__locale_charset>
   88030:	9500      	str	r5, [sp, #0]
   88032:	4603      	mov	r3, r0
   88034:	4631      	mov	r1, r6
   88036:	4620      	mov	r0, r4
   88038:	4642      	mov	r2, r8
   8803a:	47b8      	blx	r7
   8803c:	1c43      	adds	r3, r0, #1
   8803e:	d103      	bne.n	88048 <_wcrtomb_r+0x40>
   88040:	2300      	movs	r3, #0
   88042:	602b      	str	r3, [r5, #0]
   88044:	238a      	movs	r3, #138	; 0x8a
   88046:	6023      	str	r3, [r4, #0]
   88048:	b006      	add	sp, #24
   8804a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8804e:	bf00      	nop
   88050:	200708d4 	.word	0x200708d4

00088054 <wcrtomb>:
   88054:	b530      	push	{r4, r5, lr}
   88056:	4613      	mov	r3, r2
   88058:	4a04      	ldr	r2, [pc, #16]	; (8806c <wcrtomb+0x18>)
   8805a:	4605      	mov	r5, r0
   8805c:	460c      	mov	r4, r1
   8805e:	6810      	ldr	r0, [r2, #0]
   88060:	4629      	mov	r1, r5
   88062:	4622      	mov	r2, r4
   88064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   88068:	f7ff bfce 	b.w	88008 <_wcrtomb_r>
   8806c:	20070010 	.word	0x20070010

00088070 <__ascii_wctomb>:
   88070:	b149      	cbz	r1, 88086 <__ascii_wctomb+0x16>
   88072:	2aff      	cmp	r2, #255	; 0xff
   88074:	d904      	bls.n	88080 <__ascii_wctomb+0x10>
   88076:	238a      	movs	r3, #138	; 0x8a
   88078:	6003      	str	r3, [r0, #0]
   8807a:	f04f 30ff 	mov.w	r0, #4294967295
   8807e:	4770      	bx	lr
   88080:	700a      	strb	r2, [r1, #0]
   88082:	2001      	movs	r0, #1
   88084:	4770      	bx	lr
   88086:	4608      	mov	r0, r1
   88088:	4770      	bx	lr

0008808a <_wctomb_r>:
   8808a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   8808e:	4698      	mov	r8, r3
   88090:	4b08      	ldr	r3, [pc, #32]	; (880b4 <_wctomb_r+0x2a>)
   88092:	4605      	mov	r5, r0
   88094:	681c      	ldr	r4, [r3, #0]
   88096:	460f      	mov	r7, r1
   88098:	4616      	mov	r6, r2
   8809a:	f7fe fa3f 	bl	8651c <__locale_charset>
   8809e:	f8cd 8000 	str.w	r8, [sp]
   880a2:	4603      	mov	r3, r0
   880a4:	4639      	mov	r1, r7
   880a6:	4628      	mov	r0, r5
   880a8:	4632      	mov	r2, r6
   880aa:	47a0      	blx	r4
   880ac:	b002      	add	sp, #8
   880ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   880b2:	bf00      	nop
   880b4:	200708d4 	.word	0x200708d4

000880b8 <_write_r>:
   880b8:	b538      	push	{r3, r4, r5, lr}
   880ba:	4c07      	ldr	r4, [pc, #28]	; (880d8 <_write_r+0x20>)
   880bc:	4605      	mov	r5, r0
   880be:	2000      	movs	r0, #0
   880c0:	6020      	str	r0, [r4, #0]
   880c2:	4608      	mov	r0, r1
   880c4:	4611      	mov	r1, r2
   880c6:	461a      	mov	r2, r3
   880c8:	f7f9 fe6a 	bl	81da0 <_write>
   880cc:	1c43      	adds	r3, r0, #1
   880ce:	d102      	bne.n	880d6 <_write_r+0x1e>
   880d0:	6823      	ldr	r3, [r4, #0]
   880d2:	b103      	cbz	r3, 880d6 <_write_r+0x1e>
   880d4:	602b      	str	r3, [r5, #0]
   880d6:	bd38      	pop	{r3, r4, r5, pc}
   880d8:	2007ac40 	.word	0x2007ac40

000880dc <_calloc_r>:
   880dc:	b510      	push	{r4, lr}
   880de:	4351      	muls	r1, r2
   880e0:	f7fe fab2 	bl	86648 <_malloc_r>
   880e4:	4604      	mov	r4, r0
   880e6:	b320      	cbz	r0, 88132 <_calloc_r+0x56>
   880e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
   880ec:	f022 0203 	bic.w	r2, r2, #3
   880f0:	3a04      	subs	r2, #4
   880f2:	2a24      	cmp	r2, #36	; 0x24
   880f4:	d81a      	bhi.n	8812c <_calloc_r+0x50>
   880f6:	2a13      	cmp	r2, #19
   880f8:	d912      	bls.n	88120 <_calloc_r+0x44>
   880fa:	2100      	movs	r1, #0
   880fc:	2a1b      	cmp	r2, #27
   880fe:	6001      	str	r1, [r0, #0]
   88100:	6041      	str	r1, [r0, #4]
   88102:	d802      	bhi.n	8810a <_calloc_r+0x2e>
   88104:	f100 0308 	add.w	r3, r0, #8
   88108:	e00b      	b.n	88122 <_calloc_r+0x46>
   8810a:	2a24      	cmp	r2, #36	; 0x24
   8810c:	6081      	str	r1, [r0, #8]
   8810e:	60c1      	str	r1, [r0, #12]
   88110:	bf11      	iteee	ne
   88112:	f100 0310 	addne.w	r3, r0, #16
   88116:	6101      	streq	r1, [r0, #16]
   88118:	f100 0318 	addeq.w	r3, r0, #24
   8811c:	6141      	streq	r1, [r0, #20]
   8811e:	e000      	b.n	88122 <_calloc_r+0x46>
   88120:	4603      	mov	r3, r0
   88122:	2200      	movs	r2, #0
   88124:	601a      	str	r2, [r3, #0]
   88126:	605a      	str	r2, [r3, #4]
   88128:	609a      	str	r2, [r3, #8]
   8812a:	e002      	b.n	88132 <_calloc_r+0x56>
   8812c:	2100      	movs	r1, #0
   8812e:	f7fb f956 	bl	833de <memset>
   88132:	4620      	mov	r0, r4
   88134:	bd10      	pop	{r4, pc}
	...

00088138 <_close_r>:
   88138:	b538      	push	{r3, r4, r5, lr}
   8813a:	4c06      	ldr	r4, [pc, #24]	; (88154 <_close_r+0x1c>)
   8813c:	2300      	movs	r3, #0
   8813e:	4605      	mov	r5, r0
   88140:	4608      	mov	r0, r1
   88142:	6023      	str	r3, [r4, #0]
   88144:	f7fa fb7e 	bl	82844 <_close>
   88148:	1c43      	adds	r3, r0, #1
   8814a:	d102      	bne.n	88152 <_close_r+0x1a>
   8814c:	6823      	ldr	r3, [r4, #0]
   8814e:	b103      	cbz	r3, 88152 <_close_r+0x1a>
   88150:	602b      	str	r3, [r5, #0]
   88152:	bd38      	pop	{r3, r4, r5, pc}
   88154:	2007ac40 	.word	0x2007ac40

00088158 <_fclose_r>:
   88158:	b570      	push	{r4, r5, r6, lr}
   8815a:	4605      	mov	r5, r0
   8815c:	460c      	mov	r4, r1
   8815e:	b909      	cbnz	r1, 88164 <_fclose_r+0xc>
   88160:	2000      	movs	r0, #0
   88162:	bd70      	pop	{r4, r5, r6, pc}
   88164:	b118      	cbz	r0, 8816e <_fclose_r+0x16>
   88166:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88168:	b90b      	cbnz	r3, 8816e <_fclose_r+0x16>
   8816a:	f7fd fa6f 	bl	8564c <__sinit>
   8816e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88172:	2b00      	cmp	r3, #0
   88174:	d0f4      	beq.n	88160 <_fclose_r+0x8>
   88176:	4628      	mov	r0, r5
   88178:	4621      	mov	r1, r4
   8817a:	f7fd fa1e 	bl	855ba <_fflush_r>
   8817e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   88180:	4606      	mov	r6, r0
   88182:	b133      	cbz	r3, 88192 <_fclose_r+0x3a>
   88184:	4628      	mov	r0, r5
   88186:	69e1      	ldr	r1, [r4, #28]
   88188:	4798      	blx	r3
   8818a:	2800      	cmp	r0, #0
   8818c:	bfb8      	it	lt
   8818e:	f04f 36ff 	movlt.w	r6, #4294967295
   88192:	89a3      	ldrh	r3, [r4, #12]
   88194:	061b      	lsls	r3, r3, #24
   88196:	d503      	bpl.n	881a0 <_fclose_r+0x48>
   88198:	4628      	mov	r0, r5
   8819a:	6921      	ldr	r1, [r4, #16]
   8819c:	f7fd fc32 	bl	85a04 <_free_r>
   881a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   881a2:	b141      	cbz	r1, 881b6 <_fclose_r+0x5e>
   881a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   881a8:	4299      	cmp	r1, r3
   881aa:	d002      	beq.n	881b2 <_fclose_r+0x5a>
   881ac:	4628      	mov	r0, r5
   881ae:	f7fd fc29 	bl	85a04 <_free_r>
   881b2:	2300      	movs	r3, #0
   881b4:	6323      	str	r3, [r4, #48]	; 0x30
   881b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   881b8:	b121      	cbz	r1, 881c4 <_fclose_r+0x6c>
   881ba:	4628      	mov	r0, r5
   881bc:	f7fd fc22 	bl	85a04 <_free_r>
   881c0:	2300      	movs	r3, #0
   881c2:	6463      	str	r3, [r4, #68]	; 0x44
   881c4:	f7fd faf4 	bl	857b0 <__sfp_lock_acquire>
   881c8:	2300      	movs	r3, #0
   881ca:	81a3      	strh	r3, [r4, #12]
   881cc:	f7fd faf1 	bl	857b2 <__sfp_lock_release>
   881d0:	4630      	mov	r0, r6
   881d2:	bd70      	pop	{r4, r5, r6, pc}

000881d4 <fclose>:
   881d4:	4b02      	ldr	r3, [pc, #8]	; (881e0 <fclose+0xc>)
   881d6:	4601      	mov	r1, r0
   881d8:	6818      	ldr	r0, [r3, #0]
   881da:	f7ff bfbd 	b.w	88158 <_fclose_r>
   881de:	bf00      	nop
   881e0:	20070010 	.word	0x20070010

000881e4 <_fstat_r>:
   881e4:	b538      	push	{r3, r4, r5, lr}
   881e6:	4c07      	ldr	r4, [pc, #28]	; (88204 <_fstat_r+0x20>)
   881e8:	2300      	movs	r3, #0
   881ea:	4605      	mov	r5, r0
   881ec:	4608      	mov	r0, r1
   881ee:	4611      	mov	r1, r2
   881f0:	6023      	str	r3, [r4, #0]
   881f2:	f7fa fb2b 	bl	8284c <_fstat>
   881f6:	1c43      	adds	r3, r0, #1
   881f8:	d102      	bne.n	88200 <_fstat_r+0x1c>
   881fa:	6823      	ldr	r3, [r4, #0]
   881fc:	b103      	cbz	r3, 88200 <_fstat_r+0x1c>
   881fe:	602b      	str	r3, [r5, #0]
   88200:	bd38      	pop	{r3, r4, r5, pc}
   88202:	bf00      	nop
   88204:	2007ac40 	.word	0x2007ac40

00088208 <_isatty_r>:
   88208:	b538      	push	{r3, r4, r5, lr}
   8820a:	4c06      	ldr	r4, [pc, #24]	; (88224 <_isatty_r+0x1c>)
   8820c:	2300      	movs	r3, #0
   8820e:	4605      	mov	r5, r0
   88210:	4608      	mov	r0, r1
   88212:	6023      	str	r3, [r4, #0]
   88214:	f7fa fb20 	bl	82858 <_isatty>
   88218:	1c43      	adds	r3, r0, #1
   8821a:	d102      	bne.n	88222 <_isatty_r+0x1a>
   8821c:	6823      	ldr	r3, [r4, #0]
   8821e:	b103      	cbz	r3, 88222 <_isatty_r+0x1a>
   88220:	602b      	str	r3, [r5, #0]
   88222:	bd38      	pop	{r3, r4, r5, pc}
   88224:	2007ac40 	.word	0x2007ac40

00088228 <_lseek_r>:
   88228:	b538      	push	{r3, r4, r5, lr}
   8822a:	4c07      	ldr	r4, [pc, #28]	; (88248 <_lseek_r+0x20>)
   8822c:	4605      	mov	r5, r0
   8822e:	2000      	movs	r0, #0
   88230:	6020      	str	r0, [r4, #0]
   88232:	4608      	mov	r0, r1
   88234:	4611      	mov	r1, r2
   88236:	461a      	mov	r2, r3
   88238:	f7fa fb10 	bl	8285c <_lseek>
   8823c:	1c43      	adds	r3, r0, #1
   8823e:	d102      	bne.n	88246 <_lseek_r+0x1e>
   88240:	6823      	ldr	r3, [r4, #0]
   88242:	b103      	cbz	r3, 88246 <_lseek_r+0x1e>
   88244:	602b      	str	r3, [r5, #0]
   88246:	bd38      	pop	{r3, r4, r5, pc}
   88248:	2007ac40 	.word	0x2007ac40

0008824c <_read_r>:
   8824c:	b538      	push	{r3, r4, r5, lr}
   8824e:	4c07      	ldr	r4, [pc, #28]	; (8826c <_read_r+0x20>)
   88250:	4605      	mov	r5, r0
   88252:	2000      	movs	r0, #0
   88254:	6020      	str	r0, [r4, #0]
   88256:	4608      	mov	r0, r1
   88258:	4611      	mov	r1, r2
   8825a:	461a      	mov	r2, r3
   8825c:	f7f7 ffe4 	bl	80228 <_read>
   88260:	1c43      	adds	r3, r0, #1
   88262:	d102      	bne.n	8826a <_read_r+0x1e>
   88264:	6823      	ldr	r3, [r4, #0]
   88266:	b103      	cbz	r3, 8826a <_read_r+0x1e>
   88268:	602b      	str	r3, [r5, #0]
   8826a:	bd38      	pop	{r3, r4, r5, pc}
   8826c:	2007ac40 	.word	0x2007ac40

00088270 <__gedf2>:
   88270:	f04f 3cff 	mov.w	ip, #4294967295
   88274:	e006      	b.n	88284 <__cmpdf2+0x4>
   88276:	bf00      	nop

00088278 <__ledf2>:
   88278:	f04f 0c01 	mov.w	ip, #1
   8827c:	e002      	b.n	88284 <__cmpdf2+0x4>
   8827e:	bf00      	nop

00088280 <__cmpdf2>:
   88280:	f04f 0c01 	mov.w	ip, #1
   88284:	f84d cd04 	str.w	ip, [sp, #-4]!
   88288:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8828c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88290:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88294:	bf18      	it	ne
   88296:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8829a:	d01b      	beq.n	882d4 <__cmpdf2+0x54>
   8829c:	b001      	add	sp, #4
   8829e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   882a2:	bf0c      	ite	eq
   882a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   882a8:	ea91 0f03 	teqne	r1, r3
   882ac:	bf02      	ittt	eq
   882ae:	ea90 0f02 	teqeq	r0, r2
   882b2:	2000      	moveq	r0, #0
   882b4:	4770      	bxeq	lr
   882b6:	f110 0f00 	cmn.w	r0, #0
   882ba:	ea91 0f03 	teq	r1, r3
   882be:	bf58      	it	pl
   882c0:	4299      	cmppl	r1, r3
   882c2:	bf08      	it	eq
   882c4:	4290      	cmpeq	r0, r2
   882c6:	bf2c      	ite	cs
   882c8:	17d8      	asrcs	r0, r3, #31
   882ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   882ce:	f040 0001 	orr.w	r0, r0, #1
   882d2:	4770      	bx	lr
   882d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   882d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   882dc:	d102      	bne.n	882e4 <__cmpdf2+0x64>
   882de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   882e2:	d107      	bne.n	882f4 <__cmpdf2+0x74>
   882e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   882e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   882ec:	d1d6      	bne.n	8829c <__cmpdf2+0x1c>
   882ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   882f2:	d0d3      	beq.n	8829c <__cmpdf2+0x1c>
   882f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   882f8:	4770      	bx	lr
   882fa:	bf00      	nop

000882fc <__aeabi_cdrcmple>:
   882fc:	4684      	mov	ip, r0
   882fe:	4610      	mov	r0, r2
   88300:	4662      	mov	r2, ip
   88302:	468c      	mov	ip, r1
   88304:	4619      	mov	r1, r3
   88306:	4663      	mov	r3, ip
   88308:	e000      	b.n	8830c <__aeabi_cdcmpeq>
   8830a:	bf00      	nop

0008830c <__aeabi_cdcmpeq>:
   8830c:	b501      	push	{r0, lr}
   8830e:	f7ff ffb7 	bl	88280 <__cmpdf2>
   88312:	2800      	cmp	r0, #0
   88314:	bf48      	it	mi
   88316:	f110 0f00 	cmnmi.w	r0, #0
   8831a:	bd01      	pop	{r0, pc}

0008831c <__aeabi_dcmpeq>:
   8831c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88320:	f7ff fff4 	bl	8830c <__aeabi_cdcmpeq>
   88324:	bf0c      	ite	eq
   88326:	2001      	moveq	r0, #1
   88328:	2000      	movne	r0, #0
   8832a:	f85d fb08 	ldr.w	pc, [sp], #8
   8832e:	bf00      	nop

00088330 <__aeabi_dcmplt>:
   88330:	f84d ed08 	str.w	lr, [sp, #-8]!
   88334:	f7ff ffea 	bl	8830c <__aeabi_cdcmpeq>
   88338:	bf34      	ite	cc
   8833a:	2001      	movcc	r0, #1
   8833c:	2000      	movcs	r0, #0
   8833e:	f85d fb08 	ldr.w	pc, [sp], #8
   88342:	bf00      	nop

00088344 <__aeabi_dcmple>:
   88344:	f84d ed08 	str.w	lr, [sp, #-8]!
   88348:	f7ff ffe0 	bl	8830c <__aeabi_cdcmpeq>
   8834c:	bf94      	ite	ls
   8834e:	2001      	movls	r0, #1
   88350:	2000      	movhi	r0, #0
   88352:	f85d fb08 	ldr.w	pc, [sp], #8
   88356:	bf00      	nop

00088358 <__aeabi_dcmpge>:
   88358:	f84d ed08 	str.w	lr, [sp, #-8]!
   8835c:	f7ff ffce 	bl	882fc <__aeabi_cdrcmple>
   88360:	bf94      	ite	ls
   88362:	2001      	movls	r0, #1
   88364:	2000      	movhi	r0, #0
   88366:	f85d fb08 	ldr.w	pc, [sp], #8
   8836a:	bf00      	nop

0008836c <__aeabi_dcmpgt>:
   8836c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88370:	f7ff ffc4 	bl	882fc <__aeabi_cdrcmple>
   88374:	bf34      	ite	cc
   88376:	2001      	movcc	r0, #1
   88378:	2000      	movcs	r0, #0
   8837a:	f85d fb08 	ldr.w	pc, [sp], #8
   8837e:	bf00      	nop

00088380 <__aeabi_d2uiz>:
   88380:	004a      	lsls	r2, r1, #1
   88382:	d211      	bcs.n	883a8 <__aeabi_d2uiz+0x28>
   88384:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88388:	d211      	bcs.n	883ae <__aeabi_d2uiz+0x2e>
   8838a:	d50d      	bpl.n	883a8 <__aeabi_d2uiz+0x28>
   8838c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88390:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88394:	d40e      	bmi.n	883b4 <__aeabi_d2uiz+0x34>
   88396:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8839a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8839e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   883a2:	fa23 f002 	lsr.w	r0, r3, r2
   883a6:	4770      	bx	lr
   883a8:	f04f 0000 	mov.w	r0, #0
   883ac:	4770      	bx	lr
   883ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   883b2:	d102      	bne.n	883ba <__aeabi_d2uiz+0x3a>
   883b4:	f04f 30ff 	mov.w	r0, #4294967295
   883b8:	4770      	bx	lr
   883ba:	f04f 0000 	mov.w	r0, #0
   883be:	4770      	bx	lr

000883c0 <__aeabi_d2f>:
   883c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   883c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   883c8:	bf24      	itt	cs
   883ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   883ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   883d2:	d90d      	bls.n	883f0 <__aeabi_d2f+0x30>
   883d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   883d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   883dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   883e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   883e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   883e8:	bf08      	it	eq
   883ea:	f020 0001 	biceq.w	r0, r0, #1
   883ee:	4770      	bx	lr
   883f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   883f4:	d121      	bne.n	8843a <__aeabi_d2f+0x7a>
   883f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   883fa:	bfbc      	itt	lt
   883fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   88400:	4770      	bxlt	lr
   88402:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   88406:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8840a:	f1c2 0218 	rsb	r2, r2, #24
   8840e:	f1c2 0c20 	rsb	ip, r2, #32
   88412:	fa10 f30c 	lsls.w	r3, r0, ip
   88416:	fa20 f002 	lsr.w	r0, r0, r2
   8841a:	bf18      	it	ne
   8841c:	f040 0001 	orrne.w	r0, r0, #1
   88420:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   88424:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   88428:	fa03 fc0c 	lsl.w	ip, r3, ip
   8842c:	ea40 000c 	orr.w	r0, r0, ip
   88430:	fa23 f302 	lsr.w	r3, r3, r2
   88434:	ea4f 0343 	mov.w	r3, r3, lsl #1
   88438:	e7cc      	b.n	883d4 <__aeabi_d2f+0x14>
   8843a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8843e:	d107      	bne.n	88450 <__aeabi_d2f+0x90>
   88440:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   88444:	bf1e      	ittt	ne
   88446:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8844a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8844e:	4770      	bxne	lr
   88450:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   88454:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   88458:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8845c:	4770      	bx	lr
   8845e:	bf00      	nop

00088460 <__aeabi_uldivmod>:
   88460:	b94b      	cbnz	r3, 88476 <__aeabi_uldivmod+0x16>
   88462:	b942      	cbnz	r2, 88476 <__aeabi_uldivmod+0x16>
   88464:	2900      	cmp	r1, #0
   88466:	bf08      	it	eq
   88468:	2800      	cmpeq	r0, #0
   8846a:	d002      	beq.n	88472 <__aeabi_uldivmod+0x12>
   8846c:	f04f 31ff 	mov.w	r1, #4294967295
   88470:	4608      	mov	r0, r1
   88472:	f000 b83b 	b.w	884ec <__aeabi_idiv0>
   88476:	b082      	sub	sp, #8
   88478:	46ec      	mov	ip, sp
   8847a:	e92d 5000 	stmdb	sp!, {ip, lr}
   8847e:	f000 f81d 	bl	884bc <__gnu_uldivmod_helper>
   88482:	f8dd e004 	ldr.w	lr, [sp, #4]
   88486:	b002      	add	sp, #8
   88488:	bc0c      	pop	{r2, r3}
   8848a:	4770      	bx	lr

0008848c <__gnu_ldivmod_helper>:
   8848c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   88490:	9e08      	ldr	r6, [sp, #32]
   88492:	4614      	mov	r4, r2
   88494:	461d      	mov	r5, r3
   88496:	4680      	mov	r8, r0
   88498:	4689      	mov	r9, r1
   8849a:	f000 f829 	bl	884f0 <__divdi3>
   8849e:	fb04 f301 	mul.w	r3, r4, r1
   884a2:	fba4 ab00 	umull	sl, fp, r4, r0
   884a6:	fb00 3205 	mla	r2, r0, r5, r3
   884aa:	4493      	add	fp, r2
   884ac:	ebb8 080a 	subs.w	r8, r8, sl
   884b0:	eb69 090b 	sbc.w	r9, r9, fp
   884b4:	e9c6 8900 	strd	r8, r9, [r6]
   884b8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000884bc <__gnu_uldivmod_helper>:
   884bc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   884c0:	9e08      	ldr	r6, [sp, #32]
   884c2:	4614      	mov	r4, r2
   884c4:	461d      	mov	r5, r3
   884c6:	4680      	mov	r8, r0
   884c8:	4689      	mov	r9, r1
   884ca:	f000 f961 	bl	88790 <__udivdi3>
   884ce:	fb00 f505 	mul.w	r5, r0, r5
   884d2:	fba0 ab04 	umull	sl, fp, r0, r4
   884d6:	fb04 5401 	mla	r4, r4, r1, r5
   884da:	44a3      	add	fp, r4
   884dc:	ebb8 080a 	subs.w	r8, r8, sl
   884e0:	eb69 090b 	sbc.w	r9, r9, fp
   884e4:	e9c6 8900 	strd	r8, r9, [r6]
   884e8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000884ec <__aeabi_idiv0>:
   884ec:	4770      	bx	lr
   884ee:	bf00      	nop

000884f0 <__divdi3>:
   884f0:	2900      	cmp	r1, #0
   884f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   884f6:	f2c0 80a1 	blt.w	8863c <__divdi3+0x14c>
   884fa:	2400      	movs	r4, #0
   884fc:	2b00      	cmp	r3, #0
   884fe:	f2c0 8098 	blt.w	88632 <__divdi3+0x142>
   88502:	4615      	mov	r5, r2
   88504:	4606      	mov	r6, r0
   88506:	460f      	mov	r7, r1
   88508:	2b00      	cmp	r3, #0
   8850a:	d13f      	bne.n	8858c <__divdi3+0x9c>
   8850c:	428a      	cmp	r2, r1
   8850e:	d958      	bls.n	885c2 <__divdi3+0xd2>
   88510:	fab2 f382 	clz	r3, r2
   88514:	b14b      	cbz	r3, 8852a <__divdi3+0x3a>
   88516:	f1c3 0220 	rsb	r2, r3, #32
   8851a:	fa01 f703 	lsl.w	r7, r1, r3
   8851e:	fa20 f202 	lsr.w	r2, r0, r2
   88522:	409d      	lsls	r5, r3
   88524:	fa00 f603 	lsl.w	r6, r0, r3
   88528:	4317      	orrs	r7, r2
   8852a:	0c29      	lsrs	r1, r5, #16
   8852c:	fbb7 f2f1 	udiv	r2, r7, r1
   88530:	fb01 7712 	mls	r7, r1, r2, r7
   88534:	b2a8      	uxth	r0, r5
   88536:	fb00 f302 	mul.w	r3, r0, r2
   8853a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8853e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   88542:	42bb      	cmp	r3, r7
   88544:	d909      	bls.n	8855a <__divdi3+0x6a>
   88546:	197f      	adds	r7, r7, r5
   88548:	f102 3cff 	add.w	ip, r2, #4294967295
   8854c:	f080 8105 	bcs.w	8875a <__divdi3+0x26a>
   88550:	42bb      	cmp	r3, r7
   88552:	f240 8102 	bls.w	8875a <__divdi3+0x26a>
   88556:	3a02      	subs	r2, #2
   88558:	442f      	add	r7, r5
   8855a:	1aff      	subs	r7, r7, r3
   8855c:	fbb7 f3f1 	udiv	r3, r7, r1
   88560:	fb01 7113 	mls	r1, r1, r3, r7
   88564:	fb00 f003 	mul.w	r0, r0, r3
   88568:	b2b6      	uxth	r6, r6
   8856a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8856e:	4288      	cmp	r0, r1
   88570:	d908      	bls.n	88584 <__divdi3+0x94>
   88572:	1949      	adds	r1, r1, r5
   88574:	f103 37ff 	add.w	r7, r3, #4294967295
   88578:	f080 80f1 	bcs.w	8875e <__divdi3+0x26e>
   8857c:	4288      	cmp	r0, r1
   8857e:	f240 80ee 	bls.w	8875e <__divdi3+0x26e>
   88582:	3b02      	subs	r3, #2
   88584:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   88588:	2300      	movs	r3, #0
   8858a:	e003      	b.n	88594 <__divdi3+0xa4>
   8858c:	428b      	cmp	r3, r1
   8858e:	d90a      	bls.n	885a6 <__divdi3+0xb6>
   88590:	2300      	movs	r3, #0
   88592:	461a      	mov	r2, r3
   88594:	4610      	mov	r0, r2
   88596:	4619      	mov	r1, r3
   88598:	b114      	cbz	r4, 885a0 <__divdi3+0xb0>
   8859a:	4240      	negs	r0, r0
   8859c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   885a0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   885a4:	4770      	bx	lr
   885a6:	fab3 f883 	clz	r8, r3
   885aa:	f1b8 0f00 	cmp.w	r8, #0
   885ae:	f040 8088 	bne.w	886c2 <__divdi3+0x1d2>
   885b2:	428b      	cmp	r3, r1
   885b4:	d302      	bcc.n	885bc <__divdi3+0xcc>
   885b6:	4282      	cmp	r2, r0
   885b8:	f200 80e2 	bhi.w	88780 <__divdi3+0x290>
   885bc:	2300      	movs	r3, #0
   885be:	2201      	movs	r2, #1
   885c0:	e7e8      	b.n	88594 <__divdi3+0xa4>
   885c2:	b912      	cbnz	r2, 885ca <__divdi3+0xda>
   885c4:	2301      	movs	r3, #1
   885c6:	fbb3 f5f2 	udiv	r5, r3, r2
   885ca:	fab5 f285 	clz	r2, r5
   885ce:	2a00      	cmp	r2, #0
   885d0:	d13a      	bne.n	88648 <__divdi3+0x158>
   885d2:	1b7f      	subs	r7, r7, r5
   885d4:	0c28      	lsrs	r0, r5, #16
   885d6:	fa1f fc85 	uxth.w	ip, r5
   885da:	2301      	movs	r3, #1
   885dc:	fbb7 f1f0 	udiv	r1, r7, r0
   885e0:	fb00 7711 	mls	r7, r0, r1, r7
   885e4:	fb0c f201 	mul.w	r2, ip, r1
   885e8:	ea4f 4816 	mov.w	r8, r6, lsr #16
   885ec:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   885f0:	42ba      	cmp	r2, r7
   885f2:	d907      	bls.n	88604 <__divdi3+0x114>
   885f4:	197f      	adds	r7, r7, r5
   885f6:	f101 38ff 	add.w	r8, r1, #4294967295
   885fa:	d202      	bcs.n	88602 <__divdi3+0x112>
   885fc:	42ba      	cmp	r2, r7
   885fe:	f200 80c4 	bhi.w	8878a <__divdi3+0x29a>
   88602:	4641      	mov	r1, r8
   88604:	1abf      	subs	r7, r7, r2
   88606:	fbb7 f2f0 	udiv	r2, r7, r0
   8860a:	fb00 7012 	mls	r0, r0, r2, r7
   8860e:	fb0c fc02 	mul.w	ip, ip, r2
   88612:	b2b6      	uxth	r6, r6
   88614:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   88618:	4584      	cmp	ip, r0
   8861a:	d907      	bls.n	8862c <__divdi3+0x13c>
   8861c:	1940      	adds	r0, r0, r5
   8861e:	f102 37ff 	add.w	r7, r2, #4294967295
   88622:	d202      	bcs.n	8862a <__divdi3+0x13a>
   88624:	4584      	cmp	ip, r0
   88626:	f200 80ae 	bhi.w	88786 <__divdi3+0x296>
   8862a:	463a      	mov	r2, r7
   8862c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   88630:	e7b0      	b.n	88594 <__divdi3+0xa4>
   88632:	43e4      	mvns	r4, r4
   88634:	4252      	negs	r2, r2
   88636:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8863a:	e762      	b.n	88502 <__divdi3+0x12>
   8863c:	4240      	negs	r0, r0
   8863e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88642:	f04f 34ff 	mov.w	r4, #4294967295
   88646:	e759      	b.n	884fc <__divdi3+0xc>
   88648:	4095      	lsls	r5, r2
   8864a:	f1c2 0920 	rsb	r9, r2, #32
   8864e:	fa27 f109 	lsr.w	r1, r7, r9
   88652:	fa26 f909 	lsr.w	r9, r6, r9
   88656:	4097      	lsls	r7, r2
   88658:	0c28      	lsrs	r0, r5, #16
   8865a:	fbb1 f8f0 	udiv	r8, r1, r0
   8865e:	fb00 1118 	mls	r1, r0, r8, r1
   88662:	fa1f fc85 	uxth.w	ip, r5
   88666:	fb0c f308 	mul.w	r3, ip, r8
   8866a:	ea49 0907 	orr.w	r9, r9, r7
   8866e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   88672:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   88676:	428b      	cmp	r3, r1
   88678:	fa06 f602 	lsl.w	r6, r6, r2
   8867c:	d908      	bls.n	88690 <__divdi3+0x1a0>
   8867e:	1949      	adds	r1, r1, r5
   88680:	f108 32ff 	add.w	r2, r8, #4294967295
   88684:	d27a      	bcs.n	8877c <__divdi3+0x28c>
   88686:	428b      	cmp	r3, r1
   88688:	d978      	bls.n	8877c <__divdi3+0x28c>
   8868a:	f1a8 0802 	sub.w	r8, r8, #2
   8868e:	4429      	add	r1, r5
   88690:	1ac9      	subs	r1, r1, r3
   88692:	fbb1 f3f0 	udiv	r3, r1, r0
   88696:	fb00 1713 	mls	r7, r0, r3, r1
   8869a:	fb0c f203 	mul.w	r2, ip, r3
   8869e:	fa1f f989 	uxth.w	r9, r9
   886a2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   886a6:	42ba      	cmp	r2, r7
   886a8:	d907      	bls.n	886ba <__divdi3+0x1ca>
   886aa:	197f      	adds	r7, r7, r5
   886ac:	f103 31ff 	add.w	r1, r3, #4294967295
   886b0:	d260      	bcs.n	88774 <__divdi3+0x284>
   886b2:	42ba      	cmp	r2, r7
   886b4:	d95e      	bls.n	88774 <__divdi3+0x284>
   886b6:	3b02      	subs	r3, #2
   886b8:	442f      	add	r7, r5
   886ba:	1abf      	subs	r7, r7, r2
   886bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   886c0:	e78c      	b.n	885dc <__divdi3+0xec>
   886c2:	f1c8 0220 	rsb	r2, r8, #32
   886c6:	fa25 f102 	lsr.w	r1, r5, r2
   886ca:	fa03 fc08 	lsl.w	ip, r3, r8
   886ce:	fa27 f302 	lsr.w	r3, r7, r2
   886d2:	fa20 f202 	lsr.w	r2, r0, r2
   886d6:	fa07 f708 	lsl.w	r7, r7, r8
   886da:	ea41 0c0c 	orr.w	ip, r1, ip
   886de:	ea4f 491c 	mov.w	r9, ip, lsr #16
   886e2:	fbb3 f1f9 	udiv	r1, r3, r9
   886e6:	fb09 3311 	mls	r3, r9, r1, r3
   886ea:	fa1f fa8c 	uxth.w	sl, ip
   886ee:	fb0a fb01 	mul.w	fp, sl, r1
   886f2:	4317      	orrs	r7, r2
   886f4:	0c3a      	lsrs	r2, r7, #16
   886f6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   886fa:	459b      	cmp	fp, r3
   886fc:	fa05 f008 	lsl.w	r0, r5, r8
   88700:	d908      	bls.n	88714 <__divdi3+0x224>
   88702:	eb13 030c 	adds.w	r3, r3, ip
   88706:	f101 32ff 	add.w	r2, r1, #4294967295
   8870a:	d235      	bcs.n	88778 <__divdi3+0x288>
   8870c:	459b      	cmp	fp, r3
   8870e:	d933      	bls.n	88778 <__divdi3+0x288>
   88710:	3902      	subs	r1, #2
   88712:	4463      	add	r3, ip
   88714:	ebcb 0303 	rsb	r3, fp, r3
   88718:	fbb3 f2f9 	udiv	r2, r3, r9
   8871c:	fb09 3312 	mls	r3, r9, r2, r3
   88720:	fb0a fa02 	mul.w	sl, sl, r2
   88724:	b2bf      	uxth	r7, r7
   88726:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8872a:	45ba      	cmp	sl, r7
   8872c:	d908      	bls.n	88740 <__divdi3+0x250>
   8872e:	eb17 070c 	adds.w	r7, r7, ip
   88732:	f102 33ff 	add.w	r3, r2, #4294967295
   88736:	d21b      	bcs.n	88770 <__divdi3+0x280>
   88738:	45ba      	cmp	sl, r7
   8873a:	d919      	bls.n	88770 <__divdi3+0x280>
   8873c:	3a02      	subs	r2, #2
   8873e:	4467      	add	r7, ip
   88740:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   88744:	fba5 0100 	umull	r0, r1, r5, r0
   88748:	ebca 0707 	rsb	r7, sl, r7
   8874c:	428f      	cmp	r7, r1
   8874e:	f04f 0300 	mov.w	r3, #0
   88752:	d30a      	bcc.n	8876a <__divdi3+0x27a>
   88754:	d005      	beq.n	88762 <__divdi3+0x272>
   88756:	462a      	mov	r2, r5
   88758:	e71c      	b.n	88594 <__divdi3+0xa4>
   8875a:	4662      	mov	r2, ip
   8875c:	e6fd      	b.n	8855a <__divdi3+0x6a>
   8875e:	463b      	mov	r3, r7
   88760:	e710      	b.n	88584 <__divdi3+0x94>
   88762:	fa06 f608 	lsl.w	r6, r6, r8
   88766:	4286      	cmp	r6, r0
   88768:	d2f5      	bcs.n	88756 <__divdi3+0x266>
   8876a:	1e6a      	subs	r2, r5, #1
   8876c:	2300      	movs	r3, #0
   8876e:	e711      	b.n	88594 <__divdi3+0xa4>
   88770:	461a      	mov	r2, r3
   88772:	e7e5      	b.n	88740 <__divdi3+0x250>
   88774:	460b      	mov	r3, r1
   88776:	e7a0      	b.n	886ba <__divdi3+0x1ca>
   88778:	4611      	mov	r1, r2
   8877a:	e7cb      	b.n	88714 <__divdi3+0x224>
   8877c:	4690      	mov	r8, r2
   8877e:	e787      	b.n	88690 <__divdi3+0x1a0>
   88780:	4643      	mov	r3, r8
   88782:	4642      	mov	r2, r8
   88784:	e706      	b.n	88594 <__divdi3+0xa4>
   88786:	3a02      	subs	r2, #2
   88788:	e750      	b.n	8862c <__divdi3+0x13c>
   8878a:	3902      	subs	r1, #2
   8878c:	442f      	add	r7, r5
   8878e:	e739      	b.n	88604 <__divdi3+0x114>

00088790 <__udivdi3>:
   88790:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88794:	4614      	mov	r4, r2
   88796:	4605      	mov	r5, r0
   88798:	460e      	mov	r6, r1
   8879a:	2b00      	cmp	r3, #0
   8879c:	d143      	bne.n	88826 <__udivdi3+0x96>
   8879e:	428a      	cmp	r2, r1
   887a0:	d953      	bls.n	8884a <__udivdi3+0xba>
   887a2:	fab2 f782 	clz	r7, r2
   887a6:	b157      	cbz	r7, 887be <__udivdi3+0x2e>
   887a8:	f1c7 0620 	rsb	r6, r7, #32
   887ac:	fa20 f606 	lsr.w	r6, r0, r6
   887b0:	fa01 f307 	lsl.w	r3, r1, r7
   887b4:	fa02 f407 	lsl.w	r4, r2, r7
   887b8:	fa00 f507 	lsl.w	r5, r0, r7
   887bc:	431e      	orrs	r6, r3
   887be:	0c21      	lsrs	r1, r4, #16
   887c0:	fbb6 f2f1 	udiv	r2, r6, r1
   887c4:	fb01 6612 	mls	r6, r1, r2, r6
   887c8:	b2a0      	uxth	r0, r4
   887ca:	fb00 f302 	mul.w	r3, r0, r2
   887ce:	0c2f      	lsrs	r7, r5, #16
   887d0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   887d4:	42b3      	cmp	r3, r6
   887d6:	d909      	bls.n	887ec <__udivdi3+0x5c>
   887d8:	1936      	adds	r6, r6, r4
   887da:	f102 37ff 	add.w	r7, r2, #4294967295
   887de:	f080 80fd 	bcs.w	889dc <__udivdi3+0x24c>
   887e2:	42b3      	cmp	r3, r6
   887e4:	f240 80fa 	bls.w	889dc <__udivdi3+0x24c>
   887e8:	3a02      	subs	r2, #2
   887ea:	4426      	add	r6, r4
   887ec:	1af6      	subs	r6, r6, r3
   887ee:	fbb6 f3f1 	udiv	r3, r6, r1
   887f2:	fb01 6113 	mls	r1, r1, r3, r6
   887f6:	fb00 f003 	mul.w	r0, r0, r3
   887fa:	b2ad      	uxth	r5, r5
   887fc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   88800:	4288      	cmp	r0, r1
   88802:	d908      	bls.n	88816 <__udivdi3+0x86>
   88804:	1909      	adds	r1, r1, r4
   88806:	f103 36ff 	add.w	r6, r3, #4294967295
   8880a:	f080 80e9 	bcs.w	889e0 <__udivdi3+0x250>
   8880e:	4288      	cmp	r0, r1
   88810:	f240 80e6 	bls.w	889e0 <__udivdi3+0x250>
   88814:	3b02      	subs	r3, #2
   88816:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8881a:	2300      	movs	r3, #0
   8881c:	4610      	mov	r0, r2
   8881e:	4619      	mov	r1, r3
   88820:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88824:	4770      	bx	lr
   88826:	428b      	cmp	r3, r1
   88828:	d84c      	bhi.n	888c4 <__udivdi3+0x134>
   8882a:	fab3 f683 	clz	r6, r3
   8882e:	2e00      	cmp	r6, #0
   88830:	d14f      	bne.n	888d2 <__udivdi3+0x142>
   88832:	428b      	cmp	r3, r1
   88834:	d302      	bcc.n	8883c <__udivdi3+0xac>
   88836:	4282      	cmp	r2, r0
   88838:	f200 80dd 	bhi.w	889f6 <__udivdi3+0x266>
   8883c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88840:	2300      	movs	r3, #0
   88842:	2201      	movs	r2, #1
   88844:	4610      	mov	r0, r2
   88846:	4619      	mov	r1, r3
   88848:	4770      	bx	lr
   8884a:	b912      	cbnz	r2, 88852 <__udivdi3+0xc2>
   8884c:	2401      	movs	r4, #1
   8884e:	fbb4 f4f2 	udiv	r4, r4, r2
   88852:	fab4 f284 	clz	r2, r4
   88856:	2a00      	cmp	r2, #0
   88858:	f040 8082 	bne.w	88960 <__udivdi3+0x1d0>
   8885c:	1b09      	subs	r1, r1, r4
   8885e:	0c26      	lsrs	r6, r4, #16
   88860:	b2a7      	uxth	r7, r4
   88862:	2301      	movs	r3, #1
   88864:	fbb1 f0f6 	udiv	r0, r1, r6
   88868:	fb06 1110 	mls	r1, r6, r0, r1
   8886c:	fb07 f200 	mul.w	r2, r7, r0
   88870:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   88874:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   88878:	428a      	cmp	r2, r1
   8887a:	d907      	bls.n	8888c <__udivdi3+0xfc>
   8887c:	1909      	adds	r1, r1, r4
   8887e:	f100 3cff 	add.w	ip, r0, #4294967295
   88882:	d202      	bcs.n	8888a <__udivdi3+0xfa>
   88884:	428a      	cmp	r2, r1
   88886:	f200 80c8 	bhi.w	88a1a <__udivdi3+0x28a>
   8888a:	4660      	mov	r0, ip
   8888c:	1a89      	subs	r1, r1, r2
   8888e:	fbb1 f2f6 	udiv	r2, r1, r6
   88892:	fb06 1112 	mls	r1, r6, r2, r1
   88896:	fb07 f702 	mul.w	r7, r7, r2
   8889a:	b2ad      	uxth	r5, r5
   8889c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   888a0:	42af      	cmp	r7, r5
   888a2:	d908      	bls.n	888b6 <__udivdi3+0x126>
   888a4:	192c      	adds	r4, r5, r4
   888a6:	f102 31ff 	add.w	r1, r2, #4294967295
   888aa:	f080 809b 	bcs.w	889e4 <__udivdi3+0x254>
   888ae:	42a7      	cmp	r7, r4
   888b0:	f240 8098 	bls.w	889e4 <__udivdi3+0x254>
   888b4:	3a02      	subs	r2, #2
   888b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   888ba:	4610      	mov	r0, r2
   888bc:	4619      	mov	r1, r3
   888be:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   888c2:	4770      	bx	lr
   888c4:	2300      	movs	r3, #0
   888c6:	461a      	mov	r2, r3
   888c8:	4610      	mov	r0, r2
   888ca:	4619      	mov	r1, r3
   888cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   888d0:	4770      	bx	lr
   888d2:	f1c6 0520 	rsb	r5, r6, #32
   888d6:	fa22 f705 	lsr.w	r7, r2, r5
   888da:	fa03 f406 	lsl.w	r4, r3, r6
   888de:	fa21 f305 	lsr.w	r3, r1, r5
   888e2:	fa01 fb06 	lsl.w	fp, r1, r6
   888e6:	fa20 f505 	lsr.w	r5, r0, r5
   888ea:	433c      	orrs	r4, r7
   888ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
   888f0:	fbb3 fcf8 	udiv	ip, r3, r8
   888f4:	fb08 331c 	mls	r3, r8, ip, r3
   888f8:	fa1f f984 	uxth.w	r9, r4
   888fc:	fb09 fa0c 	mul.w	sl, r9, ip
   88900:	ea45 0b0b 	orr.w	fp, r5, fp
   88904:	ea4f 451b 	mov.w	r5, fp, lsr #16
   88908:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8890c:	459a      	cmp	sl, r3
   8890e:	fa02 f206 	lsl.w	r2, r2, r6
   88912:	d904      	bls.n	8891e <__udivdi3+0x18e>
   88914:	191b      	adds	r3, r3, r4
   88916:	f10c 35ff 	add.w	r5, ip, #4294967295
   8891a:	d36f      	bcc.n	889fc <__udivdi3+0x26c>
   8891c:	46ac      	mov	ip, r5
   8891e:	ebca 0303 	rsb	r3, sl, r3
   88922:	fbb3 f5f8 	udiv	r5, r3, r8
   88926:	fb08 3315 	mls	r3, r8, r5, r3
   8892a:	fb09 f905 	mul.w	r9, r9, r5
   8892e:	fa1f fb8b 	uxth.w	fp, fp
   88932:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   88936:	45b9      	cmp	r9, r7
   88938:	d904      	bls.n	88944 <__udivdi3+0x1b4>
   8893a:	193f      	adds	r7, r7, r4
   8893c:	f105 33ff 	add.w	r3, r5, #4294967295
   88940:	d362      	bcc.n	88a08 <__udivdi3+0x278>
   88942:	461d      	mov	r5, r3
   88944:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   88948:	fbac 2302 	umull	r2, r3, ip, r2
   8894c:	ebc9 0707 	rsb	r7, r9, r7
   88950:	429f      	cmp	r7, r3
   88952:	f04f 0500 	mov.w	r5, #0
   88956:	d34a      	bcc.n	889ee <__udivdi3+0x25e>
   88958:	d046      	beq.n	889e8 <__udivdi3+0x258>
   8895a:	4662      	mov	r2, ip
   8895c:	462b      	mov	r3, r5
   8895e:	e75d      	b.n	8881c <__udivdi3+0x8c>
   88960:	4094      	lsls	r4, r2
   88962:	f1c2 0920 	rsb	r9, r2, #32
   88966:	fa21 fc09 	lsr.w	ip, r1, r9
   8896a:	4091      	lsls	r1, r2
   8896c:	fa20 f909 	lsr.w	r9, r0, r9
   88970:	0c26      	lsrs	r6, r4, #16
   88972:	fbbc f8f6 	udiv	r8, ip, r6
   88976:	fb06 cc18 	mls	ip, r6, r8, ip
   8897a:	b2a7      	uxth	r7, r4
   8897c:	fb07 f308 	mul.w	r3, r7, r8
   88980:	ea49 0901 	orr.w	r9, r9, r1
   88984:	ea4f 4119 	mov.w	r1, r9, lsr #16
   88988:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   8898c:	4563      	cmp	r3, ip
   8898e:	fa00 f502 	lsl.w	r5, r0, r2
   88992:	d909      	bls.n	889a8 <__udivdi3+0x218>
   88994:	eb1c 0c04 	adds.w	ip, ip, r4
   88998:	f108 32ff 	add.w	r2, r8, #4294967295
   8899c:	d23b      	bcs.n	88a16 <__udivdi3+0x286>
   8899e:	4563      	cmp	r3, ip
   889a0:	d939      	bls.n	88a16 <__udivdi3+0x286>
   889a2:	f1a8 0802 	sub.w	r8, r8, #2
   889a6:	44a4      	add	ip, r4
   889a8:	ebc3 0c0c 	rsb	ip, r3, ip
   889ac:	fbbc f3f6 	udiv	r3, ip, r6
   889b0:	fb06 c113 	mls	r1, r6, r3, ip
   889b4:	fb07 f203 	mul.w	r2, r7, r3
   889b8:	fa1f f989 	uxth.w	r9, r9
   889bc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   889c0:	428a      	cmp	r2, r1
   889c2:	d907      	bls.n	889d4 <__udivdi3+0x244>
   889c4:	1909      	adds	r1, r1, r4
   889c6:	f103 30ff 	add.w	r0, r3, #4294967295
   889ca:	d222      	bcs.n	88a12 <__udivdi3+0x282>
   889cc:	428a      	cmp	r2, r1
   889ce:	d920      	bls.n	88a12 <__udivdi3+0x282>
   889d0:	3b02      	subs	r3, #2
   889d2:	4421      	add	r1, r4
   889d4:	1a89      	subs	r1, r1, r2
   889d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   889da:	e743      	b.n	88864 <__udivdi3+0xd4>
   889dc:	463a      	mov	r2, r7
   889de:	e705      	b.n	887ec <__udivdi3+0x5c>
   889e0:	4633      	mov	r3, r6
   889e2:	e718      	b.n	88816 <__udivdi3+0x86>
   889e4:	460a      	mov	r2, r1
   889e6:	e766      	b.n	888b6 <__udivdi3+0x126>
   889e8:	40b0      	lsls	r0, r6
   889ea:	4290      	cmp	r0, r2
   889ec:	d2b5      	bcs.n	8895a <__udivdi3+0x1ca>
   889ee:	f10c 32ff 	add.w	r2, ip, #4294967295
   889f2:	2300      	movs	r3, #0
   889f4:	e712      	b.n	8881c <__udivdi3+0x8c>
   889f6:	4633      	mov	r3, r6
   889f8:	4632      	mov	r2, r6
   889fa:	e70f      	b.n	8881c <__udivdi3+0x8c>
   889fc:	459a      	cmp	sl, r3
   889fe:	d98d      	bls.n	8891c <__udivdi3+0x18c>
   88a00:	f1ac 0c02 	sub.w	ip, ip, #2
   88a04:	4423      	add	r3, r4
   88a06:	e78a      	b.n	8891e <__udivdi3+0x18e>
   88a08:	45b9      	cmp	r9, r7
   88a0a:	d99a      	bls.n	88942 <__udivdi3+0x1b2>
   88a0c:	3d02      	subs	r5, #2
   88a0e:	4427      	add	r7, r4
   88a10:	e798      	b.n	88944 <__udivdi3+0x1b4>
   88a12:	4603      	mov	r3, r0
   88a14:	e7de      	b.n	889d4 <__udivdi3+0x244>
   88a16:	4690      	mov	r8, r2
   88a18:	e7c6      	b.n	889a8 <__udivdi3+0x218>
   88a1a:	3802      	subs	r0, #2
   88a1c:	4421      	add	r1, r4
   88a1e:	e735      	b.n	8888c <__udivdi3+0xfc>
   88a20:	00007325 	.word	0x00007325
   88a24:	000a6425 	.word	0x000a6425
   88a28:	09097325 	.word	0x09097325
   88a2c:	25096325 	.word	0x25096325
   88a30:	75250975 	.word	0x75250975
   88a34:	0d752509 	.word	0x0d752509
   88a38:	0000000a 	.word	0x0000000a
   88a3c:	454c4449 	.word	0x454c4449
   88a40:	00000000 	.word	0x00000000
   88a44:	00000a0d 	.word	0x00000a0d
   88a48:	20726d54 	.word	0x20726d54
   88a4c:	00637653 	.word	0x00637653
   88a50:	00000001 	.word	0x00000001
   88a54:	00000002 	.word	0x00000002
   88a58:	00000004 	.word	0x00000004
   88a5c:	00000008 	.word	0x00000008
   88a60:	00000010 	.word	0x00000010
   88a64:	00000020 	.word	0x00000020
   88a68:	00000040 	.word	0x00000040
   88a6c:	00000080 	.word	0x00000080
   88a70:	00000100 	.word	0x00000100
   88a74:	00000200 	.word	0x00000200
   88a78:	00000400 	.word	0x00000400
   88a7c:	6b736174 	.word	0x6b736174
   88a80:	75646f4d 	.word	0x75646f4d
   88a84:	6574616c 	.word	0x6574616c
   88a88:	00000000 	.word	0x00000000
   88a8c:	6c696146 	.word	0x6c696146
   88a90:	74206465 	.word	0x74206465
   88a94:	7263206f 	.word	0x7263206f
   88a98:	65746165 	.word	0x65746165
   88a9c:	73617420 	.word	0x73617420
   88aa0:	646f4d6b 	.word	0x646f4d6b
   88aa4:	74616c75 	.word	0x74616c75
   88aa8:	00000a65 	.word	0x00000a65
   88aac:	6b736174 	.word	0x6b736174
   88ab0:	646e6553 	.word	0x646e6553
   88ab4:	614d6f54 	.word	0x614d6f54
   88ab8:	62616c74 	.word	0x62616c74
   88abc:	00000000 	.word	0x00000000
   88ac0:	6c696146 	.word	0x6c696146
   88ac4:	74206465 	.word	0x74206465
   88ac8:	7263206f 	.word	0x7263206f
   88acc:	65746165 	.word	0x65746165
   88ad0:	73617420 	.word	0x73617420
   88ad4:	6e65536b 	.word	0x6e65536b
   88ad8:	4d6f5464 	.word	0x4d6f5464
   88adc:	616c7461 	.word	0x616c7461
   88ae0:	00000a62 	.word	0x00000a62

00088ae4 <_global_impure_ptr>:
   88ae4:	20070018 00000043 00000000              ... C.......

00088af0 <fpi.5258>:
   88af0:	00000035 fffffbce 000003cb 00000001     5...............
   88b00:	00000000                                ....

00088b04 <fpinan.5294>:
   88b04:	00000034 fffffbce 000003cb 00000001     4...............
   88b14:	00000000                                ....

00088b18 <tinytens>:
   88b18:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   88b28:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   88b38:	64ac6f43 11680628 6900666e 7974696e     Co.d(.h.nf.inity
   88b48:	006e6100                                .an.

00088b4c <blanks.6701>:
   88b4c:	20202020 20202020 20202020 20202020                     

00088b5c <zeroes.6702>:
   88b5c:	30303030 30303030 30303030 30303030     0000000000000000
   88b6c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   88b7c:	32313000 36353433 61393837 65646362     .0123456789abcde
   88b8c:	000a0066                                         f.

00088b8e <basefix.6168>:
   88b8e:	0001000a 00030002 00050004 00070006     ................
   88b9e:	00090008 000b000a 000d000c 000f000e     ................
   88bae:	20000010                                         ..

00088bb0 <_ctype_>:
   88bb0:	20202000 20202020 28282020 20282828     .         ((((( 
   88bc0:	20202020 20202020 20202020 20202020                     
   88bd0:	10108820 10101010 10101010 10101010      ...............
   88be0:	04040410 04040404 10040404 10101010     ................
   88bf0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   88c00:	01010101 01010101 01010101 10101010     ................
   88c10:	42421010 42424242 02020202 02020202     ..BBBBBB........
   88c20:	02020202 02020202 02020202 10101010     ................
   88c30:	00000020 00000000 00000000 00000000      ...............
	...
   88cb0:	534f5000 2e005849 00000000 00000000     .POSIX..........

00088cc0 <p05.5289>:
   88cc0:	00000005 00000019 0000007d 00000000     ........}.......

00088cd0 <__mprec_tens>:
   88cd0:	00000000 3ff00000 00000000 40240000     .......?......$@
   88ce0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   88cf0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   88d00:	00000000 412e8480 00000000 416312d0     .......A......cA
   88d10:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   88d20:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   88d30:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   88d40:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   88d50:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   88d60:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88d70:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88d80:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88d90:	79d99db4 44ea7843                       ...yCx.D

00088d98 <__mprec_tinytens>:
   88d98:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   88da8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   88db8:	64ac6f43 0ac80628                       Co.d(...

00088dc0 <__mprec_bigtens>:
   88dc0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88dd0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   88de0:	7f73bf3c 75154fdd                       <.s..O.u

00088de8 <_init>:
   88de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88dea:	bf00      	nop
   88dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88dee:	bc08      	pop	{r3}
   88df0:	469e      	mov	lr, r3
   88df2:	4770      	bx	lr

00088df4 <__init_array_start>:
   88df4:	00085491 	.word	0x00085491

00088df8 <__frame_dummy_init_array_entry>:
   88df8:	0008016d                                m...

00088dfc <_fini>:
   88dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88dfe:	bf00      	nop
   88e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88e02:	bc08      	pop	{r3}
   88e04:	469e      	mov	lr, r3
   88e06:	4770      	bx	lr

00088e08 <__fini_array_start>:
   88e08:	00080145 	.word	0x00080145
