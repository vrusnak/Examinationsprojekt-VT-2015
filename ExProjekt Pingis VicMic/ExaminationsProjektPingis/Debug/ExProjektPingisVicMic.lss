
ExProjektPingisVicMic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062f8  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000862f8  000862f8  0000e2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000874  20070000  00086300  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a34c  20070878  00086b78  00010874  2**3
                  ALLOC
  4 .stack        00002004  2007abc4  00090ec4  00010874  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010874  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0001089d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001479d  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003805  00000000  00000000  00025095  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008e48  00000000  00000000  0002889a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001010  00000000  00000000  000316e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f68  00000000  00000000  000326f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a1e1  00000000  00000000  0003365a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001436b  00000000  00000000  0004d83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000682d7  00000000  00000000  00061ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e7c  00000000  00000000  000c9e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cbc8 	.word	0x2007cbc8
   80004:	000824c1 	.word	0x000824c1
   80008:	000824bd 	.word	0x000824bd
   8000c:	000824bd 	.word	0x000824bd
   80010:	000824bd 	.word	0x000824bd
   80014:	000824bd 	.word	0x000824bd
   80018:	000824bd 	.word	0x000824bd
	...
   8002c:	000807e1 	.word	0x000807e1
   80030:	000824bd 	.word	0x000824bd
   80034:	00000000 	.word	0x00000000
   80038:	0008085d 	.word	0x0008085d
   8003c:	00080899 	.word	0x00080899
   80040:	000824bd 	.word	0x000824bd
   80044:	000824bd 	.word	0x000824bd
   80048:	000824bd 	.word	0x000824bd
   8004c:	000824bd 	.word	0x000824bd
   80050:	000824bd 	.word	0x000824bd
   80054:	000824bd 	.word	0x000824bd
   80058:	000824bd 	.word	0x000824bd
   8005c:	000824bd 	.word	0x000824bd
   80060:	000824bd 	.word	0x000824bd
   80064:	000824bd 	.word	0x000824bd
   80068:	00000000 	.word	0x00000000
   8006c:	0008232d 	.word	0x0008232d
   80070:	00082341 	.word	0x00082341
   80074:	00082355 	.word	0x00082355
   80078:	00082369 	.word	0x00082369
	...
   80084:	000824bd 	.word	0x000824bd
   80088:	000824bd 	.word	0x000824bd
   8008c:	000824bd 	.word	0x000824bd
   80090:	000824bd 	.word	0x000824bd
   80094:	000824bd 	.word	0x000824bd
   80098:	000824bd 	.word	0x000824bd
   8009c:	000824bd 	.word	0x000824bd
   800a0:	000824bd 	.word	0x000824bd
   800a4:	00000000 	.word	0x00000000
   800a8:	000824bd 	.word	0x000824bd
   800ac:	000824bd 	.word	0x000824bd
   800b0:	000824bd 	.word	0x000824bd
   800b4:	000824bd 	.word	0x000824bd
   800b8:	000824bd 	.word	0x000824bd
   800bc:	000824bd 	.word	0x000824bd
   800c0:	000824bd 	.word	0x000824bd
   800c4:	000824bd 	.word	0x000824bd
   800c8:	000824bd 	.word	0x000824bd
   800cc:	000824bd 	.word	0x000824bd
   800d0:	000824bd 	.word	0x000824bd
   800d4:	000824bd 	.word	0x000824bd
   800d8:	000824bd 	.word	0x000824bd
   800dc:	000824bd 	.word	0x000824bd
   800e0:	000824bd 	.word	0x000824bd
   800e4:	000824bd 	.word	0x000824bd
   800e8:	000824bd 	.word	0x000824bd
   800ec:	000824bd 	.word	0x000824bd
   800f0:	000824bd 	.word	0x000824bd

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070878 	.word	0x20070878
   80110:	00000000 	.word	0x00000000
   80114:	00086300 	.word	0x00086300

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086300 	.word	0x00086300
   8013c:	2007087c 	.word	0x2007087c
   80140:	00086300 	.word	0x00086300
   80144:	00000000 	.word	0x00000000

00080148 <InitADC>:

/************************************************************************/
/* Configuration of AD-converter. */
/************************************************************************/
void InitADC(void)
{
   80148:	b538      	push	{r3, r4, r5, lr}
	/* Configure power management of ADC timer clock */
	pmc_enable_periph_clk(ID_ADC);
   8014a:	2025      	movs	r0, #37	; 0x25
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <InitADC+0x40>)
   8014e:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 1000000, 8); //	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);
   80150:	4c0e      	ldr	r4, [pc, #56]	; (8018c <InitADC+0x44>)
   80152:	4620      	mov	r0, r4
   80154:	490e      	ldr	r1, [pc, #56]	; (80190 <InitADC+0x48>)
   80156:	4a0f      	ldr	r2, [pc, #60]	; (80194 <InitADC+0x4c>)
   80158:	2308      	movs	r3, #8
   8015a:	4d0f      	ldr	r5, [pc, #60]	; (80198 <InitADC+0x50>)
   8015c:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   8015e:	4620      	mov	r0, r4
   80160:	2100      	movs	r1, #0
   80162:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80166:	2301      	movs	r3, #1
   80168:	4d0c      	ldr	r5, [pc, #48]	; (8019c <InitADC+0x54>)
   8016a:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_10);
   8016c:	4620      	mov	r0, r4
   8016e:	2110      	movs	r1, #16
   80170:	4b0b      	ldr	r3, [pc, #44]	; (801a0 <InitADC+0x58>)
   80172:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);
   80174:	4620      	mov	r0, r4
   80176:	210a      	movs	r1, #10
   80178:	4b0a      	ldr	r3, [pc, #40]	; (801a4 <InitADC+0x5c>)
   8017a:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   8017c:	4620      	mov	r0, r4
   8017e:	2100      	movs	r1, #0
   80180:	460a      	mov	r2, r1
   80182:	4b09      	ldr	r3, [pc, #36]	; (801a8 <InitADC+0x60>)
   80184:	4798      	blx	r3
   80186:	bd38      	pop	{r3, r4, r5, pc}
   80188:	00082465 	.word	0x00082465
   8018c:	400c0000 	.word	0x400c0000
   80190:	0a037a00 	.word	0x0a037a00
   80194:	000f4240 	.word	0x000f4240
   80198:	0008020d 	.word	0x0008020d
   8019c:	00080261 	.word	0x00080261
   801a0:	00080241 	.word	0x00080241
   801a4:	00080289 	.word	0x00080289
   801a8:	00080251 	.word	0x00080251

000801ac <ReadFanValue>:

/************************************************************************/
/* Returns a value from channel 10 on the analogue input. */
/************************************************************************/
uint32_t ReadFanValue(void)
{
   801ac:	b510      	push	{r4, lr}
	uint32_t currSensorValue;
	adc_start(ADC);
   801ae:	4c04      	ldr	r4, [pc, #16]	; (801c0 <ReadFanValue+0x14>)
   801b0:	4620      	mov	r0, r4
   801b2:	4b04      	ldr	r3, [pc, #16]	; (801c4 <ReadFanValue+0x18>)
   801b4:	4798      	blx	r3
	currSensorValue = adc_get_channel_value(ADC, ADC_CHANNEL_10);
   801b6:	4620      	mov	r0, r4
   801b8:	210a      	movs	r1, #10
   801ba:	4b03      	ldr	r3, [pc, #12]	; (801c8 <ReadFanValue+0x1c>)
   801bc:	4798      	blx	r3
	return currSensorValue;
   801be:	bd10      	pop	{r4, pc}
   801c0:	400c0000 	.word	0x400c0000
   801c4:	00080281 	.word	0x00080281
   801c8:	00080295 	.word	0x00080295

000801cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801d0:	460c      	mov	r4, r1
   801d2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   801d4:	b960      	cbnz	r0, 801f0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   801d6:	2a00      	cmp	r2, #0
   801d8:	dd0e      	ble.n	801f8 <_read+0x2c>
   801da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801dc:	4e09      	ldr	r6, [pc, #36]	; (80204 <_read+0x38>)
   801de:	4d0a      	ldr	r5, [pc, #40]	; (80208 <_read+0x3c>)
   801e0:	6830      	ldr	r0, [r6, #0]
   801e2:	4621      	mov	r1, r4
   801e4:	682b      	ldr	r3, [r5, #0]
   801e6:	4798      	blx	r3
		ptr++;
   801e8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801ea:	42bc      	cmp	r4, r7
   801ec:	d1f8      	bne.n	801e0 <_read+0x14>
   801ee:	e006      	b.n	801fe <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801f0:	f04f 30ff 	mov.w	r0, #4294967295
   801f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   801f8:	2000      	movs	r0, #0
   801fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   801fe:	4640      	mov	r0, r8
	}
	return nChars;
}
   80200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80204:	2007abbc 	.word	0x2007abbc
   80208:	2007ab8c 	.word	0x2007ab8c

0008020c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   8020c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8020e:	2401      	movs	r4, #1
   80210:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80212:	2400      	movs	r4, #0
   80214:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80216:	f240 2502 	movw	r5, #514	; 0x202
   8021a:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8021e:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80222:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80226:	6845      	ldr	r5, [r0, #4]
   80228:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8022a:	0052      	lsls	r2, r2, #1
   8022c:	fbb1 f1f2 	udiv	r1, r1, r2
   80230:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80232:	022d      	lsls	r5, r5, #8
   80234:	b2ad      	uxth	r5, r5
   80236:	432b      	orrs	r3, r5
   80238:	6043      	str	r3, [r0, #4]
	return 0;
}
   8023a:	4620      	mov	r0, r4
   8023c:	bc30      	pop	{r4, r5}
   8023e:	4770      	bx	lr

00080240 <adc_set_resolution>:
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
//p_adc->ADC_MR |= (resolution << 4) & ADC_MR_LOWRES;
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80240:	6843      	ldr	r3, [r0, #4]
   80242:	f023 0310 	bic.w	r3, r3, #16
   80246:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80248:	6843      	ldr	r3, [r0, #4]
   8024a:	4319      	orrs	r1, r3
   8024c:	6041      	str	r1, [r0, #4]
   8024e:	4770      	bx	lr

00080250 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80250:	6843      	ldr	r3, [r0, #4]
   80252:	4319      	orrs	r1, r3
   80254:	01d2      	lsls	r2, r2, #7
   80256:	b2d3      	uxtb	r3, r2
   80258:	4319      	orrs	r1, r3
   8025a:	6041      	str	r1, [r0, #4]
   8025c:	4770      	bx	lr
   8025e:	bf00      	nop

00080260 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80260:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80262:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80264:	4322      	orrs	r2, r4
   80266:	0609      	lsls	r1, r1, #24
   80268:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
   8026c:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8026e:	071b      	lsls	r3, r3, #28
   80270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80274:	431a      	orrs	r2, r3
   80276:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80278:	f85d 4b04 	ldr.w	r4, [sp], #4
   8027c:	4770      	bx	lr
   8027e:	bf00      	nop

00080280 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80280:	2302      	movs	r3, #2
   80282:	6003      	str	r3, [r0, #0]
   80284:	4770      	bx	lr
   80286:	bf00      	nop

00080288 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80288:	2301      	movs	r3, #1
   8028a:	fa03 f101 	lsl.w	r1, r3, r1
   8028e:	6101      	str	r1, [r0, #16]
   80290:	4770      	bx	lr
   80292:	bf00      	nop

00080294 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   80294:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80296:	bf9a      	itte	ls
   80298:	3114      	addls	r1, #20
   8029a:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   8029e:	2000      	movhi	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   802a0:	4770      	bx	lr
   802a2:	bf00      	nop

000802a4 <setupUART>:
#include "SerialUART.h"

/************************************************************************/
/* Configuration of the UART. */
/************************************************************************/
void setupUART(void){
   802a4:	b530      	push	{r4, r5, lr}
   802a6:	b085      	sub	sp, #20
	pio_configure(PINS_UART_PIO, PINS_UART_TYPE, PINS_UART_MASK, PIO_DEFAULT);
   802a8:	4c12      	ldr	r4, [pc, #72]	; (802f4 <setupUART+0x50>)
   802aa:	4620      	mov	r0, r4
   802ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802b0:	f44f 7240 	mov.w	r2, #768	; 0x300
   802b4:	2300      	movs	r3, #0
   802b6:	4d10      	ldr	r5, [pc, #64]	; (802f8 <setupUART+0x54>)
   802b8:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_UART);
   802ba:	2008      	movs	r0, #8
   802bc:	4b0f      	ldr	r3, [pc, #60]	; (802fc <setupUART+0x58>)
   802be:	4798      	blx	r3
	const sam_uart_opt_t uart0_settings = { sysclk_get_cpu_hz(), CONF_UART_BAUDRATE, UART_MR_PAR_NO };
   802c0:	4b0f      	ldr	r3, [pc, #60]	; (80300 <setupUART+0x5c>)
   802c2:	9301      	str	r3, [sp, #4]
   802c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802c8:	9302      	str	r3, [sp, #8]
   802ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802ce:	9303      	str	r3, [sp, #12]
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   802d0:	f44f 7380 	mov.w	r3, #256	; 0x100
   802d4:	6663      	str	r3, [r4, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802d6:	6563      	str	r3, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802d8:	6263      	str	r3, [r4, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802da:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802de:	6f23      	ldr	r3, [r4, #112]	; 0x70
   802e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   802e4:	6723      	str	r3, [r4, #112]	; 0x70
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
	uart_init(UART, &uart0_settings);
   802e6:	4807      	ldr	r0, [pc, #28]	; (80304 <setupUART+0x60>)
   802e8:	a901      	add	r1, sp, #4
   802ea:	4b07      	ldr	r3, [pc, #28]	; (80308 <setupUART+0x64>)
   802ec:	4798      	blx	r3
}
   802ee:	b005      	add	sp, #20
   802f0:	bd30      	pop	{r4, r5, pc}
   802f2:	bf00      	nop
   802f4:	400e0e00 	.word	0x400e0e00
   802f8:	000820d1 	.word	0x000820d1
   802fc:	00082465 	.word	0x00082465
   80300:	0501bd00 	.word	0x0501bd00
   80304:	400e0800 	.word	0x400e0800
   80308:	00081ed9 	.word	0x00081ed9

0008030c <readByte>:
}

/************************************************************************/
/* Get and return a binary value. */
/************************************************************************/
uint8_t readByte(void){
   8030c:	b500      	push	{lr}
   8030e:	b083      	sub	sp, #12
	uint8_t value;
	uart_read(CONF_UART, &value);
   80310:	4804      	ldr	r0, [pc, #16]	; (80324 <readByte+0x18>)
   80312:	f10d 0107 	add.w	r1, sp, #7
   80316:	4b04      	ldr	r3, [pc, #16]	; (80328 <readByte+0x1c>)
   80318:	4798      	blx	r3
	return value;
}
   8031a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   8031e:	b003      	add	sp, #12
   80320:	f85d fb04 	ldr.w	pc, [sp], #4
   80324:	400e0800 	.word	0x400e0800
   80328:	00081f21 	.word	0x00081f21

0008032c <isRXReady>:

/************************************************************************/
/* Check if reciever side of UART is ready. */
/************************************************************************/
uint32_t isRXReady(void){
	return UART->UART_SR & UART_SR_RXRDY;
   8032c:	4b02      	ldr	r3, [pc, #8]	; (80338 <isRXReady+0xc>)
   8032e:	6958      	ldr	r0, [r3, #20]
   80330:	f000 0001 	and.w	r0, r0, #1
   80334:	4770      	bx	lr
   80336:	bf00      	nop
   80338:	400e0800 	.word	0x400e0800

0008033c <InitPIN40>:

/************************************************************************/
/* Initiation of digital pin 40 on the Arduino Due board. */
/************************************************************************/
void InitPIN40(void)
{
   8033c:	b538      	push	{r3, r4, r5, lr}
	pwmPIN40.channel = PWM_CHANNEL_3;
   8033e:	490c      	ldr	r1, [pc, #48]	; (80370 <InitPIN40+0x34>)
   80340:	2403      	movs	r4, #3
   80342:	600c      	str	r4, [r1, #0]
	pwmPIN40.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80344:	220b      	movs	r2, #11
   80346:	604a      	str	r2, [r1, #4]
	pwmPIN40.ul_duty = 0;
   80348:	2200      	movs	r2, #0
   8034a:	60ca      	str	r2, [r1, #12]
	pwmPIN40.ul_period = 100;
   8034c:	2264      	movs	r2, #100	; 0x64
   8034e:	610a      	str	r2, [r1, #16]
	pwm_channel_init(PWM, &pwmPIN40);
   80350:	4d08      	ldr	r5, [pc, #32]	; (80374 <InitPIN40+0x38>)
   80352:	4628      	mov	r0, r5
   80354:	4b08      	ldr	r3, [pc, #32]	; (80378 <InitPIN40+0x3c>)
   80356:	4798      	blx	r3
	pio_set_peripheral(PIOC, PIO_PERIPH_B, PIO_PC8B_PWML3);
   80358:	4808      	ldr	r0, [pc, #32]	; (8037c <InitPIN40+0x40>)
   8035a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8035e:	f44f 7280 	mov.w	r2, #256	; 0x100
   80362:	4b07      	ldr	r3, [pc, #28]	; (80380 <InitPIN40+0x44>)
   80364:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_3);
   80366:	4628      	mov	r0, r5
   80368:	4621      	mov	r1, r4
   8036a:	4b06      	ldr	r3, [pc, #24]	; (80384 <InitPIN40+0x48>)
   8036c:	4798      	blx	r3
   8036e:	bd38      	pop	{r3, r4, r5, pc}
   80370:	2007ab90 	.word	0x2007ab90
   80374:	40094000 	.word	0x40094000
   80378:	00081d99 	.word	0x00081d99
   8037c:	400e1200 	.word	0x400e1200
   80380:	00082035 	.word	0x00082035
   80384:	00081ec1 	.word	0x00081ec1

00080388 <InitPWM>:
pwm_channel_t pwmPIN40;

/************************************************************************/
/* Configuration of the Pulse Width Modulation (PWM). */
/************************************************************************/
void InitPWM(void){
   80388:	b510      	push	{r4, lr}
   8038a:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_PWM);
   8038c:	2024      	movs	r0, #36	; 0x24
   8038e:	4b0a      	ldr	r3, [pc, #40]	; (803b8 <InitPWM+0x30>)
   80390:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_3);
   80392:	4c0a      	ldr	r4, [pc, #40]	; (803bc <InitPWM+0x34>)
   80394:	4620      	mov	r0, r4
   80396:	2103      	movs	r1, #3
   80398:	4b09      	ldr	r3, [pc, #36]	; (803c0 <InitPWM+0x38>)
   8039a:	4798      	blx	r3
	
	pwm_clock_t clock_setting = {
   8039c:	4b09      	ldr	r3, [pc, #36]	; (803c4 <InitPWM+0x3c>)
   8039e:	9301      	str	r3, [sp, #4]
   803a0:	2300      	movs	r3, #0
   803a2:	9302      	str	r3, [sp, #8]
   803a4:	4b08      	ldr	r3, [pc, #32]	; (803c8 <InitPWM+0x40>)
   803a6:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000 * 1000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   803a8:	4620      	mov	r0, r4
   803aa:	a901      	add	r1, sp, #4
   803ac:	4b07      	ldr	r3, [pc, #28]	; (803cc <InitPWM+0x44>)
   803ae:	4798      	blx	r3
	
	InitPIN40();
   803b0:	4b07      	ldr	r3, [pc, #28]	; (803d0 <InitPWM+0x48>)
   803b2:	4798      	blx	r3
}
   803b4:	b004      	add	sp, #16
   803b6:	bd10      	pop	{r4, pc}
   803b8:	00082465 	.word	0x00082465
   803bc:	40094000 	.word	0x40094000
   803c0:	00081ecd 	.word	0x00081ecd
   803c4:	000f4240 	.word	0x000f4240
   803c8:	0501bd00 	.word	0x0501bd00
   803cc:	00081d59 	.word	0x00081d59
   803d0:	0008033d 	.word	0x0008033d

000803d4 <CalcFanValue>:

/************************************************************************/
/* Calculation of the output value. */
/************************************************************************/
void CalcFanValue(uint32_t dutyCycle)
{
   803d4:	b508      	push	{r3, lr}
   803d6:	2864      	cmp	r0, #100	; 0x64
   803d8:	bf34      	ite	cc
   803da:	4602      	movcc	r2, r0
   803dc:	2264      	movcs	r2, #100	; 0x64
	{
		dutyCycle=100;
	}
	if(dutyCycle <= 100 && dutyCycle >=0)
	{
		pwm_channel_update_duty(PWM, &pwmPIN40, dutyCycle);
   803de:	4802      	ldr	r0, [pc, #8]	; (803e8 <CalcFanValue+0x14>)
   803e0:	4902      	ldr	r1, [pc, #8]	; (803ec <CalcFanValue+0x18>)
   803e2:	4b03      	ldr	r3, [pc, #12]	; (803f0 <CalcFanValue+0x1c>)
   803e4:	4798      	blx	r3
   803e6:	bd08      	pop	{r3, pc}
   803e8:	40094000 	.word	0x40094000
   803ec:	2007ab90 	.word	0x2007ab90
   803f0:	00081e9d 	.word	0x00081e9d

000803f4 <SetDesiredValue>:
/************************************************************************/
/* Setup for default values. */
/************************************************************************/
void SetDesiredValue(uint32_t value)
{
	switch(value)
   803f4:	3814      	subs	r0, #20
   803f6:	2814      	cmp	r0, #20
   803f8:	d824      	bhi.n	80444 <SetDesiredValue+0x50>
   803fa:	e8df f000 	tbb	[pc, r0]
   803fe:	230b      	.short	0x230b
   80400:	10232323 	.word	0x10232323
   80404:	23232323 	.word	0x23232323
   80408:	23232315 	.word	0x23232315
   8040c:	23231a23 	.word	0x23231a23
   80410:	2323      	.short	0x2323
   80412:	1f          	.byte	0x1f
   80413:	00          	.byte	0x00
	{
		case 20:
		desiredValue = DISTANCE_20;
   80414:	f240 12d1 	movw	r2, #465	; 0x1d1
   80418:	4b0b      	ldr	r3, [pc, #44]	; (80448 <SetDesiredValue+0x54>)
   8041a:	601a      	str	r2, [r3, #0]
		break;
   8041c:	4770      	bx	lr
		case 25:
		desiredValue =  DISTANCE_25;
   8041e:	f240 12a9 	movw	r2, #425	; 0x1a9
   80422:	4b09      	ldr	r3, [pc, #36]	; (80448 <SetDesiredValue+0x54>)
   80424:	601a      	str	r2, [r3, #0]
		break;
   80426:	4770      	bx	lr
		case 30:
		desiredValue = DISTANCE_30;
   80428:	f240 129f 	movw	r2, #415	; 0x19f
   8042c:	4b06      	ldr	r3, [pc, #24]	; (80448 <SetDesiredValue+0x54>)
   8042e:	601a      	str	r2, [r3, #0]
		break;
   80430:	4770      	bx	lr
		case 35:
		desiredValue = DISTANCE_35;
   80432:	f44f 72c8 	mov.w	r2, #400	; 0x190
   80436:	4b04      	ldr	r3, [pc, #16]	; (80448 <SetDesiredValue+0x54>)
   80438:	601a      	str	r2, [r3, #0]
		break;
   8043a:	4770      	bx	lr
		case 40:
		desiredValue = DISTANCE_40;
   8043c:	f44f 72c3 	mov.w	r2, #390	; 0x186
   80440:	4b01      	ldr	r3, [pc, #4]	; (80448 <SetDesiredValue+0x54>)
   80442:	601a      	str	r2, [r3, #0]
   80444:	4770      	bx	lr
   80446:	bf00      	nop
   80448:	20070894 	.word	0x20070894
   8044c:	00000000 	.word	0x00000000

00080450 <taskModulate>:

/************************************************************************/
/* Task that handle the regulation process of the actuator. */
/************************************************************************/
void taskModulate(void *p)
{
   80450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80454:	b085      	sub	sp, #20
	portTickType xLastWakeTime;
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
   80456:	4b50      	ldr	r3, [pc, #320]	; (80598 <taskModulate+0x148>)
   80458:	4798      	blx	r3
   8045a:	9003      	str	r0, [sp, #12]
	for(;;)
	{
		xSampleTime = (portTickType)samplingTimeMS;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   8045c:	f8df b184 	ldr.w	fp, [pc, #388]	; 805e4 <taskModulate+0x194>
		{
			int32_t currSensorValue = 0;
			int32_t SensorValue;
			for(int i = 1; i<11; i++)
			{
				currSensorValue = currSensorValue + ReadFanValue();
   80460:	f8df a184 	ldr.w	sl, [pc, #388]	; 805e8 <taskModulate+0x198>
	portTickType xSampleTime;
	xLastWakeTime = xTaskGetTickCount();
	for(;;)
	{
		xSampleTime = (portTickType)samplingTimeMS;
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80464:	a803      	add	r0, sp, #12
   80466:	2132      	movs	r1, #50	; 0x32
   80468:	47d8      	blx	fp
		
		if(flag == 0)
   8046a:	4b4c      	ldr	r3, [pc, #304]	; (8059c <taskModulate+0x14c>)
   8046c:	781b      	ldrb	r3, [r3, #0]
   8046e:	b953      	cbnz	r3, 80486 <taskModulate+0x36>
		{
			ready = 0;
   80470:	2000      	movs	r0, #0
   80472:	4b4b      	ldr	r3, [pc, #300]	; (805a0 <taskModulate+0x150>)
   80474:	6018      	str	r0, [r3, #0]
			
			error = 0;
   80476:	4b4b      	ldr	r3, [pc, #300]	; (805a4 <taskModulate+0x154>)
   80478:	6018      	str	r0, [r3, #0]
			prevError = 0;
   8047a:	4b4b      	ldr	r3, [pc, #300]	; (805a8 <taskModulate+0x158>)
   8047c:	6018      	str	r0, [r3, #0]
			w = 0;
   8047e:	4b4b      	ldr	r3, [pc, #300]	; (805ac <taskModulate+0x15c>)
   80480:	6018      	str	r0, [r3, #0]

			CalcFanValue(0);
   80482:	4b4b      	ldr	r3, [pc, #300]	; (805b0 <taskModulate+0x160>)
   80484:	4798      	blx	r3
		}
		
		if(flag == 1 && ready == 0)
   80486:	4b45      	ldr	r3, [pc, #276]	; (8059c <taskModulate+0x14c>)
   80488:	781b      	ldrb	r3, [r3, #0]
   8048a:	2b01      	cmp	r3, #1
   8048c:	d1ea      	bne.n	80464 <taskModulate+0x14>
   8048e:	4b44      	ldr	r3, [pc, #272]	; (805a0 <taskModulate+0x150>)
   80490:	681b      	ldr	r3, [r3, #0]
   80492:	b9a3      	cbnz	r3, 804be <taskModulate+0x6e>
		{
			if (isRXReady())
   80494:	4b47      	ldr	r3, [pc, #284]	; (805b4 <taskModulate+0x164>)
   80496:	4798      	blx	r3
   80498:	b168      	cbz	r0, 804b6 <taskModulate+0x66>
			{
				if((readByte() != 1) || (readByte() != 0))
   8049a:	4b47      	ldr	r3, [pc, #284]	; (805b8 <taskModulate+0x168>)
   8049c:	4798      	blx	r3
   8049e:	2801      	cmp	r0, #1
   804a0:	d102      	bne.n	804a8 <taskModulate+0x58>
   804a2:	4b45      	ldr	r3, [pc, #276]	; (805b8 <taskModulate+0x168>)
   804a4:	4798      	blx	r3
   804a6:	b130      	cbz	r0, 804b6 <taskModulate+0x66>
				{
					SetDesiredValue(readByte());
   804a8:	4b43      	ldr	r3, [pc, #268]	; (805b8 <taskModulate+0x168>)
   804aa:	4798      	blx	r3
   804ac:	4b43      	ldr	r3, [pc, #268]	; (805bc <taskModulate+0x16c>)
   804ae:	4798      	blx	r3
					ready = 1;
   804b0:	2201      	movs	r2, #1
   804b2:	4b3b      	ldr	r3, [pc, #236]	; (805a0 <taskModulate+0x150>)
   804b4:	601a      	str	r2, [r3, #0]
				}
			}
		}
		
		if(flag == 1 && ready == 1)
   804b6:	4b39      	ldr	r3, [pc, #228]	; (8059c <taskModulate+0x14c>)
   804b8:	781b      	ldrb	r3, [r3, #0]
   804ba:	2b01      	cmp	r3, #1
   804bc:	d1d2      	bne.n	80464 <taskModulate+0x14>
   804be:	4b38      	ldr	r3, [pc, #224]	; (805a0 <taskModulate+0x150>)
   804c0:	681b      	ldr	r3, [r3, #0]
   804c2:	2b01      	cmp	r3, #1
   804c4:	d1ce      	bne.n	80464 <taskModulate+0x14>
   804c6:	240a      	movs	r4, #10
   804c8:	2500      	movs	r5, #0
		{
			int32_t currSensorValue = 0;
			int32_t SensorValue;
			for(int i = 1; i<11; i++)
			{
				currSensorValue = currSensorValue + ReadFanValue();
   804ca:	47d0      	blx	sl
   804cc:	4405      	add	r5, r0
		
		if(flag == 1 && ready == 1)
		{
			int32_t currSensorValue = 0;
			int32_t SensorValue;
			for(int i = 1; i<11; i++)
   804ce:	3c01      	subs	r4, #1
   804d0:	d1fb      	bne.n	804ca <taskModulate+0x7a>
			{
				currSensorValue = currSensorValue + ReadFanValue();
			}
			SensorValue = currSensorValue/10;
   804d2:	4b3b      	ldr	r3, [pc, #236]	; (805c0 <taskModulate+0x170>)
   804d4:	fb83 2905 	smull	r2, r9, r3, r5
   804d8:	17ed      	asrs	r5, r5, #31
   804da:	ebc5 09a9 	rsb	r9, r5, r9, asr #2
			currSensorValue = 0;
			
			error = desiredValue - SensorValue;
   804de:	4b39      	ldr	r3, [pc, #228]	; (805c4 <taskModulate+0x174>)
   804e0:	681e      	ldr	r6, [r3, #0]
   804e2:	ebc9 0606 	rsb	r6, r9, r6
   804e6:	4b2f      	ldr	r3, [pc, #188]	; (805a4 <taskModulate+0x154>)
   804e8:	601e      	str	r6, [r3, #0]
	double proportionalPart;
	double integralPart;
	double derivingPart;
	int32_t signal;
	
	proportionalPart = k_p * (double)currErr;
   804ea:	f8df 8100 	ldr.w	r8, [pc, #256]	; 805ec <taskModulate+0x19c>
   804ee:	4630      	mov	r0, r6
   804f0:	47c0      	blx	r8
   804f2:	4604      	mov	r4, r0
   804f4:	460d      	mov	r5, r1
			SensorValue = currSensorValue/10;
			currSensorValue = 0;
			
			error = desiredValue - SensorValue;

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
   804f6:	4b2c      	ldr	r3, [pc, #176]	; (805a8 <taskModulate+0x158>)
	double derivingPart;
	int32_t signal;
	
	proportionalPart = k_p * (double)currErr;
	integralPart = (double)sumErr * (sampTime/k_i);
	derivingPart = ((double)currErr - (double)prevErr) * (k_d / sampTime);
   804f8:	6818      	ldr	r0, [r3, #0]
   804fa:	47c0      	blx	r8
   804fc:	4602      	mov	r2, r0
   804fe:	460b      	mov	r3, r1
   80500:	4620      	mov	r0, r4
   80502:	4629      	mov	r1, r5
   80504:	4f30      	ldr	r7, [pc, #192]	; (805c8 <taskModulate+0x178>)
   80506:	47b8      	blx	r7
   80508:	4f30      	ldr	r7, [pc, #192]	; (805cc <taskModulate+0x17c>)
   8050a:	2200      	movs	r2, #0
   8050c:	4b30      	ldr	r3, [pc, #192]	; (805d0 <taskModulate+0x180>)
   8050e:	47b8      	blx	r7
   80510:	e9cd 0100 	strd	r0, r1, [sp]
	double proportionalPart;
	double integralPart;
	double derivingPart;
	int32_t signal;
	
	proportionalPart = k_p * (double)currErr;
   80514:	4620      	mov	r0, r4
   80516:	4629      	mov	r1, r5
   80518:	a31b      	add	r3, pc, #108	; (adr r3, 80588 <taskModulate+0x138>)
   8051a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8051e:	47b8      	blx	r7
   80520:	4604      	mov	r4, r0
   80522:	460d      	mov	r5, r1
			SensorValue = currSensorValue/10;
			currSensorValue = 0;
			
			error = desiredValue - SensorValue;

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
   80524:	4b21      	ldr	r3, [pc, #132]	; (805ac <taskModulate+0x15c>)
	double integralPart;
	double derivingPart;
	int32_t signal;
	
	proportionalPart = k_p * (double)currErr;
	integralPart = (double)sumErr * (sampTime/k_i);
   80526:	6818      	ldr	r0, [r3, #0]
   80528:	47c0      	blx	r8
   8052a:	a319      	add	r3, pc, #100	; (adr r3, 80590 <taskModulate+0x140>)
   8052c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80530:	47b8      	blx	r7
   80532:	4602      	mov	r2, r0
   80534:	460b      	mov	r3, r1
	derivingPart = ((double)currErr - (double)prevErr) * (k_d / sampTime);
	signal = proportionalPart + integralPart + derivingPart;
   80536:	4f27      	ldr	r7, [pc, #156]	; (805d4 <taskModulate+0x184>)
   80538:	4620      	mov	r0, r4
   8053a:	4629      	mov	r1, r5
   8053c:	47b8      	blx	r7
   8053e:	4602      	mov	r2, r0
   80540:	460b      	mov	r3, r1
   80542:	e9dd 0100 	ldrd	r0, r1, [sp]
   80546:	47b8      	blx	r7
   80548:	4b23      	ldr	r3, [pc, #140]	; (805d8 <taskModulate+0x188>)
   8054a:	4798      	blx	r3
			
			error = desiredValue - SensorValue;

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
			
			if (finalU < 0)
   8054c:	2800      	cmp	r0, #0
   8054e:	db02      	blt.n	80556 <taskModulate+0x106>
			SensorValue = currSensorValue/10;
			currSensorValue = 0;
			
			error = desiredValue - SensorValue;

			finalU = CalcSignal(samplingTime, kp, ki, kd, error, prevError, w);
   80550:	4b22      	ldr	r3, [pc, #136]	; (805dc <taskModulate+0x18c>)
   80552:	6018      	str	r0, [r3, #0]
   80554:	e002      	b.n	8055c <taskModulate+0x10c>
			
			if (finalU < 0)
			{
				finalU = 0;
   80556:	2200      	movs	r2, #0
   80558:	4b20      	ldr	r3, [pc, #128]	; (805dc <taskModulate+0x18c>)
   8055a:	601a      	str	r2, [r3, #0]
			}
			
			if(error < 0)
   8055c:	2e00      	cmp	r6, #0
   8055e:	da02      	bge.n	80566 <taskModulate+0x116>
			{
				w=0;
   80560:	2200      	movs	r2, #0
   80562:	4b12      	ldr	r3, [pc, #72]	; (805ac <taskModulate+0x15c>)
   80564:	601a      	str	r2, [r3, #0]
			}
			
			prevError = error;
   80566:	4b10      	ldr	r3, [pc, #64]	; (805a8 <taskModulate+0x158>)
   80568:	601e      	str	r6, [r3, #0]
			w = w + prevError;
   8056a:	4b10      	ldr	r3, [pc, #64]	; (805ac <taskModulate+0x15c>)
   8056c:	681a      	ldr	r2, [r3, #0]
   8056e:	4416      	add	r6, r2
   80570:	601e      	str	r6, [r3, #0]
			
			CalcFanValue(finalU);
   80572:	4c1a      	ldr	r4, [pc, #104]	; (805dc <taskModulate+0x18c>)
   80574:	6820      	ldr	r0, [r4, #0]
   80576:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <taskModulate+0x160>)
   80578:	4798      	blx	r3
			setInfo(finalU, SensorValue, error);
   8057a:	6820      	ldr	r0, [r4, #0]
   8057c:	4649      	mov	r1, r9
   8057e:	4b09      	ldr	r3, [pc, #36]	; (805a4 <taskModulate+0x154>)
   80580:	681a      	ldr	r2, [r3, #0]
   80582:	4b17      	ldr	r3, [pc, #92]	; (805e0 <taskModulate+0x190>)
   80584:	4798      	blx	r3
   80586:	e76d      	b.n	80464 <taskModulate+0x14>
   80588:	70a3d70a 	.word	0x70a3d70a
   8058c:	3fe70a3d 	.word	0x3fe70a3d
   80590:	13b13b14 	.word	0x13b13b14
   80594:	3f93b13b 	.word	0x3f93b13b
   80598:	0008127d 	.word	0x0008127d
   8059c:	200708fc 	.word	0x200708fc
   805a0:	200708a4 	.word	0x200708a4
   805a4:	2007089c 	.word	0x2007089c
   805a8:	20070898 	.word	0x20070898
   805ac:	200708a0 	.word	0x200708a0
   805b0:	000803d5 	.word	0x000803d5
   805b4:	0008032d 	.word	0x0008032d
   805b8:	0008030d 	.word	0x0008030d
   805bc:	000803f5 	.word	0x000803f5
   805c0:	66666667 	.word	0x66666667
   805c4:	20070894 	.word	0x20070894
   805c8:	000829e9 	.word	0x000829e9
   805cc:	00082d51 	.word	0x00082d51
   805d0:	402a0000 	.word	0x402a0000
   805d4:	000829ed 	.word	0x000829ed
   805d8:	00083175 	.word	0x00083175
   805dc:	200708a8 	.word	0x200708a8
   805e0:	000806e1 	.word	0x000806e1
   805e4:	000814c5 	.word	0x000814c5
   805e8:	000801ad 	.word	0x000801ad
   805ec:	00082c85 	.word	0x00082c85

000805f0 <ShiftControlSignalBuffer>:

/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftControlSignalBuffer(void)
{
   805f0:	4b04      	ldr	r3, [pc, #16]	; (80604 <ShiftControlSignalBuffer+0x14>)
   805f2:	f103 014c 	add.w	r1, r3, #76	; 0x4c
	for(int i = 0; i<SIZE-1; i++)
	{
		circBuffertControlSignal[i] = circBuffertControlSignal[i+1];
   805f6:	685a      	ldr	r2, [r3, #4]
   805f8:	f843 2b04 	str.w	r2, [r3], #4
/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftControlSignalBuffer(void)
{
	for(int i = 0; i<SIZE-1; i++)
   805fc:	428b      	cmp	r3, r1
   805fe:	d1fa      	bne.n	805f6 <ShiftControlSignalBuffer+0x6>
	{
		circBuffertControlSignal[i] = circBuffertControlSignal[i+1];
	}
}
   80600:	4770      	bx	lr
   80602:	bf00      	nop
   80604:	20070950 	.word	0x20070950

00080608 <ShiftActualValueBuffer>:

/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftActualValueBuffer(void)
{
   80608:	4b04      	ldr	r3, [pc, #16]	; (8061c <ShiftActualValueBuffer+0x14>)
   8060a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
	for(int i = 0; i<SIZE-1; i++)
	{
		circBuffertActualValue[i] = circBuffertActualValue[i+1];
   8060e:	685a      	ldr	r2, [r3, #4]
   80610:	f843 2b04 	str.w	r2, [r3], #4
/************************************************************************/
/* Shift the array down by one step. */
/************************************************************************/
void ShiftActualValueBuffer(void)
{
	for(int i = 0; i<SIZE-1; i++)
   80614:	428b      	cmp	r3, r1
   80616:	d1fa      	bne.n	8060e <ShiftActualValueBuffer+0x6>
	{
		circBuffertActualValue[i] = circBuffertActualValue[i+1];
	}
}
   80618:	4770      	bx	lr
   8061a:	bf00      	nop
   8061c:	20070900 	.word	0x20070900

00080620 <taskSendToMatlab>:

/************************************************************************/
/* Task that handle the communication to an from a serial port. */
/************************************************************************/
void taskSendToMatlab(void *p)
{
   80620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80624:	b083      	sub	sp, #12
	portTickType xLastWakeTime;
	portTickType xSampleTime;
	
	xSampleTime = 50;
	xLastWakeTime = xTaskGetTickCount();
   80626:	4b15      	ldr	r3, [pc, #84]	; (8067c <taskSendToMatlab+0x5c>)
   80628:	4798      	blx	r3
   8062a:	9001      	str	r0, [sp, #4]
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   8062c:	4e14      	ldr	r6, [pc, #80]	; (80680 <taskSendToMatlab+0x60>)
		
		if (isRXReady())
   8062e:	4d15      	ldr	r5, [pc, #84]	; (80684 <taskSendToMatlab+0x64>)
		{
			if(readByte() == 1 || readByte() == 0)
   80630:	4f15      	ldr	r7, [pc, #84]	; (80688 <taskSendToMatlab+0x68>)
			{
				flag = readByte();
   80632:	4c16      	ldr	r4, [pc, #88]	; (8068c <taskSendToMatlab+0x6c>)
	
	xSampleTime = 50;
	xLastWakeTime = xTaskGetTickCount();
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, xSampleTime);
   80634:	a801      	add	r0, sp, #4
   80636:	2132      	movs	r1, #50	; 0x32
   80638:	47b0      	blx	r6
		
		if (isRXReady())
   8063a:	47a8      	blx	r5
   8063c:	b130      	cbz	r0, 8064c <taskSendToMatlab+0x2c>
		{
			if(readByte() == 1 || readByte() == 0)
   8063e:	47b8      	blx	r7
   80640:	2801      	cmp	r0, #1
   80642:	d001      	beq.n	80648 <taskSendToMatlab+0x28>
   80644:	47b8      	blx	r7
   80646:	b908      	cbnz	r0, 8064c <taskSendToMatlab+0x2c>
			{
				flag = readByte();
   80648:	47b8      	blx	r7
   8064a:	7020      	strb	r0, [r4, #0]
			}
		}
		
		if(flag == 1)
   8064c:	7823      	ldrb	r3, [r4, #0]
   8064e:	2b01      	cmp	r3, #1
   80650:	d1f0      	bne.n	80634 <taskSendToMatlab+0x14>
		{
			printf("%d\n", circBuffertControlSignal[0]);
   80652:	f8df 9050 	ldr.w	r9, [pc, #80]	; 806a4 <taskSendToMatlab+0x84>
   80656:	4648      	mov	r0, r9
   80658:	4b0d      	ldr	r3, [pc, #52]	; (80690 <taskSendToMatlab+0x70>)
   8065a:	6819      	ldr	r1, [r3, #0]
   8065c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 806a8 <taskSendToMatlab+0x88>
   80660:	47c0      	blx	r8
			printf("%d\n", circBuffertActualValue[0]);
   80662:	4648      	mov	r0, r9
   80664:	4b0b      	ldr	r3, [pc, #44]	; (80694 <taskSendToMatlab+0x74>)
   80666:	6819      	ldr	r1, [r3, #0]
   80668:	47c0      	blx	r8
			printf("%d\n", circBuffertError[0]);
   8066a:	4648      	mov	r0, r9
   8066c:	4b0a      	ldr	r3, [pc, #40]	; (80698 <taskSendToMatlab+0x78>)
   8066e:	6819      	ldr	r1, [r3, #0]
   80670:	47c0      	blx	r8
			ShiftControlSignalBuffer();
   80672:	4b0a      	ldr	r3, [pc, #40]	; (8069c <taskSendToMatlab+0x7c>)
   80674:	4798      	blx	r3
			ShiftActualValueBuffer();
   80676:	4b0a      	ldr	r3, [pc, #40]	; (806a0 <taskSendToMatlab+0x80>)
   80678:	4798      	blx	r3
   8067a:	e7db      	b.n	80634 <taskSendToMatlab+0x14>
   8067c:	0008127d 	.word	0x0008127d
   80680:	000814c5 	.word	0x000814c5
   80684:	0008032d 	.word	0x0008032d
   80688:	0008030d 	.word	0x0008030d
   8068c:	200708fc 	.word	0x200708fc
   80690:	20070950 	.word	0x20070950
   80694:	20070900 	.word	0x20070900
   80698:	200708ac 	.word	0x200708ac
   8069c:	000805f1 	.word	0x000805f1
   806a0:	00080609 	.word	0x00080609
   806a4:	000861bc 	.word	0x000861bc
   806a8:	00083215 	.word	0x00083215

000806ac <findVacantPositionActualValue>:

/************************************************************************/
/* Return the first vacant position in the array. */
/************************************************************************/
int32_t findVacantPositionActualValue(void)
{
   806ac:	b508      	push	{r3, lr}
	for(int i = 0; i<SIZE; i++)
	{
		if(circBuffertActualValue[i] == 0)
   806ae:	4b0a      	ldr	r3, [pc, #40]	; (806d8 <findVacantPositionActualValue+0x2c>)
   806b0:	6818      	ldr	r0, [r3, #0]
   806b2:	b178      	cbz	r0, 806d4 <findVacantPositionActualValue+0x28>
		{
			return i;
		}
		if(circBuffertActualValue[SIZE] != 0)
   806b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
   806b6:	b940      	cbnz	r0, 806ca <findVacantPositionActualValue+0x1e>
   806b8:	461a      	mov	r2, r3
/************************************************************************/
/* Return the first vacant position in the array. */
/************************************************************************/
int32_t findVacantPositionActualValue(void)
{
	for(int i = 0; i<SIZE; i++)
   806ba:	2301      	movs	r3, #1
	{
		if(circBuffertActualValue[i] == 0)
   806bc:	f852 1f04 	ldr.w	r1, [r2, #4]!
   806c0:	b139      	cbz	r1, 806d2 <findVacantPositionActualValue+0x26>
/************************************************************************/
/* Return the first vacant position in the array. */
/************************************************************************/
int32_t findVacantPositionActualValue(void)
{
	for(int i = 0; i<SIZE; i++)
   806c2:	3301      	adds	r3, #1
   806c4:	2b14      	cmp	r3, #20
   806c6:	d1f9      	bne.n	806bc <findVacantPositionActualValue+0x10>
   806c8:	bd08      	pop	{r3, pc}
		{
			return i;
		}
		if(circBuffertActualValue[SIZE] != 0)
		{
			ShiftActualValueBuffer();
   806ca:	4b04      	ldr	r3, [pc, #16]	; (806dc <findVacantPositionActualValue+0x30>)
   806cc:	4798      	blx	r3
			return SIZE;
   806ce:	2014      	movs	r0, #20
   806d0:	bd08      	pop	{r3, pc}
   806d2:	4618      	mov	r0, r3
		}
	}
	return 0;
}
   806d4:	bd08      	pop	{r3, pc}
   806d6:	bf00      	nop
   806d8:	20070900 	.word	0x20070900
   806dc:	00080609 	.word	0x00080609

000806e0 <setInfo>:

/************************************************************************/
/* Set values for the controlsignal, sensor and the current error. */
/************************************************************************/
void setInfo(int32_t controlSignal, int32_t actualValue, int32_t error)
{
   806e0:	b538      	push	{r3, r4, r5, lr}
   806e2:	460d      	mov	r5, r1
   806e4:	4614      	mov	r4, r2
   806e6:	2864      	cmp	r0, #100	; 0x64
   806e8:	bfa8      	it	ge
   806ea:	2064      	movge	r0, #100	; 0x64
	if(controlSignal>100)
	{
		controlSignal=100;
	}
	circBuffertControlSignal[0] = controlSignal;
   806ec:	4b04      	ldr	r3, [pc, #16]	; (80700 <setInfo+0x20>)
   806ee:	6018      	str	r0, [r3, #0]
	circBuffertActualValue[findVacantPositionActualValue()] = actualValue;
   806f0:	4b04      	ldr	r3, [pc, #16]	; (80704 <setInfo+0x24>)
   806f2:	4798      	blx	r3
   806f4:	4b04      	ldr	r3, [pc, #16]	; (80708 <setInfo+0x28>)
   806f6:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	circBuffertError[0] = error;
   806fa:	4b04      	ldr	r3, [pc, #16]	; (8070c <setInfo+0x2c>)
   806fc:	601c      	str	r4, [r3, #0]
   806fe:	bd38      	pop	{r3, r4, r5, pc}
   80700:	20070950 	.word	0x20070950
   80704:	000806ad 	.word	0x000806ad
   80708:	20070900 	.word	0x20070900
   8070c:	200708ac 	.word	0x200708ac

00080710 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80710:	f100 0308 	add.w	r3, r0, #8
   80714:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80716:	f04f 32ff 	mov.w	r2, #4294967295
   8071a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8071c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8071e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80720:	2300      	movs	r3, #0
   80722:	6003      	str	r3, [r0, #0]
   80724:	4770      	bx	lr
   80726:	bf00      	nop

00080728 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80728:	2300      	movs	r3, #0
   8072a:	6103      	str	r3, [r0, #16]
   8072c:	4770      	bx	lr
   8072e:	bf00      	nop

00080730 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80730:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80732:	685a      	ldr	r2, [r3, #4]
   80734:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80736:	6842      	ldr	r2, [r0, #4]
   80738:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8073a:	685a      	ldr	r2, [r3, #4]
   8073c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8073e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80740:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80742:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80744:	6803      	ldr	r3, [r0, #0]
   80746:	3301      	adds	r3, #1
   80748:	6003      	str	r3, [r0, #0]
   8074a:	4770      	bx	lr

0008074c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8074c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8074e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80750:	f1b4 3fff 	cmp.w	r4, #4294967295
   80754:	d101      	bne.n	8075a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80756:	6903      	ldr	r3, [r0, #16]
   80758:	e00a      	b.n	80770 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8075a:	f100 0308 	add.w	r3, r0, #8
   8075e:	68c2      	ldr	r2, [r0, #12]
   80760:	6812      	ldr	r2, [r2, #0]
   80762:	4294      	cmp	r4, r2
   80764:	d304      	bcc.n	80770 <vListInsert+0x24>
   80766:	685b      	ldr	r3, [r3, #4]
   80768:	685a      	ldr	r2, [r3, #4]
   8076a:	6812      	ldr	r2, [r2, #0]
   8076c:	4294      	cmp	r4, r2
   8076e:	d2fa      	bcs.n	80766 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80770:	685a      	ldr	r2, [r3, #4]
   80772:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80774:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80776:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80778:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8077a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8077c:	6803      	ldr	r3, [r0, #0]
   8077e:	3301      	adds	r3, #1
   80780:	6003      	str	r3, [r0, #0]
}
   80782:	f85d 4b04 	ldr.w	r4, [sp], #4
   80786:	4770      	bx	lr

00080788 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80788:	6843      	ldr	r3, [r0, #4]
   8078a:	6882      	ldr	r2, [r0, #8]
   8078c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8078e:	6883      	ldr	r3, [r0, #8]
   80790:	6842      	ldr	r2, [r0, #4]
   80792:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80794:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80796:	685a      	ldr	r2, [r3, #4]
   80798:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8079a:	bf04      	itt	eq
   8079c:	6882      	ldreq	r2, [r0, #8]
   8079e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   807a0:	2200      	movs	r2, #0
   807a2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   807a4:	681a      	ldr	r2, [r3, #0]
   807a6:	3a01      	subs	r2, #1
   807a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   807aa:	6818      	ldr	r0, [r3, #0]
}
   807ac:	4770      	bx	lr
   807ae:	bf00      	nop

000807b0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   807b0:	4803      	ldr	r0, [pc, #12]	; (807c0 <prvPortStartFirstTask+0x10>)
   807b2:	6800      	ldr	r0, [r0, #0]
   807b4:	6800      	ldr	r0, [r0, #0]
   807b6:	f380 8808 	msr	MSP, r0
   807ba:	b662      	cpsie	i
   807bc:	df00      	svc	0
   807be:	bf00      	nop
   807c0:	e000ed08 	.word	0xe000ed08

000807c4 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   807c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   807c8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   807cc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   807d0:	2300      	movs	r3, #0
   807d2:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   807d6:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   807da:	3840      	subs	r0, #64	; 0x40
   807dc:	4770      	bx	lr
   807de:	bf00      	nop

000807e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   807e0:	4b06      	ldr	r3, [pc, #24]	; (807fc <pxCurrentTCBConst2>)
   807e2:	6819      	ldr	r1, [r3, #0]
   807e4:	6808      	ldr	r0, [r1, #0]
   807e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   807ea:	f380 8809 	msr	PSP, r0
   807ee:	f04f 0000 	mov.w	r0, #0
   807f2:	f380 8811 	msr	BASEPRI, r0
   807f6:	f04e 0e0d 	orr.w	lr, lr, #13
   807fa:	4770      	bx	lr

000807fc <pxCurrentTCBConst2>:
   807fc:	2007aa64 	.word	0x2007aa64

00080800 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80804:	4b01      	ldr	r3, [pc, #4]	; (8080c <vPortYieldFromISR+0xc>)
   80806:	601a      	str	r2, [r3, #0]
   80808:	4770      	bx	lr
   8080a:	bf00      	nop
   8080c:	e000ed04 	.word	0xe000ed04

00080810 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80810:	f3ef 8011 	mrs	r0, BASEPRI
   80814:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80818:	f381 8811 	msr	BASEPRI, r1
   8081c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8081e:	2000      	movs	r0, #0

00080820 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80820:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80822:	4b03      	ldr	r3, [pc, #12]	; (80830 <vPortEnterCritical+0x10>)
   80824:	4798      	blx	r3
	uxCriticalNesting++;
   80826:	4b03      	ldr	r3, [pc, #12]	; (80834 <vPortEnterCritical+0x14>)
   80828:	681a      	ldr	r2, [r3, #0]
   8082a:	3201      	adds	r2, #1
   8082c:	601a      	str	r2, [r3, #0]
   8082e:	bd08      	pop	{r3, pc}
   80830:	00080811 	.word	0x00080811
   80834:	20070000 	.word	0x20070000

00080838 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80838:	f380 8811 	msr	BASEPRI, r0
   8083c:	4770      	bx	lr
   8083e:	bf00      	nop

00080840 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80840:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80842:	4a04      	ldr	r2, [pc, #16]	; (80854 <vPortExitCritical+0x14>)
   80844:	6813      	ldr	r3, [r2, #0]
   80846:	3b01      	subs	r3, #1
   80848:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8084a:	b913      	cbnz	r3, 80852 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   8084c:	2000      	movs	r0, #0
   8084e:	4b02      	ldr	r3, [pc, #8]	; (80858 <vPortExitCritical+0x18>)
   80850:	4798      	blx	r3
   80852:	bd08      	pop	{r3, pc}
   80854:	20070000 	.word	0x20070000
   80858:	00080839 	.word	0x00080839

0008085c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8085c:	f3ef 8009 	mrs	r0, PSP
   80860:	4b0c      	ldr	r3, [pc, #48]	; (80894 <pxCurrentTCBConst>)
   80862:	681a      	ldr	r2, [r3, #0]
   80864:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80868:	6010      	str	r0, [r2, #0]
   8086a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8086e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80872:	f380 8811 	msr	BASEPRI, r0
   80876:	f000 feaf 	bl	815d8 <vTaskSwitchContext>
   8087a:	f04f 0000 	mov.w	r0, #0
   8087e:	f380 8811 	msr	BASEPRI, r0
   80882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80886:	6819      	ldr	r1, [r3, #0]
   80888:	6808      	ldr	r0, [r1, #0]
   8088a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8088e:	f380 8809 	msr	PSP, r0
   80892:	4770      	bx	lr

00080894 <pxCurrentTCBConst>:
   80894:	2007aa64 	.word	0x2007aa64

00080898 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80898:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8089e:	4b05      	ldr	r3, [pc, #20]	; (808b4 <SysTick_Handler+0x1c>)
   808a0:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   808a2:	4b05      	ldr	r3, [pc, #20]	; (808b8 <SysTick_Handler+0x20>)
   808a4:	4798      	blx	r3
	{
		vTaskIncrementTick();
   808a6:	4b05      	ldr	r3, [pc, #20]	; (808bc <SysTick_Handler+0x24>)
   808a8:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   808aa:	2000      	movs	r0, #0
   808ac:	4b04      	ldr	r3, [pc, #16]	; (808c0 <SysTick_Handler+0x28>)
   808ae:	4798      	blx	r3
   808b0:	bd08      	pop	{r3, pc}
   808b2:	bf00      	nop
   808b4:	e000ed04 	.word	0xe000ed04
   808b8:	00080811 	.word	0x00080811
   808bc:	0008129d 	.word	0x0008129d
   808c0:	00080839 	.word	0x00080839

000808c4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   808c4:	4a03      	ldr	r2, [pc, #12]	; (808d4 <vPortSetupTimerInterrupt+0x10>)
   808c6:	4b04      	ldr	r3, [pc, #16]	; (808d8 <vPortSetupTimerInterrupt+0x14>)
   808c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   808ca:	2207      	movs	r2, #7
   808cc:	3b04      	subs	r3, #4
   808ce:	601a      	str	r2, [r3, #0]
   808d0:	4770      	bx	lr
   808d2:	bf00      	nop
   808d4:	0001481f 	.word	0x0001481f
   808d8:	e000e014 	.word	0xe000e014

000808dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   808dc:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   808de:	4b09      	ldr	r3, [pc, #36]	; (80904 <xPortStartScheduler+0x28>)
   808e0:	681a      	ldr	r2, [r3, #0]
   808e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   808e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   808e8:	681a      	ldr	r2, [r3, #0]
   808ea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   808ee:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   808f0:	4b05      	ldr	r3, [pc, #20]	; (80908 <xPortStartScheduler+0x2c>)
   808f2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   808f4:	2400      	movs	r4, #0
   808f6:	4b05      	ldr	r3, [pc, #20]	; (8090c <xPortStartScheduler+0x30>)
   808f8:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   808fa:	4b05      	ldr	r3, [pc, #20]	; (80910 <xPortStartScheduler+0x34>)
   808fc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   808fe:	4620      	mov	r0, r4
   80900:	bd10      	pop	{r4, pc}
   80902:	bf00      	nop
   80904:	e000ed20 	.word	0xe000ed20
   80908:	000808c5 	.word	0x000808c5
   8090c:	20070000 	.word	0x20070000
   80910:	000807b1 	.word	0x000807b1

00080914 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80914:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80916:	4a13      	ldr	r2, [pc, #76]	; (80964 <prvInsertBlockIntoFreeList+0x50>)
   80918:	6813      	ldr	r3, [r2, #0]
   8091a:	4283      	cmp	r3, r0
   8091c:	d201      	bcs.n	80922 <prvInsertBlockIntoFreeList+0xe>
   8091e:	461a      	mov	r2, r3
   80920:	e7fa      	b.n	80918 <prvInsertBlockIntoFreeList+0x4>
   80922:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80924:	6854      	ldr	r4, [r2, #4]
   80926:	1915      	adds	r5, r2, r4
   80928:	4285      	cmp	r5, r0
   8092a:	d103      	bne.n	80934 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8092c:	6868      	ldr	r0, [r5, #4]
   8092e:	4404      	add	r4, r0
   80930:	6054      	str	r4, [r2, #4]
   80932:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80934:	6842      	ldr	r2, [r0, #4]
   80936:	1884      	adds	r4, r0, r2
   80938:	42a3      	cmp	r3, r4
   8093a:	d10c      	bne.n	80956 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8093c:	4c0a      	ldr	r4, [pc, #40]	; (80968 <prvInsertBlockIntoFreeList+0x54>)
   8093e:	6824      	ldr	r4, [r4, #0]
   80940:	429c      	cmp	r4, r3
   80942:	d006      	beq.n	80952 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80944:	685b      	ldr	r3, [r3, #4]
   80946:	441a      	add	r2, r3
   80948:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8094a:	680b      	ldr	r3, [r1, #0]
   8094c:	681b      	ldr	r3, [r3, #0]
   8094e:	6003      	str	r3, [r0, #0]
   80950:	e002      	b.n	80958 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80952:	6003      	str	r3, [r0, #0]
   80954:	e000      	b.n	80958 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80956:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80958:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8095a:	bf18      	it	ne
   8095c:	6008      	strne	r0, [r1, #0]
	}
}
   8095e:	bc30      	pop	{r4, r5}
   80960:	4770      	bx	lr
   80962:	bf00      	nop
   80964:	2007a9a4 	.word	0x2007a9a4
   80968:	2007a9a0 	.word	0x2007a9a0

0008096c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8096c:	b538      	push	{r3, r4, r5, lr}
   8096e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80970:	4b28      	ldr	r3, [pc, #160]	; (80a14 <pvPortMalloc+0xa8>)
   80972:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80974:	4b28      	ldr	r3, [pc, #160]	; (80a18 <pvPortMalloc+0xac>)
   80976:	681b      	ldr	r3, [r3, #0]
   80978:	b99b      	cbnz	r3, 809a2 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8097a:	4a28      	ldr	r2, [pc, #160]	; (80a1c <pvPortMalloc+0xb0>)
   8097c:	4b28      	ldr	r3, [pc, #160]	; (80a20 <pvPortMalloc+0xb4>)
   8097e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80980:	2100      	movs	r1, #0
   80982:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80984:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80988:	1898      	adds	r0, r3, r2
   8098a:	4d23      	ldr	r5, [pc, #140]	; (80a18 <pvPortMalloc+0xac>)
   8098c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   8098e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80992:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80994:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80996:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80998:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8099a:	4b22      	ldr	r3, [pc, #136]	; (80a24 <pvPortMalloc+0xb8>)
   8099c:	681a      	ldr	r2, [r3, #0]
   8099e:	3a10      	subs	r2, #16
   809a0:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   809a2:	2c00      	cmp	r4, #0
   809a4:	d02d      	beq.n	80a02 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   809a6:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   809aa:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   809ae:	bf1c      	itt	ne
   809b0:	f022 0207 	bicne.w	r2, r2, #7
   809b4:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   809b6:	1e51      	subs	r1, r2, #1
   809b8:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   809bc:	4299      	cmp	r1, r3
   809be:	d822      	bhi.n	80a06 <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   809c0:	4916      	ldr	r1, [pc, #88]	; (80a1c <pvPortMalloc+0xb0>)
   809c2:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   809c4:	6863      	ldr	r3, [r4, #4]
   809c6:	429a      	cmp	r2, r3
   809c8:	d904      	bls.n	809d4 <pvPortMalloc+0x68>
   809ca:	6823      	ldr	r3, [r4, #0]
   809cc:	b113      	cbz	r3, 809d4 <pvPortMalloc+0x68>
   809ce:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   809d0:	461c      	mov	r4, r3
   809d2:	e7f7      	b.n	809c4 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   809d4:	4b10      	ldr	r3, [pc, #64]	; (80a18 <pvPortMalloc+0xac>)
   809d6:	681b      	ldr	r3, [r3, #0]
   809d8:	429c      	cmp	r4, r3
   809da:	d016      	beq.n	80a0a <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   809dc:	680d      	ldr	r5, [r1, #0]
   809de:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   809e0:	6823      	ldr	r3, [r4, #0]
   809e2:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   809e4:	6863      	ldr	r3, [r4, #4]
   809e6:	1a9b      	subs	r3, r3, r2
   809e8:	2b20      	cmp	r3, #32
   809ea:	d904      	bls.n	809f6 <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   809ec:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   809ee:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   809f0:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   809f2:	4b0d      	ldr	r3, [pc, #52]	; (80a28 <pvPortMalloc+0xbc>)
   809f4:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   809f6:	4b0b      	ldr	r3, [pc, #44]	; (80a24 <pvPortMalloc+0xb8>)
   809f8:	681a      	ldr	r2, [r3, #0]
   809fa:	6861      	ldr	r1, [r4, #4]
   809fc:	1a52      	subs	r2, r2, r1
   809fe:	601a      	str	r2, [r3, #0]
   80a00:	e004      	b.n	80a0c <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80a02:	2500      	movs	r5, #0
   80a04:	e002      	b.n	80a0c <pvPortMalloc+0xa0>
   80a06:	2500      	movs	r5, #0
   80a08:	e000      	b.n	80a0c <pvPortMalloc+0xa0>
   80a0a:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80a0c:	4b07      	ldr	r3, [pc, #28]	; (80a2c <pvPortMalloc+0xc0>)
   80a0e:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80a10:	4628      	mov	r0, r5
   80a12:	bd38      	pop	{r3, r4, r5, pc}
   80a14:	0008126d 	.word	0x0008126d
   80a18:	2007a9a0 	.word	0x2007a9a0
   80a1c:	2007a9a4 	.word	0x2007a9a4
   80a20:	200709a0 	.word	0x200709a0
   80a24:	20070004 	.word	0x20070004
   80a28:	00080915 	.word	0x00080915
   80a2c:	000813bd 	.word	0x000813bd

00080a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80a30:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80a32:	4604      	mov	r4, r0
   80a34:	b168      	cbz	r0, 80a52 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80a36:	4b07      	ldr	r3, [pc, #28]	; (80a54 <vPortFree+0x24>)
   80a38:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80a3a:	4b07      	ldr	r3, [pc, #28]	; (80a58 <vPortFree+0x28>)
   80a3c:	6819      	ldr	r1, [r3, #0]
   80a3e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80a42:	440a      	add	r2, r1
   80a44:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80a46:	f1a4 0010 	sub.w	r0, r4, #16
   80a4a:	4b04      	ldr	r3, [pc, #16]	; (80a5c <vPortFree+0x2c>)
   80a4c:	4798      	blx	r3
		}
		xTaskResumeAll();
   80a4e:	4b04      	ldr	r3, [pc, #16]	; (80a60 <vPortFree+0x30>)
   80a50:	4798      	blx	r3
   80a52:	bd10      	pop	{r4, pc}
   80a54:	0008126d 	.word	0x0008126d
   80a58:	20070004 	.word	0x20070004
   80a5c:	00080915 	.word	0x00080915
   80a60:	000813bd 	.word	0x000813bd

00080a64 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80a64:	b510      	push	{r4, lr}
   80a66:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80a68:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a6a:	b93b      	cbnz	r3, 80a7c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80a6c:	6803      	ldr	r3, [r0, #0]
   80a6e:	bb1b      	cbnz	r3, 80ab8 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80a70:	6840      	ldr	r0, [r0, #4]
   80a72:	4b13      	ldr	r3, [pc, #76]	; (80ac0 <prvCopyDataToQueue+0x5c>)
   80a74:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80a76:	2300      	movs	r3, #0
   80a78:	6063      	str	r3, [r4, #4]
   80a7a:	e01d      	b.n	80ab8 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80a7c:	b96a      	cbnz	r2, 80a9a <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80a7e:	6880      	ldr	r0, [r0, #8]
   80a80:	461a      	mov	r2, r3
   80a82:	4b10      	ldr	r3, [pc, #64]	; (80ac4 <prvCopyDataToQueue+0x60>)
   80a84:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80a86:	68a2      	ldr	r2, [r4, #8]
   80a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80a8a:	4413      	add	r3, r2
   80a8c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80a8e:	6862      	ldr	r2, [r4, #4]
   80a90:	4293      	cmp	r3, r2
   80a92:	d311      	bcc.n	80ab8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80a94:	6823      	ldr	r3, [r4, #0]
   80a96:	60a3      	str	r3, [r4, #8]
   80a98:	e00e      	b.n	80ab8 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80a9a:	68c0      	ldr	r0, [r0, #12]
   80a9c:	461a      	mov	r2, r3
   80a9e:	4b09      	ldr	r3, [pc, #36]	; (80ac4 <prvCopyDataToQueue+0x60>)
   80aa0:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80aa2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80aa4:	4252      	negs	r2, r2
   80aa6:	68e3      	ldr	r3, [r4, #12]
   80aa8:	4413      	add	r3, r2
   80aaa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80aac:	6821      	ldr	r1, [r4, #0]
   80aae:	428b      	cmp	r3, r1
   80ab0:	d202      	bcs.n	80ab8 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80ab2:	6863      	ldr	r3, [r4, #4]
   80ab4:	441a      	add	r2, r3
   80ab6:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80aba:	3301      	adds	r3, #1
   80abc:	63a3      	str	r3, [r4, #56]	; 0x38
   80abe:	bd10      	pop	{r4, pc}
   80ac0:	000818f1 	.word	0x000818f1
   80ac4:	0008323d 	.word	0x0008323d

00080ac8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80ac8:	b538      	push	{r3, r4, r5, lr}
   80aca:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80acc:	6805      	ldr	r5, [r0, #0]
   80ace:	b15d      	cbz	r5, 80ae8 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80ad0:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80ad2:	68c4      	ldr	r4, [r0, #12]
   80ad4:	4414      	add	r4, r2
   80ad6:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80ad8:	6840      	ldr	r0, [r0, #4]
   80ada:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80adc:	bf28      	it	cs
   80ade:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80ae0:	4608      	mov	r0, r1
   80ae2:	68d9      	ldr	r1, [r3, #12]
   80ae4:	4b01      	ldr	r3, [pc, #4]	; (80aec <prvCopyDataFromQueue+0x24>)
   80ae6:	4798      	blx	r3
   80ae8:	bd38      	pop	{r3, r4, r5, pc}
   80aea:	bf00      	nop
   80aec:	0008323d 	.word	0x0008323d

00080af0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80af2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80af4:	4b1d      	ldr	r3, [pc, #116]	; (80b6c <prvUnlockQueue+0x7c>)
   80af6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80af8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80afa:	2b00      	cmp	r3, #0
   80afc:	dd12      	ble.n	80b24 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b00:	b183      	cbz	r3, 80b24 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b02:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80b06:	4d1a      	ldr	r5, [pc, #104]	; (80b70 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80b08:	4f1a      	ldr	r7, [pc, #104]	; (80b74 <prvUnlockQueue+0x84>)
   80b0a:	e001      	b.n	80b10 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b0e:	b14b      	cbz	r3, 80b24 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b10:	4630      	mov	r0, r6
   80b12:	47a8      	blx	r5
   80b14:	b100      	cbz	r0, 80b18 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80b16:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80b18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b1a:	3b01      	subs	r3, #1
   80b1c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80b1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b20:	2b00      	cmp	r3, #0
   80b22:	dcf3      	bgt.n	80b0c <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80b24:	f04f 33ff 	mov.w	r3, #4294967295
   80b28:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80b2a:	4b13      	ldr	r3, [pc, #76]	; (80b78 <prvUnlockQueue+0x88>)
   80b2c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80b2e:	4b0f      	ldr	r3, [pc, #60]	; (80b6c <prvUnlockQueue+0x7c>)
   80b30:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b32:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b34:	2b00      	cmp	r3, #0
   80b36:	dd12      	ble.n	80b5e <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b38:	6923      	ldr	r3, [r4, #16]
   80b3a:	b183      	cbz	r3, 80b5e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b3c:	f104 0610 	add.w	r6, r4, #16
   80b40:	4d0b      	ldr	r5, [pc, #44]	; (80b70 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   80b42:	4f0c      	ldr	r7, [pc, #48]	; (80b74 <prvUnlockQueue+0x84>)
   80b44:	e001      	b.n	80b4a <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b46:	6923      	ldr	r3, [r4, #16]
   80b48:	b14b      	cbz	r3, 80b5e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b4a:	4630      	mov	r0, r6
   80b4c:	47a8      	blx	r5
   80b4e:	b100      	cbz	r0, 80b52 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   80b50:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b54:	3b01      	subs	r3, #1
   80b56:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b58:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b5a:	2b00      	cmp	r3, #0
   80b5c:	dcf3      	bgt.n	80b46 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80b5e:	f04f 33ff 	mov.w	r3, #4294967295
   80b62:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80b64:	4b04      	ldr	r3, [pc, #16]	; (80b78 <prvUnlockQueue+0x88>)
   80b66:	4798      	blx	r3
   80b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b6a:	bf00      	nop
   80b6c:	00080821 	.word	0x00080821
   80b70:	0008170d 	.word	0x0008170d
   80b74:	0008183d 	.word	0x0008183d
   80b78:	00080841 	.word	0x00080841

00080b7c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80b7c:	b538      	push	{r3, r4, r5, lr}
   80b7e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   80b80:	4604      	mov	r4, r0
   80b82:	b918      	cbnz	r0, 80b8c <xQueueGenericReset+0x10>
   80b84:	4b16      	ldr	r3, [pc, #88]	; (80be0 <xQueueGenericReset+0x64>)
   80b86:	4798      	blx	r3
   80b88:	bf00      	nop
   80b8a:	e7fd      	b.n	80b88 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   80b8c:	4b15      	ldr	r3, [pc, #84]	; (80be4 <xQueueGenericReset+0x68>)
   80b8e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80b90:	6823      	ldr	r3, [r4, #0]
   80b92:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80b94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80b96:	fb00 f002 	mul.w	r0, r0, r2
   80b9a:	1819      	adds	r1, r3, r0
   80b9c:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80b9e:	2100      	movs	r1, #0
   80ba0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80ba2:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80ba4:	1a82      	subs	r2, r0, r2
   80ba6:	4413      	add	r3, r2
   80ba8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80baa:	f04f 33ff 	mov.w	r3, #4294967295
   80bae:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80bb0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80bb2:	b955      	cbnz	r5, 80bca <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80bb4:	6923      	ldr	r3, [r4, #16]
   80bb6:	b17b      	cbz	r3, 80bd8 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80bb8:	f104 0010 	add.w	r0, r4, #16
   80bbc:	4b0a      	ldr	r3, [pc, #40]	; (80be8 <xQueueGenericReset+0x6c>)
   80bbe:	4798      	blx	r3
   80bc0:	2801      	cmp	r0, #1
   80bc2:	d109      	bne.n	80bd8 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80bc4:	4b09      	ldr	r3, [pc, #36]	; (80bec <xQueueGenericReset+0x70>)
   80bc6:	4798      	blx	r3
   80bc8:	e006      	b.n	80bd8 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80bca:	f104 0010 	add.w	r0, r4, #16
   80bce:	4d08      	ldr	r5, [pc, #32]	; (80bf0 <xQueueGenericReset+0x74>)
   80bd0:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80bd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80bd6:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80bd8:	4b06      	ldr	r3, [pc, #24]	; (80bf4 <xQueueGenericReset+0x78>)
   80bda:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80bdc:	2001      	movs	r0, #1
   80bde:	bd38      	pop	{r3, r4, r5, pc}
   80be0:	00080811 	.word	0x00080811
   80be4:	00080821 	.word	0x00080821
   80be8:	0008170d 	.word	0x0008170d
   80bec:	00080801 	.word	0x00080801
   80bf0:	00080711 	.word	0x00080711
   80bf4:	00080841 	.word	0x00080841

00080bf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bfa:	460d      	mov	r5, r1
   80bfc:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80bfe:	4606      	mov	r6, r0
   80c00:	b188      	cbz	r0, 80c26 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80c02:	2050      	movs	r0, #80	; 0x50
   80c04:	4b0e      	ldr	r3, [pc, #56]	; (80c40 <xQueueGenericCreate+0x48>)
   80c06:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80c08:	4604      	mov	r4, r0
   80c0a:	b160      	cbz	r0, 80c26 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80c0c:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80c10:	3001      	adds	r0, #1
   80c12:	4b0b      	ldr	r3, [pc, #44]	; (80c40 <xQueueGenericCreate+0x48>)
   80c14:	4798      	blx	r3
   80c16:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80c18:	b940      	cbnz	r0, 80c2c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80c1a:	4620      	mov	r0, r4
   80c1c:	4b09      	ldr	r3, [pc, #36]	; (80c44 <xQueueGenericCreate+0x4c>)
   80c1e:	4798      	blx	r3
   80c20:	e001      	b.n	80c26 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80c22:	bf00      	nop
   80c24:	e7fd      	b.n	80c22 <xQueueGenericCreate+0x2a>
   80c26:	4b08      	ldr	r3, [pc, #32]	; (80c48 <xQueueGenericCreate+0x50>)
   80c28:	4798      	blx	r3
   80c2a:	e7fa      	b.n	80c22 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80c2c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80c2e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80c30:	4620      	mov	r0, r4
   80c32:	2101      	movs	r1, #1
   80c34:	4b05      	ldr	r3, [pc, #20]	; (80c4c <xQueueGenericCreate+0x54>)
   80c36:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80c38:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80c3c:	4620      	mov	r0, r4
   80c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c40:	0008096d 	.word	0x0008096d
   80c44:	00080a31 	.word	0x00080a31
   80c48:	00080811 	.word	0x00080811
   80c4c:	00080b7d 	.word	0x00080b7d

00080c50 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c54:	b085      	sub	sp, #20
   80c56:	468a      	mov	sl, r1
   80c58:	9201      	str	r2, [sp, #4]
   80c5a:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80c5c:	4604      	mov	r4, r0
   80c5e:	b918      	cbnz	r0, 80c68 <xQueueGenericSend+0x18>
   80c60:	4b36      	ldr	r3, [pc, #216]	; (80d3c <xQueueGenericSend+0xec>)
   80c62:	4798      	blx	r3
   80c64:	bf00      	nop
   80c66:	e7fd      	b.n	80c64 <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c68:	b909      	cbnz	r1, 80c6e <xQueueGenericSend+0x1e>
   80c6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80c6c:	b91b      	cbnz	r3, 80c76 <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80c6e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80c70:	4e33      	ldr	r6, [pc, #204]	; (80d40 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80c72:	4d34      	ldr	r5, [pc, #208]	; (80d44 <xQueueGenericSend+0xf4>)
   80c74:	e003      	b.n	80c7e <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c76:	4b31      	ldr	r3, [pc, #196]	; (80d3c <xQueueGenericSend+0xec>)
   80c78:	4798      	blx	r3
   80c7a:	bf00      	nop
   80c7c:	e7fd      	b.n	80c7a <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80c7e:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80c80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80c82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80c84:	429a      	cmp	r2, r3
   80c86:	d212      	bcs.n	80cae <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80c88:	4620      	mov	r0, r4
   80c8a:	4651      	mov	r1, sl
   80c8c:	465a      	mov	r2, fp
   80c8e:	4b2e      	ldr	r3, [pc, #184]	; (80d48 <xQueueGenericSend+0xf8>)
   80c90:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c94:	b13b      	cbz	r3, 80ca6 <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80c96:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c9a:	4b2c      	ldr	r3, [pc, #176]	; (80d4c <xQueueGenericSend+0xfc>)
   80c9c:	4798      	blx	r3
   80c9e:	2801      	cmp	r0, #1
   80ca0:	d101      	bne.n	80ca6 <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80ca2:	4b2b      	ldr	r3, [pc, #172]	; (80d50 <xQueueGenericSend+0x100>)
   80ca4:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80ca6:	4b27      	ldr	r3, [pc, #156]	; (80d44 <xQueueGenericSend+0xf4>)
   80ca8:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80caa:	2001      	movs	r0, #1
   80cac:	e043      	b.n	80d36 <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80cae:	9b01      	ldr	r3, [sp, #4]
   80cb0:	b91b      	cbnz	r3, 80cba <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80cb2:	4b24      	ldr	r3, [pc, #144]	; (80d44 <xQueueGenericSend+0xf4>)
   80cb4:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80cb6:	2000      	movs	r0, #0
   80cb8:	e03d      	b.n	80d36 <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   80cba:	b91f      	cbnz	r7, 80cc4 <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80cbc:	a802      	add	r0, sp, #8
   80cbe:	4b25      	ldr	r3, [pc, #148]	; (80d54 <xQueueGenericSend+0x104>)
   80cc0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   80cc2:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80cc4:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80cc6:	4b24      	ldr	r3, [pc, #144]	; (80d58 <xQueueGenericSend+0x108>)
   80cc8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80cca:	47b0      	blx	r6
   80ccc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80cce:	f1b3 3fff 	cmp.w	r3, #4294967295
   80cd2:	bf04      	itt	eq
   80cd4:	2300      	moveq	r3, #0
   80cd6:	6463      	streq	r3, [r4, #68]	; 0x44
   80cd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80cda:	f1b3 3fff 	cmp.w	r3, #4294967295
   80cde:	bf04      	itt	eq
   80ce0:	2300      	moveq	r3, #0
   80ce2:	64a3      	streq	r3, [r4, #72]	; 0x48
   80ce4:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80ce6:	a802      	add	r0, sp, #8
   80ce8:	a901      	add	r1, sp, #4
   80cea:	4b1c      	ldr	r3, [pc, #112]	; (80d5c <xQueueGenericSend+0x10c>)
   80cec:	4798      	blx	r3
   80cee:	b9e0      	cbnz	r0, 80d2a <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80cf0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80cf2:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80cf6:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80cfa:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80cfc:	45c1      	cmp	r9, r8
   80cfe:	d10e      	bne.n	80d1e <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80d00:	f104 0010 	add.w	r0, r4, #16
   80d04:	9901      	ldr	r1, [sp, #4]
   80d06:	4b16      	ldr	r3, [pc, #88]	; (80d60 <xQueueGenericSend+0x110>)
   80d08:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80d0a:	4620      	mov	r0, r4
   80d0c:	4b15      	ldr	r3, [pc, #84]	; (80d64 <xQueueGenericSend+0x114>)
   80d0e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80d10:	4b15      	ldr	r3, [pc, #84]	; (80d68 <xQueueGenericSend+0x118>)
   80d12:	4798      	blx	r3
   80d14:	2800      	cmp	r0, #0
   80d16:	d1b2      	bne.n	80c7e <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   80d18:	4b0d      	ldr	r3, [pc, #52]	; (80d50 <xQueueGenericSend+0x100>)
   80d1a:	4798      	blx	r3
   80d1c:	e7af      	b.n	80c7e <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80d1e:	4620      	mov	r0, r4
   80d20:	4b10      	ldr	r3, [pc, #64]	; (80d64 <xQueueGenericSend+0x114>)
   80d22:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80d24:	4b10      	ldr	r3, [pc, #64]	; (80d68 <xQueueGenericSend+0x118>)
   80d26:	4798      	blx	r3
   80d28:	e7a9      	b.n	80c7e <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80d2a:	4620      	mov	r0, r4
   80d2c:	4b0d      	ldr	r3, [pc, #52]	; (80d64 <xQueueGenericSend+0x114>)
   80d2e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80d30:	4b0d      	ldr	r3, [pc, #52]	; (80d68 <xQueueGenericSend+0x118>)
   80d32:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80d34:	2000      	movs	r0, #0
		}
	}
}
   80d36:	b005      	add	sp, #20
   80d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d3c:	00080811 	.word	0x00080811
   80d40:	00080821 	.word	0x00080821
   80d44:	00080841 	.word	0x00080841
   80d48:	00080a65 	.word	0x00080a65
   80d4c:	0008170d 	.word	0x0008170d
   80d50:	00080801 	.word	0x00080801
   80d54:	00081791 	.word	0x00081791
   80d58:	0008126d 	.word	0x0008126d
   80d5c:	000817b9 	.word	0x000817b9
   80d60:	00081669 	.word	0x00081669
   80d64:	00080af1 	.word	0x00080af1
   80d68:	000813bd 	.word	0x000813bd

00080d6c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d70:	460e      	mov	r6, r1
   80d72:	4615      	mov	r5, r2
   80d74:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80d76:	4604      	mov	r4, r0
   80d78:	b918      	cbnz	r0, 80d82 <xQueueGenericSendFromISR+0x16>
   80d7a:	4b1c      	ldr	r3, [pc, #112]	; (80dec <xQueueGenericSendFromISR+0x80>)
   80d7c:	4798      	blx	r3
   80d7e:	bf00      	nop
   80d80:	e7fd      	b.n	80d7e <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d82:	b929      	cbnz	r1, 80d90 <xQueueGenericSendFromISR+0x24>
   80d84:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d86:	b11b      	cbz	r3, 80d90 <xQueueGenericSendFromISR+0x24>
   80d88:	4b18      	ldr	r3, [pc, #96]	; (80dec <xQueueGenericSendFromISR+0x80>)
   80d8a:	4798      	blx	r3
   80d8c:	bf00      	nop
   80d8e:	e7fd      	b.n	80d8c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80d90:	4b16      	ldr	r3, [pc, #88]	; (80dec <xQueueGenericSendFromISR+0x80>)
   80d92:	4798      	blx	r3
   80d94:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80d96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80d9a:	429a      	cmp	r2, r3
   80d9c:	d218      	bcs.n	80dd0 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80d9e:	4620      	mov	r0, r4
   80da0:	4631      	mov	r1, r6
   80da2:	4642      	mov	r2, r8
   80da4:	4b12      	ldr	r3, [pc, #72]	; (80df0 <xQueueGenericSendFromISR+0x84>)
   80da6:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80da8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80daa:	f1b3 3fff 	cmp.w	r3, #4294967295
   80dae:	d10a      	bne.n	80dc6 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80db2:	b17b      	cbz	r3, 80dd4 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80db4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80db8:	4b0e      	ldr	r3, [pc, #56]	; (80df4 <xQueueGenericSendFromISR+0x88>)
   80dba:	4798      	blx	r3
   80dbc:	b160      	cbz	r0, 80dd8 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80dbe:	b16d      	cbz	r5, 80ddc <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80dc0:	2401      	movs	r4, #1
   80dc2:	602c      	str	r4, [r5, #0]
   80dc4:	e00b      	b.n	80dde <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80dc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80dc8:	3301      	adds	r3, #1
   80dca:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80dcc:	2401      	movs	r4, #1
   80dce:	e006      	b.n	80dde <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80dd0:	2400      	movs	r4, #0
   80dd2:	e004      	b.n	80dde <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80dd4:	2401      	movs	r4, #1
   80dd6:	e002      	b.n	80dde <xQueueGenericSendFromISR+0x72>
   80dd8:	2401      	movs	r4, #1
   80dda:	e000      	b.n	80dde <xQueueGenericSendFromISR+0x72>
   80ddc:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80dde:	4638      	mov	r0, r7
   80de0:	4b05      	ldr	r3, [pc, #20]	; (80df8 <xQueueGenericSendFromISR+0x8c>)
   80de2:	4798      	blx	r3

	return xReturn;
}
   80de4:	4620      	mov	r0, r4
   80de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80dea:	bf00      	nop
   80dec:	00080811 	.word	0x00080811
   80df0:	00080a65 	.word	0x00080a65
   80df4:	0008170d 	.word	0x0008170d
   80df8:	00080839 	.word	0x00080839

00080dfc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e00:	b085      	sub	sp, #20
   80e02:	4689      	mov	r9, r1
   80e04:	9201      	str	r2, [sp, #4]
   80e06:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80e08:	4604      	mov	r4, r0
   80e0a:	b918      	cbnz	r0, 80e14 <xQueueGenericReceive+0x18>
   80e0c:	4b44      	ldr	r3, [pc, #272]	; (80f20 <xQueueGenericReceive+0x124>)
   80e0e:	4798      	blx	r3
   80e10:	bf00      	nop
   80e12:	e7fd      	b.n	80e10 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e14:	b909      	cbnz	r1, 80e1a <xQueueGenericReceive+0x1e>
   80e16:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80e18:	b92b      	cbnz	r3, 80e26 <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80e1a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80e1c:	4e41      	ldr	r6, [pc, #260]	; (80f24 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80e1e:	f8df b134 	ldr.w	fp, [pc, #308]	; 80f54 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80e22:	4d41      	ldr	r5, [pc, #260]	; (80f28 <xQueueGenericReceive+0x12c>)
   80e24:	e003      	b.n	80e2e <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e26:	4b3e      	ldr	r3, [pc, #248]	; (80f20 <xQueueGenericReceive+0x124>)
   80e28:	4798      	blx	r3
   80e2a:	bf00      	nop
   80e2c:	e7fd      	b.n	80e2a <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80e2e:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80e30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80e32:	2b00      	cmp	r3, #0
   80e34:	d028      	beq.n	80e88 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80e36:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80e38:	4620      	mov	r0, r4
   80e3a:	4649      	mov	r1, r9
   80e3c:	4b3b      	ldr	r3, [pc, #236]	; (80f2c <xQueueGenericReceive+0x130>)
   80e3e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80e40:	f1ba 0f00 	cmp.w	sl, #0
   80e44:	d112      	bne.n	80e6c <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80e48:	3b01      	subs	r3, #1
   80e4a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80e4c:	6823      	ldr	r3, [r4, #0]
   80e4e:	b913      	cbnz	r3, 80e56 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80e50:	4b37      	ldr	r3, [pc, #220]	; (80f30 <xQueueGenericReceive+0x134>)
   80e52:	4798      	blx	r3
   80e54:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80e56:	6923      	ldr	r3, [r4, #16]
   80e58:	b193      	cbz	r3, 80e80 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80e5a:	f104 0010 	add.w	r0, r4, #16
   80e5e:	4b35      	ldr	r3, [pc, #212]	; (80f34 <xQueueGenericReceive+0x138>)
   80e60:	4798      	blx	r3
   80e62:	2801      	cmp	r0, #1
   80e64:	d10c      	bne.n	80e80 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   80e66:	4b34      	ldr	r3, [pc, #208]	; (80f38 <xQueueGenericReceive+0x13c>)
   80e68:	4798      	blx	r3
   80e6a:	e009      	b.n	80e80 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80e6c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e70:	b133      	cbz	r3, 80e80 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e72:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e76:	4b2f      	ldr	r3, [pc, #188]	; (80f34 <xQueueGenericReceive+0x138>)
   80e78:	4798      	blx	r3
   80e7a:	b108      	cbz	r0, 80e80 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80e7c:	4b2e      	ldr	r3, [pc, #184]	; (80f38 <xQueueGenericReceive+0x13c>)
   80e7e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80e80:	4b29      	ldr	r3, [pc, #164]	; (80f28 <xQueueGenericReceive+0x12c>)
   80e82:	4798      	blx	r3
				return pdPASS;
   80e84:	2001      	movs	r0, #1
   80e86:	e048      	b.n	80f1a <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80e88:	9b01      	ldr	r3, [sp, #4]
   80e8a:	b91b      	cbnz	r3, 80e94 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80e8c:	4b26      	ldr	r3, [pc, #152]	; (80f28 <xQueueGenericReceive+0x12c>)
   80e8e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80e90:	2000      	movs	r0, #0
   80e92:	e042      	b.n	80f1a <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   80e94:	b917      	cbnz	r7, 80e9c <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80e96:	a802      	add	r0, sp, #8
   80e98:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80e9a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80e9c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80e9e:	4b27      	ldr	r3, [pc, #156]	; (80f3c <xQueueGenericReceive+0x140>)
   80ea0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80ea2:	47b0      	blx	r6
   80ea4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80eaa:	bf04      	itt	eq
   80eac:	2300      	moveq	r3, #0
   80eae:	6463      	streq	r3, [r4, #68]	; 0x44
   80eb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80eb6:	bf04      	itt	eq
   80eb8:	2300      	moveq	r3, #0
   80eba:	64a3      	streq	r3, [r4, #72]	; 0x48
   80ebc:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80ebe:	a802      	add	r0, sp, #8
   80ec0:	a901      	add	r1, sp, #4
   80ec2:	4b1f      	ldr	r3, [pc, #124]	; (80f40 <xQueueGenericReceive+0x144>)
   80ec4:	4798      	blx	r3
   80ec6:	bb10      	cbnz	r0, 80f0e <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80ec8:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80eca:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80ece:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80ed0:	f1b8 0f00 	cmp.w	r8, #0
   80ed4:	d115      	bne.n	80f02 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80ed6:	6823      	ldr	r3, [r4, #0]
   80ed8:	b923      	cbnz	r3, 80ee4 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   80eda:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80edc:	6860      	ldr	r0, [r4, #4]
   80ede:	4b19      	ldr	r3, [pc, #100]	; (80f44 <xQueueGenericReceive+0x148>)
   80ee0:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80ee2:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ee8:	9901      	ldr	r1, [sp, #4]
   80eea:	4b17      	ldr	r3, [pc, #92]	; (80f48 <xQueueGenericReceive+0x14c>)
   80eec:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80eee:	4620      	mov	r0, r4
   80ef0:	4b16      	ldr	r3, [pc, #88]	; (80f4c <xQueueGenericReceive+0x150>)
   80ef2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80ef4:	4b16      	ldr	r3, [pc, #88]	; (80f50 <xQueueGenericReceive+0x154>)
   80ef6:	4798      	blx	r3
   80ef8:	2800      	cmp	r0, #0
   80efa:	d198      	bne.n	80e2e <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   80efc:	4b0e      	ldr	r3, [pc, #56]	; (80f38 <xQueueGenericReceive+0x13c>)
   80efe:	4798      	blx	r3
   80f00:	e795      	b.n	80e2e <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80f02:	4620      	mov	r0, r4
   80f04:	4b11      	ldr	r3, [pc, #68]	; (80f4c <xQueueGenericReceive+0x150>)
   80f06:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80f08:	4b11      	ldr	r3, [pc, #68]	; (80f50 <xQueueGenericReceive+0x154>)
   80f0a:	4798      	blx	r3
   80f0c:	e78f      	b.n	80e2e <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80f0e:	4620      	mov	r0, r4
   80f10:	4b0e      	ldr	r3, [pc, #56]	; (80f4c <xQueueGenericReceive+0x150>)
   80f12:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80f14:	4b0e      	ldr	r3, [pc, #56]	; (80f50 <xQueueGenericReceive+0x154>)
   80f16:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   80f18:	2000      	movs	r0, #0
		}
	}
}
   80f1a:	b005      	add	sp, #20
   80f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f20:	00080811 	.word	0x00080811
   80f24:	00080821 	.word	0x00080821
   80f28:	00080841 	.word	0x00080841
   80f2c:	00080ac9 	.word	0x00080ac9
   80f30:	00081849 	.word	0x00081849
   80f34:	0008170d 	.word	0x0008170d
   80f38:	00080801 	.word	0x00080801
   80f3c:	0008126d 	.word	0x0008126d
   80f40:	000817b9 	.word	0x000817b9
   80f44:	00081875 	.word	0x00081875
   80f48:	00081669 	.word	0x00081669
   80f4c:	00080af1 	.word	0x00080af1
   80f50:	000813bd 	.word	0x000813bd
   80f54:	00081791 	.word	0x00081791

00080f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80f58:	b538      	push	{r3, r4, r5, lr}
   80f5a:	4604      	mov	r4, r0
   80f5c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80f5e:	4b0d      	ldr	r3, [pc, #52]	; (80f94 <vQueueWaitForMessageRestricted+0x3c>)
   80f60:	4798      	blx	r3
   80f62:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f64:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f68:	bf04      	itt	eq
   80f6a:	2300      	moveq	r3, #0
   80f6c:	6463      	streq	r3, [r4, #68]	; 0x44
   80f6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f70:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f74:	bf04      	itt	eq
   80f76:	2300      	moveq	r3, #0
   80f78:	64a3      	streq	r3, [r4, #72]	; 0x48
   80f7a:	4b07      	ldr	r3, [pc, #28]	; (80f98 <vQueueWaitForMessageRestricted+0x40>)
   80f7c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f80:	b923      	cbnz	r3, 80f8c <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80f82:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f86:	4629      	mov	r1, r5
   80f88:	4b04      	ldr	r3, [pc, #16]	; (80f9c <vQueueWaitForMessageRestricted+0x44>)
   80f8a:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80f8c:	4620      	mov	r0, r4
   80f8e:	4b04      	ldr	r3, [pc, #16]	; (80fa0 <vQueueWaitForMessageRestricted+0x48>)
   80f90:	4798      	blx	r3
   80f92:	bd38      	pop	{r3, r4, r5, pc}
   80f94:	00080821 	.word	0x00080821
   80f98:	00080841 	.word	0x00080841
   80f9c:	000816c9 	.word	0x000816c9
   80fa0:	00080af1 	.word	0x00080af1

00080fa4 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80fa4:	b510      	push	{r4, lr}
   80fa6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80fa8:	4b0e      	ldr	r3, [pc, #56]	; (80fe4 <prvAddCurrentTaskToDelayedList+0x40>)
   80faa:	681b      	ldr	r3, [r3, #0]
   80fac:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80fae:	4b0e      	ldr	r3, [pc, #56]	; (80fe8 <prvAddCurrentTaskToDelayedList+0x44>)
   80fb0:	681b      	ldr	r3, [r3, #0]
   80fb2:	4298      	cmp	r0, r3
   80fb4:	d207      	bcs.n	80fc6 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80fb6:	4b0d      	ldr	r3, [pc, #52]	; (80fec <prvAddCurrentTaskToDelayedList+0x48>)
   80fb8:	6818      	ldr	r0, [r3, #0]
   80fba:	4b0a      	ldr	r3, [pc, #40]	; (80fe4 <prvAddCurrentTaskToDelayedList+0x40>)
   80fbc:	6819      	ldr	r1, [r3, #0]
   80fbe:	3104      	adds	r1, #4
   80fc0:	4b0b      	ldr	r3, [pc, #44]	; (80ff0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80fc2:	4798      	blx	r3
   80fc4:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80fc6:	4b0b      	ldr	r3, [pc, #44]	; (80ff4 <prvAddCurrentTaskToDelayedList+0x50>)
   80fc8:	6818      	ldr	r0, [r3, #0]
   80fca:	4b06      	ldr	r3, [pc, #24]	; (80fe4 <prvAddCurrentTaskToDelayedList+0x40>)
   80fcc:	6819      	ldr	r1, [r3, #0]
   80fce:	3104      	adds	r1, #4
   80fd0:	4b07      	ldr	r3, [pc, #28]	; (80ff0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80fd2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80fd4:	4b08      	ldr	r3, [pc, #32]	; (80ff8 <prvAddCurrentTaskToDelayedList+0x54>)
   80fd6:	681b      	ldr	r3, [r3, #0]
   80fd8:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80fda:	bf3c      	itt	cc
   80fdc:	4b06      	ldrcc	r3, [pc, #24]	; (80ff8 <prvAddCurrentTaskToDelayedList+0x54>)
   80fde:	601c      	strcc	r4, [r3, #0]
   80fe0:	bd10      	pop	{r4, pc}
   80fe2:	bf00      	nop
   80fe4:	2007aa64 	.word	0x2007aa64
   80fe8:	2007aa80 	.word	0x2007aa80
   80fec:	2007aa84 	.word	0x2007aa84
   80ff0:	0008074d 	.word	0x0008074d
   80ff4:	2007a9c4 	.word	0x2007a9c4
   80ff8:	20070008 	.word	0x20070008

00080ffc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81000:	460e      	mov	r6, r1
   81002:	4617      	mov	r7, r2
   81004:	469a      	mov	sl, r3
   81006:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81008:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   8100c:	4681      	mov	r9, r0
   8100e:	b918      	cbnz	r0, 81018 <xTaskGenericCreate+0x1c>
   81010:	4b62      	ldr	r3, [pc, #392]	; (8119c <xTaskGenericCreate+0x1a0>)
   81012:	4798      	blx	r3
   81014:	bf00      	nop
   81016:	e7fd      	b.n	81014 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81018:	2d04      	cmp	r5, #4
   8101a:	d903      	bls.n	81024 <xTaskGenericCreate+0x28>
   8101c:	4b5f      	ldr	r3, [pc, #380]	; (8119c <xTaskGenericCreate+0x1a0>)
   8101e:	4798      	blx	r3
   81020:	bf00      	nop
   81022:	e7fd      	b.n	81020 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81024:	204c      	movs	r0, #76	; 0x4c
   81026:	4b5e      	ldr	r3, [pc, #376]	; (811a0 <xTaskGenericCreate+0x1a4>)
   81028:	4798      	blx	r3

	if( pxNewTCB != NULL )
   8102a:	4604      	mov	r4, r0
   8102c:	2800      	cmp	r0, #0
   8102e:	f000 80b1 	beq.w	81194 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81032:	f1b8 0f00 	cmp.w	r8, #0
   81036:	f040 80a9 	bne.w	8118c <xTaskGenericCreate+0x190>
   8103a:	00b8      	lsls	r0, r7, #2
   8103c:	4b58      	ldr	r3, [pc, #352]	; (811a0 <xTaskGenericCreate+0x1a4>)
   8103e:	4798      	blx	r3
   81040:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81042:	b918      	cbnz	r0, 8104c <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81044:	4620      	mov	r0, r4
   81046:	4b57      	ldr	r3, [pc, #348]	; (811a4 <xTaskGenericCreate+0x1a8>)
   81048:	4798      	blx	r3
   8104a:	e0a3      	b.n	81194 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   8104c:	21a5      	movs	r1, #165	; 0xa5
   8104e:	00ba      	lsls	r2, r7, #2
   81050:	4b55      	ldr	r3, [pc, #340]	; (811a8 <xTaskGenericCreate+0x1ac>)
   81052:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81054:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81058:	3f01      	subs	r7, #1
   8105a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8105c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81060:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81064:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81068:	4631      	mov	r1, r6
   8106a:	220a      	movs	r2, #10
   8106c:	4b4f      	ldr	r3, [pc, #316]	; (811ac <xTaskGenericCreate+0x1b0>)
   8106e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81070:	2300      	movs	r3, #0
   81072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   81076:	2d04      	cmp	r5, #4
   81078:	bf34      	ite	cc
   8107a:	462e      	movcc	r6, r5
   8107c:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   8107e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81080:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81082:	1d27      	adds	r7, r4, #4
   81084:	4638      	mov	r0, r7
   81086:	f8df 8170 	ldr.w	r8, [pc, #368]	; 811f8 <xTaskGenericCreate+0x1fc>
   8108a:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   8108c:	f104 0018 	add.w	r0, r4, #24
   81090:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81092:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81094:	f1c6 0605 	rsb	r6, r6, #5
   81098:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8109a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8109c:	4658      	mov	r0, fp
   8109e:	4649      	mov	r1, r9
   810a0:	4652      	mov	r2, sl
   810a2:	4b43      	ldr	r3, [pc, #268]	; (811b0 <xTaskGenericCreate+0x1b4>)
   810a4:	4798      	blx	r3
   810a6:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   810a8:	f010 0f07 	tst.w	r0, #7
   810ac:	d003      	beq.n	810b6 <xTaskGenericCreate+0xba>
   810ae:	4b3b      	ldr	r3, [pc, #236]	; (8119c <xTaskGenericCreate+0x1a0>)
   810b0:	4798      	blx	r3
   810b2:	bf00      	nop
   810b4:	e7fd      	b.n	810b2 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   810b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   810b8:	b103      	cbz	r3, 810bc <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   810ba:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   810bc:	4b3d      	ldr	r3, [pc, #244]	; (811b4 <xTaskGenericCreate+0x1b8>)
   810be:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   810c0:	4b3d      	ldr	r3, [pc, #244]	; (811b8 <xTaskGenericCreate+0x1bc>)
   810c2:	681a      	ldr	r2, [r3, #0]
   810c4:	3201      	adds	r2, #1
   810c6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   810c8:	4b3c      	ldr	r3, [pc, #240]	; (811bc <xTaskGenericCreate+0x1c0>)
   810ca:	681b      	ldr	r3, [r3, #0]
   810cc:	bb2b      	cbnz	r3, 8111a <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   810ce:	4b3b      	ldr	r3, [pc, #236]	; (811bc <xTaskGenericCreate+0x1c0>)
   810d0:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   810d2:	4b39      	ldr	r3, [pc, #228]	; (811b8 <xTaskGenericCreate+0x1bc>)
   810d4:	681b      	ldr	r3, [r3, #0]
   810d6:	2b01      	cmp	r3, #1
   810d8:	d129      	bne.n	8112e <xTaskGenericCreate+0x132>
   810da:	4e39      	ldr	r6, [pc, #228]	; (811c0 <xTaskGenericCreate+0x1c4>)
   810dc:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   810e0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 811c4 <xTaskGenericCreate+0x1c8>
   810e4:	4630      	mov	r0, r6
   810e6:	47c0      	blx	r8
   810e8:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   810ea:	454e      	cmp	r6, r9
   810ec:	d1fa      	bne.n	810e4 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   810ee:	f8df 910c 	ldr.w	r9, [pc, #268]	; 811fc <xTaskGenericCreate+0x200>
   810f2:	4648      	mov	r0, r9
   810f4:	4e33      	ldr	r6, [pc, #204]	; (811c4 <xTaskGenericCreate+0x1c8>)
   810f6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   810f8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81200 <xTaskGenericCreate+0x204>
   810fc:	4640      	mov	r0, r8
   810fe:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81100:	4831      	ldr	r0, [pc, #196]	; (811c8 <xTaskGenericCreate+0x1cc>)
   81102:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81104:	4831      	ldr	r0, [pc, #196]	; (811cc <xTaskGenericCreate+0x1d0>)
   81106:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81108:	4831      	ldr	r0, [pc, #196]	; (811d0 <xTaskGenericCreate+0x1d4>)
   8110a:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   8110c:	4b31      	ldr	r3, [pc, #196]	; (811d4 <xTaskGenericCreate+0x1d8>)
   8110e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81112:	4b31      	ldr	r3, [pc, #196]	; (811d8 <xTaskGenericCreate+0x1dc>)
   81114:	f8c3 8000 	str.w	r8, [r3]
   81118:	e009      	b.n	8112e <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8111a:	4b30      	ldr	r3, [pc, #192]	; (811dc <xTaskGenericCreate+0x1e0>)
   8111c:	681b      	ldr	r3, [r3, #0]
   8111e:	b933      	cbnz	r3, 8112e <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81120:	4b26      	ldr	r3, [pc, #152]	; (811bc <xTaskGenericCreate+0x1c0>)
   81122:	681b      	ldr	r3, [r3, #0]
   81124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81126:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81128:	bf24      	itt	cs
   8112a:	4b24      	ldrcs	r3, [pc, #144]	; (811bc <xTaskGenericCreate+0x1c0>)
   8112c:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8112e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81130:	4a2b      	ldr	r2, [pc, #172]	; (811e0 <xTaskGenericCreate+0x1e4>)
   81132:	6812      	ldr	r2, [r2, #0]
   81134:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81136:	bf84      	itt	hi
   81138:	4a29      	ldrhi	r2, [pc, #164]	; (811e0 <xTaskGenericCreate+0x1e4>)
   8113a:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   8113c:	4a29      	ldr	r2, [pc, #164]	; (811e4 <xTaskGenericCreate+0x1e8>)
   8113e:	6811      	ldr	r1, [r2, #0]
   81140:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   81142:	3101      	adds	r1, #1
   81144:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81146:	4a28      	ldr	r2, [pc, #160]	; (811e8 <xTaskGenericCreate+0x1ec>)
   81148:	6812      	ldr	r2, [r2, #0]
   8114a:	4293      	cmp	r3, r2
   8114c:	bf84      	itt	hi
   8114e:	4a26      	ldrhi	r2, [pc, #152]	; (811e8 <xTaskGenericCreate+0x1ec>)
   81150:	6013      	strhi	r3, [r2, #0]
   81152:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81156:	481a      	ldr	r0, [pc, #104]	; (811c0 <xTaskGenericCreate+0x1c4>)
   81158:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8115c:	4639      	mov	r1, r7
   8115e:	4b23      	ldr	r3, [pc, #140]	; (811ec <xTaskGenericCreate+0x1f0>)
   81160:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81162:	4b23      	ldr	r3, [pc, #140]	; (811f0 <xTaskGenericCreate+0x1f4>)
   81164:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81166:	4b1d      	ldr	r3, [pc, #116]	; (811dc <xTaskGenericCreate+0x1e0>)
   81168:	681b      	ldr	r3, [r3, #0]
   8116a:	b14b      	cbz	r3, 81180 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8116c:	4b13      	ldr	r3, [pc, #76]	; (811bc <xTaskGenericCreate+0x1c0>)
   8116e:	681b      	ldr	r3, [r3, #0]
   81170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81172:	429d      	cmp	r5, r3
   81174:	d907      	bls.n	81186 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   81176:	4b1f      	ldr	r3, [pc, #124]	; (811f4 <xTaskGenericCreate+0x1f8>)
   81178:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   8117a:	2001      	movs	r0, #1
   8117c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81180:	2001      	movs	r0, #1
   81182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81186:	2001      	movs	r0, #1
   81188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8118c:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   81190:	4640      	mov	r0, r8
   81192:	e75b      	b.n	8104c <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81194:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8119c:	00080811 	.word	0x00080811
   811a0:	0008096d 	.word	0x0008096d
   811a4:	00080a31 	.word	0x00080a31
   811a8:	00083329 	.word	0x00083329
   811ac:	0008352d 	.word	0x0008352d
   811b0:	000807c5 	.word	0x000807c5
   811b4:	00080821 	.word	0x00080821
   811b8:	2007aaa4 	.word	0x2007aaa4
   811bc:	2007aa64 	.word	0x2007aa64
   811c0:	2007a9fc 	.word	0x2007a9fc
   811c4:	00080711 	.word	0x00080711
   811c8:	2007aa68 	.word	0x2007aa68
   811cc:	2007a9d0 	.word	0x2007a9d0
   811d0:	2007a9b0 	.word	0x2007a9b0
   811d4:	2007a9c4 	.word	0x2007a9c4
   811d8:	2007aa84 	.word	0x2007aa84
   811dc:	2007a9c8 	.word	0x2007a9c8
   811e0:	2007aaa8 	.word	0x2007aaa8
   811e4:	2007aa88 	.word	0x2007aa88
   811e8:	2007a9f8 	.word	0x2007a9f8
   811ec:	00080731 	.word	0x00080731
   811f0:	00080841 	.word	0x00080841
   811f4:	00080801 	.word	0x00080801
   811f8:	00080729 	.word	0x00080729
   811fc:	2007aa8c 	.word	0x2007aa8c
   81200:	2007a9e4 	.word	0x2007a9e4

00081204 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81204:	b510      	push	{r4, lr}
   81206:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81208:	2300      	movs	r3, #0
   8120a:	9300      	str	r3, [sp, #0]
   8120c:	9301      	str	r3, [sp, #4]
   8120e:	9302      	str	r3, [sp, #8]
   81210:	9303      	str	r3, [sp, #12]
   81212:	480e      	ldr	r0, [pc, #56]	; (8124c <vTaskStartScheduler+0x48>)
   81214:	490e      	ldr	r1, [pc, #56]	; (81250 <vTaskStartScheduler+0x4c>)
   81216:	2282      	movs	r2, #130	; 0x82
   81218:	4c0e      	ldr	r4, [pc, #56]	; (81254 <vTaskStartScheduler+0x50>)
   8121a:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8121c:	2801      	cmp	r0, #1
   8121e:	d10e      	bne.n	8123e <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   81220:	4b0d      	ldr	r3, [pc, #52]	; (81258 <vTaskStartScheduler+0x54>)
   81222:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81224:	2801      	cmp	r0, #1
   81226:	d10a      	bne.n	8123e <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81228:	4b0c      	ldr	r3, [pc, #48]	; (8125c <vTaskStartScheduler+0x58>)
   8122a:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   8122c:	2201      	movs	r2, #1
   8122e:	4b0c      	ldr	r3, [pc, #48]	; (81260 <vTaskStartScheduler+0x5c>)
   81230:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81232:	2200      	movs	r2, #0
   81234:	4b0b      	ldr	r3, [pc, #44]	; (81264 <vTaskStartScheduler+0x60>)
   81236:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81238:	4b0b      	ldr	r3, [pc, #44]	; (81268 <vTaskStartScheduler+0x64>)
   8123a:	4798      	blx	r3
   8123c:	e004      	b.n	81248 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   8123e:	b918      	cbnz	r0, 81248 <vTaskStartScheduler+0x44>
   81240:	4b06      	ldr	r3, [pc, #24]	; (8125c <vTaskStartScheduler+0x58>)
   81242:	4798      	blx	r3
   81244:	bf00      	nop
   81246:	e7fd      	b.n	81244 <vTaskStartScheduler+0x40>
}
   81248:	b004      	add	sp, #16
   8124a:	bd10      	pop	{r4, pc}
   8124c:	00081555 	.word	0x00081555
   81250:	000861d4 	.word	0x000861d4
   81254:	00080ffd 	.word	0x00080ffd
   81258:	000819e9 	.word	0x000819e9
   8125c:	00080811 	.word	0x00080811
   81260:	2007a9c8 	.word	0x2007a9c8
   81264:	2007aa80 	.word	0x2007aa80
   81268:	000808dd 	.word	0x000808dd

0008126c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   8126c:	4b02      	ldr	r3, [pc, #8]	; (81278 <vTaskSuspendAll+0xc>)
   8126e:	681a      	ldr	r2, [r3, #0]
   81270:	3201      	adds	r2, #1
   81272:	601a      	str	r2, [r3, #0]
   81274:	4770      	bx	lr
   81276:	bf00      	nop
   81278:	2007aa60 	.word	0x2007aa60

0008127c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   8127c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8127e:	4b04      	ldr	r3, [pc, #16]	; (81290 <xTaskGetTickCount+0x14>)
   81280:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81282:	4b04      	ldr	r3, [pc, #16]	; (81294 <xTaskGetTickCount+0x18>)
   81284:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   81286:	4b04      	ldr	r3, [pc, #16]	; (81298 <xTaskGetTickCount+0x1c>)
   81288:	4798      	blx	r3

	return xTicks;
}
   8128a:	4620      	mov	r0, r4
   8128c:	bd10      	pop	{r4, pc}
   8128e:	bf00      	nop
   81290:	00080821 	.word	0x00080821
   81294:	2007aa80 	.word	0x2007aa80
   81298:	00080841 	.word	0x00080841

0008129c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   8129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   812a0:	4b3a      	ldr	r3, [pc, #232]	; (8138c <vTaskIncrementTick+0xf0>)
   812a2:	681b      	ldr	r3, [r3, #0]
   812a4:	2b00      	cmp	r3, #0
   812a6:	d16b      	bne.n	81380 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   812a8:	4b39      	ldr	r3, [pc, #228]	; (81390 <vTaskIncrementTick+0xf4>)
   812aa:	681a      	ldr	r2, [r3, #0]
   812ac:	3201      	adds	r2, #1
   812ae:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   812b0:	681b      	ldr	r3, [r3, #0]
   812b2:	bb03      	cbnz	r3, 812f6 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   812b4:	4b37      	ldr	r3, [pc, #220]	; (81394 <vTaskIncrementTick+0xf8>)
   812b6:	681b      	ldr	r3, [r3, #0]
   812b8:	681b      	ldr	r3, [r3, #0]
   812ba:	b11b      	cbz	r3, 812c4 <vTaskIncrementTick+0x28>
   812bc:	4b36      	ldr	r3, [pc, #216]	; (81398 <vTaskIncrementTick+0xfc>)
   812be:	4798      	blx	r3
   812c0:	bf00      	nop
   812c2:	e7fd      	b.n	812c0 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   812c4:	4b33      	ldr	r3, [pc, #204]	; (81394 <vTaskIncrementTick+0xf8>)
   812c6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   812c8:	4a34      	ldr	r2, [pc, #208]	; (8139c <vTaskIncrementTick+0x100>)
   812ca:	6810      	ldr	r0, [r2, #0]
   812cc:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   812ce:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   812d0:	4a33      	ldr	r2, [pc, #204]	; (813a0 <vTaskIncrementTick+0x104>)
   812d2:	6811      	ldr	r1, [r2, #0]
   812d4:	3101      	adds	r1, #1
   812d6:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   812d8:	681b      	ldr	r3, [r3, #0]
   812da:	681b      	ldr	r3, [r3, #0]
   812dc:	b923      	cbnz	r3, 812e8 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   812de:	f04f 32ff 	mov.w	r2, #4294967295
   812e2:	4b30      	ldr	r3, [pc, #192]	; (813a4 <vTaskIncrementTick+0x108>)
   812e4:	601a      	str	r2, [r3, #0]
   812e6:	e006      	b.n	812f6 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   812e8:	4b2a      	ldr	r3, [pc, #168]	; (81394 <vTaskIncrementTick+0xf8>)
   812ea:	681b      	ldr	r3, [r3, #0]
   812ec:	68db      	ldr	r3, [r3, #12]
   812ee:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   812f0:	685a      	ldr	r2, [r3, #4]
   812f2:	4b2c      	ldr	r3, [pc, #176]	; (813a4 <vTaskIncrementTick+0x108>)
   812f4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   812f6:	4b26      	ldr	r3, [pc, #152]	; (81390 <vTaskIncrementTick+0xf4>)
   812f8:	681a      	ldr	r2, [r3, #0]
   812fa:	4b2a      	ldr	r3, [pc, #168]	; (813a4 <vTaskIncrementTick+0x108>)
   812fc:	681b      	ldr	r3, [r3, #0]
   812fe:	429a      	cmp	r2, r3
   81300:	d342      	bcc.n	81388 <vTaskIncrementTick+0xec>
   81302:	4b24      	ldr	r3, [pc, #144]	; (81394 <vTaskIncrementTick+0xf8>)
   81304:	681b      	ldr	r3, [r3, #0]
   81306:	681b      	ldr	r3, [r3, #0]
   81308:	b14b      	cbz	r3, 8131e <vTaskIncrementTick+0x82>
   8130a:	4b22      	ldr	r3, [pc, #136]	; (81394 <vTaskIncrementTick+0xf8>)
   8130c:	681b      	ldr	r3, [r3, #0]
   8130e:	68db      	ldr	r3, [r3, #12]
   81310:	68dc      	ldr	r4, [r3, #12]
   81312:	6863      	ldr	r3, [r4, #4]
   81314:	4a1e      	ldr	r2, [pc, #120]	; (81390 <vTaskIncrementTick+0xf4>)
   81316:	6812      	ldr	r2, [r2, #0]
   81318:	4293      	cmp	r3, r2
   8131a:	d913      	bls.n	81344 <vTaskIncrementTick+0xa8>
   8131c:	e00e      	b.n	8133c <vTaskIncrementTick+0xa0>
   8131e:	f04f 32ff 	mov.w	r2, #4294967295
   81322:	4b20      	ldr	r3, [pc, #128]	; (813a4 <vTaskIncrementTick+0x108>)
   81324:	601a      	str	r2, [r3, #0]
   81326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8132a:	4b1a      	ldr	r3, [pc, #104]	; (81394 <vTaskIncrementTick+0xf8>)
   8132c:	681b      	ldr	r3, [r3, #0]
   8132e:	68db      	ldr	r3, [r3, #12]
   81330:	68dc      	ldr	r4, [r3, #12]
   81332:	6863      	ldr	r3, [r4, #4]
   81334:	4a16      	ldr	r2, [pc, #88]	; (81390 <vTaskIncrementTick+0xf4>)
   81336:	6812      	ldr	r2, [r2, #0]
   81338:	4293      	cmp	r3, r2
   8133a:	d907      	bls.n	8134c <vTaskIncrementTick+0xb0>
   8133c:	4a19      	ldr	r2, [pc, #100]	; (813a4 <vTaskIncrementTick+0x108>)
   8133e:	6013      	str	r3, [r2, #0]
   81340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81344:	4e18      	ldr	r6, [pc, #96]	; (813a8 <vTaskIncrementTick+0x10c>)
   81346:	4f19      	ldr	r7, [pc, #100]	; (813ac <vTaskIncrementTick+0x110>)
   81348:	f8df 806c 	ldr.w	r8, [pc, #108]	; 813b8 <vTaskIncrementTick+0x11c>
   8134c:	1d25      	adds	r5, r4, #4
   8134e:	4628      	mov	r0, r5
   81350:	47b0      	blx	r6
   81352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81354:	b113      	cbz	r3, 8135c <vTaskIncrementTick+0xc0>
   81356:	f104 0018 	add.w	r0, r4, #24
   8135a:	47b0      	blx	r6
   8135c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8135e:	683a      	ldr	r2, [r7, #0]
   81360:	4293      	cmp	r3, r2
   81362:	bf88      	it	hi
   81364:	603b      	strhi	r3, [r7, #0]
   81366:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   8136a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8136e:	4629      	mov	r1, r5
   81370:	4b0f      	ldr	r3, [pc, #60]	; (813b0 <vTaskIncrementTick+0x114>)
   81372:	4798      	blx	r3
   81374:	4b07      	ldr	r3, [pc, #28]	; (81394 <vTaskIncrementTick+0xf8>)
   81376:	681b      	ldr	r3, [r3, #0]
   81378:	681b      	ldr	r3, [r3, #0]
   8137a:	2b00      	cmp	r3, #0
   8137c:	d1d5      	bne.n	8132a <vTaskIncrementTick+0x8e>
   8137e:	e7ce      	b.n	8131e <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   81380:	4b0c      	ldr	r3, [pc, #48]	; (813b4 <vTaskIncrementTick+0x118>)
   81382:	681a      	ldr	r2, [r3, #0]
   81384:	3201      	adds	r2, #1
   81386:	601a      	str	r2, [r3, #0]
   81388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8138c:	2007aa60 	.word	0x2007aa60
   81390:	2007aa80 	.word	0x2007aa80
   81394:	2007a9c4 	.word	0x2007a9c4
   81398:	00080811 	.word	0x00080811
   8139c:	2007aa84 	.word	0x2007aa84
   813a0:	2007aa7c 	.word	0x2007aa7c
   813a4:	20070008 	.word	0x20070008
   813a8:	00080789 	.word	0x00080789
   813ac:	2007a9f8 	.word	0x2007a9f8
   813b0:	00080731 	.word	0x00080731
   813b4:	2007a9ac 	.word	0x2007a9ac
   813b8:	2007a9fc 	.word	0x2007a9fc

000813bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   813bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   813c0:	4b31      	ldr	r3, [pc, #196]	; (81488 <xTaskResumeAll+0xcc>)
   813c2:	681b      	ldr	r3, [r3, #0]
   813c4:	b91b      	cbnz	r3, 813ce <xTaskResumeAll+0x12>
   813c6:	4b31      	ldr	r3, [pc, #196]	; (8148c <xTaskResumeAll+0xd0>)
   813c8:	4798      	blx	r3
   813ca:	bf00      	nop
   813cc:	e7fd      	b.n	813ca <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   813ce:	4b30      	ldr	r3, [pc, #192]	; (81490 <xTaskResumeAll+0xd4>)
   813d0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   813d2:	4b2d      	ldr	r3, [pc, #180]	; (81488 <xTaskResumeAll+0xcc>)
   813d4:	681a      	ldr	r2, [r3, #0]
   813d6:	3a01      	subs	r2, #1
   813d8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   813da:	681b      	ldr	r3, [r3, #0]
   813dc:	2b00      	cmp	r3, #0
   813de:	d148      	bne.n	81472 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   813e0:	4b2c      	ldr	r3, [pc, #176]	; (81494 <xTaskResumeAll+0xd8>)
   813e2:	681b      	ldr	r3, [r3, #0]
   813e4:	2b00      	cmp	r3, #0
   813e6:	d046      	beq.n	81476 <xTaskResumeAll+0xba>
   813e8:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   813ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 814c0 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   813ee:	4f2a      	ldr	r7, [pc, #168]	; (81498 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   813f0:	4e2a      	ldr	r6, [pc, #168]	; (8149c <xTaskResumeAll+0xe0>)
   813f2:	e01d      	b.n	81430 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   813f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   813f8:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   813fa:	f104 0018 	add.w	r0, r4, #24
   813fe:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81400:	f104 0904 	add.w	r9, r4, #4
   81404:	4648      	mov	r0, r9
   81406:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8140a:	6832      	ldr	r2, [r6, #0]
   8140c:	4293      	cmp	r3, r2
   8140e:	bf88      	it	hi
   81410:	6033      	strhi	r3, [r6, #0]
   81412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81416:	4822      	ldr	r0, [pc, #136]	; (814a0 <xTaskResumeAll+0xe4>)
   81418:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8141c:	4649      	mov	r1, r9
   8141e:	4b21      	ldr	r3, [pc, #132]	; (814a4 <xTaskResumeAll+0xe8>)
   81420:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81422:	4b21      	ldr	r3, [pc, #132]	; (814a8 <xTaskResumeAll+0xec>)
   81424:	681b      	ldr	r3, [r3, #0]
   81426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   8142a:	429a      	cmp	r2, r3
   8142c:	bf28      	it	cs
   8142e:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81430:	f8d8 3000 	ldr.w	r3, [r8]
   81434:	2b00      	cmp	r3, #0
   81436:	d1dd      	bne.n	813f4 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81438:	4b1c      	ldr	r3, [pc, #112]	; (814ac <xTaskResumeAll+0xf0>)
   8143a:	681b      	ldr	r3, [r3, #0]
   8143c:	b163      	cbz	r3, 81458 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8143e:	4b1b      	ldr	r3, [pc, #108]	; (814ac <xTaskResumeAll+0xf0>)
   81440:	681b      	ldr	r3, [r3, #0]
   81442:	b17b      	cbz	r3, 81464 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81444:	4d1a      	ldr	r5, [pc, #104]	; (814b0 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   81446:	4c19      	ldr	r4, [pc, #100]	; (814ac <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81448:	47a8      	blx	r5
						--uxMissedTicks;
   8144a:	6823      	ldr	r3, [r4, #0]
   8144c:	3b01      	subs	r3, #1
   8144e:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81450:	6823      	ldr	r3, [r4, #0]
   81452:	2b00      	cmp	r3, #0
   81454:	d1f8      	bne.n	81448 <xTaskResumeAll+0x8c>
   81456:	e005      	b.n	81464 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81458:	2d01      	cmp	r5, #1
   8145a:	d003      	beq.n	81464 <xTaskResumeAll+0xa8>
   8145c:	4b15      	ldr	r3, [pc, #84]	; (814b4 <xTaskResumeAll+0xf8>)
   8145e:	681b      	ldr	r3, [r3, #0]
   81460:	2b01      	cmp	r3, #1
   81462:	d10a      	bne.n	8147a <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81464:	2200      	movs	r2, #0
   81466:	4b13      	ldr	r3, [pc, #76]	; (814b4 <xTaskResumeAll+0xf8>)
   81468:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   8146a:	4b13      	ldr	r3, [pc, #76]	; (814b8 <xTaskResumeAll+0xfc>)
   8146c:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8146e:	2401      	movs	r4, #1
   81470:	e004      	b.n	8147c <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81472:	2400      	movs	r4, #0
   81474:	e002      	b.n	8147c <xTaskResumeAll+0xc0>
   81476:	2400      	movs	r4, #0
   81478:	e000      	b.n	8147c <xTaskResumeAll+0xc0>
   8147a:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   8147c:	4b0f      	ldr	r3, [pc, #60]	; (814bc <xTaskResumeAll+0x100>)
   8147e:	4798      	blx	r3

	return xAlreadyYielded;
}
   81480:	4620      	mov	r0, r4
   81482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81486:	bf00      	nop
   81488:	2007aa60 	.word	0x2007aa60
   8148c:	00080811 	.word	0x00080811
   81490:	00080821 	.word	0x00080821
   81494:	2007aaa4 	.word	0x2007aaa4
   81498:	00080789 	.word	0x00080789
   8149c:	2007a9f8 	.word	0x2007a9f8
   814a0:	2007a9fc 	.word	0x2007a9fc
   814a4:	00080731 	.word	0x00080731
   814a8:	2007aa64 	.word	0x2007aa64
   814ac:	2007a9ac 	.word	0x2007a9ac
   814b0:	0008129d 	.word	0x0008129d
   814b4:	2007aaa0 	.word	0x2007aaa0
   814b8:	00080801 	.word	0x00080801
   814bc:	00080841 	.word	0x00080841
   814c0:	2007aa68 	.word	0x2007aa68

000814c4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   814c4:	b538      	push	{r3, r4, r5, lr}
   814c6:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   814c8:	4605      	mov	r5, r0
   814ca:	b918      	cbnz	r0, 814d4 <vTaskDelayUntil+0x10>
   814cc:	4b19      	ldr	r3, [pc, #100]	; (81534 <vTaskDelayUntil+0x70>)
   814ce:	4798      	blx	r3
   814d0:	bf00      	nop
   814d2:	e7fd      	b.n	814d0 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   814d4:	b919      	cbnz	r1, 814de <vTaskDelayUntil+0x1a>
   814d6:	4b17      	ldr	r3, [pc, #92]	; (81534 <vTaskDelayUntil+0x70>)
   814d8:	4798      	blx	r3
   814da:	bf00      	nop
   814dc:	e7fd      	b.n	814da <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   814de:	4b16      	ldr	r3, [pc, #88]	; (81538 <vTaskDelayUntil+0x74>)
   814e0:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   814e2:	682b      	ldr	r3, [r5, #0]
   814e4:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   814e6:	4a15      	ldr	r2, [pc, #84]	; (8153c <vTaskDelayUntil+0x78>)
   814e8:	6812      	ldr	r2, [r2, #0]
   814ea:	4293      	cmp	r3, r2
   814ec:	d907      	bls.n	814fe <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   814ee:	42a3      	cmp	r3, r4
   814f0:	d91c      	bls.n	8152c <vTaskDelayUntil+0x68>
   814f2:	4b12      	ldr	r3, [pc, #72]	; (8153c <vTaskDelayUntil+0x78>)
   814f4:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   814f6:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   814f8:	429c      	cmp	r4, r3
   814fa:	d90f      	bls.n	8151c <vTaskDelayUntil+0x58>
   814fc:	e006      	b.n	8150c <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   814fe:	42a3      	cmp	r3, r4
   81500:	d812      	bhi.n	81528 <vTaskDelayUntil+0x64>
   81502:	4b0e      	ldr	r3, [pc, #56]	; (8153c <vTaskDelayUntil+0x78>)
   81504:	681b      	ldr	r3, [r3, #0]
   81506:	429c      	cmp	r4, r3
   81508:	d80e      	bhi.n	81528 <vTaskDelayUntil+0x64>
   8150a:	e00f      	b.n	8152c <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8150c:	4b0c      	ldr	r3, [pc, #48]	; (81540 <vTaskDelayUntil+0x7c>)
   8150e:	6818      	ldr	r0, [r3, #0]
   81510:	3004      	adds	r0, #4
   81512:	4b0c      	ldr	r3, [pc, #48]	; (81544 <vTaskDelayUntil+0x80>)
   81514:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81516:	4620      	mov	r0, r4
   81518:	4b0b      	ldr	r3, [pc, #44]	; (81548 <vTaskDelayUntil+0x84>)
   8151a:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   8151c:	4b0b      	ldr	r3, [pc, #44]	; (8154c <vTaskDelayUntil+0x88>)
   8151e:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81520:	b930      	cbnz	r0, 81530 <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   81522:	4b0b      	ldr	r3, [pc, #44]	; (81550 <vTaskDelayUntil+0x8c>)
   81524:	4798      	blx	r3
   81526:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81528:	602c      	str	r4, [r5, #0]
   8152a:	e7ef      	b.n	8150c <vTaskDelayUntil+0x48>
   8152c:	602c      	str	r4, [r5, #0]
   8152e:	e7f5      	b.n	8151c <vTaskDelayUntil+0x58>
   81530:	bd38      	pop	{r3, r4, r5, pc}
   81532:	bf00      	nop
   81534:	00080811 	.word	0x00080811
   81538:	0008126d 	.word	0x0008126d
   8153c:	2007aa80 	.word	0x2007aa80
   81540:	2007aa64 	.word	0x2007aa64
   81544:	00080789 	.word	0x00080789
   81548:	00080fa5 	.word	0x00080fa5
   8154c:	000813bd 	.word	0x000813bd
   81550:	00080801 	.word	0x00080801

00081554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81554:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81556:	4d15      	ldr	r5, [pc, #84]	; (815ac <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81558:	4e15      	ldr	r6, [pc, #84]	; (815b0 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   8155a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 815d4 <prvIdleTask+0x80>
   8155e:	e01c      	b.n	8159a <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81560:	4b14      	ldr	r3, [pc, #80]	; (815b4 <prvIdleTask+0x60>)
   81562:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81564:	4b14      	ldr	r3, [pc, #80]	; (815b8 <prvIdleTask+0x64>)
   81566:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81568:	4b14      	ldr	r3, [pc, #80]	; (815bc <prvIdleTask+0x68>)
   8156a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8156c:	b1ac      	cbz	r4, 8159a <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8156e:	4b14      	ldr	r3, [pc, #80]	; (815c0 <prvIdleTask+0x6c>)
   81570:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81572:	4b11      	ldr	r3, [pc, #68]	; (815b8 <prvIdleTask+0x64>)
   81574:	68db      	ldr	r3, [r3, #12]
   81576:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81578:	1d20      	adds	r0, r4, #4
   8157a:	4b12      	ldr	r3, [pc, #72]	; (815c4 <prvIdleTask+0x70>)
   8157c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8157e:	4b12      	ldr	r3, [pc, #72]	; (815c8 <prvIdleTask+0x74>)
   81580:	681a      	ldr	r2, [r3, #0]
   81582:	3a01      	subs	r2, #1
   81584:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81586:	682b      	ldr	r3, [r5, #0]
   81588:	3b01      	subs	r3, #1
   8158a:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   8158c:	4b0f      	ldr	r3, [pc, #60]	; (815cc <prvIdleTask+0x78>)
   8158e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81590:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81592:	4f0f      	ldr	r7, [pc, #60]	; (815d0 <prvIdleTask+0x7c>)
   81594:	47b8      	blx	r7
		vPortFree( pxTCB );
   81596:	4620      	mov	r0, r4
   81598:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8159a:	682b      	ldr	r3, [r5, #0]
   8159c:	2b00      	cmp	r3, #0
   8159e:	d1df      	bne.n	81560 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   815a0:	6833      	ldr	r3, [r6, #0]
   815a2:	2b01      	cmp	r3, #1
   815a4:	d9f9      	bls.n	8159a <prvIdleTask+0x46>
			{
				taskYIELD();
   815a6:	47c0      	blx	r8
   815a8:	e7f7      	b.n	8159a <prvIdleTask+0x46>
   815aa:	bf00      	nop
   815ac:	2007a9cc 	.word	0x2007a9cc
   815b0:	2007a9fc 	.word	0x2007a9fc
   815b4:	0008126d 	.word	0x0008126d
   815b8:	2007a9d0 	.word	0x2007a9d0
   815bc:	000813bd 	.word	0x000813bd
   815c0:	00080821 	.word	0x00080821
   815c4:	00080789 	.word	0x00080789
   815c8:	2007aaa4 	.word	0x2007aaa4
   815cc:	00080841 	.word	0x00080841
   815d0:	00080a31 	.word	0x00080a31
   815d4:	00080801 	.word	0x00080801

000815d8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   815d8:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   815da:	4b1d      	ldr	r3, [pc, #116]	; (81650 <vTaskSwitchContext+0x78>)
   815dc:	681b      	ldr	r3, [r3, #0]
   815de:	b95b      	cbnz	r3, 815f8 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   815e0:	4b1c      	ldr	r3, [pc, #112]	; (81654 <vTaskSwitchContext+0x7c>)
   815e2:	681b      	ldr	r3, [r3, #0]
   815e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   815e8:	009b      	lsls	r3, r3, #2
   815ea:	4a1b      	ldr	r2, [pc, #108]	; (81658 <vTaskSwitchContext+0x80>)
   815ec:	58d3      	ldr	r3, [r2, r3]
   815ee:	b9cb      	cbnz	r3, 81624 <vTaskSwitchContext+0x4c>
   815f0:	4b18      	ldr	r3, [pc, #96]	; (81654 <vTaskSwitchContext+0x7c>)
   815f2:	681b      	ldr	r3, [r3, #0]
   815f4:	b953      	cbnz	r3, 8160c <vTaskSwitchContext+0x34>
   815f6:	e005      	b.n	81604 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   815f8:	2201      	movs	r2, #1
   815fa:	4b18      	ldr	r3, [pc, #96]	; (8165c <vTaskSwitchContext+0x84>)
   815fc:	601a      	str	r2, [r3, #0]
   815fe:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81600:	681a      	ldr	r2, [r3, #0]
   81602:	b92a      	cbnz	r2, 81610 <vTaskSwitchContext+0x38>
   81604:	4b16      	ldr	r3, [pc, #88]	; (81660 <vTaskSwitchContext+0x88>)
   81606:	4798      	blx	r3
   81608:	bf00      	nop
   8160a:	e7fd      	b.n	81608 <vTaskSwitchContext+0x30>
   8160c:	4b11      	ldr	r3, [pc, #68]	; (81654 <vTaskSwitchContext+0x7c>)
   8160e:	4912      	ldr	r1, [pc, #72]	; (81658 <vTaskSwitchContext+0x80>)
   81610:	681a      	ldr	r2, [r3, #0]
   81612:	3a01      	subs	r2, #1
   81614:	601a      	str	r2, [r3, #0]
   81616:	681a      	ldr	r2, [r3, #0]
   81618:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8161c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81620:	2a00      	cmp	r2, #0
   81622:	d0ed      	beq.n	81600 <vTaskSwitchContext+0x28>
   81624:	4b0b      	ldr	r3, [pc, #44]	; (81654 <vTaskSwitchContext+0x7c>)
   81626:	681b      	ldr	r3, [r3, #0]
   81628:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8162c:	4a0a      	ldr	r2, [pc, #40]	; (81658 <vTaskSwitchContext+0x80>)
   8162e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81632:	685a      	ldr	r2, [r3, #4]
   81634:	6852      	ldr	r2, [r2, #4]
   81636:	605a      	str	r2, [r3, #4]
   81638:	f103 0108 	add.w	r1, r3, #8
   8163c:	428a      	cmp	r2, r1
   8163e:	bf04      	itt	eq
   81640:	6852      	ldreq	r2, [r2, #4]
   81642:	605a      	streq	r2, [r3, #4]
   81644:	685b      	ldr	r3, [r3, #4]
   81646:	68da      	ldr	r2, [r3, #12]
   81648:	4b06      	ldr	r3, [pc, #24]	; (81664 <vTaskSwitchContext+0x8c>)
   8164a:	601a      	str	r2, [r3, #0]
   8164c:	bd08      	pop	{r3, pc}
   8164e:	bf00      	nop
   81650:	2007aa60 	.word	0x2007aa60
   81654:	2007a9f8 	.word	0x2007a9f8
   81658:	2007a9fc 	.word	0x2007a9fc
   8165c:	2007aaa0 	.word	0x2007aaa0
   81660:	00080811 	.word	0x00080811
   81664:	2007aa64 	.word	0x2007aa64

00081668 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81668:	b538      	push	{r3, r4, r5, lr}
   8166a:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8166c:	b918      	cbnz	r0, 81676 <vTaskPlaceOnEventList+0xe>
   8166e:	4b0e      	ldr	r3, [pc, #56]	; (816a8 <vTaskPlaceOnEventList+0x40>)
   81670:	4798      	blx	r3
   81672:	bf00      	nop
   81674:	e7fd      	b.n	81672 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81676:	4d0d      	ldr	r5, [pc, #52]	; (816ac <vTaskPlaceOnEventList+0x44>)
   81678:	6829      	ldr	r1, [r5, #0]
   8167a:	3118      	adds	r1, #24
   8167c:	4b0c      	ldr	r3, [pc, #48]	; (816b0 <vTaskPlaceOnEventList+0x48>)
   8167e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81680:	6828      	ldr	r0, [r5, #0]
   81682:	3004      	adds	r0, #4
   81684:	4b0b      	ldr	r3, [pc, #44]	; (816b4 <vTaskPlaceOnEventList+0x4c>)
   81686:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81688:	f1b4 3fff 	cmp.w	r4, #4294967295
   8168c:	d105      	bne.n	8169a <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8168e:	6829      	ldr	r1, [r5, #0]
   81690:	4809      	ldr	r0, [pc, #36]	; (816b8 <vTaskPlaceOnEventList+0x50>)
   81692:	3104      	adds	r1, #4
   81694:	4b09      	ldr	r3, [pc, #36]	; (816bc <vTaskPlaceOnEventList+0x54>)
   81696:	4798      	blx	r3
   81698:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8169a:	4b09      	ldr	r3, [pc, #36]	; (816c0 <vTaskPlaceOnEventList+0x58>)
   8169c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8169e:	4420      	add	r0, r4
   816a0:	4b08      	ldr	r3, [pc, #32]	; (816c4 <vTaskPlaceOnEventList+0x5c>)
   816a2:	4798      	blx	r3
   816a4:	bd38      	pop	{r3, r4, r5, pc}
   816a6:	bf00      	nop
   816a8:	00080811 	.word	0x00080811
   816ac:	2007aa64 	.word	0x2007aa64
   816b0:	0008074d 	.word	0x0008074d
   816b4:	00080789 	.word	0x00080789
   816b8:	2007a9b0 	.word	0x2007a9b0
   816bc:	00080731 	.word	0x00080731
   816c0:	2007aa80 	.word	0x2007aa80
   816c4:	00080fa5 	.word	0x00080fa5

000816c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   816c8:	b538      	push	{r3, r4, r5, lr}
   816ca:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   816cc:	b918      	cbnz	r0, 816d6 <vTaskPlaceOnEventListRestricted+0xe>
   816ce:	4b09      	ldr	r3, [pc, #36]	; (816f4 <vTaskPlaceOnEventListRestricted+0x2c>)
   816d0:	4798      	blx	r3
   816d2:	bf00      	nop
   816d4:	e7fd      	b.n	816d2 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   816d6:	4c08      	ldr	r4, [pc, #32]	; (816f8 <vTaskPlaceOnEventListRestricted+0x30>)
   816d8:	6821      	ldr	r1, [r4, #0]
   816da:	3118      	adds	r1, #24
   816dc:	4b07      	ldr	r3, [pc, #28]	; (816fc <vTaskPlaceOnEventListRestricted+0x34>)
   816de:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   816e0:	6820      	ldr	r0, [r4, #0]
   816e2:	3004      	adds	r0, #4
   816e4:	4b06      	ldr	r3, [pc, #24]	; (81700 <vTaskPlaceOnEventListRestricted+0x38>)
   816e6:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   816e8:	4b06      	ldr	r3, [pc, #24]	; (81704 <vTaskPlaceOnEventListRestricted+0x3c>)
   816ea:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   816ec:	4428      	add	r0, r5
   816ee:	4b06      	ldr	r3, [pc, #24]	; (81708 <vTaskPlaceOnEventListRestricted+0x40>)
   816f0:	4798      	blx	r3
   816f2:	bd38      	pop	{r3, r4, r5, pc}
   816f4:	00080811 	.word	0x00080811
   816f8:	2007aa64 	.word	0x2007aa64
   816fc:	00080731 	.word	0x00080731
   81700:	00080789 	.word	0x00080789
   81704:	2007aa80 	.word	0x2007aa80
   81708:	00080fa5 	.word	0x00080fa5

0008170c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   8170c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8170e:	68c3      	ldr	r3, [r0, #12]
   81710:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81712:	b91c      	cbnz	r4, 8171c <xTaskRemoveFromEventList+0x10>
   81714:	4b16      	ldr	r3, [pc, #88]	; (81770 <xTaskRemoveFromEventList+0x64>)
   81716:	4798      	blx	r3
   81718:	bf00      	nop
   8171a:	e7fd      	b.n	81718 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8171c:	f104 0518 	add.w	r5, r4, #24
   81720:	4628      	mov	r0, r5
   81722:	4b14      	ldr	r3, [pc, #80]	; (81774 <xTaskRemoveFromEventList+0x68>)
   81724:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81726:	4b14      	ldr	r3, [pc, #80]	; (81778 <xTaskRemoveFromEventList+0x6c>)
   81728:	681b      	ldr	r3, [r3, #0]
   8172a:	b99b      	cbnz	r3, 81754 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8172c:	1d25      	adds	r5, r4, #4
   8172e:	4628      	mov	r0, r5
   81730:	4b10      	ldr	r3, [pc, #64]	; (81774 <xTaskRemoveFromEventList+0x68>)
   81732:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81736:	4a11      	ldr	r2, [pc, #68]	; (8177c <xTaskRemoveFromEventList+0x70>)
   81738:	6812      	ldr	r2, [r2, #0]
   8173a:	4293      	cmp	r3, r2
   8173c:	bf84      	itt	hi
   8173e:	4a0f      	ldrhi	r2, [pc, #60]	; (8177c <xTaskRemoveFromEventList+0x70>)
   81740:	6013      	strhi	r3, [r2, #0]
   81742:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81746:	480e      	ldr	r0, [pc, #56]	; (81780 <xTaskRemoveFromEventList+0x74>)
   81748:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8174c:	4629      	mov	r1, r5
   8174e:	4b0d      	ldr	r3, [pc, #52]	; (81784 <xTaskRemoveFromEventList+0x78>)
   81750:	4798      	blx	r3
   81752:	e003      	b.n	8175c <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81754:	480c      	ldr	r0, [pc, #48]	; (81788 <xTaskRemoveFromEventList+0x7c>)
   81756:	4629      	mov	r1, r5
   81758:	4b0a      	ldr	r3, [pc, #40]	; (81784 <xTaskRemoveFromEventList+0x78>)
   8175a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8175c:	4b0b      	ldr	r3, [pc, #44]	; (8178c <xTaskRemoveFromEventList+0x80>)
   8175e:	681b      	ldr	r3, [r3, #0]
   81760:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81764:	4298      	cmp	r0, r3
   81766:	bf34      	ite	cc
   81768:	2000      	movcc	r0, #0
   8176a:	2001      	movcs	r0, #1
   8176c:	bd38      	pop	{r3, r4, r5, pc}
   8176e:	bf00      	nop
   81770:	00080811 	.word	0x00080811
   81774:	00080789 	.word	0x00080789
   81778:	2007aa60 	.word	0x2007aa60
   8177c:	2007a9f8 	.word	0x2007a9f8
   81780:	2007a9fc 	.word	0x2007a9fc
   81784:	00080731 	.word	0x00080731
   81788:	2007aa68 	.word	0x2007aa68
   8178c:	2007aa64 	.word	0x2007aa64

00081790 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81790:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81792:	b918      	cbnz	r0, 8179c <vTaskSetTimeOutState+0xc>
   81794:	4b05      	ldr	r3, [pc, #20]	; (817ac <vTaskSetTimeOutState+0x1c>)
   81796:	4798      	blx	r3
   81798:	bf00      	nop
   8179a:	e7fd      	b.n	81798 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   8179c:	4a04      	ldr	r2, [pc, #16]	; (817b0 <vTaskSetTimeOutState+0x20>)
   8179e:	6812      	ldr	r2, [r2, #0]
   817a0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   817a2:	4a04      	ldr	r2, [pc, #16]	; (817b4 <vTaskSetTimeOutState+0x24>)
   817a4:	6812      	ldr	r2, [r2, #0]
   817a6:	6042      	str	r2, [r0, #4]
   817a8:	bd08      	pop	{r3, pc}
   817aa:	bf00      	nop
   817ac:	00080811 	.word	0x00080811
   817b0:	2007aa7c 	.word	0x2007aa7c
   817b4:	2007aa80 	.word	0x2007aa80

000817b8 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   817b8:	b538      	push	{r3, r4, r5, lr}
   817ba:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   817bc:	4604      	mov	r4, r0
   817be:	b918      	cbnz	r0, 817c8 <xTaskCheckForTimeOut+0x10>
   817c0:	4b18      	ldr	r3, [pc, #96]	; (81824 <xTaskCheckForTimeOut+0x6c>)
   817c2:	4798      	blx	r3
   817c4:	bf00      	nop
   817c6:	e7fd      	b.n	817c4 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   817c8:	b919      	cbnz	r1, 817d2 <xTaskCheckForTimeOut+0x1a>
   817ca:	4b16      	ldr	r3, [pc, #88]	; (81824 <xTaskCheckForTimeOut+0x6c>)
   817cc:	4798      	blx	r3
   817ce:	bf00      	nop
   817d0:	e7fd      	b.n	817ce <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   817d2:	4b15      	ldr	r3, [pc, #84]	; (81828 <xTaskCheckForTimeOut+0x70>)
   817d4:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   817d6:	682b      	ldr	r3, [r5, #0]
   817d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   817dc:	d019      	beq.n	81812 <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   817de:	4a13      	ldr	r2, [pc, #76]	; (8182c <xTaskCheckForTimeOut+0x74>)
   817e0:	6811      	ldr	r1, [r2, #0]
   817e2:	6822      	ldr	r2, [r4, #0]
   817e4:	428a      	cmp	r2, r1
   817e6:	d004      	beq.n	817f2 <xTaskCheckForTimeOut+0x3a>
   817e8:	4a11      	ldr	r2, [pc, #68]	; (81830 <xTaskCheckForTimeOut+0x78>)
   817ea:	6811      	ldr	r1, [r2, #0]
   817ec:	6862      	ldr	r2, [r4, #4]
   817ee:	428a      	cmp	r2, r1
   817f0:	d911      	bls.n	81816 <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   817f2:	4a0f      	ldr	r2, [pc, #60]	; (81830 <xTaskCheckForTimeOut+0x78>)
   817f4:	6811      	ldr	r1, [r2, #0]
   817f6:	6862      	ldr	r2, [r4, #4]
   817f8:	1a89      	subs	r1, r1, r2
   817fa:	428b      	cmp	r3, r1
   817fc:	d90d      	bls.n	8181a <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   817fe:	490c      	ldr	r1, [pc, #48]	; (81830 <xTaskCheckForTimeOut+0x78>)
   81800:	6809      	ldr	r1, [r1, #0]
   81802:	1a52      	subs	r2, r2, r1
   81804:	4413      	add	r3, r2
   81806:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81808:	4620      	mov	r0, r4
   8180a:	4b0a      	ldr	r3, [pc, #40]	; (81834 <xTaskCheckForTimeOut+0x7c>)
   8180c:	4798      	blx	r3
			xReturn = pdFALSE;
   8180e:	2400      	movs	r4, #0
   81810:	e004      	b.n	8181c <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81812:	2400      	movs	r4, #0
   81814:	e002      	b.n	8181c <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81816:	2401      	movs	r4, #1
   81818:	e000      	b.n	8181c <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   8181a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   8181c:	4b06      	ldr	r3, [pc, #24]	; (81838 <xTaskCheckForTimeOut+0x80>)
   8181e:	4798      	blx	r3

	return xReturn;
}
   81820:	4620      	mov	r0, r4
   81822:	bd38      	pop	{r3, r4, r5, pc}
   81824:	00080811 	.word	0x00080811
   81828:	00080821 	.word	0x00080821
   8182c:	2007aa7c 	.word	0x2007aa7c
   81830:	2007aa80 	.word	0x2007aa80
   81834:	00081791 	.word	0x00081791
   81838:	00080841 	.word	0x00080841

0008183c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8183c:	2201      	movs	r2, #1
   8183e:	4b01      	ldr	r3, [pc, #4]	; (81844 <vTaskMissedYield+0x8>)
   81840:	601a      	str	r2, [r3, #0]
   81842:	4770      	bx	lr
   81844:	2007aaa0 	.word	0x2007aaa0

00081848 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81848:	4b01      	ldr	r3, [pc, #4]	; (81850 <xTaskGetCurrentTaskHandle+0x8>)
   8184a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8184c:	4770      	bx	lr
   8184e:	bf00      	nop
   81850:	2007aa64 	.word	0x2007aa64

00081854 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81854:	4b05      	ldr	r3, [pc, #20]	; (8186c <xTaskGetSchedulerState+0x18>)
   81856:	681b      	ldr	r3, [r3, #0]
   81858:	b133      	cbz	r3, 81868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8185a:	4b05      	ldr	r3, [pc, #20]	; (81870 <xTaskGetSchedulerState+0x1c>)
   8185c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   8185e:	2b00      	cmp	r3, #0
   81860:	bf14      	ite	ne
   81862:	2002      	movne	r0, #2
   81864:	2001      	moveq	r0, #1
   81866:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81868:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8186a:	4770      	bx	lr
   8186c:	2007a9c8 	.word	0x2007a9c8
   81870:	2007aa60 	.word	0x2007aa60

00081874 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81874:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81876:	4604      	mov	r4, r0
   81878:	2800      	cmp	r0, #0
   8187a:	d02e      	beq.n	818da <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8187c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8187e:	4a17      	ldr	r2, [pc, #92]	; (818dc <vTaskPriorityInherit+0x68>)
   81880:	6812      	ldr	r2, [r2, #0]
   81882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81884:	4293      	cmp	r3, r2
   81886:	d228      	bcs.n	818da <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81888:	4a14      	ldr	r2, [pc, #80]	; (818dc <vTaskPriorityInherit+0x68>)
   8188a:	6812      	ldr	r2, [r2, #0]
   8188c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8188e:	f1c2 0205 	rsb	r2, r2, #5
   81892:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81894:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81898:	4a11      	ldr	r2, [pc, #68]	; (818e0 <vTaskPriorityInherit+0x6c>)
   8189a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8189e:	6942      	ldr	r2, [r0, #20]
   818a0:	429a      	cmp	r2, r3
   818a2:	d116      	bne.n	818d2 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   818a4:	1d05      	adds	r5, r0, #4
   818a6:	4628      	mov	r0, r5
   818a8:	4b0e      	ldr	r3, [pc, #56]	; (818e4 <vTaskPriorityInherit+0x70>)
   818aa:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   818ac:	4b0b      	ldr	r3, [pc, #44]	; (818dc <vTaskPriorityInherit+0x68>)
   818ae:	681b      	ldr	r3, [r3, #0]
   818b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   818b2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   818b4:	4a0c      	ldr	r2, [pc, #48]	; (818e8 <vTaskPriorityInherit+0x74>)
   818b6:	6812      	ldr	r2, [r2, #0]
   818b8:	4293      	cmp	r3, r2
   818ba:	bf84      	itt	hi
   818bc:	4a0a      	ldrhi	r2, [pc, #40]	; (818e8 <vTaskPriorityInherit+0x74>)
   818be:	6013      	strhi	r3, [r2, #0]
   818c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818c4:	4806      	ldr	r0, [pc, #24]	; (818e0 <vTaskPriorityInherit+0x6c>)
   818c6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   818ca:	4629      	mov	r1, r5
   818cc:	4b07      	ldr	r3, [pc, #28]	; (818ec <vTaskPriorityInherit+0x78>)
   818ce:	4798      	blx	r3
   818d0:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   818d2:	4b02      	ldr	r3, [pc, #8]	; (818dc <vTaskPriorityInherit+0x68>)
   818d4:	681b      	ldr	r3, [r3, #0]
   818d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   818d8:	62c3      	str	r3, [r0, #44]	; 0x2c
   818da:	bd38      	pop	{r3, r4, r5, pc}
   818dc:	2007aa64 	.word	0x2007aa64
   818e0:	2007a9fc 	.word	0x2007a9fc
   818e4:	00080789 	.word	0x00080789
   818e8:	2007a9f8 	.word	0x2007a9f8
   818ec:	00080731 	.word	0x00080731

000818f0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   818f0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   818f2:	4604      	mov	r4, r0
   818f4:	b1d0      	cbz	r0, 8192c <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   818f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   818f8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   818fa:	429a      	cmp	r2, r3
   818fc:	d016      	beq.n	8192c <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   818fe:	1d05      	adds	r5, r0, #4
   81900:	4628      	mov	r0, r5
   81902:	4b0b      	ldr	r3, [pc, #44]	; (81930 <vTaskPriorityDisinherit+0x40>)
   81904:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81906:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81908:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8190a:	f1c3 0205 	rsb	r2, r3, #5
   8190e:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81910:	4a08      	ldr	r2, [pc, #32]	; (81934 <vTaskPriorityDisinherit+0x44>)
   81912:	6812      	ldr	r2, [r2, #0]
   81914:	4293      	cmp	r3, r2
   81916:	bf84      	itt	hi
   81918:	4a06      	ldrhi	r2, [pc, #24]	; (81934 <vTaskPriorityDisinherit+0x44>)
   8191a:	6013      	strhi	r3, [r2, #0]
   8191c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81920:	4805      	ldr	r0, [pc, #20]	; (81938 <vTaskPriorityDisinherit+0x48>)
   81922:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81926:	4629      	mov	r1, r5
   81928:	4b04      	ldr	r3, [pc, #16]	; (8193c <vTaskPriorityDisinherit+0x4c>)
   8192a:	4798      	blx	r3
   8192c:	bd38      	pop	{r3, r4, r5, pc}
   8192e:	bf00      	nop
   81930:	00080789 	.word	0x00080789
   81934:	2007a9f8 	.word	0x2007a9f8
   81938:	2007a9fc 	.word	0x2007a9fc
   8193c:	00080731 	.word	0x00080731

00081940 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81940:	b510      	push	{r4, lr}
   81942:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81944:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81946:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81948:	4291      	cmp	r1, r2
   8194a:	d80a      	bhi.n	81962 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8194c:	1ad2      	subs	r2, r2, r3
   8194e:	6981      	ldr	r1, [r0, #24]
   81950:	428a      	cmp	r2, r1
   81952:	d211      	bcs.n	81978 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81954:	4b0a      	ldr	r3, [pc, #40]	; (81980 <prvInsertTimerInActiveList+0x40>)
   81956:	6818      	ldr	r0, [r3, #0]
   81958:	1d21      	adds	r1, r4, #4
   8195a:	4b0a      	ldr	r3, [pc, #40]	; (81984 <prvInsertTimerInActiveList+0x44>)
   8195c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8195e:	2000      	movs	r0, #0
   81960:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81962:	429a      	cmp	r2, r3
   81964:	d201      	bcs.n	8196a <prvInsertTimerInActiveList+0x2a>
   81966:	4299      	cmp	r1, r3
   81968:	d208      	bcs.n	8197c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8196a:	4b07      	ldr	r3, [pc, #28]	; (81988 <prvInsertTimerInActiveList+0x48>)
   8196c:	6818      	ldr	r0, [r3, #0]
   8196e:	1d21      	adds	r1, r4, #4
   81970:	4b04      	ldr	r3, [pc, #16]	; (81984 <prvInsertTimerInActiveList+0x44>)
   81972:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81974:	2000      	movs	r0, #0
   81976:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81978:	2001      	movs	r0, #1
   8197a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   8197c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   8197e:	bd10      	pop	{r4, pc}
   81980:	2007aae0 	.word	0x2007aae0
   81984:	0008074d 	.word	0x0008074d
   81988:	2007aaac 	.word	0x2007aaac

0008198c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   8198c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8198e:	4b0d      	ldr	r3, [pc, #52]	; (819c4 <prvCheckForValidListAndQueue+0x38>)
   81990:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81992:	4b0d      	ldr	r3, [pc, #52]	; (819c8 <prvCheckForValidListAndQueue+0x3c>)
   81994:	681b      	ldr	r3, [r3, #0]
   81996:	b98b      	cbnz	r3, 819bc <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81998:	4d0c      	ldr	r5, [pc, #48]	; (819cc <prvCheckForValidListAndQueue+0x40>)
   8199a:	4628      	mov	r0, r5
   8199c:	4e0c      	ldr	r6, [pc, #48]	; (819d0 <prvCheckForValidListAndQueue+0x44>)
   8199e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   819a0:	4c0c      	ldr	r4, [pc, #48]	; (819d4 <prvCheckForValidListAndQueue+0x48>)
   819a2:	4620      	mov	r0, r4
   819a4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   819a6:	4b0c      	ldr	r3, [pc, #48]	; (819d8 <prvCheckForValidListAndQueue+0x4c>)
   819a8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   819aa:	4b0c      	ldr	r3, [pc, #48]	; (819dc <prvCheckForValidListAndQueue+0x50>)
   819ac:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   819ae:	2005      	movs	r0, #5
   819b0:	210c      	movs	r1, #12
   819b2:	2200      	movs	r2, #0
   819b4:	4b0a      	ldr	r3, [pc, #40]	; (819e0 <prvCheckForValidListAndQueue+0x54>)
   819b6:	4798      	blx	r3
   819b8:	4b03      	ldr	r3, [pc, #12]	; (819c8 <prvCheckForValidListAndQueue+0x3c>)
   819ba:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   819bc:	4b09      	ldr	r3, [pc, #36]	; (819e4 <prvCheckForValidListAndQueue+0x58>)
   819be:	4798      	blx	r3
   819c0:	bd70      	pop	{r4, r5, r6, pc}
   819c2:	bf00      	nop
   819c4:	00080821 	.word	0x00080821
   819c8:	2007aadc 	.word	0x2007aadc
   819cc:	2007aab0 	.word	0x2007aab0
   819d0:	00080711 	.word	0x00080711
   819d4:	2007aac4 	.word	0x2007aac4
   819d8:	2007aaac 	.word	0x2007aaac
   819dc:	2007aae0 	.word	0x2007aae0
   819e0:	00080bf9 	.word	0x00080bf9
   819e4:	00080841 	.word	0x00080841

000819e8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   819e8:	b510      	push	{r4, lr}
   819ea:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   819ec:	4b0b      	ldr	r3, [pc, #44]	; (81a1c <xTimerCreateTimerTask+0x34>)
   819ee:	4798      	blx	r3

	if( xTimerQueue != NULL )
   819f0:	4b0b      	ldr	r3, [pc, #44]	; (81a20 <xTimerCreateTimerTask+0x38>)
   819f2:	681b      	ldr	r3, [r3, #0]
   819f4:	b163      	cbz	r3, 81a10 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   819f6:	2304      	movs	r3, #4
   819f8:	9300      	str	r3, [sp, #0]
   819fa:	2300      	movs	r3, #0
   819fc:	9301      	str	r3, [sp, #4]
   819fe:	9302      	str	r3, [sp, #8]
   81a00:	9303      	str	r3, [sp, #12]
   81a02:	4808      	ldr	r0, [pc, #32]	; (81a24 <xTimerCreateTimerTask+0x3c>)
   81a04:	4908      	ldr	r1, [pc, #32]	; (81a28 <xTimerCreateTimerTask+0x40>)
   81a06:	f44f 7282 	mov.w	r2, #260	; 0x104
   81a0a:	4c08      	ldr	r4, [pc, #32]	; (81a2c <xTimerCreateTimerTask+0x44>)
   81a0c:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81a0e:	b918      	cbnz	r0, 81a18 <xTimerCreateTimerTask+0x30>
   81a10:	4b07      	ldr	r3, [pc, #28]	; (81a30 <xTimerCreateTimerTask+0x48>)
   81a12:	4798      	blx	r3
   81a14:	bf00      	nop
   81a16:	e7fd      	b.n	81a14 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81a18:	b004      	add	sp, #16
   81a1a:	bd10      	pop	{r4, pc}
   81a1c:	0008198d 	.word	0x0008198d
   81a20:	2007aadc 	.word	0x2007aadc
   81a24:	00081b3d 	.word	0x00081b3d
   81a28:	000861e0 	.word	0x000861e0
   81a2c:	00080ffd 	.word	0x00080ffd
   81a30:	00080811 	.word	0x00080811

00081a34 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81a34:	b510      	push	{r4, lr}
   81a36:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81a38:	4c0f      	ldr	r4, [pc, #60]	; (81a78 <xTimerGenericCommand+0x44>)
   81a3a:	6824      	ldr	r4, [r4, #0]
   81a3c:	b1c4      	cbz	r4, 81a70 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81a3e:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81a40:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81a42:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81a44:	b96b      	cbnz	r3, 81a62 <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81a46:	4b0d      	ldr	r3, [pc, #52]	; (81a7c <xTimerGenericCommand+0x48>)
   81a48:	4798      	blx	r3
   81a4a:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81a4c:	4b0a      	ldr	r3, [pc, #40]	; (81a78 <xTimerGenericCommand+0x44>)
   81a4e:	6818      	ldr	r0, [r3, #0]
   81a50:	a901      	add	r1, sp, #4
   81a52:	bf07      	ittee	eq
   81a54:	9a06      	ldreq	r2, [sp, #24]
   81a56:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81a58:	2200      	movne	r2, #0
   81a5a:	4613      	movne	r3, r2
   81a5c:	4c08      	ldr	r4, [pc, #32]	; (81a80 <xTimerGenericCommand+0x4c>)
   81a5e:	47a0      	blx	r4
   81a60:	e007      	b.n	81a72 <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81a62:	4620      	mov	r0, r4
   81a64:	a901      	add	r1, sp, #4
   81a66:	461a      	mov	r2, r3
   81a68:	2300      	movs	r3, #0
   81a6a:	4c06      	ldr	r4, [pc, #24]	; (81a84 <xTimerGenericCommand+0x50>)
   81a6c:	47a0      	blx	r4
   81a6e:	e000      	b.n	81a72 <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81a70:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81a72:	b004      	add	sp, #16
   81a74:	bd10      	pop	{r4, pc}
   81a76:	bf00      	nop
   81a78:	2007aadc 	.word	0x2007aadc
   81a7c:	00081855 	.word	0x00081855
   81a80:	00080c51 	.word	0x00080c51
   81a84:	00080d6d 	.word	0x00080d6d

00081a88 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a8c:	b082      	sub	sp, #8
   81a8e:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81a90:	4b22      	ldr	r3, [pc, #136]	; (81b1c <prvSampleTimeNow+0x94>)
   81a92:	4798      	blx	r3
   81a94:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81a96:	4b22      	ldr	r3, [pc, #136]	; (81b20 <prvSampleTimeNow+0x98>)
   81a98:	681b      	ldr	r3, [r3, #0]
   81a9a:	4298      	cmp	r0, r3
   81a9c:	d234      	bcs.n	81b08 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81a9e:	4e21      	ldr	r6, [pc, #132]	; (81b24 <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81aa0:	4f21      	ldr	r7, [pc, #132]	; (81b28 <prvSampleTimeNow+0xa0>)
   81aa2:	e024      	b.n	81aee <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81aa4:	68da      	ldr	r2, [r3, #12]
   81aa6:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81aaa:	68db      	ldr	r3, [r3, #12]
   81aac:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81aae:	1d25      	adds	r5, r4, #4
   81ab0:	4628      	mov	r0, r5
   81ab2:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81ab6:	4620      	mov	r0, r4
   81ab8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81aba:	69e3      	ldr	r3, [r4, #28]
   81abc:	2b01      	cmp	r3, #1
   81abe:	d116      	bne.n	81aee <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81ac0:	69a3      	ldr	r3, [r4, #24]
   81ac2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81ac4:	4553      	cmp	r3, sl
   81ac6:	d906      	bls.n	81ad6 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81ac8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81aca:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81acc:	6830      	ldr	r0, [r6, #0]
   81ace:	4629      	mov	r1, r5
   81ad0:	4b16      	ldr	r3, [pc, #88]	; (81b2c <prvSampleTimeNow+0xa4>)
   81ad2:	4798      	blx	r3
   81ad4:	e00b      	b.n	81aee <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81ad6:	2300      	movs	r3, #0
   81ad8:	9300      	str	r3, [sp, #0]
   81ada:	4620      	mov	r0, r4
   81adc:	4619      	mov	r1, r3
   81ade:	4652      	mov	r2, sl
   81ae0:	4c13      	ldr	r4, [pc, #76]	; (81b30 <prvSampleTimeNow+0xa8>)
   81ae2:	47a0      	blx	r4
				configASSERT( xResult );
   81ae4:	b918      	cbnz	r0, 81aee <prvSampleTimeNow+0x66>
   81ae6:	4b13      	ldr	r3, [pc, #76]	; (81b34 <prvSampleTimeNow+0xac>)
   81ae8:	4798      	blx	r3
   81aea:	bf00      	nop
   81aec:	e7fd      	b.n	81aea <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81aee:	6833      	ldr	r3, [r6, #0]
   81af0:	681a      	ldr	r2, [r3, #0]
   81af2:	2a00      	cmp	r2, #0
   81af4:	d1d6      	bne.n	81aa4 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81af6:	4a10      	ldr	r2, [pc, #64]	; (81b38 <prvSampleTimeNow+0xb0>)
   81af8:	6811      	ldr	r1, [r2, #0]
   81afa:	480a      	ldr	r0, [pc, #40]	; (81b24 <prvSampleTimeNow+0x9c>)
   81afc:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   81afe:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81b00:	2301      	movs	r3, #1
   81b02:	f8c9 3000 	str.w	r3, [r9]
   81b06:	e002      	b.n	81b0e <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81b08:	2300      	movs	r3, #0
   81b0a:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81b0e:	4b04      	ldr	r3, [pc, #16]	; (81b20 <prvSampleTimeNow+0x98>)
   81b10:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81b14:	4640      	mov	r0, r8
   81b16:	b002      	add	sp, #8
   81b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81b1c:	0008127d 	.word	0x0008127d
   81b20:	2007aad8 	.word	0x2007aad8
   81b24:	2007aaac 	.word	0x2007aaac
   81b28:	00080789 	.word	0x00080789
   81b2c:	0008074d 	.word	0x0008074d
   81b30:	00081a35 	.word	0x00081a35
   81b34:	00080811 	.word	0x00080811
   81b38:	2007aae0 	.word	0x2007aae0

00081b3c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81b40:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81b42:	4d4d      	ldr	r5, [pc, #308]	; (81c78 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b44:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81ca8 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81b48:	4b4c      	ldr	r3, [pc, #304]	; (81c7c <prvTimerTask+0x140>)
   81b4a:	681b      	ldr	r3, [r3, #0]
   81b4c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81b4e:	2a00      	cmp	r2, #0
   81b50:	f000 8087 	beq.w	81c62 <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b54:	68db      	ldr	r3, [r3, #12]
   81b56:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81b58:	4b49      	ldr	r3, [pc, #292]	; (81c80 <prvTimerTask+0x144>)
   81b5a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81b5c:	a803      	add	r0, sp, #12
   81b5e:	4b49      	ldr	r3, [pc, #292]	; (81c84 <prvTimerTask+0x148>)
   81b60:	4798      	blx	r3
   81b62:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81b64:	9b03      	ldr	r3, [sp, #12]
   81b66:	2b00      	cmp	r3, #0
   81b68:	d130      	bne.n	81bcc <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81b6a:	4286      	cmp	r6, r0
   81b6c:	d824      	bhi.n	81bb8 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   81b6e:	4b46      	ldr	r3, [pc, #280]	; (81c88 <prvTimerTask+0x14c>)
   81b70:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b72:	4b42      	ldr	r3, [pc, #264]	; (81c7c <prvTimerTask+0x140>)
   81b74:	681b      	ldr	r3, [r3, #0]
   81b76:	68db      	ldr	r3, [r3, #12]
   81b78:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b7a:	1d20      	adds	r0, r4, #4
   81b7c:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81b7e:	69e3      	ldr	r3, [r4, #28]
   81b80:	2b01      	cmp	r3, #1
   81b82:	d114      	bne.n	81bae <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81b84:	69a1      	ldr	r1, [r4, #24]
   81b86:	4620      	mov	r0, r4
   81b88:	4431      	add	r1, r6
   81b8a:	463a      	mov	r2, r7
   81b8c:	4633      	mov	r3, r6
   81b8e:	4f3f      	ldr	r7, [pc, #252]	; (81c8c <prvTimerTask+0x150>)
   81b90:	47b8      	blx	r7
   81b92:	2801      	cmp	r0, #1
   81b94:	d10b      	bne.n	81bae <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81b96:	2300      	movs	r3, #0
   81b98:	9300      	str	r3, [sp, #0]
   81b9a:	4620      	mov	r0, r4
   81b9c:	4619      	mov	r1, r3
   81b9e:	4632      	mov	r2, r6
   81ba0:	4e3b      	ldr	r6, [pc, #236]	; (81c90 <prvTimerTask+0x154>)
   81ba2:	47b0      	blx	r6
			configASSERT( xResult );
   81ba4:	b918      	cbnz	r0, 81bae <prvTimerTask+0x72>
   81ba6:	4b3b      	ldr	r3, [pc, #236]	; (81c94 <prvTimerTask+0x158>)
   81ba8:	4798      	blx	r3
   81baa:	bf00      	nop
   81bac:	e7fd      	b.n	81baa <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81bb0:	4620      	mov	r0, r4
   81bb2:	4798      	blx	r3
   81bb4:	e00c      	b.n	81bd0 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81bb6:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81bb8:	6828      	ldr	r0, [r5, #0]
   81bba:	1bf1      	subs	r1, r6, r7
   81bbc:	4b36      	ldr	r3, [pc, #216]	; (81c98 <prvTimerTask+0x15c>)
   81bbe:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81bc0:	4b31      	ldr	r3, [pc, #196]	; (81c88 <prvTimerTask+0x14c>)
   81bc2:	4798      	blx	r3
   81bc4:	b920      	cbnz	r0, 81bd0 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81bc6:	4b35      	ldr	r3, [pc, #212]	; (81c9c <prvTimerTask+0x160>)
   81bc8:	4798      	blx	r3
   81bca:	e001      	b.n	81bd0 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81bcc:	4b2e      	ldr	r3, [pc, #184]	; (81c88 <prvTimerTask+0x14c>)
   81bce:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81bd0:	a802      	add	r0, sp, #8
   81bd2:	4b2c      	ldr	r3, [pc, #176]	; (81c84 <prvTimerTask+0x148>)
   81bd4:	4798      	blx	r3
   81bd6:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81bd8:	4e31      	ldr	r6, [pc, #196]	; (81ca0 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81bda:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81c8c <prvTimerTask+0x150>
   81bde:	e038      	b.n	81c52 <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81be0:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81be2:	b11c      	cbz	r4, 81bec <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81be4:	6961      	ldr	r1, [r4, #20]
   81be6:	b109      	cbz	r1, 81bec <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81be8:	1d20      	adds	r0, r4, #4
   81bea:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81bec:	9903      	ldr	r1, [sp, #12]
   81bee:	2902      	cmp	r1, #2
   81bf0:	d01f      	beq.n	81c32 <prvTimerTask+0xf6>
   81bf2:	2903      	cmp	r1, #3
   81bf4:	d02a      	beq.n	81c4c <prvTimerTask+0x110>
   81bf6:	2900      	cmp	r1, #0
   81bf8:	d12b      	bne.n	81c52 <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81bfa:	9b04      	ldr	r3, [sp, #16]
   81bfc:	69a1      	ldr	r1, [r4, #24]
   81bfe:	4620      	mov	r0, r4
   81c00:	4419      	add	r1, r3
   81c02:	463a      	mov	r2, r7
   81c04:	47c8      	blx	r9
   81c06:	2801      	cmp	r0, #1
   81c08:	d123      	bne.n	81c52 <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c0c:	4620      	mov	r0, r4
   81c0e:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c10:	69e3      	ldr	r3, [r4, #28]
   81c12:	2b01      	cmp	r3, #1
   81c14:	d11d      	bne.n	81c52 <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81c16:	69a2      	ldr	r2, [r4, #24]
   81c18:	2300      	movs	r3, #0
   81c1a:	9300      	str	r3, [sp, #0]
   81c1c:	4620      	mov	r0, r4
   81c1e:	4619      	mov	r1, r3
   81c20:	9c04      	ldr	r4, [sp, #16]
   81c22:	4422      	add	r2, r4
   81c24:	4c1a      	ldr	r4, [pc, #104]	; (81c90 <prvTimerTask+0x154>)
   81c26:	47a0      	blx	r4
						configASSERT( xResult );
   81c28:	b998      	cbnz	r0, 81c52 <prvTimerTask+0x116>
   81c2a:	4b1a      	ldr	r3, [pc, #104]	; (81c94 <prvTimerTask+0x158>)
   81c2c:	4798      	blx	r3
   81c2e:	bf00      	nop
   81c30:	e7fd      	b.n	81c2e <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81c32:	9904      	ldr	r1, [sp, #16]
   81c34:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81c36:	b919      	cbnz	r1, 81c40 <prvTimerTask+0x104>
   81c38:	4b16      	ldr	r3, [pc, #88]	; (81c94 <prvTimerTask+0x158>)
   81c3a:	4798      	blx	r3
   81c3c:	bf00      	nop
   81c3e:	e7fd      	b.n	81c3c <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81c40:	4620      	mov	r0, r4
   81c42:	4439      	add	r1, r7
   81c44:	463a      	mov	r2, r7
   81c46:	463b      	mov	r3, r7
   81c48:	47c8      	blx	r9
   81c4a:	e002      	b.n	81c52 <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81c4c:	4620      	mov	r0, r4
   81c4e:	4b15      	ldr	r3, [pc, #84]	; (81ca4 <prvTimerTask+0x168>)
   81c50:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81c52:	6828      	ldr	r0, [r5, #0]
   81c54:	a903      	add	r1, sp, #12
   81c56:	2200      	movs	r2, #0
   81c58:	4613      	mov	r3, r2
   81c5a:	47b0      	blx	r6
   81c5c:	2800      	cmp	r0, #0
   81c5e:	d1bf      	bne.n	81be0 <prvTimerTask+0xa4>
   81c60:	e772      	b.n	81b48 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81c62:	4b07      	ldr	r3, [pc, #28]	; (81c80 <prvTimerTask+0x144>)
   81c64:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c66:	a803      	add	r0, sp, #12
   81c68:	4b06      	ldr	r3, [pc, #24]	; (81c84 <prvTimerTask+0x148>)
   81c6a:	4798      	blx	r3
   81c6c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c6e:	9b03      	ldr	r3, [sp, #12]
   81c70:	2b00      	cmp	r3, #0
   81c72:	d0a0      	beq.n	81bb6 <prvTimerTask+0x7a>
   81c74:	e7aa      	b.n	81bcc <prvTimerTask+0x90>
   81c76:	bf00      	nop
   81c78:	2007aadc 	.word	0x2007aadc
   81c7c:	2007aaac 	.word	0x2007aaac
   81c80:	0008126d 	.word	0x0008126d
   81c84:	00081a89 	.word	0x00081a89
   81c88:	000813bd 	.word	0x000813bd
   81c8c:	00081941 	.word	0x00081941
   81c90:	00081a35 	.word	0x00081a35
   81c94:	00080811 	.word	0x00080811
   81c98:	00080f59 	.word	0x00080f59
   81c9c:	00080801 	.word	0x00080801
   81ca0:	00080dfd 	.word	0x00080dfd
   81ca4:	00080a31 	.word	0x00080a31
   81ca8:	00080789 	.word	0x00080789

00081cac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81cb0:	460e      	mov	r6, r1
   81cb2:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81cb4:	3801      	subs	r0, #1
   81cb6:	2802      	cmp	r0, #2
   81cb8:	d80f      	bhi.n	81cda <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   81cba:	b192      	cbz	r2, 81ce2 <_write+0x36>
   81cbc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81cbe:	f8df 803c 	ldr.w	r8, [pc, #60]	; 81cfc <_write+0x50>
   81cc2:	4f0d      	ldr	r7, [pc, #52]	; (81cf8 <_write+0x4c>)
   81cc4:	f8d8 0000 	ldr.w	r0, [r8]
   81cc8:	5d31      	ldrb	r1, [r6, r4]
   81cca:	683b      	ldr	r3, [r7, #0]
   81ccc:	4798      	blx	r3
   81cce:	2800      	cmp	r0, #0
   81cd0:	db0a      	blt.n	81ce8 <_write+0x3c>
			return -1;
		}
		++nChars;
   81cd2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81cd4:	42a5      	cmp	r5, r4
   81cd6:	d1f5      	bne.n	81cc4 <_write+0x18>
   81cd8:	e00a      	b.n	81cf0 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81cda:	f04f 30ff 	mov.w	r0, #4294967295
   81cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   81ce2:	2000      	movs	r0, #0
   81ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81ce8:	f04f 30ff 	mov.w	r0, #4294967295
   81cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   81cf0:	4620      	mov	r0, r4
	}
	return nChars;
}
   81cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81cf6:	bf00      	nop
   81cf8:	2007abb8 	.word	0x2007abb8
   81cfc:	2007abbc 	.word	0x2007abbc

00081d00 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   81d00:	b4f0      	push	{r4, r5, r6, r7}
   81d02:	b08c      	sub	sp, #48	; 0x30
   81d04:	4607      	mov	r7, r0
   81d06:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   81d08:	ac01      	add	r4, sp, #4
   81d0a:	4d12      	ldr	r5, [pc, #72]	; (81d54 <pwm_clocks_generate+0x54>)
   81d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   81d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   81d1c:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   81d1e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   81d20:	f852 4f04 	ldr.w	r4, [r2, #4]!
   81d24:	fbb6 f4f4 	udiv	r4, r6, r4
   81d28:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   81d2c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   81d30:	d903      	bls.n	81d3a <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   81d32:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   81d34:	2b0b      	cmp	r3, #11
   81d36:	d1f3      	bne.n	81d20 <pwm_clocks_generate+0x20>
   81d38:	e004      	b.n	81d44 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   81d3a:	2b0a      	cmp	r3, #10
   81d3c:	d805      	bhi.n	81d4a <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   81d3e:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   81d42:	e004      	b.n	81d4e <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   81d44:	f64f 70ff 	movw	r0, #65535	; 0xffff
   81d48:	e001      	b.n	81d4e <pwm_clocks_generate+0x4e>
   81d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   81d4e:	b00c      	add	sp, #48	; 0x30
   81d50:	bcf0      	pop	{r4, r5, r6, r7}
   81d52:	4770      	bx	lr
   81d54:	000861e8 	.word	0x000861e8

00081d58 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   81d58:	b570      	push	{r4, r5, r6, lr}
   81d5a:	4606      	mov	r6, r0
   81d5c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   81d5e:	6808      	ldr	r0, [r1, #0]
   81d60:	b140      	cbz	r0, 81d74 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   81d62:	6889      	ldr	r1, [r1, #8]
   81d64:	4b0b      	ldr	r3, [pc, #44]	; (81d94 <pwm_init+0x3c>)
   81d66:	4798      	blx	r3
   81d68:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   81d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81d6e:	4298      	cmp	r0, r3
   81d70:	d101      	bne.n	81d76 <pwm_init+0x1e>
   81d72:	e00e      	b.n	81d92 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   81d74:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   81d76:	6860      	ldr	r0, [r4, #4]
   81d78:	b140      	cbz	r0, 81d8c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   81d7a:	68a1      	ldr	r1, [r4, #8]
   81d7c:	4b05      	ldr	r3, [pc, #20]	; (81d94 <pwm_init+0x3c>)
   81d7e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   81d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81d84:	4298      	cmp	r0, r3
   81d86:	d004      	beq.n	81d92 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   81d88:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   81d8c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   81d8e:	2000      	movs	r0, #0
   81d90:	bd70      	pop	{r4, r5, r6, pc}
}
   81d92:	bd70      	pop	{r4, r5, r6, pc}
   81d94:	00081d01 	.word	0x00081d01

00081d98 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   81d98:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   81d9a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81d9c:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81d9e:	684a      	ldr	r2, [r1, #4]
   81da0:	f002 020f 	and.w	r2, r2, #15
   81da4:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   81da6:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   81da8:	432c      	orrs	r4, r5
   81daa:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
   81dac:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   81db0:	7d8a      	ldrb	r2, [r1, #22]
   81db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   81db6:	7dca      	ldrb	r2, [r1, #23]
   81db8:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   81dbc:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   81dbe:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   81dc2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   81dc6:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   81dca:	68cc      	ldr	r4, [r1, #12]
   81dcc:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   81dd0:	690c      	ldr	r4, [r1, #16]
   81dd2:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   81dd6:	7d8a      	ldrb	r2, [r1, #22]
   81dd8:	b13a      	cbz	r2, 81dea <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   81dda:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   81ddc:	8b4a      	ldrh	r2, [r1, #26]
   81dde:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   81de2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   81de6:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   81dea:	6c85      	ldr	r5, [r0, #72]	; 0x48
   81dec:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   81df0:	409a      	lsls	r2, r3
   81df2:	43d2      	mvns	r2, r2
   81df4:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   81df6:	7fce      	ldrb	r6, [r1, #31]
   81df8:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   81dfa:	7f8c      	ldrb	r4, [r1, #30]
   81dfc:	409c      	lsls	r4, r3
   81dfe:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   81e02:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   81e04:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   81e06:	6c44      	ldr	r4, [r0, #68]	; 0x44
   81e08:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   81e0a:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   81e0e:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   81e10:	f891 4020 	ldrb.w	r4, [r1, #32]
   81e14:	409c      	lsls	r4, r3
   81e16:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   81e1a:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   81e1c:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   81e1e:	2201      	movs	r2, #1
   81e20:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   81e22:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   81e26:	b11c      	cbz	r4, 81e30 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   81e28:	6a04      	ldr	r4, [r0, #32]
   81e2a:	4314      	orrs	r4, r2
   81e2c:	6204      	str	r4, [r0, #32]
   81e2e:	e003      	b.n	81e38 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   81e30:	6a04      	ldr	r4, [r0, #32]
   81e32:	ea24 0402 	bic.w	r4, r4, r2
   81e36:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   81e38:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   81e3c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   81e3e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81e40:	bf0c      	ite	eq
   81e42:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   81e44:	4394      	bicne	r4, r2
   81e46:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   81e48:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   81e4c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   81e4e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   81e50:	bf0c      	ite	eq
   81e52:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   81e56:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   81e5a:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   81e5c:	2b03      	cmp	r3, #3
   81e5e:	d80c      	bhi.n	81e7a <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   81e60:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   81e62:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   81e64:	22ff      	movs	r2, #255	; 0xff
   81e66:	409a      	lsls	r2, r3
   81e68:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81e6c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81e70:	fa01 f303 	lsl.w	r3, r1, r3
   81e74:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   81e76:	66c3      	str	r3, [r0, #108]	; 0x6c
   81e78:	e00c      	b.n	81e94 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   81e7a:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   81e7c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   81e7e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   81e80:	22ff      	movs	r2, #255	; 0xff
   81e82:	409a      	lsls	r2, r3
   81e84:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   81e88:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   81e8c:	fa01 f303 	lsl.w	r3, r1, r3
   81e90:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   81e92:	6703      	str	r3, [r0, #112]	; 0x70
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
   81e94:	2000      	movs	r0, #0
   81e96:	bc70      	pop	{r4, r5, r6}
   81e98:	4770      	bx	lr
   81e9a:	bf00      	nop

00081e9c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   81e9c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   81e9e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   81ea0:	690b      	ldr	r3, [r1, #16]
   81ea2:	4293      	cmp	r3, r2
   81ea4:	d306      	bcc.n	81eb4 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   81ea6:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   81ea8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   81eac:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   81eb0:	2000      	movs	r0, #0
   81eb2:	e001      	b.n	81eb8 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   81eb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   81eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
   81ebc:	4770      	bx	lr
   81ebe:	bf00      	nop

00081ec0 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   81ec0:	2301      	movs	r3, #1
   81ec2:	fa03 f101 	lsl.w	r1, r3, r1
   81ec6:	6041      	str	r1, [r0, #4]
   81ec8:	4770      	bx	lr
   81eca:	bf00      	nop

00081ecc <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   81ecc:	2301      	movs	r3, #1
   81ece:	fa03 f101 	lsl.w	r1, r3, r1
   81ed2:	6081      	str	r1, [r0, #8]
   81ed4:	4770      	bx	lr
   81ed6:	bf00      	nop

00081ed8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81ed8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81eda:	23ac      	movs	r3, #172	; 0xac
   81edc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81ede:	680a      	ldr	r2, [r1, #0]
   81ee0:	684b      	ldr	r3, [r1, #4]
   81ee2:	fbb2 f3f3 	udiv	r3, r2, r3
   81ee6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81ee8:	1e5c      	subs	r4, r3, #1
   81eea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81eee:	4294      	cmp	r4, r2
   81ef0:	d80a      	bhi.n	81f08 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81ef2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81ef4:	688b      	ldr	r3, [r1, #8]
   81ef6:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81ef8:	f240 2302 	movw	r3, #514	; 0x202
   81efc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81f00:	2350      	movs	r3, #80	; 0x50
   81f02:	6003      	str	r3, [r0, #0]

	return 0;
   81f04:	2000      	movs	r0, #0
   81f06:	e000      	b.n	81f0a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81f08:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
   81f0e:	4770      	bx	lr

00081f10 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81f10:	6943      	ldr	r3, [r0, #20]
   81f12:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81f16:	bf1a      	itte	ne
   81f18:	61c1      	strne	r1, [r0, #28]
	return 0;
   81f1a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81f1c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81f1e:	4770      	bx	lr

00081f20 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81f20:	6943      	ldr	r3, [r0, #20]
   81f22:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81f26:	bf1d      	ittte	ne
   81f28:	6983      	ldrne	r3, [r0, #24]
   81f2a:	700b      	strbne	r3, [r1, #0]
	return 0;
   81f2c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81f2e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81f30:	4770      	bx	lr
   81f32:	bf00      	nop

00081f34 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81f34:	6943      	ldr	r3, [r0, #20]
   81f36:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81f3a:	bf1d      	ittte	ne
   81f3c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81f40:	61c1      	strne	r1, [r0, #28]
	return 0;
   81f42:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   81f44:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   81f46:	4770      	bx	lr

00081f48 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81f48:	6943      	ldr	r3, [r0, #20]
   81f4a:	f013 0f01 	tst.w	r3, #1
   81f4e:	d005      	beq.n	81f5c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81f50:	6983      	ldr	r3, [r0, #24]
   81f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81f56:	600b      	str	r3, [r1, #0]

	return 0;
   81f58:	2000      	movs	r0, #0
   81f5a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   81f5c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   81f5e:	4770      	bx	lr

00081f60 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81f60:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81f62:	480e      	ldr	r0, [pc, #56]	; (81f9c <sysclk_init+0x3c>)
   81f64:	4b0e      	ldr	r3, [pc, #56]	; (81fa0 <sysclk_init+0x40>)
   81f66:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81f68:	2000      	movs	r0, #0
   81f6a:	213e      	movs	r1, #62	; 0x3e
   81f6c:	4b0d      	ldr	r3, [pc, #52]	; (81fa4 <sysclk_init+0x44>)
   81f6e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81f70:	4c0d      	ldr	r4, [pc, #52]	; (81fa8 <sysclk_init+0x48>)
   81f72:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81f74:	2800      	cmp	r0, #0
   81f76:	d0fc      	beq.n	81f72 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81f78:	4b0c      	ldr	r3, [pc, #48]	; (81fac <sysclk_init+0x4c>)
   81f7a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81f7c:	4a0c      	ldr	r2, [pc, #48]	; (81fb0 <sysclk_init+0x50>)
   81f7e:	4b0d      	ldr	r3, [pc, #52]	; (81fb4 <sysclk_init+0x54>)
   81f80:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81f82:	4c0d      	ldr	r4, [pc, #52]	; (81fb8 <sysclk_init+0x58>)
   81f84:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81f86:	2800      	cmp	r0, #0
   81f88:	d0fc      	beq.n	81f84 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81f8a:	2010      	movs	r0, #16
   81f8c:	4b0b      	ldr	r3, [pc, #44]	; (81fbc <sysclk_init+0x5c>)
   81f8e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81f90:	4b0b      	ldr	r3, [pc, #44]	; (81fc0 <sysclk_init+0x60>)
   81f92:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81f94:	4801      	ldr	r0, [pc, #4]	; (81f9c <sysclk_init+0x3c>)
   81f96:	4b02      	ldr	r3, [pc, #8]	; (81fa0 <sysclk_init+0x40>)
   81f98:	4798      	blx	r3
   81f9a:	bd10      	pop	{r4, pc}
   81f9c:	0501bd00 	.word	0x0501bd00
   81fa0:	0008268d 	.word	0x0008268d
   81fa4:	000823e1 	.word	0x000823e1
   81fa8:	00082435 	.word	0x00082435
   81fac:	00082445 	.word	0x00082445
   81fb0:	200d3f01 	.word	0x200d3f01
   81fb4:	400e0600 	.word	0x400e0600
   81fb8:	00082455 	.word	0x00082455
   81fbc:	0008237d 	.word	0x0008237d
   81fc0:	00082571 	.word	0x00082571

00081fc4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81fc4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81fca:	4b13      	ldr	r3, [pc, #76]	; (82018 <board_init+0x54>)
   81fcc:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81fce:	200b      	movs	r0, #11
   81fd0:	4c12      	ldr	r4, [pc, #72]	; (8201c <board_init+0x58>)
   81fd2:	47a0      	blx	r4
   81fd4:	200c      	movs	r0, #12
   81fd6:	47a0      	blx	r4
   81fd8:	200d      	movs	r0, #13
   81fda:	47a0      	blx	r4
   81fdc:	200e      	movs	r0, #14
   81fde:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81fe0:	203b      	movs	r0, #59	; 0x3b
   81fe2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fe6:	4c0e      	ldr	r4, [pc, #56]	; (82020 <board_init+0x5c>)
   81fe8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81fea:	2055      	movs	r0, #85	; 0x55
   81fec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81ff0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81ff2:	2056      	movs	r0, #86	; 0x56
   81ff4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81ff8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81ffa:	2068      	movs	r0, #104	; 0x68
   81ffc:	4909      	ldr	r1, [pc, #36]	; (82024 <board_init+0x60>)
   81ffe:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82000:	205c      	movs	r0, #92	; 0x5c
   82002:	4909      	ldr	r1, [pc, #36]	; (82028 <board_init+0x64>)
   82004:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82006:	4809      	ldr	r0, [pc, #36]	; (8202c <board_init+0x68>)
   82008:	f44f 7140 	mov.w	r1, #768	; 0x300
   8200c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82010:	4b07      	ldr	r3, [pc, #28]	; (82030 <board_init+0x6c>)
   82012:	4798      	blx	r3
   82014:	bd10      	pop	{r4, pc}
   82016:	bf00      	nop
   82018:	400e1a50 	.word	0x400e1a50
   8201c:	00082465 	.word	0x00082465
   82020:	00082161 	.word	0x00082161
   82024:	28000079 	.word	0x28000079
   82028:	28000001 	.word	0x28000001
   8202c:	400e0e00 	.word	0x400e0e00
   82030:	00082235 	.word	0x00082235

00082034 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82034:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82036:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8203a:	d016      	beq.n	8206a <pio_set_peripheral+0x36>
   8203c:	d804      	bhi.n	82048 <pio_set_peripheral+0x14>
   8203e:	b1c1      	cbz	r1, 82072 <pio_set_peripheral+0x3e>
   82040:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82044:	d00a      	beq.n	8205c <pio_set_peripheral+0x28>
   82046:	e013      	b.n	82070 <pio_set_peripheral+0x3c>
   82048:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8204c:	d011      	beq.n	82072 <pio_set_peripheral+0x3e>
   8204e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82052:	d00e      	beq.n	82072 <pio_set_peripheral+0x3e>
   82054:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82058:	d10a      	bne.n	82070 <pio_set_peripheral+0x3c>
   8205a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8205c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8205e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82060:	400b      	ands	r3, r1
   82062:	ea23 0302 	bic.w	r3, r3, r2
   82066:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82068:	e002      	b.n	82070 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8206a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8206c:	4313      	orrs	r3, r2
   8206e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82070:	6042      	str	r2, [r0, #4]
   82072:	4770      	bx	lr

00082074 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82074:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82076:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8207a:	bf14      	ite	ne
   8207c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8207e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82080:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82084:	bf14      	ite	ne
   82086:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82088:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8208a:	f012 0f02 	tst.w	r2, #2
   8208e:	d002      	beq.n	82096 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82090:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82094:	e004      	b.n	820a0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82096:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8209a:	bf18      	it	ne
   8209c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   820a0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   820a2:	6001      	str	r1, [r0, #0]
   820a4:	4770      	bx	lr
   820a6:	bf00      	nop

000820a8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   820a8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   820aa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820ac:	9c01      	ldr	r4, [sp, #4]
   820ae:	b10c      	cbz	r4, 820b4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   820b0:	6641      	str	r1, [r0, #100]	; 0x64
   820b2:	e000      	b.n	820b6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   820b4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   820b6:	b10b      	cbz	r3, 820bc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   820b8:	6501      	str	r1, [r0, #80]	; 0x50
   820ba:	e000      	b.n	820be <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   820bc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   820be:	b10a      	cbz	r2, 820c4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   820c0:	6301      	str	r1, [r0, #48]	; 0x30
   820c2:	e000      	b.n	820c6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   820c4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   820c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   820c8:	6001      	str	r1, [r0, #0]
}
   820ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   820ce:	4770      	bx	lr

000820d0 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
   820d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   820d2:	b083      	sub	sp, #12
   820d4:	4607      	mov	r7, r0
   820d6:	460c      	mov	r4, r1
   820d8:	4616      	mov	r6, r2
   820da:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
   820dc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   820e0:	d01a      	beq.n	82118 <pio_configure+0x48>
   820e2:	d806      	bhi.n	820f2 <pio_configure+0x22>
   820e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   820e8:	d00a      	beq.n	82100 <pio_configure+0x30>
   820ea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   820ee:	d007      	beq.n	82100 <pio_configure+0x30>
   820f0:	e028      	b.n	82144 <pio_configure+0x74>
   820f2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   820f6:	d015      	beq.n	82124 <pio_configure+0x54>
   820f8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   820fc:	d012      	beq.n	82124 <pio_configure+0x54>
   820fe:	e021      	b.n	82144 <pio_configure+0x74>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
   82100:	4638      	mov	r0, r7
   82102:	4621      	mov	r1, r4
   82104:	4632      	mov	r2, r6
   82106:	4b11      	ldr	r3, [pc, #68]	; (8214c <pio_configure+0x7c>)
   82108:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8210a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8210e:	bf14      	ite	ne
   82110:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82112:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82114:	2001      	movs	r0, #1
   82116:	e016      	b.n	82146 <pio_configure+0x76>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
   82118:	4611      	mov	r1, r2
   8211a:	461a      	mov	r2, r3
   8211c:	4b0c      	ldr	r3, [pc, #48]	; (82150 <pio_configure+0x80>)
   8211e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82120:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
   82122:	e010      	b.n	82146 <pio_configure+0x76>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
   82124:	f005 0301 	and.w	r3, r5, #1
   82128:	9300      	str	r3, [sp, #0]
   8212a:	4638      	mov	r0, r7
   8212c:	4631      	mov	r1, r6
   8212e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82132:	bf14      	ite	ne
   82134:	2200      	movne	r2, #0
   82136:	2201      	moveq	r2, #1
   82138:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8213c:	4c05      	ldr	r4, [pc, #20]	; (82154 <pio_configure+0x84>)
   8213e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82140:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
   82142:	e000      	b.n	82146 <pio_configure+0x76>

	default:
		return 0;
   82144:	2000      	movs	r0, #0
	}

	return 1;
}
   82146:	b003      	add	sp, #12
   82148:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8214a:	bf00      	nop
   8214c:	00082035 	.word	0x00082035
   82150:	00082075 	.word	0x00082075
   82154:	000820a9 	.word	0x000820a9

00082158 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82158:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8215a:	4770      	bx	lr

0008215c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8215c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8215e:	4770      	bx	lr

00082160 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82160:	b570      	push	{r4, r5, r6, lr}
   82162:	b082      	sub	sp, #8
   82164:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82166:	0944      	lsrs	r4, r0, #5
   82168:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8216c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82170:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82172:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82176:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8217a:	d030      	beq.n	821de <pio_configure_pin+0x7e>
   8217c:	d806      	bhi.n	8218c <pio_configure_pin+0x2c>
   8217e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82182:	d00a      	beq.n	8219a <pio_configure_pin+0x3a>
   82184:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82188:	d018      	beq.n	821bc <pio_configure_pin+0x5c>
   8218a:	e049      	b.n	82220 <pio_configure_pin+0xc0>
   8218c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82190:	d030      	beq.n	821f4 <pio_configure_pin+0x94>
   82192:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82196:	d02d      	beq.n	821f4 <pio_configure_pin+0x94>
   82198:	e042      	b.n	82220 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8219a:	f000 001f 	and.w	r0, r0, #31
   8219e:	2401      	movs	r4, #1
   821a0:	4084      	lsls	r4, r0
   821a2:	4630      	mov	r0, r6
   821a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   821a8:	4622      	mov	r2, r4
   821aa:	4b1f      	ldr	r3, [pc, #124]	; (82228 <pio_configure_pin+0xc8>)
   821ac:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821ae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   821b2:	bf14      	ite	ne
   821b4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821b6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   821b8:	2001      	movs	r0, #1
   821ba:	e032      	b.n	82222 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   821bc:	f000 001f 	and.w	r0, r0, #31
   821c0:	2401      	movs	r4, #1
   821c2:	4084      	lsls	r4, r0
   821c4:	4630      	mov	r0, r6
   821c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   821ca:	4622      	mov	r2, r4
   821cc:	4b16      	ldr	r3, [pc, #88]	; (82228 <pio_configure_pin+0xc8>)
   821ce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821d0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   821d4:	bf14      	ite	ne
   821d6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821d8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   821da:	2001      	movs	r0, #1
   821dc:	e021      	b.n	82222 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   821de:	f000 011f 	and.w	r1, r0, #31
   821e2:	2401      	movs	r4, #1
   821e4:	4630      	mov	r0, r6
   821e6:	fa04 f101 	lsl.w	r1, r4, r1
   821ea:	462a      	mov	r2, r5
   821ec:	4b0f      	ldr	r3, [pc, #60]	; (8222c <pio_configure_pin+0xcc>)
   821ee:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   821f0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   821f2:	e016      	b.n	82222 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   821f4:	f000 011f 	and.w	r1, r0, #31
   821f8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   821fa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   821fe:	ea05 0304 	and.w	r3, r5, r4
   82202:	9300      	str	r3, [sp, #0]
   82204:	4630      	mov	r0, r6
   82206:	fa04 f101 	lsl.w	r1, r4, r1
   8220a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8220e:	bf14      	ite	ne
   82210:	2200      	movne	r2, #0
   82212:	2201      	moveq	r2, #1
   82214:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82218:	4d05      	ldr	r5, [pc, #20]	; (82230 <pio_configure_pin+0xd0>)
   8221a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8221c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8221e:	e000      	b.n	82222 <pio_configure_pin+0xc2>

	default:
		return 0;
   82220:	2000      	movs	r0, #0
	}

	return 1;
}
   82222:	b002      	add	sp, #8
   82224:	bd70      	pop	{r4, r5, r6, pc}
   82226:	bf00      	nop
   82228:	00082035 	.word	0x00082035
   8222c:	00082075 	.word	0x00082075
   82230:	000820a9 	.word	0x000820a9

00082234 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82234:	b5f0      	push	{r4, r5, r6, r7, lr}
   82236:	b083      	sub	sp, #12
   82238:	4607      	mov	r7, r0
   8223a:	460e      	mov	r6, r1
   8223c:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8223e:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   82242:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   82246:	d026      	beq.n	82296 <pio_configure_pin_group+0x62>
   82248:	d806      	bhi.n	82258 <pio_configure_pin_group+0x24>
   8224a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8224e:	d00a      	beq.n	82266 <pio_configure_pin_group+0x32>
   82250:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82254:	d013      	beq.n	8227e <pio_configure_pin_group+0x4a>
   82256:	e034      	b.n	822c2 <pio_configure_pin_group+0x8e>
   82258:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8225c:	d01f      	beq.n	8229e <pio_configure_pin_group+0x6a>
   8225e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82262:	d01c      	beq.n	8229e <pio_configure_pin_group+0x6a>
   82264:	e02d      	b.n	822c2 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82266:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8226a:	4632      	mov	r2, r6
   8226c:	4b16      	ldr	r3, [pc, #88]	; (822c8 <pio_configure_pin_group+0x94>)
   8226e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82270:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82274:	bf14      	ite	ne
   82276:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82278:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8227a:	2001      	movs	r0, #1
   8227c:	e022      	b.n	822c4 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8227e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82282:	4632      	mov	r2, r6
   82284:	4b10      	ldr	r3, [pc, #64]	; (822c8 <pio_configure_pin_group+0x94>)
   82286:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82288:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8228c:	bf14      	ite	ne
   8228e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82290:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82292:	2001      	movs	r0, #1
   82294:	e016      	b.n	822c4 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82296:	4b0d      	ldr	r3, [pc, #52]	; (822cc <pio_configure_pin_group+0x98>)
   82298:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8229a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8229c:	e012      	b.n	822c4 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8229e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   822a2:	f005 0301 	and.w	r3, r5, #1
   822a6:	9300      	str	r3, [sp, #0]
   822a8:	4638      	mov	r0, r7
   822aa:	4631      	mov	r1, r6
   822ac:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   822b0:	bf14      	ite	ne
   822b2:	2200      	movne	r2, #0
   822b4:	2201      	moveq	r2, #1
   822b6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   822ba:	4c05      	ldr	r4, [pc, #20]	; (822d0 <pio_configure_pin_group+0x9c>)
   822bc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   822be:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   822c0:	e000      	b.n	822c4 <pio_configure_pin_group+0x90>

	default:
		return 0;
   822c2:	2000      	movs	r0, #0
	}

	return 1;
}
   822c4:	b003      	add	sp, #12
   822c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   822c8:	00082035 	.word	0x00082035
   822cc:	00082075 	.word	0x00082075
   822d0:	000820a9 	.word	0x000820a9

000822d4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   822d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822d8:	4604      	mov	r4, r0
   822da:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   822dc:	4b10      	ldr	r3, [pc, #64]	; (82320 <pio_handler_process+0x4c>)
   822de:	4798      	blx	r3
   822e0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   822e2:	4620      	mov	r0, r4
   822e4:	4b0f      	ldr	r3, [pc, #60]	; (82324 <pio_handler_process+0x50>)
   822e6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   822e8:	4005      	ands	r5, r0
   822ea:	d017      	beq.n	8231c <pio_handler_process+0x48>
   822ec:	4f0e      	ldr	r7, [pc, #56]	; (82328 <pio_handler_process+0x54>)
   822ee:	f107 040c 	add.w	r4, r7, #12
   822f2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   822f4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   822f8:	42b3      	cmp	r3, r6
   822fa:	d10a      	bne.n	82312 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   822fc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82300:	4229      	tst	r1, r5
   82302:	d006      	beq.n	82312 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82304:	6823      	ldr	r3, [r4, #0]
   82306:	4630      	mov	r0, r6
   82308:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8230a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8230e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82312:	42bc      	cmp	r4, r7
   82314:	d002      	beq.n	8231c <pio_handler_process+0x48>
   82316:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82318:	2d00      	cmp	r5, #0
   8231a:	d1eb      	bne.n	822f4 <pio_handler_process+0x20>
   8231c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82320:	00082159 	.word	0x00082159
   82324:	0008215d 	.word	0x0008215d
   82328:	2007aae4 	.word	0x2007aae4

0008232c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8232c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8232e:	4802      	ldr	r0, [pc, #8]	; (82338 <PIOA_Handler+0xc>)
   82330:	210b      	movs	r1, #11
   82332:	4b02      	ldr	r3, [pc, #8]	; (8233c <PIOA_Handler+0x10>)
   82334:	4798      	blx	r3
   82336:	bd08      	pop	{r3, pc}
   82338:	400e0e00 	.word	0x400e0e00
   8233c:	000822d5 	.word	0x000822d5

00082340 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82340:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82342:	4802      	ldr	r0, [pc, #8]	; (8234c <PIOB_Handler+0xc>)
   82344:	210c      	movs	r1, #12
   82346:	4b02      	ldr	r3, [pc, #8]	; (82350 <PIOB_Handler+0x10>)
   82348:	4798      	blx	r3
   8234a:	bd08      	pop	{r3, pc}
   8234c:	400e1000 	.word	0x400e1000
   82350:	000822d5 	.word	0x000822d5

00082354 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82354:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82356:	4802      	ldr	r0, [pc, #8]	; (82360 <PIOC_Handler+0xc>)
   82358:	210d      	movs	r1, #13
   8235a:	4b02      	ldr	r3, [pc, #8]	; (82364 <PIOC_Handler+0x10>)
   8235c:	4798      	blx	r3
   8235e:	bd08      	pop	{r3, pc}
   82360:	400e1200 	.word	0x400e1200
   82364:	000822d5 	.word	0x000822d5

00082368 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82368:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8236a:	4802      	ldr	r0, [pc, #8]	; (82374 <PIOD_Handler+0xc>)
   8236c:	210e      	movs	r1, #14
   8236e:	4b02      	ldr	r3, [pc, #8]	; (82378 <PIOD_Handler+0x10>)
   82370:	4798      	blx	r3
   82372:	bd08      	pop	{r3, pc}
   82374:	400e1400 	.word	0x400e1400
   82378:	000822d5 	.word	0x000822d5

0008237c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8237c:	4b17      	ldr	r3, [pc, #92]	; (823dc <pmc_switch_mck_to_pllack+0x60>)
   8237e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82380:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82384:	4310      	orrs	r0, r2
   82386:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8238a:	f013 0f08 	tst.w	r3, #8
   8238e:	d109      	bne.n	823a4 <pmc_switch_mck_to_pllack+0x28>
   82390:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82394:	4911      	ldr	r1, [pc, #68]	; (823dc <pmc_switch_mck_to_pllack+0x60>)
   82396:	e001      	b.n	8239c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82398:	3b01      	subs	r3, #1
   8239a:	d019      	beq.n	823d0 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8239c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8239e:	f012 0f08 	tst.w	r2, #8
   823a2:	d0f9      	beq.n	82398 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   823a4:	4b0d      	ldr	r3, [pc, #52]	; (823dc <pmc_switch_mck_to_pllack+0x60>)
   823a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   823a8:	f022 0203 	bic.w	r2, r2, #3
   823ac:	f042 0202 	orr.w	r2, r2, #2
   823b0:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   823b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
   823b4:	f010 0008 	ands.w	r0, r0, #8
   823b8:	d10c      	bne.n	823d4 <pmc_switch_mck_to_pllack+0x58>
   823ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   823be:	4907      	ldr	r1, [pc, #28]	; (823dc <pmc_switch_mck_to_pllack+0x60>)
   823c0:	e001      	b.n	823c6 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   823c2:	3b01      	subs	r3, #1
   823c4:	d008      	beq.n	823d8 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   823c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   823c8:	f012 0f08 	tst.w	r2, #8
   823cc:	d0f9      	beq.n	823c2 <pmc_switch_mck_to_pllack+0x46>
   823ce:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   823d0:	2001      	movs	r0, #1
   823d2:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   823d4:	2000      	movs	r0, #0
   823d6:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   823d8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   823da:	4770      	bx	lr
   823dc:	400e0600 	.word	0x400e0600

000823e0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   823e0:	b138      	cbz	r0, 823f2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823e2:	4911      	ldr	r1, [pc, #68]	; (82428 <pmc_switch_mainck_to_xtal+0x48>)
   823e4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   823e6:	4a11      	ldr	r2, [pc, #68]	; (8242c <pmc_switch_mainck_to_xtal+0x4c>)
   823e8:	401a      	ands	r2, r3
   823ea:	4b11      	ldr	r3, [pc, #68]	; (82430 <pmc_switch_mainck_to_xtal+0x50>)
   823ec:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823ee:	620b      	str	r3, [r1, #32]
   823f0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   823f2:	4a0d      	ldr	r2, [pc, #52]	; (82428 <pmc_switch_mainck_to_xtal+0x48>)
   823f4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   823f6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   823fa:	f023 0303 	bic.w	r3, r3, #3
   823fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82402:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82406:	0209      	lsls	r1, r1, #8
   82408:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8240a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8240c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8240e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82410:	f013 0f01 	tst.w	r3, #1
   82414:	d0fb      	beq.n	8240e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82416:	4a04      	ldr	r2, [pc, #16]	; (82428 <pmc_switch_mainck_to_xtal+0x48>)
   82418:	6a13      	ldr	r3, [r2, #32]
   8241a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8241e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82422:	6213      	str	r3, [r2, #32]
   82424:	4770      	bx	lr
   82426:	bf00      	nop
   82428:	400e0600 	.word	0x400e0600
   8242c:	fec8fffc 	.word	0xfec8fffc
   82430:	01370002 	.word	0x01370002

00082434 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82434:	4b02      	ldr	r3, [pc, #8]	; (82440 <pmc_osc_is_ready_mainck+0xc>)
   82436:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82438:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8243c:	4770      	bx	lr
   8243e:	bf00      	nop
   82440:	400e0600 	.word	0x400e0600

00082444 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82444:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82448:	4b01      	ldr	r3, [pc, #4]	; (82450 <pmc_disable_pllack+0xc>)
   8244a:	629a      	str	r2, [r3, #40]	; 0x28
   8244c:	4770      	bx	lr
   8244e:	bf00      	nop
   82450:	400e0600 	.word	0x400e0600

00082454 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82454:	4b02      	ldr	r3, [pc, #8]	; (82460 <pmc_is_locked_pllack+0xc>)
   82456:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82458:	f000 0002 	and.w	r0, r0, #2
   8245c:	4770      	bx	lr
   8245e:	bf00      	nop
   82460:	400e0600 	.word	0x400e0600

00082464 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82464:	282c      	cmp	r0, #44	; 0x2c
   82466:	d820      	bhi.n	824aa <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   82468:	281f      	cmp	r0, #31
   8246a:	d80d      	bhi.n	82488 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8246c:	4b12      	ldr	r3, [pc, #72]	; (824b8 <pmc_enable_periph_clk+0x54>)
   8246e:	699a      	ldr	r2, [r3, #24]
   82470:	2301      	movs	r3, #1
   82472:	4083      	lsls	r3, r0
   82474:	401a      	ands	r2, r3
   82476:	4293      	cmp	r3, r2
   82478:	d019      	beq.n	824ae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8247a:	2301      	movs	r3, #1
   8247c:	fa03 f000 	lsl.w	r0, r3, r0
   82480:	4b0d      	ldr	r3, [pc, #52]	; (824b8 <pmc_enable_periph_clk+0x54>)
   82482:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82484:	2000      	movs	r0, #0
   82486:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82488:	4b0b      	ldr	r3, [pc, #44]	; (824b8 <pmc_enable_periph_clk+0x54>)
   8248a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
   8248e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82490:	2301      	movs	r3, #1
   82492:	4083      	lsls	r3, r0
   82494:	401a      	ands	r2, r3
   82496:	4293      	cmp	r3, r2
   82498:	d00b      	beq.n	824b2 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8249a:	2301      	movs	r3, #1
   8249c:	fa03 f000 	lsl.w	r0, r3, r0
   824a0:	4b05      	ldr	r3, [pc, #20]	; (824b8 <pmc_enable_periph_clk+0x54>)
   824a2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   824a6:	2000      	movs	r0, #0
   824a8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   824aa:	2001      	movs	r0, #1
   824ac:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   824ae:	2000      	movs	r0, #0
   824b0:	4770      	bx	lr
   824b2:	2000      	movs	r0, #0
}
   824b4:	4770      	bx	lr
   824b6:	bf00      	nop
   824b8:	400e0600 	.word	0x400e0600

000824bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   824bc:	e7fe      	b.n	824bc <Dummy_Handler>
   824be:	bf00      	nop

000824c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   824c0:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   824c2:	4b1e      	ldr	r3, [pc, #120]	; (8253c <Reset_Handler+0x7c>)
   824c4:	4a1e      	ldr	r2, [pc, #120]	; (82540 <Reset_Handler+0x80>)
   824c6:	429a      	cmp	r2, r3
   824c8:	d003      	beq.n	824d2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   824ca:	4b1e      	ldr	r3, [pc, #120]	; (82544 <Reset_Handler+0x84>)
   824cc:	4a1b      	ldr	r2, [pc, #108]	; (8253c <Reset_Handler+0x7c>)
   824ce:	429a      	cmp	r2, r3
   824d0:	d304      	bcc.n	824dc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   824d2:	4b1d      	ldr	r3, [pc, #116]	; (82548 <Reset_Handler+0x88>)
   824d4:	4a1d      	ldr	r2, [pc, #116]	; (8254c <Reset_Handler+0x8c>)
   824d6:	429a      	cmp	r2, r3
   824d8:	d30f      	bcc.n	824fa <Reset_Handler+0x3a>
   824da:	e01a      	b.n	82512 <Reset_Handler+0x52>
   824dc:	4b1c      	ldr	r3, [pc, #112]	; (82550 <Reset_Handler+0x90>)
   824de:	4c1d      	ldr	r4, [pc, #116]	; (82554 <Reset_Handler+0x94>)
   824e0:	1ae4      	subs	r4, r4, r3
   824e2:	f024 0403 	bic.w	r4, r4, #3
   824e6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   824e8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   824ea:	4814      	ldr	r0, [pc, #80]	; (8253c <Reset_Handler+0x7c>)
   824ec:	4914      	ldr	r1, [pc, #80]	; (82540 <Reset_Handler+0x80>)
   824ee:	585a      	ldr	r2, [r3, r1]
   824f0:	501a      	str	r2, [r3, r0]
   824f2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   824f4:	42a3      	cmp	r3, r4
   824f6:	d1fa      	bne.n	824ee <Reset_Handler+0x2e>
   824f8:	e7eb      	b.n	824d2 <Reset_Handler+0x12>
   824fa:	4b17      	ldr	r3, [pc, #92]	; (82558 <Reset_Handler+0x98>)
   824fc:	4917      	ldr	r1, [pc, #92]	; (8255c <Reset_Handler+0x9c>)
   824fe:	1ac9      	subs	r1, r1, r3
   82500:	f021 0103 	bic.w	r1, r1, #3
   82504:	1d1a      	adds	r2, r3, #4
   82506:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82508:	2200      	movs	r2, #0
   8250a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8250e:	428b      	cmp	r3, r1
   82510:	d1fb      	bne.n	8250a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82512:	4a13      	ldr	r2, [pc, #76]	; (82560 <Reset_Handler+0xa0>)
   82514:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   82518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8251c:	4911      	ldr	r1, [pc, #68]	; (82564 <Reset_Handler+0xa4>)
   8251e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82520:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82524:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   82528:	d203      	bcs.n	82532 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8252a:	688a      	ldr	r2, [r1, #8]
   8252c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82530:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82532:	4b0d      	ldr	r3, [pc, #52]	; (82568 <Reset_Handler+0xa8>)
   82534:	4798      	blx	r3

	/* Branch to main function */
	main();
   82536:	4b0d      	ldr	r3, [pc, #52]	; (8256c <Reset_Handler+0xac>)
   82538:	4798      	blx	r3
   8253a:	e7fe      	b.n	8253a <Reset_Handler+0x7a>
   8253c:	20070000 	.word	0x20070000
   82540:	00086300 	.word	0x00086300
   82544:	20070874 	.word	0x20070874
   82548:	2007abc4 	.word	0x2007abc4
   8254c:	20070878 	.word	0x20070878
   82550:	20070004 	.word	0x20070004
   82554:	20070877 	.word	0x20070877
   82558:	20070874 	.word	0x20070874
   8255c:	2007abbf 	.word	0x2007abbf
   82560:	00080000 	.word	0x00080000
   82564:	e000ed00 	.word	0xe000ed00
   82568:	000831c5 	.word	0x000831c5
   8256c:	000828b5 	.word	0x000828b5

00082570 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82570:	4b3e      	ldr	r3, [pc, #248]	; (8266c <SystemCoreClockUpdate+0xfc>)
   82572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82574:	f003 0303 	and.w	r3, r3, #3
   82578:	2b03      	cmp	r3, #3
   8257a:	d85f      	bhi.n	8263c <SystemCoreClockUpdate+0xcc>
   8257c:	e8df f003 	tbb	[pc, r3]
   82580:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82584:	4b3a      	ldr	r3, [pc, #232]	; (82670 <SystemCoreClockUpdate+0x100>)
   82586:	695b      	ldr	r3, [r3, #20]
   82588:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8258c:	bf14      	ite	ne
   8258e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82592:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82596:	4b37      	ldr	r3, [pc, #220]	; (82674 <SystemCoreClockUpdate+0x104>)
   82598:	601a      	str	r2, [r3, #0]
   8259a:	e04f      	b.n	8263c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8259c:	4b33      	ldr	r3, [pc, #204]	; (8266c <SystemCoreClockUpdate+0xfc>)
   8259e:	6a1b      	ldr	r3, [r3, #32]
   825a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   825a4:	d003      	beq.n	825ae <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   825a6:	4a34      	ldr	r2, [pc, #208]	; (82678 <SystemCoreClockUpdate+0x108>)
   825a8:	4b32      	ldr	r3, [pc, #200]	; (82674 <SystemCoreClockUpdate+0x104>)
   825aa:	601a      	str	r2, [r3, #0]
   825ac:	e046      	b.n	8263c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   825ae:	4a33      	ldr	r2, [pc, #204]	; (8267c <SystemCoreClockUpdate+0x10c>)
   825b0:	4b30      	ldr	r3, [pc, #192]	; (82674 <SystemCoreClockUpdate+0x104>)
   825b2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   825b4:	4b2d      	ldr	r3, [pc, #180]	; (8266c <SystemCoreClockUpdate+0xfc>)
   825b6:	6a1b      	ldr	r3, [r3, #32]
   825b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   825bc:	2b10      	cmp	r3, #16
   825be:	d002      	beq.n	825c6 <SystemCoreClockUpdate+0x56>
   825c0:	2b20      	cmp	r3, #32
   825c2:	d004      	beq.n	825ce <SystemCoreClockUpdate+0x5e>
   825c4:	e03a      	b.n	8263c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   825c6:	4a2e      	ldr	r2, [pc, #184]	; (82680 <SystemCoreClockUpdate+0x110>)
   825c8:	4b2a      	ldr	r3, [pc, #168]	; (82674 <SystemCoreClockUpdate+0x104>)
   825ca:	601a      	str	r2, [r3, #0]
				break;
   825cc:	e036      	b.n	8263c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   825ce:	4a2a      	ldr	r2, [pc, #168]	; (82678 <SystemCoreClockUpdate+0x108>)
   825d0:	4b28      	ldr	r3, [pc, #160]	; (82674 <SystemCoreClockUpdate+0x104>)
   825d2:	601a      	str	r2, [r3, #0]
				break;
   825d4:	e032      	b.n	8263c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   825d6:	4b25      	ldr	r3, [pc, #148]	; (8266c <SystemCoreClockUpdate+0xfc>)
   825d8:	6a1b      	ldr	r3, [r3, #32]
   825da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   825de:	d003      	beq.n	825e8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   825e0:	4a25      	ldr	r2, [pc, #148]	; (82678 <SystemCoreClockUpdate+0x108>)
   825e2:	4b24      	ldr	r3, [pc, #144]	; (82674 <SystemCoreClockUpdate+0x104>)
   825e4:	601a      	str	r2, [r3, #0]
   825e6:	e012      	b.n	8260e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   825e8:	4a24      	ldr	r2, [pc, #144]	; (8267c <SystemCoreClockUpdate+0x10c>)
   825ea:	4b22      	ldr	r3, [pc, #136]	; (82674 <SystemCoreClockUpdate+0x104>)
   825ec:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   825ee:	4b1f      	ldr	r3, [pc, #124]	; (8266c <SystemCoreClockUpdate+0xfc>)
   825f0:	6a1b      	ldr	r3, [r3, #32]
   825f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   825f6:	2b10      	cmp	r3, #16
   825f8:	d002      	beq.n	82600 <SystemCoreClockUpdate+0x90>
   825fa:	2b20      	cmp	r3, #32
   825fc:	d004      	beq.n	82608 <SystemCoreClockUpdate+0x98>
   825fe:	e006      	b.n	8260e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82600:	4a1f      	ldr	r2, [pc, #124]	; (82680 <SystemCoreClockUpdate+0x110>)
   82602:	4b1c      	ldr	r3, [pc, #112]	; (82674 <SystemCoreClockUpdate+0x104>)
   82604:	601a      	str	r2, [r3, #0]
				break;
   82606:	e002      	b.n	8260e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82608:	4a1b      	ldr	r2, [pc, #108]	; (82678 <SystemCoreClockUpdate+0x108>)
   8260a:	4b1a      	ldr	r3, [pc, #104]	; (82674 <SystemCoreClockUpdate+0x104>)
   8260c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8260e:	4b17      	ldr	r3, [pc, #92]	; (8266c <SystemCoreClockUpdate+0xfc>)
   82610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82612:	f003 0303 	and.w	r3, r3, #3
   82616:	2b02      	cmp	r3, #2
   82618:	d10d      	bne.n	82636 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8261a:	4b14      	ldr	r3, [pc, #80]	; (8266c <SystemCoreClockUpdate+0xfc>)
   8261c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8261e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82620:	4b14      	ldr	r3, [pc, #80]	; (82674 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82622:	f3c0 400a 	ubfx	r0, r0, #16, #11
   82626:	681a      	ldr	r2, [r3, #0]
   82628:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8262c:	b2c9      	uxtb	r1, r1
   8262e:	fbb2 f2f1 	udiv	r2, r2, r1
   82632:	601a      	str	r2, [r3, #0]
   82634:	e002      	b.n	8263c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82636:	4a13      	ldr	r2, [pc, #76]	; (82684 <SystemCoreClockUpdate+0x114>)
   82638:	4b0e      	ldr	r3, [pc, #56]	; (82674 <SystemCoreClockUpdate+0x104>)
   8263a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8263c:	4b0b      	ldr	r3, [pc, #44]	; (8266c <SystemCoreClockUpdate+0xfc>)
   8263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82640:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82644:	2b70      	cmp	r3, #112	; 0x70
   82646:	d107      	bne.n	82658 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82648:	4b0a      	ldr	r3, [pc, #40]	; (82674 <SystemCoreClockUpdate+0x104>)
   8264a:	681a      	ldr	r2, [r3, #0]
   8264c:	490e      	ldr	r1, [pc, #56]	; (82688 <SystemCoreClockUpdate+0x118>)
   8264e:	fba1 0202 	umull	r0, r2, r1, r2
   82652:	0852      	lsrs	r2, r2, #1
   82654:	601a      	str	r2, [r3, #0]
   82656:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82658:	4b04      	ldr	r3, [pc, #16]	; (8266c <SystemCoreClockUpdate+0xfc>)
   8265a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   8265c:	4b05      	ldr	r3, [pc, #20]	; (82674 <SystemCoreClockUpdate+0x104>)
   8265e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   82662:	681a      	ldr	r2, [r3, #0]
   82664:	40ca      	lsrs	r2, r1
   82666:	601a      	str	r2, [r3, #0]
   82668:	4770      	bx	lr
   8266a:	bf00      	nop
   8266c:	400e0600 	.word	0x400e0600
   82670:	400e1a10 	.word	0x400e1a10
   82674:	2007000c 	.word	0x2007000c
   82678:	00b71b00 	.word	0x00b71b00
   8267c:	003d0900 	.word	0x003d0900
   82680:	007a1200 	.word	0x007a1200
   82684:	0e4e1c00 	.word	0x0e4e1c00
   82688:	aaaaaaab 	.word	0xaaaaaaab

0008268c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   8268c:	4b1b      	ldr	r3, [pc, #108]	; (826fc <system_init_flash+0x70>)
   8268e:	4298      	cmp	r0, r3
   82690:	d806      	bhi.n	826a0 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82692:	2300      	movs	r3, #0
   82694:	4a1a      	ldr	r2, [pc, #104]	; (82700 <system_init_flash+0x74>)
   82696:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82698:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8269c:	6013      	str	r3, [r2, #0]
   8269e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   826a0:	4b18      	ldr	r3, [pc, #96]	; (82704 <system_init_flash+0x78>)
   826a2:	4298      	cmp	r0, r3
   826a4:	d807      	bhi.n	826b6 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   826a6:	f44f 7380 	mov.w	r3, #256	; 0x100
   826aa:	4a15      	ldr	r2, [pc, #84]	; (82700 <system_init_flash+0x74>)
   826ac:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   826ae:	f502 7200 	add.w	r2, r2, #512	; 0x200
   826b2:	6013      	str	r3, [r2, #0]
   826b4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   826b6:	4b14      	ldr	r3, [pc, #80]	; (82708 <system_init_flash+0x7c>)
   826b8:	4298      	cmp	r0, r3
   826ba:	d807      	bhi.n	826cc <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   826bc:	f44f 7300 	mov.w	r3, #512	; 0x200
   826c0:	4a0f      	ldr	r2, [pc, #60]	; (82700 <system_init_flash+0x74>)
   826c2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   826c4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   826c8:	6013      	str	r3, [r2, #0]
   826ca:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   826cc:	4b0f      	ldr	r3, [pc, #60]	; (8270c <system_init_flash+0x80>)
   826ce:	4298      	cmp	r0, r3
   826d0:	d807      	bhi.n	826e2 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   826d2:	f44f 7340 	mov.w	r3, #768	; 0x300
   826d6:	4a0a      	ldr	r2, [pc, #40]	; (82700 <system_init_flash+0x74>)
   826d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   826da:	f502 7200 	add.w	r2, r2, #512	; 0x200
   826de:	6013      	str	r3, [r2, #0]
   826e0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   826e2:	4b0b      	ldr	r3, [pc, #44]	; (82710 <system_init_flash+0x84>)
   826e4:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   826e6:	bf94      	ite	ls
   826e8:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   826ec:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
   826f0:	4a03      	ldr	r2, [pc, #12]	; (82700 <system_init_flash+0x74>)
   826f2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   826f4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   826f8:	6013      	str	r3, [r2, #0]
   826fa:	4770      	bx	lr
   826fc:	0121eabf 	.word	0x0121eabf
   82700:	400e0a00 	.word	0x400e0a00
   82704:	02faf07f 	.word	0x02faf07f
   82708:	03d08fff 	.word	0x03d08fff
   8270c:	04c4b3ff 	.word	0x04c4b3ff
   82710:	055d4a7f 	.word	0x055d4a7f

00082714 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82714:	4b09      	ldr	r3, [pc, #36]	; (8273c <_sbrk+0x28>)
   82716:	681b      	ldr	r3, [r3, #0]
   82718:	b913      	cbnz	r3, 82720 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8271a:	4a09      	ldr	r2, [pc, #36]	; (82740 <_sbrk+0x2c>)
   8271c:	4b07      	ldr	r3, [pc, #28]	; (8273c <_sbrk+0x28>)
   8271e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82720:	4b06      	ldr	r3, [pc, #24]	; (8273c <_sbrk+0x28>)
   82722:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82724:	181a      	adds	r2, r3, r0
   82726:	4907      	ldr	r1, [pc, #28]	; (82744 <_sbrk+0x30>)
   82728:	4291      	cmp	r1, r2
   8272a:	db04      	blt.n	82736 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   8272c:	4610      	mov	r0, r2
   8272e:	4a03      	ldr	r2, [pc, #12]	; (8273c <_sbrk+0x28>)
   82730:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82732:	4618      	mov	r0, r3
   82734:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82736:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   8273a:	4770      	bx	lr
   8273c:	2007ab54 	.word	0x2007ab54
   82740:	2007cbc8 	.word	0x2007cbc8
   82744:	20087ffc 	.word	0x20087ffc

00082748 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82748:	f04f 30ff 	mov.w	r0, #4294967295
   8274c:	4770      	bx	lr
   8274e:	bf00      	nop

00082750 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82754:	604b      	str	r3, [r1, #4]

	return 0;
}
   82756:	2000      	movs	r0, #0
   82758:	4770      	bx	lr
   8275a:	bf00      	nop

0008275c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8275c:	2001      	movs	r0, #1
   8275e:	4770      	bx	lr

00082760 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82760:	2000      	movs	r0, #0
   82762:	4770      	bx	lr

00082764 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82764:	b5f0      	push	{r4, r5, r6, r7, lr}
   82766:	b083      	sub	sp, #12
   82768:	4604      	mov	r4, r0
   8276a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8276c:	2300      	movs	r3, #0
   8276e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82770:	4b1f      	ldr	r3, [pc, #124]	; (827f0 <usart_serial_getchar+0x8c>)
   82772:	4298      	cmp	r0, r3
   82774:	d107      	bne.n	82786 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   82776:	461f      	mov	r7, r3
   82778:	4e1e      	ldr	r6, [pc, #120]	; (827f4 <usart_serial_getchar+0x90>)
   8277a:	4638      	mov	r0, r7
   8277c:	4629      	mov	r1, r5
   8277e:	47b0      	blx	r6
   82780:	2800      	cmp	r0, #0
   82782:	d1fa      	bne.n	8277a <usart_serial_getchar+0x16>
   82784:	e019      	b.n	827ba <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82786:	4b1c      	ldr	r3, [pc, #112]	; (827f8 <usart_serial_getchar+0x94>)
   82788:	4298      	cmp	r0, r3
   8278a:	d109      	bne.n	827a0 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   8278c:	461f      	mov	r7, r3
   8278e:	4e1b      	ldr	r6, [pc, #108]	; (827fc <usart_serial_getchar+0x98>)
   82790:	4638      	mov	r0, r7
   82792:	a901      	add	r1, sp, #4
   82794:	47b0      	blx	r6
   82796:	2800      	cmp	r0, #0
   82798:	d1fa      	bne.n	82790 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8279a:	9b01      	ldr	r3, [sp, #4]
   8279c:	702b      	strb	r3, [r5, #0]
   8279e:	e019      	b.n	827d4 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   827a0:	4b17      	ldr	r3, [pc, #92]	; (82800 <usart_serial_getchar+0x9c>)
   827a2:	4298      	cmp	r0, r3
   827a4:	d109      	bne.n	827ba <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   827a6:	461e      	mov	r6, r3
   827a8:	4c14      	ldr	r4, [pc, #80]	; (827fc <usart_serial_getchar+0x98>)
   827aa:	4630      	mov	r0, r6
   827ac:	a901      	add	r1, sp, #4
   827ae:	47a0      	blx	r4
   827b0:	2800      	cmp	r0, #0
   827b2:	d1fa      	bne.n	827aa <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   827b4:	9b01      	ldr	r3, [sp, #4]
   827b6:	702b      	strb	r3, [r5, #0]
   827b8:	e018      	b.n	827ec <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   827ba:	4b12      	ldr	r3, [pc, #72]	; (82804 <usart_serial_getchar+0xa0>)
   827bc:	429c      	cmp	r4, r3
   827be:	d109      	bne.n	827d4 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   827c0:	461e      	mov	r6, r3
   827c2:	4c0e      	ldr	r4, [pc, #56]	; (827fc <usart_serial_getchar+0x98>)
   827c4:	4630      	mov	r0, r6
   827c6:	a901      	add	r1, sp, #4
   827c8:	47a0      	blx	r4
   827ca:	2800      	cmp	r0, #0
   827cc:	d1fa      	bne.n	827c4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   827ce:	9b01      	ldr	r3, [sp, #4]
   827d0:	702b      	strb	r3, [r5, #0]
   827d2:	e00b      	b.n	827ec <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   827d4:	4b0c      	ldr	r3, [pc, #48]	; (82808 <usart_serial_getchar+0xa4>)
   827d6:	429c      	cmp	r4, r3
   827d8:	d108      	bne.n	827ec <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   827da:	461e      	mov	r6, r3
   827dc:	4c07      	ldr	r4, [pc, #28]	; (827fc <usart_serial_getchar+0x98>)
   827de:	4630      	mov	r0, r6
   827e0:	a901      	add	r1, sp, #4
   827e2:	47a0      	blx	r4
   827e4:	2800      	cmp	r0, #0
   827e6:	d1fa      	bne.n	827de <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   827e8:	9b01      	ldr	r3, [sp, #4]
   827ea:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   827ec:	b003      	add	sp, #12
   827ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   827f0:	400e0800 	.word	0x400e0800
   827f4:	00081f21 	.word	0x00081f21
   827f8:	40098000 	.word	0x40098000
   827fc:	00081f49 	.word	0x00081f49
   82800:	4009c000 	.word	0x4009c000
   82804:	400a0000 	.word	0x400a0000
   82808:	400a4000 	.word	0x400a4000

0008280c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8280c:	b570      	push	{r4, r5, r6, lr}
   8280e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   82810:	4b21      	ldr	r3, [pc, #132]	; (82898 <usart_serial_putchar+0x8c>)
   82812:	4298      	cmp	r0, r3
   82814:	d107      	bne.n	82826 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   82816:	461e      	mov	r6, r3
   82818:	4d20      	ldr	r5, [pc, #128]	; (8289c <usart_serial_putchar+0x90>)
   8281a:	4630      	mov	r0, r6
   8281c:	4621      	mov	r1, r4
   8281e:	47a8      	blx	r5
   82820:	2800      	cmp	r0, #0
   82822:	d1fa      	bne.n	8281a <usart_serial_putchar+0xe>
   82824:	e02b      	b.n	8287e <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82826:	4b1e      	ldr	r3, [pc, #120]	; (828a0 <usart_serial_putchar+0x94>)
   82828:	4298      	cmp	r0, r3
   8282a:	d107      	bne.n	8283c <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   8282c:	461e      	mov	r6, r3
   8282e:	4d1d      	ldr	r5, [pc, #116]	; (828a4 <usart_serial_putchar+0x98>)
   82830:	4630      	mov	r0, r6
   82832:	4621      	mov	r1, r4
   82834:	47a8      	blx	r5
   82836:	2800      	cmp	r0, #0
   82838:	d1fa      	bne.n	82830 <usart_serial_putchar+0x24>
   8283a:	e022      	b.n	82882 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8283c:	4b1a      	ldr	r3, [pc, #104]	; (828a8 <usart_serial_putchar+0x9c>)
   8283e:	4298      	cmp	r0, r3
   82840:	d107      	bne.n	82852 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   82842:	461e      	mov	r6, r3
   82844:	4d17      	ldr	r5, [pc, #92]	; (828a4 <usart_serial_putchar+0x98>)
   82846:	4630      	mov	r0, r6
   82848:	4621      	mov	r1, r4
   8284a:	47a8      	blx	r5
   8284c:	2800      	cmp	r0, #0
   8284e:	d1fa      	bne.n	82846 <usart_serial_putchar+0x3a>
   82850:	e019      	b.n	82886 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82852:	4b16      	ldr	r3, [pc, #88]	; (828ac <usart_serial_putchar+0xa0>)
   82854:	4298      	cmp	r0, r3
   82856:	d107      	bne.n	82868 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82858:	461e      	mov	r6, r3
   8285a:	4d12      	ldr	r5, [pc, #72]	; (828a4 <usart_serial_putchar+0x98>)
   8285c:	4630      	mov	r0, r6
   8285e:	4621      	mov	r1, r4
   82860:	47a8      	blx	r5
   82862:	2800      	cmp	r0, #0
   82864:	d1fa      	bne.n	8285c <usart_serial_putchar+0x50>
   82866:	e010      	b.n	8288a <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82868:	4b11      	ldr	r3, [pc, #68]	; (828b0 <usart_serial_putchar+0xa4>)
   8286a:	4298      	cmp	r0, r3
   8286c:	d10f      	bne.n	8288e <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8286e:	461e      	mov	r6, r3
   82870:	4d0c      	ldr	r5, [pc, #48]	; (828a4 <usart_serial_putchar+0x98>)
   82872:	4630      	mov	r0, r6
   82874:	4621      	mov	r1, r4
   82876:	47a8      	blx	r5
   82878:	2800      	cmp	r0, #0
   8287a:	d1fa      	bne.n	82872 <usart_serial_putchar+0x66>
   8287c:	e009      	b.n	82892 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8287e:	2001      	movs	r0, #1
   82880:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82882:	2001      	movs	r0, #1
   82884:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82886:	2001      	movs	r0, #1
   82888:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8288a:	2001      	movs	r0, #1
   8288c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8288e:	2000      	movs	r0, #0
   82890:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82892:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82894:	bd70      	pop	{r4, r5, r6, pc}
   82896:	bf00      	nop
   82898:	400e0800 	.word	0x400e0800
   8289c:	00081f11 	.word	0x00081f11
   828a0:	40098000 	.word	0x40098000
   828a4:	00081f35 	.word	0x00081f35
   828a8:	4009c000 	.word	0x4009c000
   828ac:	400a0000 	.word	0x400a0000
   828b0:	400a4000 	.word	0x400a4000

000828b4 <main>:

/************************************************************************/
/* Initiation of the program. */
/************************************************************************/
int main (void)
{
   828b4:	b530      	push	{r4, r5, lr}
   828b6:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
   828b8:	4b30      	ldr	r3, [pc, #192]	; (8297c <main+0xc8>)
   828ba:	4798      	blx	r3
	board_init();
   828bc:	4b30      	ldr	r3, [pc, #192]	; (82980 <main+0xcc>)
   828be:	4798      	blx	r3
   828c0:	200b      	movs	r0, #11
   828c2:	4c30      	ldr	r4, [pc, #192]	; (82984 <main+0xd0>)
   828c4:	47a0      	blx	r4
   828c6:	200c      	movs	r0, #12
   828c8:	47a0      	blx	r4
   828ca:	200d      	movs	r0, #13
   828cc:	47a0      	blx	r4
   828ce:	200e      	movs	r0, #14
   828d0:	47a0      	blx	r4
	ioport_init();
	InitADC();
   828d2:	4b2d      	ldr	r3, [pc, #180]	; (82988 <main+0xd4>)
   828d4:	4798      	blx	r3
   828d6:	2008      	movs	r0, #8
   828d8:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   828da:	4d2c      	ldr	r5, [pc, #176]	; (8298c <main+0xd8>)
   828dc:	4b2c      	ldr	r3, [pc, #176]	; (82990 <main+0xdc>)
   828de:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   828e0:	4a2c      	ldr	r2, [pc, #176]	; (82994 <main+0xe0>)
   828e2:	4b2d      	ldr	r3, [pc, #180]	; (82998 <main+0xe4>)
   828e4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   828e6:	4a2d      	ldr	r2, [pc, #180]	; (8299c <main+0xe8>)
   828e8:	4b2d      	ldr	r3, [pc, #180]	; (829a0 <main+0xec>)
   828ea:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   828ec:	4b2d      	ldr	r3, [pc, #180]	; (829a4 <main+0xf0>)
   828ee:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   828f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   828f4:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   828f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   828fa:	9307      	str	r3, [sp, #28]
   828fc:	2008      	movs	r0, #8
   828fe:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82900:	4628      	mov	r0, r5
   82902:	a905      	add	r1, sp, #20
   82904:	4b28      	ldr	r3, [pc, #160]	; (829a8 <main+0xf4>)
   82906:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82908:	4d28      	ldr	r5, [pc, #160]	; (829ac <main+0xf8>)
   8290a:	682b      	ldr	r3, [r5, #0]
   8290c:	6898      	ldr	r0, [r3, #8]
   8290e:	2100      	movs	r1, #0
   82910:	4c27      	ldr	r4, [pc, #156]	; (829b0 <main+0xfc>)
   82912:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82914:	682b      	ldr	r3, [r5, #0]
   82916:	6858      	ldr	r0, [r3, #4]
   82918:	2100      	movs	r1, #0
   8291a:	47a0      	blx	r4
	/* Konfigurera konsol UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	/* Specifiera att stdout inte ska buffras */
	#if defined(__GNUC__)
	setbuf(stdout, NULL);
   8291c:	682b      	ldr	r3, [r5, #0]
   8291e:	6898      	ldr	r0, [r3, #8]
   82920:	2100      	movs	r1, #0
   82922:	47a0      	blx	r4
	sysclk_init();
	board_init();
	ioport_init();
	InitADC();
	ConfigureConsole();
	InitPWM();
   82924:	4b23      	ldr	r3, [pc, #140]	; (829b4 <main+0x100>)
   82926:	4798      	blx	r3
	setupUART();
   82928:	4b23      	ldr	r3, [pc, #140]	; (829b8 <main+0x104>)
   8292a:	4798      	blx	r3
	
	/************************************************************************/
	/* First task that handles the PID-regulation. The task with highest priority. */
	/************************************************************************/
	if (xTaskCreate(taskModulate, (const signed char * const) "taskModulate", 1024, NULL, 2, NULL) != pdPASS){
   8292c:	2302      	movs	r3, #2
   8292e:	9300      	str	r3, [sp, #0]
   82930:	2300      	movs	r3, #0
   82932:	9301      	str	r3, [sp, #4]
   82934:	9302      	str	r3, [sp, #8]
   82936:	9303      	str	r3, [sp, #12]
   82938:	4820      	ldr	r0, [pc, #128]	; (829bc <main+0x108>)
   8293a:	4921      	ldr	r1, [pc, #132]	; (829c0 <main+0x10c>)
   8293c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82940:	4c20      	ldr	r4, [pc, #128]	; (829c4 <main+0x110>)
   82942:	47a0      	blx	r4
   82944:	2801      	cmp	r0, #1
   82946:	d002      	beq.n	8294e <main+0x9a>
		printf("Failed to create taskModulate\n");
   82948:	481f      	ldr	r0, [pc, #124]	; (829c8 <main+0x114>)
   8294a:	4b20      	ldr	r3, [pc, #128]	; (829cc <main+0x118>)
   8294c:	4798      	blx	r3
	}
	/************************************************************************/
	/* Second task that handles the communication to Matlab. The task with lowest priority. */
	/************************************************************************/
	if (xTaskCreate(taskSendToMatlab, (const signed char * const) "taskSendToMatlab", 1024, NULL, 1, NULL) != pdPASS){
   8294e:	2301      	movs	r3, #1
   82950:	9300      	str	r3, [sp, #0]
   82952:	2300      	movs	r3, #0
   82954:	9301      	str	r3, [sp, #4]
   82956:	9302      	str	r3, [sp, #8]
   82958:	9303      	str	r3, [sp, #12]
   8295a:	481d      	ldr	r0, [pc, #116]	; (829d0 <main+0x11c>)
   8295c:	491d      	ldr	r1, [pc, #116]	; (829d4 <main+0x120>)
   8295e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82962:	4c18      	ldr	r4, [pc, #96]	; (829c4 <main+0x110>)
   82964:	47a0      	blx	r4
   82966:	2801      	cmp	r0, #1
   82968:	d002      	beq.n	82970 <main+0xbc>
		printf("Failed to create taskSendToMatlab\n");
   8296a:	481b      	ldr	r0, [pc, #108]	; (829d8 <main+0x124>)
   8296c:	4b17      	ldr	r3, [pc, #92]	; (829cc <main+0x118>)
   8296e:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
   82970:	4b1a      	ldr	r3, [pc, #104]	; (829dc <main+0x128>)
   82972:	4798      	blx	r3
}
   82974:	2000      	movs	r0, #0
   82976:	b009      	add	sp, #36	; 0x24
   82978:	bd30      	pop	{r4, r5, pc}
   8297a:	bf00      	nop
   8297c:	00081f61 	.word	0x00081f61
   82980:	00081fc5 	.word	0x00081fc5
   82984:	00082465 	.word	0x00082465
   82988:	00080149 	.word	0x00080149
   8298c:	400e0800 	.word	0x400e0800
   82990:	2007abbc 	.word	0x2007abbc
   82994:	0008280d 	.word	0x0008280d
   82998:	2007abb8 	.word	0x2007abb8
   8299c:	00082765 	.word	0x00082765
   829a0:	2007ab8c 	.word	0x2007ab8c
   829a4:	0501bd00 	.word	0x0501bd00
   829a8:	00081ed9 	.word	0x00081ed9
   829ac:	20070438 	.word	0x20070438
   829b0:	000833bd 	.word	0x000833bd
   829b4:	00080389 	.word	0x00080389
   829b8:	000802a5 	.word	0x000802a5
   829bc:	00080451 	.word	0x00080451
   829c0:	00086214 	.word	0x00086214
   829c4:	00080ffd 	.word	0x00080ffd
   829c8:	00086224 	.word	0x00086224
   829cc:	00083215 	.word	0x00083215
   829d0:	00080621 	.word	0x00080621
   829d4:	00086244 	.word	0x00086244
   829d8:	00086258 	.word	0x00086258
   829dc:	00081205 	.word	0x00081205

000829e0 <__aeabi_drsub>:
   829e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   829e4:	e002      	b.n	829ec <__adddf3>
   829e6:	bf00      	nop

000829e8 <__aeabi_dsub>:
   829e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000829ec <__adddf3>:
   829ec:	b530      	push	{r4, r5, lr}
   829ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   829f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   829f6:	ea94 0f05 	teq	r4, r5
   829fa:	bf08      	it	eq
   829fc:	ea90 0f02 	teqeq	r0, r2
   82a00:	bf1f      	itttt	ne
   82a02:	ea54 0c00 	orrsne.w	ip, r4, r0
   82a06:	ea55 0c02 	orrsne.w	ip, r5, r2
   82a0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82a0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82a12:	f000 80e2 	beq.w	82bda <__adddf3+0x1ee>
   82a16:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82a1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82a1e:	bfb8      	it	lt
   82a20:	426d      	neglt	r5, r5
   82a22:	dd0c      	ble.n	82a3e <__adddf3+0x52>
   82a24:	442c      	add	r4, r5
   82a26:	ea80 0202 	eor.w	r2, r0, r2
   82a2a:	ea81 0303 	eor.w	r3, r1, r3
   82a2e:	ea82 0000 	eor.w	r0, r2, r0
   82a32:	ea83 0101 	eor.w	r1, r3, r1
   82a36:	ea80 0202 	eor.w	r2, r0, r2
   82a3a:	ea81 0303 	eor.w	r3, r1, r3
   82a3e:	2d36      	cmp	r5, #54	; 0x36
   82a40:	bf88      	it	hi
   82a42:	bd30      	pophi	{r4, r5, pc}
   82a44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82a48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82a4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82a50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82a54:	d002      	beq.n	82a5c <__adddf3+0x70>
   82a56:	4240      	negs	r0, r0
   82a58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82a5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82a60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82a64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82a68:	d002      	beq.n	82a70 <__adddf3+0x84>
   82a6a:	4252      	negs	r2, r2
   82a6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82a70:	ea94 0f05 	teq	r4, r5
   82a74:	f000 80a7 	beq.w	82bc6 <__adddf3+0x1da>
   82a78:	f1a4 0401 	sub.w	r4, r4, #1
   82a7c:	f1d5 0e20 	rsbs	lr, r5, #32
   82a80:	db0d      	blt.n	82a9e <__adddf3+0xb2>
   82a82:	fa02 fc0e 	lsl.w	ip, r2, lr
   82a86:	fa22 f205 	lsr.w	r2, r2, r5
   82a8a:	1880      	adds	r0, r0, r2
   82a8c:	f141 0100 	adc.w	r1, r1, #0
   82a90:	fa03 f20e 	lsl.w	r2, r3, lr
   82a94:	1880      	adds	r0, r0, r2
   82a96:	fa43 f305 	asr.w	r3, r3, r5
   82a9a:	4159      	adcs	r1, r3
   82a9c:	e00e      	b.n	82abc <__adddf3+0xd0>
   82a9e:	f1a5 0520 	sub.w	r5, r5, #32
   82aa2:	f10e 0e20 	add.w	lr, lr, #32
   82aa6:	2a01      	cmp	r2, #1
   82aa8:	fa03 fc0e 	lsl.w	ip, r3, lr
   82aac:	bf28      	it	cs
   82aae:	f04c 0c02 	orrcs.w	ip, ip, #2
   82ab2:	fa43 f305 	asr.w	r3, r3, r5
   82ab6:	18c0      	adds	r0, r0, r3
   82ab8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82abc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82ac0:	d507      	bpl.n	82ad2 <__adddf3+0xe6>
   82ac2:	f04f 0e00 	mov.w	lr, #0
   82ac6:	f1dc 0c00 	rsbs	ip, ip, #0
   82aca:	eb7e 0000 	sbcs.w	r0, lr, r0
   82ace:	eb6e 0101 	sbc.w	r1, lr, r1
   82ad2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82ad6:	d31b      	bcc.n	82b10 <__adddf3+0x124>
   82ad8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82adc:	d30c      	bcc.n	82af8 <__adddf3+0x10c>
   82ade:	0849      	lsrs	r1, r1, #1
   82ae0:	ea5f 0030 	movs.w	r0, r0, rrx
   82ae4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82ae8:	f104 0401 	add.w	r4, r4, #1
   82aec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82af0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82af4:	f080 809a 	bcs.w	82c2c <__adddf3+0x240>
   82af8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82afc:	bf08      	it	eq
   82afe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82b02:	f150 0000 	adcs.w	r0, r0, #0
   82b06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82b0a:	ea41 0105 	orr.w	r1, r1, r5
   82b0e:	bd30      	pop	{r4, r5, pc}
   82b10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82b14:	4140      	adcs	r0, r0
   82b16:	eb41 0101 	adc.w	r1, r1, r1
   82b1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82b1e:	f1a4 0401 	sub.w	r4, r4, #1
   82b22:	d1e9      	bne.n	82af8 <__adddf3+0x10c>
   82b24:	f091 0f00 	teq	r1, #0
   82b28:	bf04      	itt	eq
   82b2a:	4601      	moveq	r1, r0
   82b2c:	2000      	moveq	r0, #0
   82b2e:	fab1 f381 	clz	r3, r1
   82b32:	bf08      	it	eq
   82b34:	3320      	addeq	r3, #32
   82b36:	f1a3 030b 	sub.w	r3, r3, #11
   82b3a:	f1b3 0220 	subs.w	r2, r3, #32
   82b3e:	da0c      	bge.n	82b5a <__adddf3+0x16e>
   82b40:	320c      	adds	r2, #12
   82b42:	dd08      	ble.n	82b56 <__adddf3+0x16a>
   82b44:	f102 0c14 	add.w	ip, r2, #20
   82b48:	f1c2 020c 	rsb	r2, r2, #12
   82b4c:	fa01 f00c 	lsl.w	r0, r1, ip
   82b50:	fa21 f102 	lsr.w	r1, r1, r2
   82b54:	e00c      	b.n	82b70 <__adddf3+0x184>
   82b56:	f102 0214 	add.w	r2, r2, #20
   82b5a:	bfd8      	it	le
   82b5c:	f1c2 0c20 	rsble	ip, r2, #32
   82b60:	fa01 f102 	lsl.w	r1, r1, r2
   82b64:	fa20 fc0c 	lsr.w	ip, r0, ip
   82b68:	bfdc      	itt	le
   82b6a:	ea41 010c 	orrle.w	r1, r1, ip
   82b6e:	4090      	lslle	r0, r2
   82b70:	1ae4      	subs	r4, r4, r3
   82b72:	bfa2      	ittt	ge
   82b74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82b78:	4329      	orrge	r1, r5
   82b7a:	bd30      	popge	{r4, r5, pc}
   82b7c:	ea6f 0404 	mvn.w	r4, r4
   82b80:	3c1f      	subs	r4, #31
   82b82:	da1c      	bge.n	82bbe <__adddf3+0x1d2>
   82b84:	340c      	adds	r4, #12
   82b86:	dc0e      	bgt.n	82ba6 <__adddf3+0x1ba>
   82b88:	f104 0414 	add.w	r4, r4, #20
   82b8c:	f1c4 0220 	rsb	r2, r4, #32
   82b90:	fa20 f004 	lsr.w	r0, r0, r4
   82b94:	fa01 f302 	lsl.w	r3, r1, r2
   82b98:	ea40 0003 	orr.w	r0, r0, r3
   82b9c:	fa21 f304 	lsr.w	r3, r1, r4
   82ba0:	ea45 0103 	orr.w	r1, r5, r3
   82ba4:	bd30      	pop	{r4, r5, pc}
   82ba6:	f1c4 040c 	rsb	r4, r4, #12
   82baa:	f1c4 0220 	rsb	r2, r4, #32
   82bae:	fa20 f002 	lsr.w	r0, r0, r2
   82bb2:	fa01 f304 	lsl.w	r3, r1, r4
   82bb6:	ea40 0003 	orr.w	r0, r0, r3
   82bba:	4629      	mov	r1, r5
   82bbc:	bd30      	pop	{r4, r5, pc}
   82bbe:	fa21 f004 	lsr.w	r0, r1, r4
   82bc2:	4629      	mov	r1, r5
   82bc4:	bd30      	pop	{r4, r5, pc}
   82bc6:	f094 0f00 	teq	r4, #0
   82bca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82bce:	bf06      	itte	eq
   82bd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82bd4:	3401      	addeq	r4, #1
   82bd6:	3d01      	subne	r5, #1
   82bd8:	e74e      	b.n	82a78 <__adddf3+0x8c>
   82bda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82bde:	bf18      	it	ne
   82be0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82be4:	d029      	beq.n	82c3a <__adddf3+0x24e>
   82be6:	ea94 0f05 	teq	r4, r5
   82bea:	bf08      	it	eq
   82bec:	ea90 0f02 	teqeq	r0, r2
   82bf0:	d005      	beq.n	82bfe <__adddf3+0x212>
   82bf2:	ea54 0c00 	orrs.w	ip, r4, r0
   82bf6:	bf04      	itt	eq
   82bf8:	4619      	moveq	r1, r3
   82bfa:	4610      	moveq	r0, r2
   82bfc:	bd30      	pop	{r4, r5, pc}
   82bfe:	ea91 0f03 	teq	r1, r3
   82c02:	bf1e      	ittt	ne
   82c04:	2100      	movne	r1, #0
   82c06:	2000      	movne	r0, #0
   82c08:	bd30      	popne	{r4, r5, pc}
   82c0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82c0e:	d105      	bne.n	82c1c <__adddf3+0x230>
   82c10:	0040      	lsls	r0, r0, #1
   82c12:	4149      	adcs	r1, r1
   82c14:	bf28      	it	cs
   82c16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82c1a:	bd30      	pop	{r4, r5, pc}
   82c1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82c20:	bf3c      	itt	cc
   82c22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82c26:	bd30      	popcc	{r4, r5, pc}
   82c28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82c2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82c30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82c34:	f04f 0000 	mov.w	r0, #0
   82c38:	bd30      	pop	{r4, r5, pc}
   82c3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82c3e:	bf1a      	itte	ne
   82c40:	4619      	movne	r1, r3
   82c42:	4610      	movne	r0, r2
   82c44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82c48:	bf1c      	itt	ne
   82c4a:	460b      	movne	r3, r1
   82c4c:	4602      	movne	r2, r0
   82c4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82c52:	bf06      	itte	eq
   82c54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82c58:	ea91 0f03 	teqeq	r1, r3
   82c5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82c60:	bd30      	pop	{r4, r5, pc}
   82c62:	bf00      	nop

00082c64 <__aeabi_ui2d>:
   82c64:	f090 0f00 	teq	r0, #0
   82c68:	bf04      	itt	eq
   82c6a:	2100      	moveq	r1, #0
   82c6c:	4770      	bxeq	lr
   82c6e:	b530      	push	{r4, r5, lr}
   82c70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82c74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82c78:	f04f 0500 	mov.w	r5, #0
   82c7c:	f04f 0100 	mov.w	r1, #0
   82c80:	e750      	b.n	82b24 <__adddf3+0x138>
   82c82:	bf00      	nop

00082c84 <__aeabi_i2d>:
   82c84:	f090 0f00 	teq	r0, #0
   82c88:	bf04      	itt	eq
   82c8a:	2100      	moveq	r1, #0
   82c8c:	4770      	bxeq	lr
   82c8e:	b530      	push	{r4, r5, lr}
   82c90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82c94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82c98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82c9c:	bf48      	it	mi
   82c9e:	4240      	negmi	r0, r0
   82ca0:	f04f 0100 	mov.w	r1, #0
   82ca4:	e73e      	b.n	82b24 <__adddf3+0x138>
   82ca6:	bf00      	nop

00082ca8 <__aeabi_f2d>:
   82ca8:	0042      	lsls	r2, r0, #1
   82caa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82cae:	ea4f 0131 	mov.w	r1, r1, rrx
   82cb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82cb6:	bf1f      	itttt	ne
   82cb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82cbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82cc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82cc4:	4770      	bxne	lr
   82cc6:	f092 0f00 	teq	r2, #0
   82cca:	bf14      	ite	ne
   82ccc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82cd0:	4770      	bxeq	lr
   82cd2:	b530      	push	{r4, r5, lr}
   82cd4:	f44f 7460 	mov.w	r4, #896	; 0x380
   82cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82cdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82ce0:	e720      	b.n	82b24 <__adddf3+0x138>
   82ce2:	bf00      	nop

00082ce4 <__aeabi_ul2d>:
   82ce4:	ea50 0201 	orrs.w	r2, r0, r1
   82ce8:	bf08      	it	eq
   82cea:	4770      	bxeq	lr
   82cec:	b530      	push	{r4, r5, lr}
   82cee:	f04f 0500 	mov.w	r5, #0
   82cf2:	e00a      	b.n	82d0a <__aeabi_l2d+0x16>

00082cf4 <__aeabi_l2d>:
   82cf4:	ea50 0201 	orrs.w	r2, r0, r1
   82cf8:	bf08      	it	eq
   82cfa:	4770      	bxeq	lr
   82cfc:	b530      	push	{r4, r5, lr}
   82cfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82d02:	d502      	bpl.n	82d0a <__aeabi_l2d+0x16>
   82d04:	4240      	negs	r0, r0
   82d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82d0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82d0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82d12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82d16:	f43f aedc 	beq.w	82ad2 <__adddf3+0xe6>
   82d1a:	f04f 0203 	mov.w	r2, #3
   82d1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82d22:	bf18      	it	ne
   82d24:	3203      	addne	r2, #3
   82d26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82d2a:	bf18      	it	ne
   82d2c:	3203      	addne	r2, #3
   82d2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82d32:	f1c2 0320 	rsb	r3, r2, #32
   82d36:	fa00 fc03 	lsl.w	ip, r0, r3
   82d3a:	fa20 f002 	lsr.w	r0, r0, r2
   82d3e:	fa01 fe03 	lsl.w	lr, r1, r3
   82d42:	ea40 000e 	orr.w	r0, r0, lr
   82d46:	fa21 f102 	lsr.w	r1, r1, r2
   82d4a:	4414      	add	r4, r2
   82d4c:	e6c1      	b.n	82ad2 <__adddf3+0xe6>
   82d4e:	bf00      	nop

00082d50 <__aeabi_dmul>:
   82d50:	b570      	push	{r4, r5, r6, lr}
   82d52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82d56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82d5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82d5e:	bf1d      	ittte	ne
   82d60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82d64:	ea94 0f0c 	teqne	r4, ip
   82d68:	ea95 0f0c 	teqne	r5, ip
   82d6c:	f000 f8de 	bleq	82f2c <__aeabi_dmul+0x1dc>
   82d70:	442c      	add	r4, r5
   82d72:	ea81 0603 	eor.w	r6, r1, r3
   82d76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82d7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82d7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82d82:	bf18      	it	ne
   82d84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82d90:	d038      	beq.n	82e04 <__aeabi_dmul+0xb4>
   82d92:	fba0 ce02 	umull	ip, lr, r0, r2
   82d96:	f04f 0500 	mov.w	r5, #0
   82d9a:	fbe1 e502 	umlal	lr, r5, r1, r2
   82d9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82da2:	fbe0 e503 	umlal	lr, r5, r0, r3
   82da6:	f04f 0600 	mov.w	r6, #0
   82daa:	fbe1 5603 	umlal	r5, r6, r1, r3
   82dae:	f09c 0f00 	teq	ip, #0
   82db2:	bf18      	it	ne
   82db4:	f04e 0e01 	orrne.w	lr, lr, #1
   82db8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82dbc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82dc0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82dc4:	d204      	bcs.n	82dd0 <__aeabi_dmul+0x80>
   82dc6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82dca:	416d      	adcs	r5, r5
   82dcc:	eb46 0606 	adc.w	r6, r6, r6
   82dd0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   82dd4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82dd8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82ddc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82de0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   82de4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82de8:	bf88      	it	hi
   82dea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82dee:	d81e      	bhi.n	82e2e <__aeabi_dmul+0xde>
   82df0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   82df4:	bf08      	it	eq
   82df6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82dfa:	f150 0000 	adcs.w	r0, r0, #0
   82dfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82e02:	bd70      	pop	{r4, r5, r6, pc}
   82e04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82e08:	ea46 0101 	orr.w	r1, r6, r1
   82e0c:	ea40 0002 	orr.w	r0, r0, r2
   82e10:	ea81 0103 	eor.w	r1, r1, r3
   82e14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82e18:	bfc2      	ittt	gt
   82e1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   82e1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82e22:	bd70      	popgt	{r4, r5, r6, pc}
   82e24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82e28:	f04f 0e00 	mov.w	lr, #0
   82e2c:	3c01      	subs	r4, #1
   82e2e:	f300 80ab 	bgt.w	82f88 <__aeabi_dmul+0x238>
   82e32:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82e36:	bfde      	ittt	le
   82e38:	2000      	movle	r0, #0
   82e3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82e3e:	bd70      	pople	{r4, r5, r6, pc}
   82e40:	f1c4 0400 	rsb	r4, r4, #0
   82e44:	3c20      	subs	r4, #32
   82e46:	da35      	bge.n	82eb4 <__aeabi_dmul+0x164>
   82e48:	340c      	adds	r4, #12
   82e4a:	dc1b      	bgt.n	82e84 <__aeabi_dmul+0x134>
   82e4c:	f104 0414 	add.w	r4, r4, #20
   82e50:	f1c4 0520 	rsb	r5, r4, #32
   82e54:	fa00 f305 	lsl.w	r3, r0, r5
   82e58:	fa20 f004 	lsr.w	r0, r0, r4
   82e5c:	fa01 f205 	lsl.w	r2, r1, r5
   82e60:	ea40 0002 	orr.w	r0, r0, r2
   82e64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82e68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82e6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82e70:	fa21 f604 	lsr.w	r6, r1, r4
   82e74:	eb42 0106 	adc.w	r1, r2, r6
   82e78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82e7c:	bf08      	it	eq
   82e7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82e82:	bd70      	pop	{r4, r5, r6, pc}
   82e84:	f1c4 040c 	rsb	r4, r4, #12
   82e88:	f1c4 0520 	rsb	r5, r4, #32
   82e8c:	fa00 f304 	lsl.w	r3, r0, r4
   82e90:	fa20 f005 	lsr.w	r0, r0, r5
   82e94:	fa01 f204 	lsl.w	r2, r1, r4
   82e98:	ea40 0002 	orr.w	r0, r0, r2
   82e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82ea0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82ea4:	f141 0100 	adc.w	r1, r1, #0
   82ea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82eac:	bf08      	it	eq
   82eae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82eb2:	bd70      	pop	{r4, r5, r6, pc}
   82eb4:	f1c4 0520 	rsb	r5, r4, #32
   82eb8:	fa00 f205 	lsl.w	r2, r0, r5
   82ebc:	ea4e 0e02 	orr.w	lr, lr, r2
   82ec0:	fa20 f304 	lsr.w	r3, r0, r4
   82ec4:	fa01 f205 	lsl.w	r2, r1, r5
   82ec8:	ea43 0302 	orr.w	r3, r3, r2
   82ecc:	fa21 f004 	lsr.w	r0, r1, r4
   82ed0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82ed4:	fa21 f204 	lsr.w	r2, r1, r4
   82ed8:	ea20 0002 	bic.w	r0, r0, r2
   82edc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82ee0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82ee4:	bf08      	it	eq
   82ee6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82eea:	bd70      	pop	{r4, r5, r6, pc}
   82eec:	f094 0f00 	teq	r4, #0
   82ef0:	d10f      	bne.n	82f12 <__aeabi_dmul+0x1c2>
   82ef2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82ef6:	0040      	lsls	r0, r0, #1
   82ef8:	eb41 0101 	adc.w	r1, r1, r1
   82efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82f00:	bf08      	it	eq
   82f02:	3c01      	subeq	r4, #1
   82f04:	d0f7      	beq.n	82ef6 <__aeabi_dmul+0x1a6>
   82f06:	ea41 0106 	orr.w	r1, r1, r6
   82f0a:	f095 0f00 	teq	r5, #0
   82f0e:	bf18      	it	ne
   82f10:	4770      	bxne	lr
   82f12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82f16:	0052      	lsls	r2, r2, #1
   82f18:	eb43 0303 	adc.w	r3, r3, r3
   82f1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82f20:	bf08      	it	eq
   82f22:	3d01      	subeq	r5, #1
   82f24:	d0f7      	beq.n	82f16 <__aeabi_dmul+0x1c6>
   82f26:	ea43 0306 	orr.w	r3, r3, r6
   82f2a:	4770      	bx	lr
   82f2c:	ea94 0f0c 	teq	r4, ip
   82f30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82f34:	bf18      	it	ne
   82f36:	ea95 0f0c 	teqne	r5, ip
   82f3a:	d00c      	beq.n	82f56 <__aeabi_dmul+0x206>
   82f3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82f40:	bf18      	it	ne
   82f42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82f46:	d1d1      	bne.n	82eec <__aeabi_dmul+0x19c>
   82f48:	ea81 0103 	eor.w	r1, r1, r3
   82f4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82f50:	f04f 0000 	mov.w	r0, #0
   82f54:	bd70      	pop	{r4, r5, r6, pc}
   82f56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82f5a:	bf06      	itte	eq
   82f5c:	4610      	moveq	r0, r2
   82f5e:	4619      	moveq	r1, r3
   82f60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82f64:	d019      	beq.n	82f9a <__aeabi_dmul+0x24a>
   82f66:	ea94 0f0c 	teq	r4, ip
   82f6a:	d102      	bne.n	82f72 <__aeabi_dmul+0x222>
   82f6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82f70:	d113      	bne.n	82f9a <__aeabi_dmul+0x24a>
   82f72:	ea95 0f0c 	teq	r5, ip
   82f76:	d105      	bne.n	82f84 <__aeabi_dmul+0x234>
   82f78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   82f7c:	bf1c      	itt	ne
   82f7e:	4610      	movne	r0, r2
   82f80:	4619      	movne	r1, r3
   82f82:	d10a      	bne.n	82f9a <__aeabi_dmul+0x24a>
   82f84:	ea81 0103 	eor.w	r1, r1, r3
   82f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82f8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82f90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82f94:	f04f 0000 	mov.w	r0, #0
   82f98:	bd70      	pop	{r4, r5, r6, pc}
   82f9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82f9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82fa2:	bd70      	pop	{r4, r5, r6, pc}

00082fa4 <__aeabi_ddiv>:
   82fa4:	b570      	push	{r4, r5, r6, lr}
   82fa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82faa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82fae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82fb2:	bf1d      	ittte	ne
   82fb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82fb8:	ea94 0f0c 	teqne	r4, ip
   82fbc:	ea95 0f0c 	teqne	r5, ip
   82fc0:	f000 f8a7 	bleq	83112 <__aeabi_ddiv+0x16e>
   82fc4:	eba4 0405 	sub.w	r4, r4, r5
   82fc8:	ea81 0e03 	eor.w	lr, r1, r3
   82fcc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82fd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82fd4:	f000 8088 	beq.w	830e8 <__aeabi_ddiv+0x144>
   82fd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82fdc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82fe0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   82fe4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82fe8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   82fec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82ff0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   82ff4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82ff8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   82ffc:	429d      	cmp	r5, r3
   82ffe:	bf08      	it	eq
   83000:	4296      	cmpeq	r6, r2
   83002:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83006:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8300a:	d202      	bcs.n	83012 <__aeabi_ddiv+0x6e>
   8300c:	085b      	lsrs	r3, r3, #1
   8300e:	ea4f 0232 	mov.w	r2, r2, rrx
   83012:	1ab6      	subs	r6, r6, r2
   83014:	eb65 0503 	sbc.w	r5, r5, r3
   83018:	085b      	lsrs	r3, r3, #1
   8301a:	ea4f 0232 	mov.w	r2, r2, rrx
   8301e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83022:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83026:	ebb6 0e02 	subs.w	lr, r6, r2
   8302a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8302e:	bf22      	ittt	cs
   83030:	1ab6      	subcs	r6, r6, r2
   83032:	4675      	movcs	r5, lr
   83034:	ea40 000c 	orrcs.w	r0, r0, ip
   83038:	085b      	lsrs	r3, r3, #1
   8303a:	ea4f 0232 	mov.w	r2, r2, rrx
   8303e:	ebb6 0e02 	subs.w	lr, r6, r2
   83042:	eb75 0e03 	sbcs.w	lr, r5, r3
   83046:	bf22      	ittt	cs
   83048:	1ab6      	subcs	r6, r6, r2
   8304a:	4675      	movcs	r5, lr
   8304c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83050:	085b      	lsrs	r3, r3, #1
   83052:	ea4f 0232 	mov.w	r2, r2, rrx
   83056:	ebb6 0e02 	subs.w	lr, r6, r2
   8305a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8305e:	bf22      	ittt	cs
   83060:	1ab6      	subcs	r6, r6, r2
   83062:	4675      	movcs	r5, lr
   83064:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83068:	085b      	lsrs	r3, r3, #1
   8306a:	ea4f 0232 	mov.w	r2, r2, rrx
   8306e:	ebb6 0e02 	subs.w	lr, r6, r2
   83072:	eb75 0e03 	sbcs.w	lr, r5, r3
   83076:	bf22      	ittt	cs
   83078:	1ab6      	subcs	r6, r6, r2
   8307a:	4675      	movcs	r5, lr
   8307c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83080:	ea55 0e06 	orrs.w	lr, r5, r6
   83084:	d018      	beq.n	830b8 <__aeabi_ddiv+0x114>
   83086:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8308a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8308e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83092:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83096:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8309a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8309e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   830a2:	d1c0      	bne.n	83026 <__aeabi_ddiv+0x82>
   830a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   830a8:	d10b      	bne.n	830c2 <__aeabi_ddiv+0x11e>
   830aa:	ea41 0100 	orr.w	r1, r1, r0
   830ae:	f04f 0000 	mov.w	r0, #0
   830b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   830b6:	e7b6      	b.n	83026 <__aeabi_ddiv+0x82>
   830b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   830bc:	bf04      	itt	eq
   830be:	4301      	orreq	r1, r0
   830c0:	2000      	moveq	r0, #0
   830c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   830c6:	bf88      	it	hi
   830c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   830cc:	f63f aeaf 	bhi.w	82e2e <__aeabi_dmul+0xde>
   830d0:	ebb5 0c03 	subs.w	ip, r5, r3
   830d4:	bf04      	itt	eq
   830d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   830da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   830de:	f150 0000 	adcs.w	r0, r0, #0
   830e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   830e6:	bd70      	pop	{r4, r5, r6, pc}
   830e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   830ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   830f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   830f4:	bfc2      	ittt	gt
   830f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   830fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   830fe:	bd70      	popgt	{r4, r5, r6, pc}
   83100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83104:	f04f 0e00 	mov.w	lr, #0
   83108:	3c01      	subs	r4, #1
   8310a:	e690      	b.n	82e2e <__aeabi_dmul+0xde>
   8310c:	ea45 0e06 	orr.w	lr, r5, r6
   83110:	e68d      	b.n	82e2e <__aeabi_dmul+0xde>
   83112:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83116:	ea94 0f0c 	teq	r4, ip
   8311a:	bf08      	it	eq
   8311c:	ea95 0f0c 	teqeq	r5, ip
   83120:	f43f af3b 	beq.w	82f9a <__aeabi_dmul+0x24a>
   83124:	ea94 0f0c 	teq	r4, ip
   83128:	d10a      	bne.n	83140 <__aeabi_ddiv+0x19c>
   8312a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8312e:	f47f af34 	bne.w	82f9a <__aeabi_dmul+0x24a>
   83132:	ea95 0f0c 	teq	r5, ip
   83136:	f47f af25 	bne.w	82f84 <__aeabi_dmul+0x234>
   8313a:	4610      	mov	r0, r2
   8313c:	4619      	mov	r1, r3
   8313e:	e72c      	b.n	82f9a <__aeabi_dmul+0x24a>
   83140:	ea95 0f0c 	teq	r5, ip
   83144:	d106      	bne.n	83154 <__aeabi_ddiv+0x1b0>
   83146:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8314a:	f43f aefd 	beq.w	82f48 <__aeabi_dmul+0x1f8>
   8314e:	4610      	mov	r0, r2
   83150:	4619      	mov	r1, r3
   83152:	e722      	b.n	82f9a <__aeabi_dmul+0x24a>
   83154:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83158:	bf18      	it	ne
   8315a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8315e:	f47f aec5 	bne.w	82eec <__aeabi_dmul+0x19c>
   83162:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83166:	f47f af0d 	bne.w	82f84 <__aeabi_dmul+0x234>
   8316a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8316e:	f47f aeeb 	bne.w	82f48 <__aeabi_dmul+0x1f8>
   83172:	e712      	b.n	82f9a <__aeabi_dmul+0x24a>

00083174 <__aeabi_d2iz>:
   83174:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83178:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8317c:	d215      	bcs.n	831aa <__aeabi_d2iz+0x36>
   8317e:	d511      	bpl.n	831a4 <__aeabi_d2iz+0x30>
   83180:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83184:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83188:	d912      	bls.n	831b0 <__aeabi_d2iz+0x3c>
   8318a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8318e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83192:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83196:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8319a:	fa23 f002 	lsr.w	r0, r3, r2
   8319e:	bf18      	it	ne
   831a0:	4240      	negne	r0, r0
   831a2:	4770      	bx	lr
   831a4:	f04f 0000 	mov.w	r0, #0
   831a8:	4770      	bx	lr
   831aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   831ae:	d105      	bne.n	831bc <__aeabi_d2iz+0x48>
   831b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   831b4:	bf08      	it	eq
   831b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   831ba:	4770      	bx	lr
   831bc:	f04f 0000 	mov.w	r0, #0
   831c0:	4770      	bx	lr
   831c2:	bf00      	nop

000831c4 <__libc_init_array>:
   831c4:	b570      	push	{r4, r5, r6, lr}
   831c6:	4e0f      	ldr	r6, [pc, #60]	; (83204 <__libc_init_array+0x40>)
   831c8:	4d0f      	ldr	r5, [pc, #60]	; (83208 <__libc_init_array+0x44>)
   831ca:	1b76      	subs	r6, r6, r5
   831cc:	10b6      	asrs	r6, r6, #2
   831ce:	d007      	beq.n	831e0 <__libc_init_array+0x1c>
   831d0:	3d04      	subs	r5, #4
   831d2:	2400      	movs	r4, #0
   831d4:	3401      	adds	r4, #1
   831d6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   831da:	4798      	blx	r3
   831dc:	42a6      	cmp	r6, r4
   831de:	d1f9      	bne.n	831d4 <__libc_init_array+0x10>
   831e0:	4e0a      	ldr	r6, [pc, #40]	; (8320c <__libc_init_array+0x48>)
   831e2:	4d0b      	ldr	r5, [pc, #44]	; (83210 <__libc_init_array+0x4c>)
   831e4:	f003 f876 	bl	862d4 <_init>
   831e8:	1b76      	subs	r6, r6, r5
   831ea:	10b6      	asrs	r6, r6, #2
   831ec:	d008      	beq.n	83200 <__libc_init_array+0x3c>
   831ee:	3d04      	subs	r5, #4
   831f0:	2400      	movs	r4, #0
   831f2:	3401      	adds	r4, #1
   831f4:	f855 3f04 	ldr.w	r3, [r5, #4]!
   831f8:	4798      	blx	r3
   831fa:	42a6      	cmp	r6, r4
   831fc:	d1f9      	bne.n	831f2 <__libc_init_array+0x2e>
   831fe:	bd70      	pop	{r4, r5, r6, pc}
   83200:	bd70      	pop	{r4, r5, r6, pc}
   83202:	bf00      	nop
   83204:	000862e0 	.word	0x000862e0
   83208:	000862e0 	.word	0x000862e0
   8320c:	000862e8 	.word	0x000862e8
   83210:	000862e0 	.word	0x000862e0

00083214 <iprintf>:
   83214:	b40f      	push	{r0, r1, r2, r3}
   83216:	b510      	push	{r4, lr}
   83218:	4b07      	ldr	r3, [pc, #28]	; (83238 <iprintf+0x24>)
   8321a:	b082      	sub	sp, #8
   8321c:	ac04      	add	r4, sp, #16
   8321e:	f854 2b04 	ldr.w	r2, [r4], #4
   83222:	6818      	ldr	r0, [r3, #0]
   83224:	4623      	mov	r3, r4
   83226:	6881      	ldr	r1, [r0, #8]
   83228:	9401      	str	r4, [sp, #4]
   8322a:	f000 f9ed 	bl	83608 <_vfiprintf_r>
   8322e:	b002      	add	sp, #8
   83230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83234:	b004      	add	sp, #16
   83236:	4770      	bx	lr
   83238:	20070438 	.word	0x20070438

0008323c <memcpy>:
   8323c:	4684      	mov	ip, r0
   8323e:	ea41 0300 	orr.w	r3, r1, r0
   83242:	f013 0303 	ands.w	r3, r3, #3
   83246:	d149      	bne.n	832dc <memcpy+0xa0>
   83248:	3a40      	subs	r2, #64	; 0x40
   8324a:	d323      	bcc.n	83294 <memcpy+0x58>
   8324c:	680b      	ldr	r3, [r1, #0]
   8324e:	6003      	str	r3, [r0, #0]
   83250:	684b      	ldr	r3, [r1, #4]
   83252:	6043      	str	r3, [r0, #4]
   83254:	688b      	ldr	r3, [r1, #8]
   83256:	6083      	str	r3, [r0, #8]
   83258:	68cb      	ldr	r3, [r1, #12]
   8325a:	60c3      	str	r3, [r0, #12]
   8325c:	690b      	ldr	r3, [r1, #16]
   8325e:	6103      	str	r3, [r0, #16]
   83260:	694b      	ldr	r3, [r1, #20]
   83262:	6143      	str	r3, [r0, #20]
   83264:	698b      	ldr	r3, [r1, #24]
   83266:	6183      	str	r3, [r0, #24]
   83268:	69cb      	ldr	r3, [r1, #28]
   8326a:	61c3      	str	r3, [r0, #28]
   8326c:	6a0b      	ldr	r3, [r1, #32]
   8326e:	6203      	str	r3, [r0, #32]
   83270:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83272:	6243      	str	r3, [r0, #36]	; 0x24
   83274:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83276:	6283      	str	r3, [r0, #40]	; 0x28
   83278:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8327a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8327c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8327e:	6303      	str	r3, [r0, #48]	; 0x30
   83280:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83282:	6343      	str	r3, [r0, #52]	; 0x34
   83284:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83286:	6383      	str	r3, [r0, #56]	; 0x38
   83288:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8328a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8328c:	3040      	adds	r0, #64	; 0x40
   8328e:	3140      	adds	r1, #64	; 0x40
   83290:	3a40      	subs	r2, #64	; 0x40
   83292:	d2db      	bcs.n	8324c <memcpy+0x10>
   83294:	3230      	adds	r2, #48	; 0x30
   83296:	d30b      	bcc.n	832b0 <memcpy+0x74>
   83298:	680b      	ldr	r3, [r1, #0]
   8329a:	6003      	str	r3, [r0, #0]
   8329c:	684b      	ldr	r3, [r1, #4]
   8329e:	6043      	str	r3, [r0, #4]
   832a0:	688b      	ldr	r3, [r1, #8]
   832a2:	6083      	str	r3, [r0, #8]
   832a4:	68cb      	ldr	r3, [r1, #12]
   832a6:	60c3      	str	r3, [r0, #12]
   832a8:	3010      	adds	r0, #16
   832aa:	3110      	adds	r1, #16
   832ac:	3a10      	subs	r2, #16
   832ae:	d2f3      	bcs.n	83298 <memcpy+0x5c>
   832b0:	320c      	adds	r2, #12
   832b2:	d305      	bcc.n	832c0 <memcpy+0x84>
   832b4:	f851 3b04 	ldr.w	r3, [r1], #4
   832b8:	f840 3b04 	str.w	r3, [r0], #4
   832bc:	3a04      	subs	r2, #4
   832be:	d2f9      	bcs.n	832b4 <memcpy+0x78>
   832c0:	3204      	adds	r2, #4
   832c2:	d008      	beq.n	832d6 <memcpy+0x9a>
   832c4:	07d2      	lsls	r2, r2, #31
   832c6:	bf1c      	itt	ne
   832c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   832cc:	f800 3b01 	strbne.w	r3, [r0], #1
   832d0:	d301      	bcc.n	832d6 <memcpy+0x9a>
   832d2:	880b      	ldrh	r3, [r1, #0]
   832d4:	8003      	strh	r3, [r0, #0]
   832d6:	4660      	mov	r0, ip
   832d8:	4770      	bx	lr
   832da:	bf00      	nop
   832dc:	2a08      	cmp	r2, #8
   832de:	d313      	bcc.n	83308 <memcpy+0xcc>
   832e0:	078b      	lsls	r3, r1, #30
   832e2:	d0b1      	beq.n	83248 <memcpy+0xc>
   832e4:	f010 0303 	ands.w	r3, r0, #3
   832e8:	d0ae      	beq.n	83248 <memcpy+0xc>
   832ea:	f1c3 0304 	rsb	r3, r3, #4
   832ee:	1ad2      	subs	r2, r2, r3
   832f0:	07db      	lsls	r3, r3, #31
   832f2:	bf1c      	itt	ne
   832f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   832f8:	f800 3b01 	strbne.w	r3, [r0], #1
   832fc:	d3a4      	bcc.n	83248 <memcpy+0xc>
   832fe:	f831 3b02 	ldrh.w	r3, [r1], #2
   83302:	f820 3b02 	strh.w	r3, [r0], #2
   83306:	e79f      	b.n	83248 <memcpy+0xc>
   83308:	3a04      	subs	r2, #4
   8330a:	d3d9      	bcc.n	832c0 <memcpy+0x84>
   8330c:	3a01      	subs	r2, #1
   8330e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83312:	f800 3b01 	strb.w	r3, [r0], #1
   83316:	d2f9      	bcs.n	8330c <memcpy+0xd0>
   83318:	780b      	ldrb	r3, [r1, #0]
   8331a:	7003      	strb	r3, [r0, #0]
   8331c:	784b      	ldrb	r3, [r1, #1]
   8331e:	7043      	strb	r3, [r0, #1]
   83320:	788b      	ldrb	r3, [r1, #2]
   83322:	7083      	strb	r3, [r0, #2]
   83324:	4660      	mov	r0, ip
   83326:	4770      	bx	lr

00083328 <memset>:
   83328:	b4f0      	push	{r4, r5, r6, r7}
   8332a:	0784      	lsls	r4, r0, #30
   8332c:	d043      	beq.n	833b6 <memset+0x8e>
   8332e:	1e54      	subs	r4, r2, #1
   83330:	2a00      	cmp	r2, #0
   83332:	d03e      	beq.n	833b2 <memset+0x8a>
   83334:	b2cd      	uxtb	r5, r1
   83336:	4603      	mov	r3, r0
   83338:	e003      	b.n	83342 <memset+0x1a>
   8333a:	1e62      	subs	r2, r4, #1
   8333c:	2c00      	cmp	r4, #0
   8333e:	d038      	beq.n	833b2 <memset+0x8a>
   83340:	4614      	mov	r4, r2
   83342:	f803 5b01 	strb.w	r5, [r3], #1
   83346:	079a      	lsls	r2, r3, #30
   83348:	d1f7      	bne.n	8333a <memset+0x12>
   8334a:	2c03      	cmp	r4, #3
   8334c:	d92a      	bls.n	833a4 <memset+0x7c>
   8334e:	b2cd      	uxtb	r5, r1
   83350:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83354:	2c0f      	cmp	r4, #15
   83356:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8335a:	d915      	bls.n	83388 <memset+0x60>
   8335c:	f1a4 0710 	sub.w	r7, r4, #16
   83360:	093f      	lsrs	r7, r7, #4
   83362:	f103 0610 	add.w	r6, r3, #16
   83366:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8336a:	461a      	mov	r2, r3
   8336c:	6015      	str	r5, [r2, #0]
   8336e:	6055      	str	r5, [r2, #4]
   83370:	6095      	str	r5, [r2, #8]
   83372:	60d5      	str	r5, [r2, #12]
   83374:	3210      	adds	r2, #16
   83376:	42b2      	cmp	r2, r6
   83378:	d1f8      	bne.n	8336c <memset+0x44>
   8337a:	f004 040f 	and.w	r4, r4, #15
   8337e:	3701      	adds	r7, #1
   83380:	2c03      	cmp	r4, #3
   83382:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   83386:	d90d      	bls.n	833a4 <memset+0x7c>
   83388:	461e      	mov	r6, r3
   8338a:	4622      	mov	r2, r4
   8338c:	3a04      	subs	r2, #4
   8338e:	2a03      	cmp	r2, #3
   83390:	f846 5b04 	str.w	r5, [r6], #4
   83394:	d8fa      	bhi.n	8338c <memset+0x64>
   83396:	1f22      	subs	r2, r4, #4
   83398:	f022 0203 	bic.w	r2, r2, #3
   8339c:	3204      	adds	r2, #4
   8339e:	4413      	add	r3, r2
   833a0:	f004 0403 	and.w	r4, r4, #3
   833a4:	b12c      	cbz	r4, 833b2 <memset+0x8a>
   833a6:	b2c9      	uxtb	r1, r1
   833a8:	441c      	add	r4, r3
   833aa:	f803 1b01 	strb.w	r1, [r3], #1
   833ae:	42a3      	cmp	r3, r4
   833b0:	d1fb      	bne.n	833aa <memset+0x82>
   833b2:	bcf0      	pop	{r4, r5, r6, r7}
   833b4:	4770      	bx	lr
   833b6:	4614      	mov	r4, r2
   833b8:	4603      	mov	r3, r0
   833ba:	e7c6      	b.n	8334a <memset+0x22>

000833bc <setbuf>:
   833bc:	2900      	cmp	r1, #0
   833be:	bf0c      	ite	eq
   833c0:	2202      	moveq	r2, #2
   833c2:	2200      	movne	r2, #0
   833c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   833c8:	f000 b800 	b.w	833cc <setvbuf>

000833cc <setvbuf>:
   833cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   833d0:	4d3c      	ldr	r5, [pc, #240]	; (834c4 <setvbuf+0xf8>)
   833d2:	4604      	mov	r4, r0
   833d4:	682d      	ldr	r5, [r5, #0]
   833d6:	4688      	mov	r8, r1
   833d8:	4616      	mov	r6, r2
   833da:	461f      	mov	r7, r3
   833dc:	b115      	cbz	r5, 833e4 <setvbuf+0x18>
   833de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   833e0:	2b00      	cmp	r3, #0
   833e2:	d04f      	beq.n	83484 <setvbuf+0xb8>
   833e4:	2e02      	cmp	r6, #2
   833e6:	d830      	bhi.n	8344a <setvbuf+0x7e>
   833e8:	2f00      	cmp	r7, #0
   833ea:	db2e      	blt.n	8344a <setvbuf+0x7e>
   833ec:	4628      	mov	r0, r5
   833ee:	4621      	mov	r1, r4
   833f0:	f001 f888 	bl	84504 <_fflush_r>
   833f4:	89a3      	ldrh	r3, [r4, #12]
   833f6:	2200      	movs	r2, #0
   833f8:	6062      	str	r2, [r4, #4]
   833fa:	61a2      	str	r2, [r4, #24]
   833fc:	061a      	lsls	r2, r3, #24
   833fe:	d428      	bmi.n	83452 <setvbuf+0x86>
   83400:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83404:	b29b      	uxth	r3, r3
   83406:	2e02      	cmp	r6, #2
   83408:	81a3      	strh	r3, [r4, #12]
   8340a:	d02d      	beq.n	83468 <setvbuf+0x9c>
   8340c:	f1b8 0f00 	cmp.w	r8, #0
   83410:	d03c      	beq.n	8348c <setvbuf+0xc0>
   83412:	2e01      	cmp	r6, #1
   83414:	d013      	beq.n	8343e <setvbuf+0x72>
   83416:	b29b      	uxth	r3, r3
   83418:	f003 0008 	and.w	r0, r3, #8
   8341c:	4a2a      	ldr	r2, [pc, #168]	; (834c8 <setvbuf+0xfc>)
   8341e:	b280      	uxth	r0, r0
   83420:	63ea      	str	r2, [r5, #60]	; 0x3c
   83422:	f8c4 8000 	str.w	r8, [r4]
   83426:	f8c4 8010 	str.w	r8, [r4, #16]
   8342a:	6167      	str	r7, [r4, #20]
   8342c:	b178      	cbz	r0, 8344e <setvbuf+0x82>
   8342e:	f013 0f03 	tst.w	r3, #3
   83432:	bf18      	it	ne
   83434:	2700      	movne	r7, #0
   83436:	60a7      	str	r7, [r4, #8]
   83438:	2000      	movs	r0, #0
   8343a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8343e:	f043 0301 	orr.w	r3, r3, #1
   83442:	427a      	negs	r2, r7
   83444:	81a3      	strh	r3, [r4, #12]
   83446:	61a2      	str	r2, [r4, #24]
   83448:	e7e5      	b.n	83416 <setvbuf+0x4a>
   8344a:	f04f 30ff 	mov.w	r0, #4294967295
   8344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83452:	4628      	mov	r0, r5
   83454:	6921      	ldr	r1, [r4, #16]
   83456:	f001 f9b5 	bl	847c4 <_free_r>
   8345a:	89a3      	ldrh	r3, [r4, #12]
   8345c:	2e02      	cmp	r6, #2
   8345e:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   83462:	b29b      	uxth	r3, r3
   83464:	81a3      	strh	r3, [r4, #12]
   83466:	d1d1      	bne.n	8340c <setvbuf+0x40>
   83468:	2000      	movs	r0, #0
   8346a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8346e:	f043 0302 	orr.w	r3, r3, #2
   83472:	2500      	movs	r5, #0
   83474:	2101      	movs	r1, #1
   83476:	81a3      	strh	r3, [r4, #12]
   83478:	60a5      	str	r5, [r4, #8]
   8347a:	6022      	str	r2, [r4, #0]
   8347c:	6122      	str	r2, [r4, #16]
   8347e:	6161      	str	r1, [r4, #20]
   83480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83484:	4628      	mov	r0, r5
   83486:	f001 f859 	bl	8453c <__sinit>
   8348a:	e7ab      	b.n	833e4 <setvbuf+0x18>
   8348c:	2f00      	cmp	r7, #0
   8348e:	bf08      	it	eq
   83490:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83494:	4638      	mov	r0, r7
   83496:	f001 fc8b 	bl	84db0 <malloc>
   8349a:	4680      	mov	r8, r0
   8349c:	b128      	cbz	r0, 834aa <setvbuf+0xde>
   8349e:	89a3      	ldrh	r3, [r4, #12]
   834a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   834a4:	b29b      	uxth	r3, r3
   834a6:	81a3      	strh	r3, [r4, #12]
   834a8:	e7b3      	b.n	83412 <setvbuf+0x46>
   834aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
   834ae:	f001 fc7f 	bl	84db0 <malloc>
   834b2:	4680      	mov	r8, r0
   834b4:	b918      	cbnz	r0, 834be <setvbuf+0xf2>
   834b6:	89a3      	ldrh	r3, [r4, #12]
   834b8:	f04f 30ff 	mov.w	r0, #4294967295
   834bc:	e7d5      	b.n	8346a <setvbuf+0x9e>
   834be:	f44f 6780 	mov.w	r7, #1024	; 0x400
   834c2:	e7ec      	b.n	8349e <setvbuf+0xd2>
   834c4:	20070438 	.word	0x20070438
   834c8:	00084531 	.word	0x00084531

000834cc <strlen>:
   834cc:	f020 0103 	bic.w	r1, r0, #3
   834d0:	f010 0003 	ands.w	r0, r0, #3
   834d4:	f1c0 0000 	rsb	r0, r0, #0
   834d8:	f851 3b04 	ldr.w	r3, [r1], #4
   834dc:	f100 0c04 	add.w	ip, r0, #4
   834e0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   834e4:	f06f 0200 	mvn.w	r2, #0
   834e8:	bf1c      	itt	ne
   834ea:	fa22 f20c 	lsrne.w	r2, r2, ip
   834ee:	4313      	orrne	r3, r2
   834f0:	f04f 0c01 	mov.w	ip, #1
   834f4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   834f8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   834fc:	eba3 020c 	sub.w	r2, r3, ip
   83500:	ea22 0203 	bic.w	r2, r2, r3
   83504:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83508:	bf04      	itt	eq
   8350a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8350e:	3004      	addeq	r0, #4
   83510:	d0f4      	beq.n	834fc <strlen+0x30>
   83512:	f013 0fff 	tst.w	r3, #255	; 0xff
   83516:	bf1f      	itttt	ne
   83518:	3001      	addne	r0, #1
   8351a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   8351e:	3001      	addne	r0, #1
   83520:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   83524:	bf18      	it	ne
   83526:	3001      	addne	r0, #1
   83528:	4770      	bx	lr
   8352a:	bf00      	nop

0008352c <strncpy>:
   8352c:	ea40 0301 	orr.w	r3, r0, r1
   83530:	079b      	lsls	r3, r3, #30
   83532:	b470      	push	{r4, r5, r6}
   83534:	d12a      	bne.n	8358c <strncpy+0x60>
   83536:	2a03      	cmp	r2, #3
   83538:	d928      	bls.n	8358c <strncpy+0x60>
   8353a:	460c      	mov	r4, r1
   8353c:	4603      	mov	r3, r0
   8353e:	4621      	mov	r1, r4
   83540:	f854 5b04 	ldr.w	r5, [r4], #4
   83544:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   83548:	ea26 0605 	bic.w	r6, r6, r5
   8354c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   83550:	d105      	bne.n	8355e <strncpy+0x32>
   83552:	3a04      	subs	r2, #4
   83554:	2a03      	cmp	r2, #3
   83556:	f843 5b04 	str.w	r5, [r3], #4
   8355a:	4621      	mov	r1, r4
   8355c:	d8ef      	bhi.n	8353e <strncpy+0x12>
   8355e:	b19a      	cbz	r2, 83588 <strncpy+0x5c>
   83560:	780c      	ldrb	r4, [r1, #0]
   83562:	3a01      	subs	r2, #1
   83564:	701c      	strb	r4, [r3, #0]
   83566:	3301      	adds	r3, #1
   83568:	b13c      	cbz	r4, 8357a <strncpy+0x4e>
   8356a:	b16a      	cbz	r2, 83588 <strncpy+0x5c>
   8356c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   83570:	3a01      	subs	r2, #1
   83572:	f803 4b01 	strb.w	r4, [r3], #1
   83576:	2c00      	cmp	r4, #0
   83578:	d1f7      	bne.n	8356a <strncpy+0x3e>
   8357a:	b12a      	cbz	r2, 83588 <strncpy+0x5c>
   8357c:	441a      	add	r2, r3
   8357e:	2100      	movs	r1, #0
   83580:	f803 1b01 	strb.w	r1, [r3], #1
   83584:	4293      	cmp	r3, r2
   83586:	d1fb      	bne.n	83580 <strncpy+0x54>
   83588:	bc70      	pop	{r4, r5, r6}
   8358a:	4770      	bx	lr
   8358c:	4603      	mov	r3, r0
   8358e:	e7e6      	b.n	8355e <strncpy+0x32>

00083590 <__sprint_r.part.0>:
   83590:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83596:	049c      	lsls	r4, r3, #18
   83598:	460e      	mov	r6, r1
   8359a:	4680      	mov	r8, r0
   8359c:	4691      	mov	r9, r2
   8359e:	d52a      	bpl.n	835f6 <__sprint_r.part.0+0x66>
   835a0:	6893      	ldr	r3, [r2, #8]
   835a2:	6812      	ldr	r2, [r2, #0]
   835a4:	f102 0a08 	add.w	sl, r2, #8
   835a8:	b31b      	cbz	r3, 835f2 <__sprint_r.part.0+0x62>
   835aa:	e91a 00a0 	ldmdb	sl, {r5, r7}
   835ae:	08bf      	lsrs	r7, r7, #2
   835b0:	d017      	beq.n	835e2 <__sprint_r.part.0+0x52>
   835b2:	3d04      	subs	r5, #4
   835b4:	2400      	movs	r4, #0
   835b6:	e001      	b.n	835bc <__sprint_r.part.0+0x2c>
   835b8:	42a7      	cmp	r7, r4
   835ba:	d010      	beq.n	835de <__sprint_r.part.0+0x4e>
   835bc:	4640      	mov	r0, r8
   835be:	f855 1f04 	ldr.w	r1, [r5, #4]!
   835c2:	4632      	mov	r2, r6
   835c4:	f001 f850 	bl	84668 <_fputwc_r>
   835c8:	1c43      	adds	r3, r0, #1
   835ca:	f104 0401 	add.w	r4, r4, #1
   835ce:	d1f3      	bne.n	835b8 <__sprint_r.part.0+0x28>
   835d0:	2300      	movs	r3, #0
   835d2:	f8c9 3008 	str.w	r3, [r9, #8]
   835d6:	f8c9 3004 	str.w	r3, [r9, #4]
   835da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   835de:	f8d9 3008 	ldr.w	r3, [r9, #8]
   835e2:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   835e6:	f8c9 3008 	str.w	r3, [r9, #8]
   835ea:	f10a 0a08 	add.w	sl, sl, #8
   835ee:	2b00      	cmp	r3, #0
   835f0:	d1db      	bne.n	835aa <__sprint_r.part.0+0x1a>
   835f2:	2000      	movs	r0, #0
   835f4:	e7ec      	b.n	835d0 <__sprint_r.part.0+0x40>
   835f6:	f001 f9b1 	bl	8495c <__sfvwrite_r>
   835fa:	2300      	movs	r3, #0
   835fc:	f8c9 3008 	str.w	r3, [r9, #8]
   83600:	f8c9 3004 	str.w	r3, [r9, #4]
   83604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083608 <_vfiprintf_r>:
   83608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8360c:	b0b1      	sub	sp, #196	; 0xc4
   8360e:	461c      	mov	r4, r3
   83610:	9102      	str	r1, [sp, #8]
   83612:	4690      	mov	r8, r2
   83614:	9308      	str	r3, [sp, #32]
   83616:	9006      	str	r0, [sp, #24]
   83618:	b118      	cbz	r0, 83622 <_vfiprintf_r+0x1a>
   8361a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8361c:	2b00      	cmp	r3, #0
   8361e:	f000 80e8 	beq.w	837f2 <_vfiprintf_r+0x1ea>
   83622:	9d02      	ldr	r5, [sp, #8]
   83624:	89ab      	ldrh	r3, [r5, #12]
   83626:	b29a      	uxth	r2, r3
   83628:	0490      	lsls	r0, r2, #18
   8362a:	d407      	bmi.n	8363c <_vfiprintf_r+0x34>
   8362c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   8362e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83632:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   83636:	81ab      	strh	r3, [r5, #12]
   83638:	b29a      	uxth	r2, r3
   8363a:	6669      	str	r1, [r5, #100]	; 0x64
   8363c:	0711      	lsls	r1, r2, #28
   8363e:	f140 80b7 	bpl.w	837b0 <_vfiprintf_r+0x1a8>
   83642:	f8dd b008 	ldr.w	fp, [sp, #8]
   83646:	f8db 3010 	ldr.w	r3, [fp, #16]
   8364a:	2b00      	cmp	r3, #0
   8364c:	f000 80b0 	beq.w	837b0 <_vfiprintf_r+0x1a8>
   83650:	f002 021a 	and.w	r2, r2, #26
   83654:	2a0a      	cmp	r2, #10
   83656:	f000 80b7 	beq.w	837c8 <_vfiprintf_r+0x1c0>
   8365a:	2300      	movs	r3, #0
   8365c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   83660:	930a      	str	r3, [sp, #40]	; 0x28
   83662:	9315      	str	r3, [sp, #84]	; 0x54
   83664:	9314      	str	r3, [sp, #80]	; 0x50
   83666:	9309      	str	r3, [sp, #36]	; 0x24
   83668:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8366c:	464e      	mov	r6, r9
   8366e:	f898 3000 	ldrb.w	r3, [r8]
   83672:	2b00      	cmp	r3, #0
   83674:	f000 84c8 	beq.w	84008 <_vfiprintf_r+0xa00>
   83678:	2b25      	cmp	r3, #37	; 0x25
   8367a:	f000 84c5 	beq.w	84008 <_vfiprintf_r+0xa00>
   8367e:	f108 0201 	add.w	r2, r8, #1
   83682:	e001      	b.n	83688 <_vfiprintf_r+0x80>
   83684:	2b25      	cmp	r3, #37	; 0x25
   83686:	d004      	beq.n	83692 <_vfiprintf_r+0x8a>
   83688:	7813      	ldrb	r3, [r2, #0]
   8368a:	4614      	mov	r4, r2
   8368c:	3201      	adds	r2, #1
   8368e:	2b00      	cmp	r3, #0
   83690:	d1f8      	bne.n	83684 <_vfiprintf_r+0x7c>
   83692:	ebc8 0504 	rsb	r5, r8, r4
   83696:	b195      	cbz	r5, 836be <_vfiprintf_r+0xb6>
   83698:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8369a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8369c:	3301      	adds	r3, #1
   8369e:	442a      	add	r2, r5
   836a0:	2b07      	cmp	r3, #7
   836a2:	f8c6 8000 	str.w	r8, [r6]
   836a6:	6075      	str	r5, [r6, #4]
   836a8:	9215      	str	r2, [sp, #84]	; 0x54
   836aa:	9314      	str	r3, [sp, #80]	; 0x50
   836ac:	dd7b      	ble.n	837a6 <_vfiprintf_r+0x19e>
   836ae:	2a00      	cmp	r2, #0
   836b0:	f040 84d5 	bne.w	8405e <_vfiprintf_r+0xa56>
   836b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   836b6:	9214      	str	r2, [sp, #80]	; 0x50
   836b8:	4428      	add	r0, r5
   836ba:	464e      	mov	r6, r9
   836bc:	9009      	str	r0, [sp, #36]	; 0x24
   836be:	7823      	ldrb	r3, [r4, #0]
   836c0:	2b00      	cmp	r3, #0
   836c2:	f000 83ed 	beq.w	83ea0 <_vfiprintf_r+0x898>
   836c6:	2100      	movs	r1, #0
   836c8:	f04f 0200 	mov.w	r2, #0
   836cc:	f04f 3cff 	mov.w	ip, #4294967295
   836d0:	7863      	ldrb	r3, [r4, #1]
   836d2:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   836d6:	9104      	str	r1, [sp, #16]
   836d8:	468a      	mov	sl, r1
   836da:	f104 0801 	add.w	r8, r4, #1
   836de:	4608      	mov	r0, r1
   836e0:	4665      	mov	r5, ip
   836e2:	f108 0801 	add.w	r8, r8, #1
   836e6:	f1a3 0220 	sub.w	r2, r3, #32
   836ea:	2a58      	cmp	r2, #88	; 0x58
   836ec:	f200 82d9 	bhi.w	83ca2 <_vfiprintf_r+0x69a>
   836f0:	e8df f012 	tbh	[pc, r2, lsl #1]
   836f4:	02d702cb 	.word	0x02d702cb
   836f8:	02d202d7 	.word	0x02d202d7
   836fc:	02d702d7 	.word	0x02d702d7
   83700:	02d702d7 	.word	0x02d702d7
   83704:	02d702d7 	.word	0x02d702d7
   83708:	028f0282 	.word	0x028f0282
   8370c:	008402d7 	.word	0x008402d7
   83710:	02d70293 	.word	0x02d70293
   83714:	0196012b 	.word	0x0196012b
   83718:	01960196 	.word	0x01960196
   8371c:	01960196 	.word	0x01960196
   83720:	01960196 	.word	0x01960196
   83724:	01960196 	.word	0x01960196
   83728:	02d702d7 	.word	0x02d702d7
   8372c:	02d702d7 	.word	0x02d702d7
   83730:	02d702d7 	.word	0x02d702d7
   83734:	02d702d7 	.word	0x02d702d7
   83738:	02d702d7 	.word	0x02d702d7
   8373c:	02d70130 	.word	0x02d70130
   83740:	02d702d7 	.word	0x02d702d7
   83744:	02d702d7 	.word	0x02d702d7
   83748:	02d702d7 	.word	0x02d702d7
   8374c:	02d702d7 	.word	0x02d702d7
   83750:	017b02d7 	.word	0x017b02d7
   83754:	02d702d7 	.word	0x02d702d7
   83758:	02d702d7 	.word	0x02d702d7
   8375c:	01a402d7 	.word	0x01a402d7
   83760:	02d702d7 	.word	0x02d702d7
   83764:	02d701bf 	.word	0x02d701bf
   83768:	02d702d7 	.word	0x02d702d7
   8376c:	02d702d7 	.word	0x02d702d7
   83770:	02d702d7 	.word	0x02d702d7
   83774:	02d702d7 	.word	0x02d702d7
   83778:	01e402d7 	.word	0x01e402d7
   8377c:	02d701fa 	.word	0x02d701fa
   83780:	02d702d7 	.word	0x02d702d7
   83784:	01fa0216 	.word	0x01fa0216
   83788:	02d702d7 	.word	0x02d702d7
   8378c:	02d7021b 	.word	0x02d7021b
   83790:	00890228 	.word	0x00890228
   83794:	027d0266 	.word	0x027d0266
   83798:	023a02d7 	.word	0x023a02d7
   8379c:	011902d7 	.word	0x011902d7
   837a0:	02d702d7 	.word	0x02d702d7
   837a4:	02af      	.short	0x02af
   837a6:	3608      	adds	r6, #8
   837a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   837aa:	4428      	add	r0, r5
   837ac:	9009      	str	r0, [sp, #36]	; 0x24
   837ae:	e786      	b.n	836be <_vfiprintf_r+0xb6>
   837b0:	9806      	ldr	r0, [sp, #24]
   837b2:	9902      	ldr	r1, [sp, #8]
   837b4:	f000 fd90 	bl	842d8 <__swsetup_r>
   837b8:	b9b0      	cbnz	r0, 837e8 <_vfiprintf_r+0x1e0>
   837ba:	9d02      	ldr	r5, [sp, #8]
   837bc:	89aa      	ldrh	r2, [r5, #12]
   837be:	f002 021a 	and.w	r2, r2, #26
   837c2:	2a0a      	cmp	r2, #10
   837c4:	f47f af49 	bne.w	8365a <_vfiprintf_r+0x52>
   837c8:	f8dd b008 	ldr.w	fp, [sp, #8]
   837cc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   837d0:	2b00      	cmp	r3, #0
   837d2:	f6ff af42 	blt.w	8365a <_vfiprintf_r+0x52>
   837d6:	9806      	ldr	r0, [sp, #24]
   837d8:	4659      	mov	r1, fp
   837da:	4642      	mov	r2, r8
   837dc:	4623      	mov	r3, r4
   837de:	f000 fd3d 	bl	8425c <__sbprintf>
   837e2:	b031      	add	sp, #196	; 0xc4
   837e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837e8:	f04f 30ff 	mov.w	r0, #4294967295
   837ec:	b031      	add	sp, #196	; 0xc4
   837ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837f2:	f000 fea3 	bl	8453c <__sinit>
   837f6:	e714      	b.n	83622 <_vfiprintf_r+0x1a>
   837f8:	4240      	negs	r0, r0
   837fa:	9308      	str	r3, [sp, #32]
   837fc:	f04a 0a04 	orr.w	sl, sl, #4
   83800:	f898 3000 	ldrb.w	r3, [r8]
   83804:	e76d      	b.n	836e2 <_vfiprintf_r+0xda>
   83806:	f01a 0320 	ands.w	r3, sl, #32
   8380a:	9004      	str	r0, [sp, #16]
   8380c:	46ac      	mov	ip, r5
   8380e:	f000 80f4 	beq.w	839fa <_vfiprintf_r+0x3f2>
   83812:	f8dd b020 	ldr.w	fp, [sp, #32]
   83816:	f10b 0307 	add.w	r3, fp, #7
   8381a:	f023 0307 	bic.w	r3, r3, #7
   8381e:	f103 0408 	add.w	r4, r3, #8
   83822:	9408      	str	r4, [sp, #32]
   83824:	e9d3 4500 	ldrd	r4, r5, [r3]
   83828:	2300      	movs	r3, #0
   8382a:	f04f 0000 	mov.w	r0, #0
   8382e:	2100      	movs	r1, #0
   83830:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   83834:	f8cd c014 	str.w	ip, [sp, #20]
   83838:	9107      	str	r1, [sp, #28]
   8383a:	f1bc 0f00 	cmp.w	ip, #0
   8383e:	bfa8      	it	ge
   83840:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83844:	ea54 0205 	orrs.w	r2, r4, r5
   83848:	f040 80ad 	bne.w	839a6 <_vfiprintf_r+0x39e>
   8384c:	f1bc 0f00 	cmp.w	ip, #0
   83850:	f040 80a9 	bne.w	839a6 <_vfiprintf_r+0x39e>
   83854:	2b00      	cmp	r3, #0
   83856:	f040 83c0 	bne.w	83fda <_vfiprintf_r+0x9d2>
   8385a:	f01a 0f01 	tst.w	sl, #1
   8385e:	f000 83bc 	beq.w	83fda <_vfiprintf_r+0x9d2>
   83862:	2330      	movs	r3, #48	; 0x30
   83864:	af30      	add	r7, sp, #192	; 0xc0
   83866:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8386a:	ebc7 0409 	rsb	r4, r7, r9
   8386e:	9405      	str	r4, [sp, #20]
   83870:	f8dd b014 	ldr.w	fp, [sp, #20]
   83874:	9c07      	ldr	r4, [sp, #28]
   83876:	45e3      	cmp	fp, ip
   83878:	bfb8      	it	lt
   8387a:	46e3      	movlt	fp, ip
   8387c:	f8cd b00c 	str.w	fp, [sp, #12]
   83880:	b11c      	cbz	r4, 8388a <_vfiprintf_r+0x282>
   83882:	f10b 0b01 	add.w	fp, fp, #1
   83886:	f8cd b00c 	str.w	fp, [sp, #12]
   8388a:	f01a 0502 	ands.w	r5, sl, #2
   8388e:	9507      	str	r5, [sp, #28]
   83890:	d005      	beq.n	8389e <_vfiprintf_r+0x296>
   83892:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83896:	f10b 0b02 	add.w	fp, fp, #2
   8389a:	f8cd b00c 	str.w	fp, [sp, #12]
   8389e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   838a2:	930b      	str	r3, [sp, #44]	; 0x2c
   838a4:	f040 821b 	bne.w	83cde <_vfiprintf_r+0x6d6>
   838a8:	9d04      	ldr	r5, [sp, #16]
   838aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
   838ae:	ebcb 0405 	rsb	r4, fp, r5
   838b2:	2c00      	cmp	r4, #0
   838b4:	f340 8213 	ble.w	83cde <_vfiprintf_r+0x6d6>
   838b8:	2c10      	cmp	r4, #16
   838ba:	f340 8489 	ble.w	841d0 <_vfiprintf_r+0xbc8>
   838be:	4dbe      	ldr	r5, [pc, #760]	; (83bb8 <_vfiprintf_r+0x5b0>)
   838c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   838c2:	462b      	mov	r3, r5
   838c4:	9814      	ldr	r0, [sp, #80]	; 0x50
   838c6:	4625      	mov	r5, r4
   838c8:	f04f 0b10 	mov.w	fp, #16
   838cc:	4664      	mov	r4, ip
   838ce:	46b4      	mov	ip, r6
   838d0:	461e      	mov	r6, r3
   838d2:	e006      	b.n	838e2 <_vfiprintf_r+0x2da>
   838d4:	1c83      	adds	r3, r0, #2
   838d6:	f10c 0c08 	add.w	ip, ip, #8
   838da:	4608      	mov	r0, r1
   838dc:	3d10      	subs	r5, #16
   838de:	2d10      	cmp	r5, #16
   838e0:	dd11      	ble.n	83906 <_vfiprintf_r+0x2fe>
   838e2:	1c41      	adds	r1, r0, #1
   838e4:	3210      	adds	r2, #16
   838e6:	2907      	cmp	r1, #7
   838e8:	9215      	str	r2, [sp, #84]	; 0x54
   838ea:	e88c 0840 	stmia.w	ip, {r6, fp}
   838ee:	9114      	str	r1, [sp, #80]	; 0x50
   838f0:	ddf0      	ble.n	838d4 <_vfiprintf_r+0x2cc>
   838f2:	2a00      	cmp	r2, #0
   838f4:	f040 81e6 	bne.w	83cc4 <_vfiprintf_r+0x6bc>
   838f8:	3d10      	subs	r5, #16
   838fa:	2d10      	cmp	r5, #16
   838fc:	f04f 0301 	mov.w	r3, #1
   83900:	4610      	mov	r0, r2
   83902:	46cc      	mov	ip, r9
   83904:	dced      	bgt.n	838e2 <_vfiprintf_r+0x2da>
   83906:	4631      	mov	r1, r6
   83908:	4666      	mov	r6, ip
   8390a:	46a4      	mov	ip, r4
   8390c:	462c      	mov	r4, r5
   8390e:	460d      	mov	r5, r1
   83910:	4422      	add	r2, r4
   83912:	2b07      	cmp	r3, #7
   83914:	9215      	str	r2, [sp, #84]	; 0x54
   83916:	6035      	str	r5, [r6, #0]
   83918:	6074      	str	r4, [r6, #4]
   8391a:	9314      	str	r3, [sp, #80]	; 0x50
   8391c:	f300 836d 	bgt.w	83ffa <_vfiprintf_r+0x9f2>
   83920:	3608      	adds	r6, #8
   83922:	1c59      	adds	r1, r3, #1
   83924:	e1de      	b.n	83ce4 <_vfiprintf_r+0x6dc>
   83926:	f01a 0f20 	tst.w	sl, #32
   8392a:	9004      	str	r0, [sp, #16]
   8392c:	46ac      	mov	ip, r5
   8392e:	f000 808d 	beq.w	83a4c <_vfiprintf_r+0x444>
   83932:	9d08      	ldr	r5, [sp, #32]
   83934:	1deb      	adds	r3, r5, #7
   83936:	f023 0307 	bic.w	r3, r3, #7
   8393a:	f103 0b08 	add.w	fp, r3, #8
   8393e:	e9d3 4500 	ldrd	r4, r5, [r3]
   83942:	f8cd b020 	str.w	fp, [sp, #32]
   83946:	2301      	movs	r3, #1
   83948:	e76f      	b.n	8382a <_vfiprintf_r+0x222>
   8394a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   8394e:	f898 3000 	ldrb.w	r3, [r8]
   83952:	e6c6      	b.n	836e2 <_vfiprintf_r+0xda>
   83954:	f04a 0a10 	orr.w	sl, sl, #16
   83958:	f01a 0f20 	tst.w	sl, #32
   8395c:	9004      	str	r0, [sp, #16]
   8395e:	46ac      	mov	ip, r5
   83960:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83964:	f000 80c8 	beq.w	83af8 <_vfiprintf_r+0x4f0>
   83968:	9c08      	ldr	r4, [sp, #32]
   8396a:	1de1      	adds	r1, r4, #7
   8396c:	f021 0107 	bic.w	r1, r1, #7
   83970:	e9d1 2300 	ldrd	r2, r3, [r1]
   83974:	3108      	adds	r1, #8
   83976:	9108      	str	r1, [sp, #32]
   83978:	4614      	mov	r4, r2
   8397a:	461d      	mov	r5, r3
   8397c:	2a00      	cmp	r2, #0
   8397e:	f173 0b00 	sbcs.w	fp, r3, #0
   83982:	f2c0 83ce 	blt.w	84122 <_vfiprintf_r+0xb1a>
   83986:	f1bc 0f00 	cmp.w	ip, #0
   8398a:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8398e:	bfa8      	it	ge
   83990:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83994:	ea54 0205 	orrs.w	r2, r4, r5
   83998:	9007      	str	r0, [sp, #28]
   8399a:	f8cd c014 	str.w	ip, [sp, #20]
   8399e:	f04f 0301 	mov.w	r3, #1
   839a2:	f43f af53 	beq.w	8384c <_vfiprintf_r+0x244>
   839a6:	2b01      	cmp	r3, #1
   839a8:	f000 8319 	beq.w	83fde <_vfiprintf_r+0x9d6>
   839ac:	2b02      	cmp	r3, #2
   839ae:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   839b2:	f040 824c 	bne.w	83e4e <_vfiprintf_r+0x846>
   839b6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   839ba:	4619      	mov	r1, r3
   839bc:	f004 000f 	and.w	r0, r4, #15
   839c0:	0922      	lsrs	r2, r4, #4
   839c2:	f81b 0000 	ldrb.w	r0, [fp, r0]
   839c6:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   839ca:	092b      	lsrs	r3, r5, #4
   839cc:	7008      	strb	r0, [r1, #0]
   839ce:	ea52 0003 	orrs.w	r0, r2, r3
   839d2:	460f      	mov	r7, r1
   839d4:	4614      	mov	r4, r2
   839d6:	461d      	mov	r5, r3
   839d8:	f101 31ff 	add.w	r1, r1, #4294967295
   839dc:	d1ee      	bne.n	839bc <_vfiprintf_r+0x3b4>
   839de:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   839e2:	ebc7 0309 	rsb	r3, r7, r9
   839e6:	9305      	str	r3, [sp, #20]
   839e8:	e742      	b.n	83870 <_vfiprintf_r+0x268>
   839ea:	f04a 0a10 	orr.w	sl, sl, #16
   839ee:	f01a 0320 	ands.w	r3, sl, #32
   839f2:	9004      	str	r0, [sp, #16]
   839f4:	46ac      	mov	ip, r5
   839f6:	f47f af0c 	bne.w	83812 <_vfiprintf_r+0x20a>
   839fa:	f01a 0210 	ands.w	r2, sl, #16
   839fe:	f040 8311 	bne.w	84024 <_vfiprintf_r+0xa1c>
   83a02:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   83a06:	f000 830d 	beq.w	84024 <_vfiprintf_r+0xa1c>
   83a0a:	f8dd b020 	ldr.w	fp, [sp, #32]
   83a0e:	4613      	mov	r3, r2
   83a10:	f8bb 4000 	ldrh.w	r4, [fp]
   83a14:	f10b 0b04 	add.w	fp, fp, #4
   83a18:	2500      	movs	r5, #0
   83a1a:	f8cd b020 	str.w	fp, [sp, #32]
   83a1e:	e704      	b.n	8382a <_vfiprintf_r+0x222>
   83a20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83a24:	2000      	movs	r0, #0
   83a26:	f818 3b01 	ldrb.w	r3, [r8], #1
   83a2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   83a2e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   83a32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83a36:	2a09      	cmp	r2, #9
   83a38:	d9f5      	bls.n	83a26 <_vfiprintf_r+0x41e>
   83a3a:	e654      	b.n	836e6 <_vfiprintf_r+0xde>
   83a3c:	f04a 0a10 	orr.w	sl, sl, #16
   83a40:	f01a 0f20 	tst.w	sl, #32
   83a44:	9004      	str	r0, [sp, #16]
   83a46:	46ac      	mov	ip, r5
   83a48:	f47f af73 	bne.w	83932 <_vfiprintf_r+0x32a>
   83a4c:	f01a 0f10 	tst.w	sl, #16
   83a50:	f040 82ef 	bne.w	84032 <_vfiprintf_r+0xa2a>
   83a54:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83a58:	f000 82eb 	beq.w	84032 <_vfiprintf_r+0xa2a>
   83a5c:	f8dd b020 	ldr.w	fp, [sp, #32]
   83a60:	2500      	movs	r5, #0
   83a62:	f8bb 4000 	ldrh.w	r4, [fp]
   83a66:	f10b 0b04 	add.w	fp, fp, #4
   83a6a:	2301      	movs	r3, #1
   83a6c:	f8cd b020 	str.w	fp, [sp, #32]
   83a70:	e6db      	b.n	8382a <_vfiprintf_r+0x222>
   83a72:	46ac      	mov	ip, r5
   83a74:	4d51      	ldr	r5, [pc, #324]	; (83bbc <_vfiprintf_r+0x5b4>)
   83a76:	f01a 0f20 	tst.w	sl, #32
   83a7a:	9004      	str	r0, [sp, #16]
   83a7c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83a80:	950a      	str	r5, [sp, #40]	; 0x28
   83a82:	f000 80f0 	beq.w	83c66 <_vfiprintf_r+0x65e>
   83a86:	9d08      	ldr	r5, [sp, #32]
   83a88:	1dea      	adds	r2, r5, #7
   83a8a:	f022 0207 	bic.w	r2, r2, #7
   83a8e:	f102 0b08 	add.w	fp, r2, #8
   83a92:	f8cd b020 	str.w	fp, [sp, #32]
   83a96:	e9d2 4500 	ldrd	r4, r5, [r2]
   83a9a:	f01a 0f01 	tst.w	sl, #1
   83a9e:	f000 82aa 	beq.w	83ff6 <_vfiprintf_r+0x9ee>
   83aa2:	ea54 0b05 	orrs.w	fp, r4, r5
   83aa6:	f000 82a6 	beq.w	83ff6 <_vfiprintf_r+0x9ee>
   83aaa:	2230      	movs	r2, #48	; 0x30
   83aac:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83ab0:	f04a 0a02 	orr.w	sl, sl, #2
   83ab4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83ab8:	2302      	movs	r3, #2
   83aba:	e6b6      	b.n	8382a <_vfiprintf_r+0x222>
   83abc:	9b08      	ldr	r3, [sp, #32]
   83abe:	f8dd b020 	ldr.w	fp, [sp, #32]
   83ac2:	681b      	ldr	r3, [r3, #0]
   83ac4:	2401      	movs	r4, #1
   83ac6:	f04f 0500 	mov.w	r5, #0
   83aca:	f10b 0b04 	add.w	fp, fp, #4
   83ace:	9004      	str	r0, [sp, #16]
   83ad0:	9403      	str	r4, [sp, #12]
   83ad2:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83ad6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83ada:	f8cd b020 	str.w	fp, [sp, #32]
   83ade:	9405      	str	r4, [sp, #20]
   83ae0:	af16      	add	r7, sp, #88	; 0x58
   83ae2:	f04f 0c00 	mov.w	ip, #0
   83ae6:	e6d0      	b.n	8388a <_vfiprintf_r+0x282>
   83ae8:	f01a 0f20 	tst.w	sl, #32
   83aec:	9004      	str	r0, [sp, #16]
   83aee:	46ac      	mov	ip, r5
   83af0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83af4:	f47f af38 	bne.w	83968 <_vfiprintf_r+0x360>
   83af8:	f01a 0f10 	tst.w	sl, #16
   83afc:	f040 82a7 	bne.w	8404e <_vfiprintf_r+0xa46>
   83b00:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83b04:	f000 82a3 	beq.w	8404e <_vfiprintf_r+0xa46>
   83b08:	f8dd b020 	ldr.w	fp, [sp, #32]
   83b0c:	f9bb 4000 	ldrsh.w	r4, [fp]
   83b10:	f10b 0b04 	add.w	fp, fp, #4
   83b14:	17e5      	asrs	r5, r4, #31
   83b16:	4622      	mov	r2, r4
   83b18:	462b      	mov	r3, r5
   83b1a:	f8cd b020 	str.w	fp, [sp, #32]
   83b1e:	e72d      	b.n	8397c <_vfiprintf_r+0x374>
   83b20:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   83b24:	f898 3000 	ldrb.w	r3, [r8]
   83b28:	e5db      	b.n	836e2 <_vfiprintf_r+0xda>
   83b2a:	f898 3000 	ldrb.w	r3, [r8]
   83b2e:	4642      	mov	r2, r8
   83b30:	2b6c      	cmp	r3, #108	; 0x6c
   83b32:	bf03      	ittte	eq
   83b34:	f108 0801 	addeq.w	r8, r8, #1
   83b38:	f04a 0a20 	orreq.w	sl, sl, #32
   83b3c:	7853      	ldrbeq	r3, [r2, #1]
   83b3e:	f04a 0a10 	orrne.w	sl, sl, #16
   83b42:	e5ce      	b.n	836e2 <_vfiprintf_r+0xda>
   83b44:	f01a 0f20 	tst.w	sl, #32
   83b48:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83b4c:	f000 82f7 	beq.w	8413e <_vfiprintf_r+0xb36>
   83b50:	9c08      	ldr	r4, [sp, #32]
   83b52:	6821      	ldr	r1, [r4, #0]
   83b54:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83b56:	17e5      	asrs	r5, r4, #31
   83b58:	462b      	mov	r3, r5
   83b5a:	9d08      	ldr	r5, [sp, #32]
   83b5c:	4622      	mov	r2, r4
   83b5e:	3504      	adds	r5, #4
   83b60:	9508      	str	r5, [sp, #32]
   83b62:	e9c1 2300 	strd	r2, r3, [r1]
   83b66:	e582      	b.n	8366e <_vfiprintf_r+0x66>
   83b68:	9c08      	ldr	r4, [sp, #32]
   83b6a:	46ac      	mov	ip, r5
   83b6c:	6827      	ldr	r7, [r4, #0]
   83b6e:	f04f 0500 	mov.w	r5, #0
   83b72:	9004      	str	r0, [sp, #16]
   83b74:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83b78:	3404      	adds	r4, #4
   83b7a:	2f00      	cmp	r7, #0
   83b7c:	f000 8332 	beq.w	841e4 <_vfiprintf_r+0xbdc>
   83b80:	f1bc 0f00 	cmp.w	ip, #0
   83b84:	4638      	mov	r0, r7
   83b86:	f2c0 8307 	blt.w	84198 <_vfiprintf_r+0xb90>
   83b8a:	4662      	mov	r2, ip
   83b8c:	2100      	movs	r1, #0
   83b8e:	f8cd c004 	str.w	ip, [sp, #4]
   83b92:	f001 fbb1 	bl	852f8 <memchr>
   83b96:	f8dd c004 	ldr.w	ip, [sp, #4]
   83b9a:	2800      	cmp	r0, #0
   83b9c:	f000 833a 	beq.w	84214 <_vfiprintf_r+0xc0c>
   83ba0:	1bc0      	subs	r0, r0, r7
   83ba2:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83ba6:	4560      	cmp	r0, ip
   83ba8:	bfa8      	it	ge
   83baa:	4660      	movge	r0, ip
   83bac:	9005      	str	r0, [sp, #20]
   83bae:	9408      	str	r4, [sp, #32]
   83bb0:	9507      	str	r5, [sp, #28]
   83bb2:	f04f 0c00 	mov.w	ip, #0
   83bb6:	e65b      	b.n	83870 <_vfiprintf_r+0x268>
   83bb8:	000862c4 	.word	0x000862c4
   83bbc:	00086284 	.word	0x00086284
   83bc0:	9b08      	ldr	r3, [sp, #32]
   83bc2:	f8dd b020 	ldr.w	fp, [sp, #32]
   83bc6:	9004      	str	r0, [sp, #16]
   83bc8:	48b2      	ldr	r0, [pc, #712]	; (83e94 <_vfiprintf_r+0x88c>)
   83bca:	681c      	ldr	r4, [r3, #0]
   83bcc:	2230      	movs	r2, #48	; 0x30
   83bce:	2378      	movs	r3, #120	; 0x78
   83bd0:	f10b 0b04 	add.w	fp, fp, #4
   83bd4:	46ac      	mov	ip, r5
   83bd6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83bda:	f04a 0a02 	orr.w	sl, sl, #2
   83bde:	f8cd b020 	str.w	fp, [sp, #32]
   83be2:	2500      	movs	r5, #0
   83be4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83be8:	900a      	str	r0, [sp, #40]	; 0x28
   83bea:	2302      	movs	r3, #2
   83bec:	e61d      	b.n	8382a <_vfiprintf_r+0x222>
   83bee:	f04a 0a20 	orr.w	sl, sl, #32
   83bf2:	f898 3000 	ldrb.w	r3, [r8]
   83bf6:	e574      	b.n	836e2 <_vfiprintf_r+0xda>
   83bf8:	f8dd b020 	ldr.w	fp, [sp, #32]
   83bfc:	f8db 0000 	ldr.w	r0, [fp]
   83c00:	f10b 0304 	add.w	r3, fp, #4
   83c04:	2800      	cmp	r0, #0
   83c06:	f6ff adf7 	blt.w	837f8 <_vfiprintf_r+0x1f0>
   83c0a:	9308      	str	r3, [sp, #32]
   83c0c:	f898 3000 	ldrb.w	r3, [r8]
   83c10:	e567      	b.n	836e2 <_vfiprintf_r+0xda>
   83c12:	f898 3000 	ldrb.w	r3, [r8]
   83c16:	212b      	movs	r1, #43	; 0x2b
   83c18:	e563      	b.n	836e2 <_vfiprintf_r+0xda>
   83c1a:	f898 3000 	ldrb.w	r3, [r8]
   83c1e:	f108 0401 	add.w	r4, r8, #1
   83c22:	2b2a      	cmp	r3, #42	; 0x2a
   83c24:	f000 8305 	beq.w	84232 <_vfiprintf_r+0xc2a>
   83c28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83c2c:	2a09      	cmp	r2, #9
   83c2e:	bf98      	it	ls
   83c30:	2500      	movls	r5, #0
   83c32:	f200 82fa 	bhi.w	8422a <_vfiprintf_r+0xc22>
   83c36:	f814 3b01 	ldrb.w	r3, [r4], #1
   83c3a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83c3e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83c42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83c46:	2a09      	cmp	r2, #9
   83c48:	d9f5      	bls.n	83c36 <_vfiprintf_r+0x62e>
   83c4a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   83c4e:	46a0      	mov	r8, r4
   83c50:	e549      	b.n	836e6 <_vfiprintf_r+0xde>
   83c52:	4c90      	ldr	r4, [pc, #576]	; (83e94 <_vfiprintf_r+0x88c>)
   83c54:	f01a 0f20 	tst.w	sl, #32
   83c58:	9004      	str	r0, [sp, #16]
   83c5a:	46ac      	mov	ip, r5
   83c5c:	940a      	str	r4, [sp, #40]	; 0x28
   83c5e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83c62:	f47f af10 	bne.w	83a86 <_vfiprintf_r+0x47e>
   83c66:	f01a 0f10 	tst.w	sl, #16
   83c6a:	f040 81ea 	bne.w	84042 <_vfiprintf_r+0xa3a>
   83c6e:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83c72:	f000 81e6 	beq.w	84042 <_vfiprintf_r+0xa3a>
   83c76:	f8dd b020 	ldr.w	fp, [sp, #32]
   83c7a:	2500      	movs	r5, #0
   83c7c:	f8bb 4000 	ldrh.w	r4, [fp]
   83c80:	f10b 0b04 	add.w	fp, fp, #4
   83c84:	f8cd b020 	str.w	fp, [sp, #32]
   83c88:	e707      	b.n	83a9a <_vfiprintf_r+0x492>
   83c8a:	f898 3000 	ldrb.w	r3, [r8]
   83c8e:	2900      	cmp	r1, #0
   83c90:	f47f ad27 	bne.w	836e2 <_vfiprintf_r+0xda>
   83c94:	2120      	movs	r1, #32
   83c96:	e524      	b.n	836e2 <_vfiprintf_r+0xda>
   83c98:	f04a 0a01 	orr.w	sl, sl, #1
   83c9c:	f898 3000 	ldrb.w	r3, [r8]
   83ca0:	e51f      	b.n	836e2 <_vfiprintf_r+0xda>
   83ca2:	9004      	str	r0, [sp, #16]
   83ca4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83ca8:	2b00      	cmp	r3, #0
   83caa:	f000 80f9 	beq.w	83ea0 <_vfiprintf_r+0x898>
   83cae:	2501      	movs	r5, #1
   83cb0:	f04f 0b00 	mov.w	fp, #0
   83cb4:	9503      	str	r5, [sp, #12]
   83cb6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83cba:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   83cbe:	9505      	str	r5, [sp, #20]
   83cc0:	af16      	add	r7, sp, #88	; 0x58
   83cc2:	e70e      	b.n	83ae2 <_vfiprintf_r+0x4da>
   83cc4:	9806      	ldr	r0, [sp, #24]
   83cc6:	9902      	ldr	r1, [sp, #8]
   83cc8:	aa13      	add	r2, sp, #76	; 0x4c
   83cca:	f7ff fc61 	bl	83590 <__sprint_r.part.0>
   83cce:	2800      	cmp	r0, #0
   83cd0:	f040 80ed 	bne.w	83eae <_vfiprintf_r+0x8a6>
   83cd4:	9814      	ldr	r0, [sp, #80]	; 0x50
   83cd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83cd8:	1c43      	adds	r3, r0, #1
   83cda:	46cc      	mov	ip, r9
   83cdc:	e5fe      	b.n	838dc <_vfiprintf_r+0x2d4>
   83cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83ce0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83ce2:	1c59      	adds	r1, r3, #1
   83ce4:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83ce8:	b168      	cbz	r0, 83d06 <_vfiprintf_r+0x6fe>
   83cea:	3201      	adds	r2, #1
   83cec:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   83cf0:	2301      	movs	r3, #1
   83cf2:	2907      	cmp	r1, #7
   83cf4:	9215      	str	r2, [sp, #84]	; 0x54
   83cf6:	9114      	str	r1, [sp, #80]	; 0x50
   83cf8:	e886 0009 	stmia.w	r6, {r0, r3}
   83cfc:	f300 8160 	bgt.w	83fc0 <_vfiprintf_r+0x9b8>
   83d00:	460b      	mov	r3, r1
   83d02:	3608      	adds	r6, #8
   83d04:	3101      	adds	r1, #1
   83d06:	9c07      	ldr	r4, [sp, #28]
   83d08:	b164      	cbz	r4, 83d24 <_vfiprintf_r+0x71c>
   83d0a:	3202      	adds	r2, #2
   83d0c:	a812      	add	r0, sp, #72	; 0x48
   83d0e:	2302      	movs	r3, #2
   83d10:	2907      	cmp	r1, #7
   83d12:	9215      	str	r2, [sp, #84]	; 0x54
   83d14:	9114      	str	r1, [sp, #80]	; 0x50
   83d16:	e886 0009 	stmia.w	r6, {r0, r3}
   83d1a:	f300 8157 	bgt.w	83fcc <_vfiprintf_r+0x9c4>
   83d1e:	460b      	mov	r3, r1
   83d20:	3608      	adds	r6, #8
   83d22:	3101      	adds	r1, #1
   83d24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83d26:	2d80      	cmp	r5, #128	; 0x80
   83d28:	f000 8101 	beq.w	83f2e <_vfiprintf_r+0x926>
   83d2c:	9d05      	ldr	r5, [sp, #20]
   83d2e:	ebc5 040c 	rsb	r4, r5, ip
   83d32:	2c00      	cmp	r4, #0
   83d34:	dd2f      	ble.n	83d96 <_vfiprintf_r+0x78e>
   83d36:	2c10      	cmp	r4, #16
   83d38:	4d57      	ldr	r5, [pc, #348]	; (83e98 <_vfiprintf_r+0x890>)
   83d3a:	dd22      	ble.n	83d82 <_vfiprintf_r+0x77a>
   83d3c:	4630      	mov	r0, r6
   83d3e:	f04f 0b10 	mov.w	fp, #16
   83d42:	462e      	mov	r6, r5
   83d44:	4625      	mov	r5, r4
   83d46:	9c06      	ldr	r4, [sp, #24]
   83d48:	e006      	b.n	83d58 <_vfiprintf_r+0x750>
   83d4a:	f103 0c02 	add.w	ip, r3, #2
   83d4e:	3008      	adds	r0, #8
   83d50:	460b      	mov	r3, r1
   83d52:	3d10      	subs	r5, #16
   83d54:	2d10      	cmp	r5, #16
   83d56:	dd10      	ble.n	83d7a <_vfiprintf_r+0x772>
   83d58:	1c59      	adds	r1, r3, #1
   83d5a:	3210      	adds	r2, #16
   83d5c:	2907      	cmp	r1, #7
   83d5e:	9215      	str	r2, [sp, #84]	; 0x54
   83d60:	e880 0840 	stmia.w	r0, {r6, fp}
   83d64:	9114      	str	r1, [sp, #80]	; 0x50
   83d66:	ddf0      	ble.n	83d4a <_vfiprintf_r+0x742>
   83d68:	2a00      	cmp	r2, #0
   83d6a:	d163      	bne.n	83e34 <_vfiprintf_r+0x82c>
   83d6c:	3d10      	subs	r5, #16
   83d6e:	2d10      	cmp	r5, #16
   83d70:	f04f 0c01 	mov.w	ip, #1
   83d74:	4613      	mov	r3, r2
   83d76:	4648      	mov	r0, r9
   83d78:	dcee      	bgt.n	83d58 <_vfiprintf_r+0x750>
   83d7a:	462c      	mov	r4, r5
   83d7c:	4661      	mov	r1, ip
   83d7e:	4635      	mov	r5, r6
   83d80:	4606      	mov	r6, r0
   83d82:	4422      	add	r2, r4
   83d84:	2907      	cmp	r1, #7
   83d86:	9215      	str	r2, [sp, #84]	; 0x54
   83d88:	6035      	str	r5, [r6, #0]
   83d8a:	6074      	str	r4, [r6, #4]
   83d8c:	9114      	str	r1, [sp, #80]	; 0x50
   83d8e:	f300 80c1 	bgt.w	83f14 <_vfiprintf_r+0x90c>
   83d92:	3608      	adds	r6, #8
   83d94:	3101      	adds	r1, #1
   83d96:	9d05      	ldr	r5, [sp, #20]
   83d98:	2907      	cmp	r1, #7
   83d9a:	442a      	add	r2, r5
   83d9c:	9215      	str	r2, [sp, #84]	; 0x54
   83d9e:	6037      	str	r7, [r6, #0]
   83da0:	6075      	str	r5, [r6, #4]
   83da2:	9114      	str	r1, [sp, #80]	; 0x50
   83da4:	f340 80c1 	ble.w	83f2a <_vfiprintf_r+0x922>
   83da8:	2a00      	cmp	r2, #0
   83daa:	f040 8130 	bne.w	8400e <_vfiprintf_r+0xa06>
   83dae:	9214      	str	r2, [sp, #80]	; 0x50
   83db0:	464e      	mov	r6, r9
   83db2:	f01a 0f04 	tst.w	sl, #4
   83db6:	f000 808b 	beq.w	83ed0 <_vfiprintf_r+0x8c8>
   83dba:	9d04      	ldr	r5, [sp, #16]
   83dbc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83dc0:	ebcb 0405 	rsb	r4, fp, r5
   83dc4:	2c00      	cmp	r4, #0
   83dc6:	f340 8083 	ble.w	83ed0 <_vfiprintf_r+0x8c8>
   83dca:	2c10      	cmp	r4, #16
   83dcc:	f340 821e 	ble.w	8420c <_vfiprintf_r+0xc04>
   83dd0:	9914      	ldr	r1, [sp, #80]	; 0x50
   83dd2:	4d32      	ldr	r5, [pc, #200]	; (83e9c <_vfiprintf_r+0x894>)
   83dd4:	2710      	movs	r7, #16
   83dd6:	f8dd a018 	ldr.w	sl, [sp, #24]
   83dda:	f8dd b008 	ldr.w	fp, [sp, #8]
   83dde:	e005      	b.n	83dec <_vfiprintf_r+0x7e4>
   83de0:	1c88      	adds	r0, r1, #2
   83de2:	3608      	adds	r6, #8
   83de4:	4619      	mov	r1, r3
   83de6:	3c10      	subs	r4, #16
   83de8:	2c10      	cmp	r4, #16
   83dea:	dd10      	ble.n	83e0e <_vfiprintf_r+0x806>
   83dec:	1c4b      	adds	r3, r1, #1
   83dee:	3210      	adds	r2, #16
   83df0:	2b07      	cmp	r3, #7
   83df2:	9215      	str	r2, [sp, #84]	; 0x54
   83df4:	e886 00a0 	stmia.w	r6, {r5, r7}
   83df8:	9314      	str	r3, [sp, #80]	; 0x50
   83dfa:	ddf1      	ble.n	83de0 <_vfiprintf_r+0x7d8>
   83dfc:	2a00      	cmp	r2, #0
   83dfe:	d17d      	bne.n	83efc <_vfiprintf_r+0x8f4>
   83e00:	3c10      	subs	r4, #16
   83e02:	2c10      	cmp	r4, #16
   83e04:	f04f 0001 	mov.w	r0, #1
   83e08:	4611      	mov	r1, r2
   83e0a:	464e      	mov	r6, r9
   83e0c:	dcee      	bgt.n	83dec <_vfiprintf_r+0x7e4>
   83e0e:	4422      	add	r2, r4
   83e10:	2807      	cmp	r0, #7
   83e12:	9215      	str	r2, [sp, #84]	; 0x54
   83e14:	6035      	str	r5, [r6, #0]
   83e16:	6074      	str	r4, [r6, #4]
   83e18:	9014      	str	r0, [sp, #80]	; 0x50
   83e1a:	dd59      	ble.n	83ed0 <_vfiprintf_r+0x8c8>
   83e1c:	2a00      	cmp	r2, #0
   83e1e:	d14f      	bne.n	83ec0 <_vfiprintf_r+0x8b8>
   83e20:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83e22:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83e26:	9d04      	ldr	r5, [sp, #16]
   83e28:	45ab      	cmp	fp, r5
   83e2a:	bfac      	ite	ge
   83e2c:	445c      	addge	r4, fp
   83e2e:	1964      	addlt	r4, r4, r5
   83e30:	9409      	str	r4, [sp, #36]	; 0x24
   83e32:	e05e      	b.n	83ef2 <_vfiprintf_r+0x8ea>
   83e34:	4620      	mov	r0, r4
   83e36:	9902      	ldr	r1, [sp, #8]
   83e38:	aa13      	add	r2, sp, #76	; 0x4c
   83e3a:	f7ff fba9 	bl	83590 <__sprint_r.part.0>
   83e3e:	2800      	cmp	r0, #0
   83e40:	d135      	bne.n	83eae <_vfiprintf_r+0x8a6>
   83e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83e44:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83e46:	f103 0c01 	add.w	ip, r3, #1
   83e4a:	4648      	mov	r0, r9
   83e4c:	e781      	b.n	83d52 <_vfiprintf_r+0x74a>
   83e4e:	08e0      	lsrs	r0, r4, #3
   83e50:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   83e54:	f004 0207 	and.w	r2, r4, #7
   83e58:	08e9      	lsrs	r1, r5, #3
   83e5a:	3230      	adds	r2, #48	; 0x30
   83e5c:	ea50 0b01 	orrs.w	fp, r0, r1
   83e60:	461f      	mov	r7, r3
   83e62:	701a      	strb	r2, [r3, #0]
   83e64:	4604      	mov	r4, r0
   83e66:	460d      	mov	r5, r1
   83e68:	f103 33ff 	add.w	r3, r3, #4294967295
   83e6c:	d1ef      	bne.n	83e4e <_vfiprintf_r+0x846>
   83e6e:	f01a 0f01 	tst.w	sl, #1
   83e72:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   83e76:	4639      	mov	r1, r7
   83e78:	f000 80b9 	beq.w	83fee <_vfiprintf_r+0x9e6>
   83e7c:	2a30      	cmp	r2, #48	; 0x30
   83e7e:	f43f acf4 	beq.w	8386a <_vfiprintf_r+0x262>
   83e82:	461f      	mov	r7, r3
   83e84:	ebc7 0509 	rsb	r5, r7, r9
   83e88:	2330      	movs	r3, #48	; 0x30
   83e8a:	9505      	str	r5, [sp, #20]
   83e8c:	f801 3c01 	strb.w	r3, [r1, #-1]
   83e90:	e4ee      	b.n	83870 <_vfiprintf_r+0x268>
   83e92:	bf00      	nop
   83e94:	00086298 	.word	0x00086298
   83e98:	000862b4 	.word	0x000862b4
   83e9c:	000862c4 	.word	0x000862c4
   83ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83ea2:	b123      	cbz	r3, 83eae <_vfiprintf_r+0x8a6>
   83ea4:	9806      	ldr	r0, [sp, #24]
   83ea6:	9902      	ldr	r1, [sp, #8]
   83ea8:	aa13      	add	r2, sp, #76	; 0x4c
   83eaa:	f7ff fb71 	bl	83590 <__sprint_r.part.0>
   83eae:	9c02      	ldr	r4, [sp, #8]
   83eb0:	89a3      	ldrh	r3, [r4, #12]
   83eb2:	065b      	lsls	r3, r3, #25
   83eb4:	f53f ac98 	bmi.w	837e8 <_vfiprintf_r+0x1e0>
   83eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
   83eba:	b031      	add	sp, #196	; 0xc4
   83ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ec0:	9806      	ldr	r0, [sp, #24]
   83ec2:	9902      	ldr	r1, [sp, #8]
   83ec4:	aa13      	add	r2, sp, #76	; 0x4c
   83ec6:	f7ff fb63 	bl	83590 <__sprint_r.part.0>
   83eca:	2800      	cmp	r0, #0
   83ecc:	d1ef      	bne.n	83eae <_vfiprintf_r+0x8a6>
   83ece:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83ed0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83ed2:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83ed6:	9d04      	ldr	r5, [sp, #16]
   83ed8:	45ab      	cmp	fp, r5
   83eda:	bfac      	ite	ge
   83edc:	445c      	addge	r4, fp
   83ede:	1964      	addlt	r4, r4, r5
   83ee0:	9409      	str	r4, [sp, #36]	; 0x24
   83ee2:	b132      	cbz	r2, 83ef2 <_vfiprintf_r+0x8ea>
   83ee4:	9806      	ldr	r0, [sp, #24]
   83ee6:	9902      	ldr	r1, [sp, #8]
   83ee8:	aa13      	add	r2, sp, #76	; 0x4c
   83eea:	f7ff fb51 	bl	83590 <__sprint_r.part.0>
   83eee:	2800      	cmp	r0, #0
   83ef0:	d1dd      	bne.n	83eae <_vfiprintf_r+0x8a6>
   83ef2:	2000      	movs	r0, #0
   83ef4:	9014      	str	r0, [sp, #80]	; 0x50
   83ef6:	464e      	mov	r6, r9
   83ef8:	f7ff bbb9 	b.w	8366e <_vfiprintf_r+0x66>
   83efc:	4650      	mov	r0, sl
   83efe:	4659      	mov	r1, fp
   83f00:	aa13      	add	r2, sp, #76	; 0x4c
   83f02:	f7ff fb45 	bl	83590 <__sprint_r.part.0>
   83f06:	2800      	cmp	r0, #0
   83f08:	d1d1      	bne.n	83eae <_vfiprintf_r+0x8a6>
   83f0a:	9914      	ldr	r1, [sp, #80]	; 0x50
   83f0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83f0e:	1c48      	adds	r0, r1, #1
   83f10:	464e      	mov	r6, r9
   83f12:	e768      	b.n	83de6 <_vfiprintf_r+0x7de>
   83f14:	2a00      	cmp	r2, #0
   83f16:	f040 80f7 	bne.w	84108 <_vfiprintf_r+0xb00>
   83f1a:	9c05      	ldr	r4, [sp, #20]
   83f1c:	2301      	movs	r3, #1
   83f1e:	9720      	str	r7, [sp, #128]	; 0x80
   83f20:	9421      	str	r4, [sp, #132]	; 0x84
   83f22:	9415      	str	r4, [sp, #84]	; 0x54
   83f24:	4622      	mov	r2, r4
   83f26:	9314      	str	r3, [sp, #80]	; 0x50
   83f28:	464e      	mov	r6, r9
   83f2a:	3608      	adds	r6, #8
   83f2c:	e741      	b.n	83db2 <_vfiprintf_r+0x7aa>
   83f2e:	9d04      	ldr	r5, [sp, #16]
   83f30:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83f34:	ebcb 0405 	rsb	r4, fp, r5
   83f38:	2c00      	cmp	r4, #0
   83f3a:	f77f aef7 	ble.w	83d2c <_vfiprintf_r+0x724>
   83f3e:	2c10      	cmp	r4, #16
   83f40:	4da6      	ldr	r5, [pc, #664]	; (841dc <_vfiprintf_r+0xbd4>)
   83f42:	f340 8170 	ble.w	84226 <_vfiprintf_r+0xc1e>
   83f46:	4629      	mov	r1, r5
   83f48:	f04f 0b10 	mov.w	fp, #16
   83f4c:	4625      	mov	r5, r4
   83f4e:	4664      	mov	r4, ip
   83f50:	46b4      	mov	ip, r6
   83f52:	460e      	mov	r6, r1
   83f54:	e006      	b.n	83f64 <_vfiprintf_r+0x95c>
   83f56:	1c98      	adds	r0, r3, #2
   83f58:	f10c 0c08 	add.w	ip, ip, #8
   83f5c:	460b      	mov	r3, r1
   83f5e:	3d10      	subs	r5, #16
   83f60:	2d10      	cmp	r5, #16
   83f62:	dd0f      	ble.n	83f84 <_vfiprintf_r+0x97c>
   83f64:	1c59      	adds	r1, r3, #1
   83f66:	3210      	adds	r2, #16
   83f68:	2907      	cmp	r1, #7
   83f6a:	9215      	str	r2, [sp, #84]	; 0x54
   83f6c:	e88c 0840 	stmia.w	ip, {r6, fp}
   83f70:	9114      	str	r1, [sp, #80]	; 0x50
   83f72:	ddf0      	ble.n	83f56 <_vfiprintf_r+0x94e>
   83f74:	b9ba      	cbnz	r2, 83fa6 <_vfiprintf_r+0x99e>
   83f76:	3d10      	subs	r5, #16
   83f78:	2d10      	cmp	r5, #16
   83f7a:	f04f 0001 	mov.w	r0, #1
   83f7e:	4613      	mov	r3, r2
   83f80:	46cc      	mov	ip, r9
   83f82:	dcef      	bgt.n	83f64 <_vfiprintf_r+0x95c>
   83f84:	4633      	mov	r3, r6
   83f86:	4666      	mov	r6, ip
   83f88:	46a4      	mov	ip, r4
   83f8a:	462c      	mov	r4, r5
   83f8c:	461d      	mov	r5, r3
   83f8e:	4422      	add	r2, r4
   83f90:	2807      	cmp	r0, #7
   83f92:	9215      	str	r2, [sp, #84]	; 0x54
   83f94:	6035      	str	r5, [r6, #0]
   83f96:	6074      	str	r4, [r6, #4]
   83f98:	9014      	str	r0, [sp, #80]	; 0x50
   83f9a:	f300 80af 	bgt.w	840fc <_vfiprintf_r+0xaf4>
   83f9e:	3608      	adds	r6, #8
   83fa0:	1c41      	adds	r1, r0, #1
   83fa2:	4603      	mov	r3, r0
   83fa4:	e6c2      	b.n	83d2c <_vfiprintf_r+0x724>
   83fa6:	9806      	ldr	r0, [sp, #24]
   83fa8:	9902      	ldr	r1, [sp, #8]
   83faa:	aa13      	add	r2, sp, #76	; 0x4c
   83fac:	f7ff faf0 	bl	83590 <__sprint_r.part.0>
   83fb0:	2800      	cmp	r0, #0
   83fb2:	f47f af7c 	bne.w	83eae <_vfiprintf_r+0x8a6>
   83fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83fb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83fba:	1c58      	adds	r0, r3, #1
   83fbc:	46cc      	mov	ip, r9
   83fbe:	e7ce      	b.n	83f5e <_vfiprintf_r+0x956>
   83fc0:	2a00      	cmp	r2, #0
   83fc2:	d179      	bne.n	840b8 <_vfiprintf_r+0xab0>
   83fc4:	4619      	mov	r1, r3
   83fc6:	464e      	mov	r6, r9
   83fc8:	4613      	mov	r3, r2
   83fca:	e69c      	b.n	83d06 <_vfiprintf_r+0x6fe>
   83fcc:	2a00      	cmp	r2, #0
   83fce:	f040 8084 	bne.w	840da <_vfiprintf_r+0xad2>
   83fd2:	2101      	movs	r1, #1
   83fd4:	4613      	mov	r3, r2
   83fd6:	464e      	mov	r6, r9
   83fd8:	e6a4      	b.n	83d24 <_vfiprintf_r+0x71c>
   83fda:	464f      	mov	r7, r9
   83fdc:	e448      	b.n	83870 <_vfiprintf_r+0x268>
   83fde:	2d00      	cmp	r5, #0
   83fe0:	bf08      	it	eq
   83fe2:	2c0a      	cmpeq	r4, #10
   83fe4:	d246      	bcs.n	84074 <_vfiprintf_r+0xa6c>
   83fe6:	3430      	adds	r4, #48	; 0x30
   83fe8:	af30      	add	r7, sp, #192	; 0xc0
   83fea:	f807 4d41 	strb.w	r4, [r7, #-65]!
   83fee:	ebc7 0309 	rsb	r3, r7, r9
   83ff2:	9305      	str	r3, [sp, #20]
   83ff4:	e43c      	b.n	83870 <_vfiprintf_r+0x268>
   83ff6:	2302      	movs	r3, #2
   83ff8:	e417      	b.n	8382a <_vfiprintf_r+0x222>
   83ffa:	2a00      	cmp	r2, #0
   83ffc:	f040 80af 	bne.w	8415e <_vfiprintf_r+0xb56>
   84000:	4613      	mov	r3, r2
   84002:	2101      	movs	r1, #1
   84004:	464e      	mov	r6, r9
   84006:	e66d      	b.n	83ce4 <_vfiprintf_r+0x6dc>
   84008:	4644      	mov	r4, r8
   8400a:	f7ff bb58 	b.w	836be <_vfiprintf_r+0xb6>
   8400e:	9806      	ldr	r0, [sp, #24]
   84010:	9902      	ldr	r1, [sp, #8]
   84012:	aa13      	add	r2, sp, #76	; 0x4c
   84014:	f7ff fabc 	bl	83590 <__sprint_r.part.0>
   84018:	2800      	cmp	r0, #0
   8401a:	f47f af48 	bne.w	83eae <_vfiprintf_r+0x8a6>
   8401e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84020:	464e      	mov	r6, r9
   84022:	e6c6      	b.n	83db2 <_vfiprintf_r+0x7aa>
   84024:	9d08      	ldr	r5, [sp, #32]
   84026:	682c      	ldr	r4, [r5, #0]
   84028:	3504      	adds	r5, #4
   8402a:	9508      	str	r5, [sp, #32]
   8402c:	2500      	movs	r5, #0
   8402e:	f7ff bbfc 	b.w	8382a <_vfiprintf_r+0x222>
   84032:	9d08      	ldr	r5, [sp, #32]
   84034:	2301      	movs	r3, #1
   84036:	682c      	ldr	r4, [r5, #0]
   84038:	3504      	adds	r5, #4
   8403a:	9508      	str	r5, [sp, #32]
   8403c:	2500      	movs	r5, #0
   8403e:	f7ff bbf4 	b.w	8382a <_vfiprintf_r+0x222>
   84042:	9d08      	ldr	r5, [sp, #32]
   84044:	682c      	ldr	r4, [r5, #0]
   84046:	3504      	adds	r5, #4
   84048:	9508      	str	r5, [sp, #32]
   8404a:	2500      	movs	r5, #0
   8404c:	e525      	b.n	83a9a <_vfiprintf_r+0x492>
   8404e:	9d08      	ldr	r5, [sp, #32]
   84050:	682c      	ldr	r4, [r5, #0]
   84052:	3504      	adds	r5, #4
   84054:	9508      	str	r5, [sp, #32]
   84056:	17e5      	asrs	r5, r4, #31
   84058:	4622      	mov	r2, r4
   8405a:	462b      	mov	r3, r5
   8405c:	e48e      	b.n	8397c <_vfiprintf_r+0x374>
   8405e:	9806      	ldr	r0, [sp, #24]
   84060:	9902      	ldr	r1, [sp, #8]
   84062:	aa13      	add	r2, sp, #76	; 0x4c
   84064:	f7ff fa94 	bl	83590 <__sprint_r.part.0>
   84068:	2800      	cmp	r0, #0
   8406a:	f47f af20 	bne.w	83eae <_vfiprintf_r+0x8a6>
   8406e:	464e      	mov	r6, r9
   84070:	f7ff bb9a 	b.w	837a8 <_vfiprintf_r+0x1a0>
   84074:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   84078:	9603      	str	r6, [sp, #12]
   8407a:	465e      	mov	r6, fp
   8407c:	46e3      	mov	fp, ip
   8407e:	4620      	mov	r0, r4
   84080:	4629      	mov	r1, r5
   84082:	220a      	movs	r2, #10
   84084:	2300      	movs	r3, #0
   84086:	f001 fdb9 	bl	85bfc <__aeabi_uldivmod>
   8408a:	3230      	adds	r2, #48	; 0x30
   8408c:	7032      	strb	r2, [r6, #0]
   8408e:	4620      	mov	r0, r4
   84090:	4629      	mov	r1, r5
   84092:	220a      	movs	r2, #10
   84094:	2300      	movs	r3, #0
   84096:	f001 fdb1 	bl	85bfc <__aeabi_uldivmod>
   8409a:	4604      	mov	r4, r0
   8409c:	460d      	mov	r5, r1
   8409e:	ea54 0005 	orrs.w	r0, r4, r5
   840a2:	4637      	mov	r7, r6
   840a4:	f106 36ff 	add.w	r6, r6, #4294967295
   840a8:	d1e9      	bne.n	8407e <_vfiprintf_r+0xa76>
   840aa:	ebc7 0309 	rsb	r3, r7, r9
   840ae:	46dc      	mov	ip, fp
   840b0:	9e03      	ldr	r6, [sp, #12]
   840b2:	9305      	str	r3, [sp, #20]
   840b4:	f7ff bbdc 	b.w	83870 <_vfiprintf_r+0x268>
   840b8:	9806      	ldr	r0, [sp, #24]
   840ba:	9902      	ldr	r1, [sp, #8]
   840bc:	aa13      	add	r2, sp, #76	; 0x4c
   840be:	f8cd c004 	str.w	ip, [sp, #4]
   840c2:	f7ff fa65 	bl	83590 <__sprint_r.part.0>
   840c6:	f8dd c004 	ldr.w	ip, [sp, #4]
   840ca:	2800      	cmp	r0, #0
   840cc:	f47f aeef 	bne.w	83eae <_vfiprintf_r+0x8a6>
   840d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   840d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   840d4:	1c59      	adds	r1, r3, #1
   840d6:	464e      	mov	r6, r9
   840d8:	e615      	b.n	83d06 <_vfiprintf_r+0x6fe>
   840da:	9806      	ldr	r0, [sp, #24]
   840dc:	9902      	ldr	r1, [sp, #8]
   840de:	aa13      	add	r2, sp, #76	; 0x4c
   840e0:	f8cd c004 	str.w	ip, [sp, #4]
   840e4:	f7ff fa54 	bl	83590 <__sprint_r.part.0>
   840e8:	f8dd c004 	ldr.w	ip, [sp, #4]
   840ec:	2800      	cmp	r0, #0
   840ee:	f47f aede 	bne.w	83eae <_vfiprintf_r+0x8a6>
   840f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   840f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   840f6:	1c59      	adds	r1, r3, #1
   840f8:	464e      	mov	r6, r9
   840fa:	e613      	b.n	83d24 <_vfiprintf_r+0x71c>
   840fc:	2a00      	cmp	r2, #0
   840fe:	d156      	bne.n	841ae <_vfiprintf_r+0xba6>
   84100:	2101      	movs	r1, #1
   84102:	4613      	mov	r3, r2
   84104:	464e      	mov	r6, r9
   84106:	e611      	b.n	83d2c <_vfiprintf_r+0x724>
   84108:	9806      	ldr	r0, [sp, #24]
   8410a:	9902      	ldr	r1, [sp, #8]
   8410c:	aa13      	add	r2, sp, #76	; 0x4c
   8410e:	f7ff fa3f 	bl	83590 <__sprint_r.part.0>
   84112:	2800      	cmp	r0, #0
   84114:	f47f aecb 	bne.w	83eae <_vfiprintf_r+0x8a6>
   84118:	9914      	ldr	r1, [sp, #80]	; 0x50
   8411a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8411c:	3101      	adds	r1, #1
   8411e:	464e      	mov	r6, r9
   84120:	e639      	b.n	83d96 <_vfiprintf_r+0x78e>
   84122:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   84126:	4264      	negs	r4, r4
   84128:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8412c:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84130:	f8cd b01c 	str.w	fp, [sp, #28]
   84134:	f8cd c014 	str.w	ip, [sp, #20]
   84138:	2301      	movs	r3, #1
   8413a:	f7ff bb7e 	b.w	8383a <_vfiprintf_r+0x232>
   8413e:	f01a 0f10 	tst.w	sl, #16
   84142:	d11d      	bne.n	84180 <_vfiprintf_r+0xb78>
   84144:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84148:	d058      	beq.n	841fc <_vfiprintf_r+0xbf4>
   8414a:	9d08      	ldr	r5, [sp, #32]
   8414c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   84150:	682b      	ldr	r3, [r5, #0]
   84152:	3504      	adds	r5, #4
   84154:	9508      	str	r5, [sp, #32]
   84156:	f8a3 b000 	strh.w	fp, [r3]
   8415a:	f7ff ba88 	b.w	8366e <_vfiprintf_r+0x66>
   8415e:	9806      	ldr	r0, [sp, #24]
   84160:	9902      	ldr	r1, [sp, #8]
   84162:	aa13      	add	r2, sp, #76	; 0x4c
   84164:	f8cd c004 	str.w	ip, [sp, #4]
   84168:	f7ff fa12 	bl	83590 <__sprint_r.part.0>
   8416c:	f8dd c004 	ldr.w	ip, [sp, #4]
   84170:	2800      	cmp	r0, #0
   84172:	f47f ae9c 	bne.w	83eae <_vfiprintf_r+0x8a6>
   84176:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84178:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8417a:	1c59      	adds	r1, r3, #1
   8417c:	464e      	mov	r6, r9
   8417e:	e5b1      	b.n	83ce4 <_vfiprintf_r+0x6dc>
   84180:	f8dd b020 	ldr.w	fp, [sp, #32]
   84184:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84186:	f8db 3000 	ldr.w	r3, [fp]
   8418a:	f10b 0b04 	add.w	fp, fp, #4
   8418e:	f8cd b020 	str.w	fp, [sp, #32]
   84192:	601c      	str	r4, [r3, #0]
   84194:	f7ff ba6b 	b.w	8366e <_vfiprintf_r+0x66>
   84198:	9408      	str	r4, [sp, #32]
   8419a:	f7ff f997 	bl	834cc <strlen>
   8419e:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   841a2:	9005      	str	r0, [sp, #20]
   841a4:	9407      	str	r4, [sp, #28]
   841a6:	f04f 0c00 	mov.w	ip, #0
   841aa:	f7ff bb61 	b.w	83870 <_vfiprintf_r+0x268>
   841ae:	9806      	ldr	r0, [sp, #24]
   841b0:	9902      	ldr	r1, [sp, #8]
   841b2:	aa13      	add	r2, sp, #76	; 0x4c
   841b4:	f8cd c004 	str.w	ip, [sp, #4]
   841b8:	f7ff f9ea 	bl	83590 <__sprint_r.part.0>
   841bc:	f8dd c004 	ldr.w	ip, [sp, #4]
   841c0:	2800      	cmp	r0, #0
   841c2:	f47f ae74 	bne.w	83eae <_vfiprintf_r+0x8a6>
   841c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   841c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   841ca:	1c59      	adds	r1, r3, #1
   841cc:	464e      	mov	r6, r9
   841ce:	e5ad      	b.n	83d2c <_vfiprintf_r+0x724>
   841d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   841d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   841d4:	3301      	adds	r3, #1
   841d6:	4d02      	ldr	r5, [pc, #8]	; (841e0 <_vfiprintf_r+0xbd8>)
   841d8:	f7ff bb9a 	b.w	83910 <_vfiprintf_r+0x308>
   841dc:	000862b4 	.word	0x000862b4
   841e0:	000862c4 	.word	0x000862c4
   841e4:	f1bc 0f06 	cmp.w	ip, #6
   841e8:	bf34      	ite	cc
   841ea:	4663      	movcc	r3, ip
   841ec:	2306      	movcs	r3, #6
   841ee:	9408      	str	r4, [sp, #32]
   841f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   841f4:	9305      	str	r3, [sp, #20]
   841f6:	9403      	str	r4, [sp, #12]
   841f8:	4f16      	ldr	r7, [pc, #88]	; (84254 <_vfiprintf_r+0xc4c>)
   841fa:	e472      	b.n	83ae2 <_vfiprintf_r+0x4da>
   841fc:	9c08      	ldr	r4, [sp, #32]
   841fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84200:	6823      	ldr	r3, [r4, #0]
   84202:	3404      	adds	r4, #4
   84204:	9408      	str	r4, [sp, #32]
   84206:	601d      	str	r5, [r3, #0]
   84208:	f7ff ba31 	b.w	8366e <_vfiprintf_r+0x66>
   8420c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8420e:	4d12      	ldr	r5, [pc, #72]	; (84258 <_vfiprintf_r+0xc50>)
   84210:	3001      	adds	r0, #1
   84212:	e5fc      	b.n	83e0e <_vfiprintf_r+0x806>
   84214:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   84218:	f8cd c014 	str.w	ip, [sp, #20]
   8421c:	9507      	str	r5, [sp, #28]
   8421e:	9408      	str	r4, [sp, #32]
   84220:	4684      	mov	ip, r0
   84222:	f7ff bb25 	b.w	83870 <_vfiprintf_r+0x268>
   84226:	4608      	mov	r0, r1
   84228:	e6b1      	b.n	83f8e <_vfiprintf_r+0x986>
   8422a:	46a0      	mov	r8, r4
   8422c:	2500      	movs	r5, #0
   8422e:	f7ff ba5a 	b.w	836e6 <_vfiprintf_r+0xde>
   84232:	f8dd b020 	ldr.w	fp, [sp, #32]
   84236:	f898 3001 	ldrb.w	r3, [r8, #1]
   8423a:	f8db 5000 	ldr.w	r5, [fp]
   8423e:	f10b 0204 	add.w	r2, fp, #4
   84242:	2d00      	cmp	r5, #0
   84244:	9208      	str	r2, [sp, #32]
   84246:	46a0      	mov	r8, r4
   84248:	f6bf aa4b 	bge.w	836e2 <_vfiprintf_r+0xda>
   8424c:	f04f 35ff 	mov.w	r5, #4294967295
   84250:	f7ff ba47 	b.w	836e2 <_vfiprintf_r+0xda>
   84254:	000862ac 	.word	0x000862ac
   84258:	000862c4 	.word	0x000862c4

0008425c <__sbprintf>:
   8425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84260:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84262:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84266:	4688      	mov	r8, r1
   84268:	9719      	str	r7, [sp, #100]	; 0x64
   8426a:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8426e:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   84272:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   84276:	9707      	str	r7, [sp, #28]
   84278:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8427c:	ac1a      	add	r4, sp, #104	; 0x68
   8427e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84282:	f02a 0a02 	bic.w	sl, sl, #2
   84286:	2600      	movs	r6, #0
   84288:	4669      	mov	r1, sp
   8428a:	9400      	str	r4, [sp, #0]
   8428c:	9404      	str	r4, [sp, #16]
   8428e:	9502      	str	r5, [sp, #8]
   84290:	9505      	str	r5, [sp, #20]
   84292:	f8ad a00c 	strh.w	sl, [sp, #12]
   84296:	f8ad 900e 	strh.w	r9, [sp, #14]
   8429a:	9709      	str	r7, [sp, #36]	; 0x24
   8429c:	9606      	str	r6, [sp, #24]
   8429e:	4605      	mov	r5, r0
   842a0:	f7ff f9b2 	bl	83608 <_vfiprintf_r>
   842a4:	1e04      	subs	r4, r0, #0
   842a6:	db07      	blt.n	842b8 <__sbprintf+0x5c>
   842a8:	4628      	mov	r0, r5
   842aa:	4669      	mov	r1, sp
   842ac:	f000 f92a 	bl	84504 <_fflush_r>
   842b0:	42b0      	cmp	r0, r6
   842b2:	bf18      	it	ne
   842b4:	f04f 34ff 	movne.w	r4, #4294967295
   842b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   842bc:	065b      	lsls	r3, r3, #25
   842be:	d505      	bpl.n	842cc <__sbprintf+0x70>
   842c0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   842c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   842c8:	f8a8 300c 	strh.w	r3, [r8, #12]
   842cc:	4620      	mov	r0, r4
   842ce:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   842d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   842d6:	bf00      	nop

000842d8 <__swsetup_r>:
   842d8:	4b2f      	ldr	r3, [pc, #188]	; (84398 <__swsetup_r+0xc0>)
   842da:	b570      	push	{r4, r5, r6, lr}
   842dc:	4606      	mov	r6, r0
   842de:	6818      	ldr	r0, [r3, #0]
   842e0:	460c      	mov	r4, r1
   842e2:	b110      	cbz	r0, 842ea <__swsetup_r+0x12>
   842e4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   842e6:	2a00      	cmp	r2, #0
   842e8:	d036      	beq.n	84358 <__swsetup_r+0x80>
   842ea:	89a5      	ldrh	r5, [r4, #12]
   842ec:	b2ab      	uxth	r3, r5
   842ee:	0719      	lsls	r1, r3, #28
   842f0:	d50c      	bpl.n	8430c <__swsetup_r+0x34>
   842f2:	6922      	ldr	r2, [r4, #16]
   842f4:	b1aa      	cbz	r2, 84322 <__swsetup_r+0x4a>
   842f6:	f013 0101 	ands.w	r1, r3, #1
   842fa:	d01e      	beq.n	8433a <__swsetup_r+0x62>
   842fc:	6963      	ldr	r3, [r4, #20]
   842fe:	2100      	movs	r1, #0
   84300:	425b      	negs	r3, r3
   84302:	61a3      	str	r3, [r4, #24]
   84304:	60a1      	str	r1, [r4, #8]
   84306:	b1f2      	cbz	r2, 84346 <__swsetup_r+0x6e>
   84308:	2000      	movs	r0, #0
   8430a:	bd70      	pop	{r4, r5, r6, pc}
   8430c:	06da      	lsls	r2, r3, #27
   8430e:	d53a      	bpl.n	84386 <__swsetup_r+0xae>
   84310:	075b      	lsls	r3, r3, #29
   84312:	d424      	bmi.n	8435e <__swsetup_r+0x86>
   84314:	6922      	ldr	r2, [r4, #16]
   84316:	f045 0308 	orr.w	r3, r5, #8
   8431a:	81a3      	strh	r3, [r4, #12]
   8431c:	b29b      	uxth	r3, r3
   8431e:	2a00      	cmp	r2, #0
   84320:	d1e9      	bne.n	842f6 <__swsetup_r+0x1e>
   84322:	f403 7120 	and.w	r1, r3, #640	; 0x280
   84326:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8432a:	d0e4      	beq.n	842f6 <__swsetup_r+0x1e>
   8432c:	4630      	mov	r0, r6
   8432e:	4621      	mov	r1, r4
   84330:	f000 fcce 	bl	84cd0 <__smakebuf_r>
   84334:	89a3      	ldrh	r3, [r4, #12]
   84336:	6922      	ldr	r2, [r4, #16]
   84338:	e7dd      	b.n	842f6 <__swsetup_r+0x1e>
   8433a:	0798      	lsls	r0, r3, #30
   8433c:	bf58      	it	pl
   8433e:	6961      	ldrpl	r1, [r4, #20]
   84340:	60a1      	str	r1, [r4, #8]
   84342:	2a00      	cmp	r2, #0
   84344:	d1e0      	bne.n	84308 <__swsetup_r+0x30>
   84346:	89a3      	ldrh	r3, [r4, #12]
   84348:	061a      	lsls	r2, r3, #24
   8434a:	d5dd      	bpl.n	84308 <__swsetup_r+0x30>
   8434c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84350:	81a3      	strh	r3, [r4, #12]
   84352:	f04f 30ff 	mov.w	r0, #4294967295
   84356:	bd70      	pop	{r4, r5, r6, pc}
   84358:	f000 f8f0 	bl	8453c <__sinit>
   8435c:	e7c5      	b.n	842ea <__swsetup_r+0x12>
   8435e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84360:	b149      	cbz	r1, 84376 <__swsetup_r+0x9e>
   84362:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84366:	4299      	cmp	r1, r3
   84368:	d003      	beq.n	84372 <__swsetup_r+0x9a>
   8436a:	4630      	mov	r0, r6
   8436c:	f000 fa2a 	bl	847c4 <_free_r>
   84370:	89a5      	ldrh	r5, [r4, #12]
   84372:	2300      	movs	r3, #0
   84374:	6323      	str	r3, [r4, #48]	; 0x30
   84376:	6922      	ldr	r2, [r4, #16]
   84378:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   8437c:	2100      	movs	r1, #0
   8437e:	b2ad      	uxth	r5, r5
   84380:	6022      	str	r2, [r4, #0]
   84382:	6061      	str	r1, [r4, #4]
   84384:	e7c7      	b.n	84316 <__swsetup_r+0x3e>
   84386:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   8438a:	2309      	movs	r3, #9
   8438c:	6033      	str	r3, [r6, #0]
   8438e:	f04f 30ff 	mov.w	r0, #4294967295
   84392:	81a5      	strh	r5, [r4, #12]
   84394:	bd70      	pop	{r4, r5, r6, pc}
   84396:	bf00      	nop
   84398:	20070438 	.word	0x20070438

0008439c <register_fini>:
   8439c:	4b02      	ldr	r3, [pc, #8]	; (843a8 <register_fini+0xc>)
   8439e:	b113      	cbz	r3, 843a6 <register_fini+0xa>
   843a0:	4802      	ldr	r0, [pc, #8]	; (843ac <register_fini+0x10>)
   843a2:	f000 b805 	b.w	843b0 <atexit>
   843a6:	4770      	bx	lr
   843a8:	00000000 	.word	0x00000000
   843ac:	00084639 	.word	0x00084639

000843b0 <atexit>:
   843b0:	4601      	mov	r1, r0
   843b2:	2000      	movs	r0, #0
   843b4:	4602      	mov	r2, r0
   843b6:	4603      	mov	r3, r0
   843b8:	f001 bb24 	b.w	85a04 <__register_exitproc>

000843bc <__sflush_r>:
   843bc:	898b      	ldrh	r3, [r1, #12]
   843be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   843c2:	b29a      	uxth	r2, r3
   843c4:	460d      	mov	r5, r1
   843c6:	0711      	lsls	r1, r2, #28
   843c8:	4680      	mov	r8, r0
   843ca:	d43c      	bmi.n	84446 <__sflush_r+0x8a>
   843cc:	686a      	ldr	r2, [r5, #4]
   843ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   843d2:	2a00      	cmp	r2, #0
   843d4:	81ab      	strh	r3, [r5, #12]
   843d6:	dd59      	ble.n	8448c <__sflush_r+0xd0>
   843d8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   843da:	2c00      	cmp	r4, #0
   843dc:	d04b      	beq.n	84476 <__sflush_r+0xba>
   843de:	b29b      	uxth	r3, r3
   843e0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   843e4:	2100      	movs	r1, #0
   843e6:	b292      	uxth	r2, r2
   843e8:	f8d8 6000 	ldr.w	r6, [r8]
   843ec:	f8c8 1000 	str.w	r1, [r8]
   843f0:	2a00      	cmp	r2, #0
   843f2:	d04f      	beq.n	84494 <__sflush_r+0xd8>
   843f4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   843f6:	075f      	lsls	r7, r3, #29
   843f8:	d505      	bpl.n	84406 <__sflush_r+0x4a>
   843fa:	6869      	ldr	r1, [r5, #4]
   843fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   843fe:	1a52      	subs	r2, r2, r1
   84400:	b10b      	cbz	r3, 84406 <__sflush_r+0x4a>
   84402:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84404:	1ad2      	subs	r2, r2, r3
   84406:	4640      	mov	r0, r8
   84408:	69e9      	ldr	r1, [r5, #28]
   8440a:	2300      	movs	r3, #0
   8440c:	47a0      	blx	r4
   8440e:	1c44      	adds	r4, r0, #1
   84410:	d04a      	beq.n	844a8 <__sflush_r+0xec>
   84412:	89ab      	ldrh	r3, [r5, #12]
   84414:	692a      	ldr	r2, [r5, #16]
   84416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8441a:	b29b      	uxth	r3, r3
   8441c:	2100      	movs	r1, #0
   8441e:	602a      	str	r2, [r5, #0]
   84420:	04da      	lsls	r2, r3, #19
   84422:	81ab      	strh	r3, [r5, #12]
   84424:	6069      	str	r1, [r5, #4]
   84426:	d44c      	bmi.n	844c2 <__sflush_r+0x106>
   84428:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8442a:	f8c8 6000 	str.w	r6, [r8]
   8442e:	b311      	cbz	r1, 84476 <__sflush_r+0xba>
   84430:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84434:	4299      	cmp	r1, r3
   84436:	d002      	beq.n	8443e <__sflush_r+0x82>
   84438:	4640      	mov	r0, r8
   8443a:	f000 f9c3 	bl	847c4 <_free_r>
   8443e:	2000      	movs	r0, #0
   84440:	6328      	str	r0, [r5, #48]	; 0x30
   84442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84446:	692e      	ldr	r6, [r5, #16]
   84448:	b1ae      	cbz	r6, 84476 <__sflush_r+0xba>
   8444a:	0791      	lsls	r1, r2, #30
   8444c:	682c      	ldr	r4, [r5, #0]
   8444e:	bf0c      	ite	eq
   84450:	696b      	ldreq	r3, [r5, #20]
   84452:	2300      	movne	r3, #0
   84454:	602e      	str	r6, [r5, #0]
   84456:	1ba4      	subs	r4, r4, r6
   84458:	60ab      	str	r3, [r5, #8]
   8445a:	e00a      	b.n	84472 <__sflush_r+0xb6>
   8445c:	4632      	mov	r2, r6
   8445e:	4623      	mov	r3, r4
   84460:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84462:	4640      	mov	r0, r8
   84464:	69e9      	ldr	r1, [r5, #28]
   84466:	47b8      	blx	r7
   84468:	2800      	cmp	r0, #0
   8446a:	ebc0 0404 	rsb	r4, r0, r4
   8446e:	4406      	add	r6, r0
   84470:	dd04      	ble.n	8447c <__sflush_r+0xc0>
   84472:	2c00      	cmp	r4, #0
   84474:	dcf2      	bgt.n	8445c <__sflush_r+0xa0>
   84476:	2000      	movs	r0, #0
   84478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8447c:	89ab      	ldrh	r3, [r5, #12]
   8447e:	f04f 30ff 	mov.w	r0, #4294967295
   84482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84486:	81ab      	strh	r3, [r5, #12]
   84488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8448c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8448e:	2a00      	cmp	r2, #0
   84490:	dca2      	bgt.n	843d8 <__sflush_r+0x1c>
   84492:	e7f0      	b.n	84476 <__sflush_r+0xba>
   84494:	2301      	movs	r3, #1
   84496:	4640      	mov	r0, r8
   84498:	69e9      	ldr	r1, [r5, #28]
   8449a:	47a0      	blx	r4
   8449c:	1c43      	adds	r3, r0, #1
   8449e:	4602      	mov	r2, r0
   844a0:	d01e      	beq.n	844e0 <__sflush_r+0x124>
   844a2:	89ab      	ldrh	r3, [r5, #12]
   844a4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   844a6:	e7a6      	b.n	843f6 <__sflush_r+0x3a>
   844a8:	f8d8 3000 	ldr.w	r3, [r8]
   844ac:	b95b      	cbnz	r3, 844c6 <__sflush_r+0x10a>
   844ae:	89aa      	ldrh	r2, [r5, #12]
   844b0:	6929      	ldr	r1, [r5, #16]
   844b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   844b6:	b292      	uxth	r2, r2
   844b8:	606b      	str	r3, [r5, #4]
   844ba:	04d3      	lsls	r3, r2, #19
   844bc:	81aa      	strh	r2, [r5, #12]
   844be:	6029      	str	r1, [r5, #0]
   844c0:	d5b2      	bpl.n	84428 <__sflush_r+0x6c>
   844c2:	6528      	str	r0, [r5, #80]	; 0x50
   844c4:	e7b0      	b.n	84428 <__sflush_r+0x6c>
   844c6:	2b1d      	cmp	r3, #29
   844c8:	d001      	beq.n	844ce <__sflush_r+0x112>
   844ca:	2b16      	cmp	r3, #22
   844cc:	d113      	bne.n	844f6 <__sflush_r+0x13a>
   844ce:	89a9      	ldrh	r1, [r5, #12]
   844d0:	692b      	ldr	r3, [r5, #16]
   844d2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   844d6:	2200      	movs	r2, #0
   844d8:	81a9      	strh	r1, [r5, #12]
   844da:	602b      	str	r3, [r5, #0]
   844dc:	606a      	str	r2, [r5, #4]
   844de:	e7a3      	b.n	84428 <__sflush_r+0x6c>
   844e0:	f8d8 3000 	ldr.w	r3, [r8]
   844e4:	2b00      	cmp	r3, #0
   844e6:	d0dc      	beq.n	844a2 <__sflush_r+0xe6>
   844e8:	2b1d      	cmp	r3, #29
   844ea:	d001      	beq.n	844f0 <__sflush_r+0x134>
   844ec:	2b16      	cmp	r3, #22
   844ee:	d1c5      	bne.n	8447c <__sflush_r+0xc0>
   844f0:	f8c8 6000 	str.w	r6, [r8]
   844f4:	e7bf      	b.n	84476 <__sflush_r+0xba>
   844f6:	89ab      	ldrh	r3, [r5, #12]
   844f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   844fc:	81ab      	strh	r3, [r5, #12]
   844fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84502:	bf00      	nop

00084504 <_fflush_r>:
   84504:	b510      	push	{r4, lr}
   84506:	4604      	mov	r4, r0
   84508:	b082      	sub	sp, #8
   8450a:	b108      	cbz	r0, 84510 <_fflush_r+0xc>
   8450c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8450e:	b153      	cbz	r3, 84526 <_fflush_r+0x22>
   84510:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84514:	b908      	cbnz	r0, 8451a <_fflush_r+0x16>
   84516:	b002      	add	sp, #8
   84518:	bd10      	pop	{r4, pc}
   8451a:	4620      	mov	r0, r4
   8451c:	b002      	add	sp, #8
   8451e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84522:	f7ff bf4b 	b.w	843bc <__sflush_r>
   84526:	9101      	str	r1, [sp, #4]
   84528:	f000 f808 	bl	8453c <__sinit>
   8452c:	9901      	ldr	r1, [sp, #4]
   8452e:	e7ef      	b.n	84510 <_fflush_r+0xc>

00084530 <_cleanup_r>:
   84530:	4901      	ldr	r1, [pc, #4]	; (84538 <_cleanup_r+0x8>)
   84532:	f000 bb9f 	b.w	84c74 <_fwalk>
   84536:	bf00      	nop
   84538:	00085b51 	.word	0x00085b51

0008453c <__sinit>:
   8453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84540:	6b84      	ldr	r4, [r0, #56]	; 0x38
   84542:	b083      	sub	sp, #12
   84544:	4607      	mov	r7, r0
   84546:	2c00      	cmp	r4, #0
   84548:	d165      	bne.n	84616 <__sinit+0xda>
   8454a:	687d      	ldr	r5, [r7, #4]
   8454c:	4833      	ldr	r0, [pc, #204]	; (8461c <__sinit+0xe0>)
   8454e:	2304      	movs	r3, #4
   84550:	2103      	movs	r1, #3
   84552:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84556:	63f8      	str	r0, [r7, #60]	; 0x3c
   84558:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8455c:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84560:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84564:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84568:	81ab      	strh	r3, [r5, #12]
   8456a:	602c      	str	r4, [r5, #0]
   8456c:	606c      	str	r4, [r5, #4]
   8456e:	60ac      	str	r4, [r5, #8]
   84570:	666c      	str	r4, [r5, #100]	; 0x64
   84572:	81ec      	strh	r4, [r5, #14]
   84574:	612c      	str	r4, [r5, #16]
   84576:	616c      	str	r4, [r5, #20]
   84578:	61ac      	str	r4, [r5, #24]
   8457a:	4621      	mov	r1, r4
   8457c:	2208      	movs	r2, #8
   8457e:	f7fe fed3 	bl	83328 <memset>
   84582:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84620 <__sinit+0xe4>
   84586:	68be      	ldr	r6, [r7, #8]
   84588:	f8df a098 	ldr.w	sl, [pc, #152]	; 84624 <__sinit+0xe8>
   8458c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84628 <__sinit+0xec>
   84590:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8462c <__sinit+0xf0>
   84594:	2301      	movs	r3, #1
   84596:	2209      	movs	r2, #9
   84598:	61ed      	str	r5, [r5, #28]
   8459a:	f8c5 b020 	str.w	fp, [r5, #32]
   8459e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   845a2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   845a6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   845aa:	4621      	mov	r1, r4
   845ac:	81f3      	strh	r3, [r6, #14]
   845ae:	81b2      	strh	r2, [r6, #12]
   845b0:	6034      	str	r4, [r6, #0]
   845b2:	6074      	str	r4, [r6, #4]
   845b4:	60b4      	str	r4, [r6, #8]
   845b6:	6674      	str	r4, [r6, #100]	; 0x64
   845b8:	6134      	str	r4, [r6, #16]
   845ba:	6174      	str	r4, [r6, #20]
   845bc:	61b4      	str	r4, [r6, #24]
   845be:	2208      	movs	r2, #8
   845c0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   845c4:	9301      	str	r3, [sp, #4]
   845c6:	f7fe feaf 	bl	83328 <memset>
   845ca:	68fd      	ldr	r5, [r7, #12]
   845cc:	2012      	movs	r0, #18
   845ce:	2202      	movs	r2, #2
   845d0:	61f6      	str	r6, [r6, #28]
   845d2:	f8c6 b020 	str.w	fp, [r6, #32]
   845d6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   845da:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   845de:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   845e2:	4621      	mov	r1, r4
   845e4:	81a8      	strh	r0, [r5, #12]
   845e6:	81ea      	strh	r2, [r5, #14]
   845e8:	602c      	str	r4, [r5, #0]
   845ea:	606c      	str	r4, [r5, #4]
   845ec:	60ac      	str	r4, [r5, #8]
   845ee:	666c      	str	r4, [r5, #100]	; 0x64
   845f0:	612c      	str	r4, [r5, #16]
   845f2:	616c      	str	r4, [r5, #20]
   845f4:	61ac      	str	r4, [r5, #24]
   845f6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   845fa:	2208      	movs	r2, #8
   845fc:	f7fe fe94 	bl	83328 <memset>
   84600:	9b01      	ldr	r3, [sp, #4]
   84602:	61ed      	str	r5, [r5, #28]
   84604:	f8c5 b020 	str.w	fp, [r5, #32]
   84608:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8460c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84610:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84614:	63bb      	str	r3, [r7, #56]	; 0x38
   84616:	b003      	add	sp, #12
   84618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8461c:	00084531 	.word	0x00084531
   84620:	00085845 	.word	0x00085845
   84624:	00085869 	.word	0x00085869
   84628:	000858a1 	.word	0x000858a1
   8462c:	000858c1 	.word	0x000858c1

00084630 <__sfp_lock_acquire>:
   84630:	4770      	bx	lr
   84632:	bf00      	nop

00084634 <__sfp_lock_release>:
   84634:	4770      	bx	lr
   84636:	bf00      	nop

00084638 <__libc_fini_array>:
   84638:	b538      	push	{r3, r4, r5, lr}
   8463a:	4d09      	ldr	r5, [pc, #36]	; (84660 <__libc_fini_array+0x28>)
   8463c:	4c09      	ldr	r4, [pc, #36]	; (84664 <__libc_fini_array+0x2c>)
   8463e:	1b64      	subs	r4, r4, r5
   84640:	10a4      	asrs	r4, r4, #2
   84642:	bf18      	it	ne
   84644:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   84648:	d005      	beq.n	84656 <__libc_fini_array+0x1e>
   8464a:	3c01      	subs	r4, #1
   8464c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84650:	4798      	blx	r3
   84652:	2c00      	cmp	r4, #0
   84654:	d1f9      	bne.n	8464a <__libc_fini_array+0x12>
   84656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8465a:	f001 be45 	b.w	862e8 <_fini>
   8465e:	bf00      	nop
   84660:	000862f4 	.word	0x000862f4
   84664:	000862f8 	.word	0x000862f8

00084668 <_fputwc_r>:
   84668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8466c:	8993      	ldrh	r3, [r2, #12]
   8466e:	460f      	mov	r7, r1
   84670:	0499      	lsls	r1, r3, #18
   84672:	b082      	sub	sp, #8
   84674:	4614      	mov	r4, r2
   84676:	4680      	mov	r8, r0
   84678:	d406      	bmi.n	84688 <_fputwc_r+0x20>
   8467a:	6e52      	ldr	r2, [r2, #100]	; 0x64
   8467c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84684:	81a3      	strh	r3, [r4, #12]
   84686:	6662      	str	r2, [r4, #100]	; 0x64
   84688:	f000 fb1c 	bl	84cc4 <__locale_mb_cur_max>
   8468c:	2801      	cmp	r0, #1
   8468e:	d03e      	beq.n	8470e <_fputwc_r+0xa6>
   84690:	463a      	mov	r2, r7
   84692:	4640      	mov	r0, r8
   84694:	a901      	add	r1, sp, #4
   84696:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8469a:	f001 f969 	bl	85970 <_wcrtomb_r>
   8469e:	1c42      	adds	r2, r0, #1
   846a0:	4606      	mov	r6, r0
   846a2:	d02d      	beq.n	84700 <_fputwc_r+0x98>
   846a4:	2800      	cmp	r0, #0
   846a6:	d03a      	beq.n	8471e <_fputwc_r+0xb6>
   846a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   846ac:	2500      	movs	r5, #0
   846ae:	e009      	b.n	846c4 <_fputwc_r+0x5c>
   846b0:	6823      	ldr	r3, [r4, #0]
   846b2:	7019      	strb	r1, [r3, #0]
   846b4:	6823      	ldr	r3, [r4, #0]
   846b6:	3301      	adds	r3, #1
   846b8:	6023      	str	r3, [r4, #0]
   846ba:	3501      	adds	r5, #1
   846bc:	42b5      	cmp	r5, r6
   846be:	d22e      	bcs.n	8471e <_fputwc_r+0xb6>
   846c0:	ab01      	add	r3, sp, #4
   846c2:	5ce9      	ldrb	r1, [r5, r3]
   846c4:	68a3      	ldr	r3, [r4, #8]
   846c6:	3b01      	subs	r3, #1
   846c8:	2b00      	cmp	r3, #0
   846ca:	60a3      	str	r3, [r4, #8]
   846cc:	daf0      	bge.n	846b0 <_fputwc_r+0x48>
   846ce:	69a2      	ldr	r2, [r4, #24]
   846d0:	4293      	cmp	r3, r2
   846d2:	db06      	blt.n	846e2 <_fputwc_r+0x7a>
   846d4:	6823      	ldr	r3, [r4, #0]
   846d6:	7019      	strb	r1, [r3, #0]
   846d8:	6823      	ldr	r3, [r4, #0]
   846da:	7819      	ldrb	r1, [r3, #0]
   846dc:	3301      	adds	r3, #1
   846de:	290a      	cmp	r1, #10
   846e0:	d1ea      	bne.n	846b8 <_fputwc_r+0x50>
   846e2:	4640      	mov	r0, r8
   846e4:	4622      	mov	r2, r4
   846e6:	f001 f8ef 	bl	858c8 <__swbuf_r>
   846ea:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   846ee:	4258      	negs	r0, r3
   846f0:	4158      	adcs	r0, r3
   846f2:	2800      	cmp	r0, #0
   846f4:	d0e1      	beq.n	846ba <_fputwc_r+0x52>
   846f6:	f04f 30ff 	mov.w	r0, #4294967295
   846fa:	b002      	add	sp, #8
   846fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84700:	89a3      	ldrh	r3, [r4, #12]
   84702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84706:	81a3      	strh	r3, [r4, #12]
   84708:	b002      	add	sp, #8
   8470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8470e:	1e7b      	subs	r3, r7, #1
   84710:	2bfe      	cmp	r3, #254	; 0xfe
   84712:	d8bd      	bhi.n	84690 <_fputwc_r+0x28>
   84714:	b2f9      	uxtb	r1, r7
   84716:	4606      	mov	r6, r0
   84718:	f88d 1004 	strb.w	r1, [sp, #4]
   8471c:	e7c6      	b.n	846ac <_fputwc_r+0x44>
   8471e:	4638      	mov	r0, r7
   84720:	b002      	add	sp, #8
   84722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84726:	bf00      	nop

00084728 <_malloc_trim_r>:
   84728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8472a:	4d23      	ldr	r5, [pc, #140]	; (847b8 <_malloc_trim_r+0x90>)
   8472c:	460f      	mov	r7, r1
   8472e:	4604      	mov	r4, r0
   84730:	f000 fe92 	bl	85458 <__malloc_lock>
   84734:	68ab      	ldr	r3, [r5, #8]
   84736:	685e      	ldr	r6, [r3, #4]
   84738:	f026 0603 	bic.w	r6, r6, #3
   8473c:	1bf1      	subs	r1, r6, r7
   8473e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84742:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84746:	f021 010f 	bic.w	r1, r1, #15
   8474a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8474e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   84752:	db07      	blt.n	84764 <_malloc_trim_r+0x3c>
   84754:	4620      	mov	r0, r4
   84756:	2100      	movs	r1, #0
   84758:	f001 f862 	bl	85820 <_sbrk_r>
   8475c:	68ab      	ldr	r3, [r5, #8]
   8475e:	4433      	add	r3, r6
   84760:	4298      	cmp	r0, r3
   84762:	d004      	beq.n	8476e <_malloc_trim_r+0x46>
   84764:	4620      	mov	r0, r4
   84766:	f000 fe79 	bl	8545c <__malloc_unlock>
   8476a:	2000      	movs	r0, #0
   8476c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8476e:	4620      	mov	r0, r4
   84770:	4279      	negs	r1, r7
   84772:	f001 f855 	bl	85820 <_sbrk_r>
   84776:	3001      	adds	r0, #1
   84778:	d00d      	beq.n	84796 <_malloc_trim_r+0x6e>
   8477a:	4b10      	ldr	r3, [pc, #64]	; (847bc <_malloc_trim_r+0x94>)
   8477c:	68aa      	ldr	r2, [r5, #8]
   8477e:	6819      	ldr	r1, [r3, #0]
   84780:	1bf6      	subs	r6, r6, r7
   84782:	f046 0601 	orr.w	r6, r6, #1
   84786:	4620      	mov	r0, r4
   84788:	1bc9      	subs	r1, r1, r7
   8478a:	6056      	str	r6, [r2, #4]
   8478c:	6019      	str	r1, [r3, #0]
   8478e:	f000 fe65 	bl	8545c <__malloc_unlock>
   84792:	2001      	movs	r0, #1
   84794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84796:	4620      	mov	r0, r4
   84798:	2100      	movs	r1, #0
   8479a:	f001 f841 	bl	85820 <_sbrk_r>
   8479e:	68ab      	ldr	r3, [r5, #8]
   847a0:	1ac2      	subs	r2, r0, r3
   847a2:	2a0f      	cmp	r2, #15
   847a4:	ddde      	ble.n	84764 <_malloc_trim_r+0x3c>
   847a6:	4d06      	ldr	r5, [pc, #24]	; (847c0 <_malloc_trim_r+0x98>)
   847a8:	4904      	ldr	r1, [pc, #16]	; (847bc <_malloc_trim_r+0x94>)
   847aa:	682d      	ldr	r5, [r5, #0]
   847ac:	f042 0201 	orr.w	r2, r2, #1
   847b0:	1b40      	subs	r0, r0, r5
   847b2:	605a      	str	r2, [r3, #4]
   847b4:	6008      	str	r0, [r1, #0]
   847b6:	e7d5      	b.n	84764 <_malloc_trim_r+0x3c>
   847b8:	20070460 	.word	0x20070460
   847bc:	2007ab64 	.word	0x2007ab64
   847c0:	2007086c 	.word	0x2007086c

000847c4 <_free_r>:
   847c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847c8:	460d      	mov	r5, r1
   847ca:	4606      	mov	r6, r0
   847cc:	2900      	cmp	r1, #0
   847ce:	d055      	beq.n	8487c <_free_r+0xb8>
   847d0:	f000 fe42 	bl	85458 <__malloc_lock>
   847d4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   847d8:	f8df c170 	ldr.w	ip, [pc, #368]	; 8494c <_free_r+0x188>
   847dc:	f1a5 0408 	sub.w	r4, r5, #8
   847e0:	f021 0301 	bic.w	r3, r1, #1
   847e4:	18e2      	adds	r2, r4, r3
   847e6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   847ea:	6857      	ldr	r7, [r2, #4]
   847ec:	4290      	cmp	r0, r2
   847ee:	f027 0703 	bic.w	r7, r7, #3
   847f2:	d068      	beq.n	848c6 <_free_r+0x102>
   847f4:	f011 0101 	ands.w	r1, r1, #1
   847f8:	6057      	str	r7, [r2, #4]
   847fa:	d032      	beq.n	84862 <_free_r+0x9e>
   847fc:	2100      	movs	r1, #0
   847fe:	19d0      	adds	r0, r2, r7
   84800:	6840      	ldr	r0, [r0, #4]
   84802:	07c0      	lsls	r0, r0, #31
   84804:	d406      	bmi.n	84814 <_free_r+0x50>
   84806:	443b      	add	r3, r7
   84808:	6890      	ldr	r0, [r2, #8]
   8480a:	2900      	cmp	r1, #0
   8480c:	d04d      	beq.n	848aa <_free_r+0xe6>
   8480e:	68d2      	ldr	r2, [r2, #12]
   84810:	60c2      	str	r2, [r0, #12]
   84812:	6090      	str	r0, [r2, #8]
   84814:	f043 0201 	orr.w	r2, r3, #1
   84818:	6062      	str	r2, [r4, #4]
   8481a:	50e3      	str	r3, [r4, r3]
   8481c:	b9e1      	cbnz	r1, 84858 <_free_r+0x94>
   8481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84822:	d32d      	bcc.n	84880 <_free_r+0xbc>
   84824:	0a5a      	lsrs	r2, r3, #9
   84826:	2a04      	cmp	r2, #4
   84828:	d869      	bhi.n	848fe <_free_r+0x13a>
   8482a:	0998      	lsrs	r0, r3, #6
   8482c:	3038      	adds	r0, #56	; 0x38
   8482e:	0041      	lsls	r1, r0, #1
   84830:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   84834:	f8dc 2008 	ldr.w	r2, [ip, #8]
   84838:	4944      	ldr	r1, [pc, #272]	; (8494c <_free_r+0x188>)
   8483a:	4562      	cmp	r2, ip
   8483c:	d065      	beq.n	8490a <_free_r+0x146>
   8483e:	6851      	ldr	r1, [r2, #4]
   84840:	f021 0103 	bic.w	r1, r1, #3
   84844:	428b      	cmp	r3, r1
   84846:	d202      	bcs.n	8484e <_free_r+0x8a>
   84848:	6892      	ldr	r2, [r2, #8]
   8484a:	4594      	cmp	ip, r2
   8484c:	d1f7      	bne.n	8483e <_free_r+0x7a>
   8484e:	68d3      	ldr	r3, [r2, #12]
   84850:	60e3      	str	r3, [r4, #12]
   84852:	60a2      	str	r2, [r4, #8]
   84854:	609c      	str	r4, [r3, #8]
   84856:	60d4      	str	r4, [r2, #12]
   84858:	4630      	mov	r0, r6
   8485a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8485e:	f000 bdfd 	b.w	8545c <__malloc_unlock>
   84862:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84866:	f10c 0808 	add.w	r8, ip, #8
   8486a:	1b64      	subs	r4, r4, r5
   8486c:	68a0      	ldr	r0, [r4, #8]
   8486e:	442b      	add	r3, r5
   84870:	4540      	cmp	r0, r8
   84872:	d042      	beq.n	848fa <_free_r+0x136>
   84874:	68e5      	ldr	r5, [r4, #12]
   84876:	60c5      	str	r5, [r0, #12]
   84878:	60a8      	str	r0, [r5, #8]
   8487a:	e7c0      	b.n	847fe <_free_r+0x3a>
   8487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84880:	08db      	lsrs	r3, r3, #3
   84882:	109a      	asrs	r2, r3, #2
   84884:	2001      	movs	r0, #1
   84886:	4090      	lsls	r0, r2
   84888:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8488c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   84890:	689a      	ldr	r2, [r3, #8]
   84892:	4301      	orrs	r1, r0
   84894:	60a2      	str	r2, [r4, #8]
   84896:	60e3      	str	r3, [r4, #12]
   84898:	f8cc 1004 	str.w	r1, [ip, #4]
   8489c:	4630      	mov	r0, r6
   8489e:	609c      	str	r4, [r3, #8]
   848a0:	60d4      	str	r4, [r2, #12]
   848a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   848a6:	f000 bdd9 	b.w	8545c <__malloc_unlock>
   848aa:	4d29      	ldr	r5, [pc, #164]	; (84950 <_free_r+0x18c>)
   848ac:	42a8      	cmp	r0, r5
   848ae:	d1ae      	bne.n	8480e <_free_r+0x4a>
   848b0:	f043 0201 	orr.w	r2, r3, #1
   848b4:	f8cc 4014 	str.w	r4, [ip, #20]
   848b8:	f8cc 4010 	str.w	r4, [ip, #16]
   848bc:	60e0      	str	r0, [r4, #12]
   848be:	60a0      	str	r0, [r4, #8]
   848c0:	6062      	str	r2, [r4, #4]
   848c2:	50e3      	str	r3, [r4, r3]
   848c4:	e7c8      	b.n	84858 <_free_r+0x94>
   848c6:	441f      	add	r7, r3
   848c8:	07cb      	lsls	r3, r1, #31
   848ca:	d407      	bmi.n	848dc <_free_r+0x118>
   848cc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   848d0:	1a64      	subs	r4, r4, r1
   848d2:	68e3      	ldr	r3, [r4, #12]
   848d4:	68a2      	ldr	r2, [r4, #8]
   848d6:	440f      	add	r7, r1
   848d8:	60d3      	str	r3, [r2, #12]
   848da:	609a      	str	r2, [r3, #8]
   848dc:	4b1d      	ldr	r3, [pc, #116]	; (84954 <_free_r+0x190>)
   848de:	f047 0201 	orr.w	r2, r7, #1
   848e2:	681b      	ldr	r3, [r3, #0]
   848e4:	6062      	str	r2, [r4, #4]
   848e6:	429f      	cmp	r7, r3
   848e8:	f8cc 4008 	str.w	r4, [ip, #8]
   848ec:	d3b4      	bcc.n	84858 <_free_r+0x94>
   848ee:	4b1a      	ldr	r3, [pc, #104]	; (84958 <_free_r+0x194>)
   848f0:	4630      	mov	r0, r6
   848f2:	6819      	ldr	r1, [r3, #0]
   848f4:	f7ff ff18 	bl	84728 <_malloc_trim_r>
   848f8:	e7ae      	b.n	84858 <_free_r+0x94>
   848fa:	2101      	movs	r1, #1
   848fc:	e77f      	b.n	847fe <_free_r+0x3a>
   848fe:	2a14      	cmp	r2, #20
   84900:	d80b      	bhi.n	8491a <_free_r+0x156>
   84902:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   84906:	0041      	lsls	r1, r0, #1
   84908:	e792      	b.n	84830 <_free_r+0x6c>
   8490a:	1080      	asrs	r0, r0, #2
   8490c:	2501      	movs	r5, #1
   8490e:	4085      	lsls	r5, r0
   84910:	6848      	ldr	r0, [r1, #4]
   84912:	4613      	mov	r3, r2
   84914:	4328      	orrs	r0, r5
   84916:	6048      	str	r0, [r1, #4]
   84918:	e79a      	b.n	84850 <_free_r+0x8c>
   8491a:	2a54      	cmp	r2, #84	; 0x54
   8491c:	d803      	bhi.n	84926 <_free_r+0x162>
   8491e:	0b18      	lsrs	r0, r3, #12
   84920:	306e      	adds	r0, #110	; 0x6e
   84922:	0041      	lsls	r1, r0, #1
   84924:	e784      	b.n	84830 <_free_r+0x6c>
   84926:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8492a:	d803      	bhi.n	84934 <_free_r+0x170>
   8492c:	0bd8      	lsrs	r0, r3, #15
   8492e:	3077      	adds	r0, #119	; 0x77
   84930:	0041      	lsls	r1, r0, #1
   84932:	e77d      	b.n	84830 <_free_r+0x6c>
   84934:	f240 5154 	movw	r1, #1364	; 0x554
   84938:	428a      	cmp	r2, r1
   8493a:	d803      	bhi.n	84944 <_free_r+0x180>
   8493c:	0c98      	lsrs	r0, r3, #18
   8493e:	307c      	adds	r0, #124	; 0x7c
   84940:	0041      	lsls	r1, r0, #1
   84942:	e775      	b.n	84830 <_free_r+0x6c>
   84944:	21fc      	movs	r1, #252	; 0xfc
   84946:	207e      	movs	r0, #126	; 0x7e
   84948:	e772      	b.n	84830 <_free_r+0x6c>
   8494a:	bf00      	nop
   8494c:	20070460 	.word	0x20070460
   84950:	20070468 	.word	0x20070468
   84954:	20070868 	.word	0x20070868
   84958:	2007ab60 	.word	0x2007ab60

0008495c <__sfvwrite_r>:
   8495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84960:	6893      	ldr	r3, [r2, #8]
   84962:	b083      	sub	sp, #12
   84964:	4616      	mov	r6, r2
   84966:	4681      	mov	r9, r0
   84968:	460c      	mov	r4, r1
   8496a:	b32b      	cbz	r3, 849b8 <__sfvwrite_r+0x5c>
   8496c:	898b      	ldrh	r3, [r1, #12]
   8496e:	0719      	lsls	r1, r3, #28
   84970:	d526      	bpl.n	849c0 <__sfvwrite_r+0x64>
   84972:	6922      	ldr	r2, [r4, #16]
   84974:	b322      	cbz	r2, 849c0 <__sfvwrite_r+0x64>
   84976:	f003 0202 	and.w	r2, r3, #2
   8497a:	b292      	uxth	r2, r2
   8497c:	6835      	ldr	r5, [r6, #0]
   8497e:	2a00      	cmp	r2, #0
   84980:	d02c      	beq.n	849dc <__sfvwrite_r+0x80>
   84982:	f04f 0a00 	mov.w	sl, #0
   84986:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 84c70 <__sfvwrite_r+0x314>
   8498a:	46d0      	mov	r8, sl
   8498c:	45d8      	cmp	r8, fp
   8498e:	bf34      	ite	cc
   84990:	4643      	movcc	r3, r8
   84992:	465b      	movcs	r3, fp
   84994:	4652      	mov	r2, sl
   84996:	4648      	mov	r0, r9
   84998:	f1b8 0f00 	cmp.w	r8, #0
   8499c:	d04f      	beq.n	84a3e <__sfvwrite_r+0xe2>
   8499e:	69e1      	ldr	r1, [r4, #28]
   849a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   849a2:	47b8      	blx	r7
   849a4:	2800      	cmp	r0, #0
   849a6:	dd56      	ble.n	84a56 <__sfvwrite_r+0xfa>
   849a8:	68b3      	ldr	r3, [r6, #8]
   849aa:	4482      	add	sl, r0
   849ac:	1a1b      	subs	r3, r3, r0
   849ae:	ebc0 0808 	rsb	r8, r0, r8
   849b2:	60b3      	str	r3, [r6, #8]
   849b4:	2b00      	cmp	r3, #0
   849b6:	d1e9      	bne.n	8498c <__sfvwrite_r+0x30>
   849b8:	2000      	movs	r0, #0
   849ba:	b003      	add	sp, #12
   849bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   849c0:	4648      	mov	r0, r9
   849c2:	4621      	mov	r1, r4
   849c4:	f7ff fc88 	bl	842d8 <__swsetup_r>
   849c8:	2800      	cmp	r0, #0
   849ca:	f040 8148 	bne.w	84c5e <__sfvwrite_r+0x302>
   849ce:	89a3      	ldrh	r3, [r4, #12]
   849d0:	6835      	ldr	r5, [r6, #0]
   849d2:	f003 0202 	and.w	r2, r3, #2
   849d6:	b292      	uxth	r2, r2
   849d8:	2a00      	cmp	r2, #0
   849da:	d1d2      	bne.n	84982 <__sfvwrite_r+0x26>
   849dc:	f013 0a01 	ands.w	sl, r3, #1
   849e0:	d142      	bne.n	84a68 <__sfvwrite_r+0x10c>
   849e2:	46d0      	mov	r8, sl
   849e4:	f1b8 0f00 	cmp.w	r8, #0
   849e8:	d023      	beq.n	84a32 <__sfvwrite_r+0xd6>
   849ea:	059a      	lsls	r2, r3, #22
   849ec:	68a7      	ldr	r7, [r4, #8]
   849ee:	d576      	bpl.n	84ade <__sfvwrite_r+0x182>
   849f0:	45b8      	cmp	r8, r7
   849f2:	f0c0 80a4 	bcc.w	84b3e <__sfvwrite_r+0x1e2>
   849f6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   849fa:	f040 80b2 	bne.w	84b62 <__sfvwrite_r+0x206>
   849fe:	6820      	ldr	r0, [r4, #0]
   84a00:	46bb      	mov	fp, r7
   84a02:	4651      	mov	r1, sl
   84a04:	465a      	mov	r2, fp
   84a06:	f000 fcc1 	bl	8538c <memmove>
   84a0a:	68a2      	ldr	r2, [r4, #8]
   84a0c:	6821      	ldr	r1, [r4, #0]
   84a0e:	1bd2      	subs	r2, r2, r7
   84a10:	eb01 030b 	add.w	r3, r1, fp
   84a14:	60a2      	str	r2, [r4, #8]
   84a16:	6023      	str	r3, [r4, #0]
   84a18:	4642      	mov	r2, r8
   84a1a:	68b3      	ldr	r3, [r6, #8]
   84a1c:	4492      	add	sl, r2
   84a1e:	1a9b      	subs	r3, r3, r2
   84a20:	ebc2 0808 	rsb	r8, r2, r8
   84a24:	60b3      	str	r3, [r6, #8]
   84a26:	2b00      	cmp	r3, #0
   84a28:	d0c6      	beq.n	849b8 <__sfvwrite_r+0x5c>
   84a2a:	89a3      	ldrh	r3, [r4, #12]
   84a2c:	f1b8 0f00 	cmp.w	r8, #0
   84a30:	d1db      	bne.n	849ea <__sfvwrite_r+0x8e>
   84a32:	f8d5 a000 	ldr.w	sl, [r5]
   84a36:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84a3a:	3508      	adds	r5, #8
   84a3c:	e7d2      	b.n	849e4 <__sfvwrite_r+0x88>
   84a3e:	f8d5 a000 	ldr.w	sl, [r5]
   84a42:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84a46:	3508      	adds	r5, #8
   84a48:	e7a0      	b.n	8498c <__sfvwrite_r+0x30>
   84a4a:	4648      	mov	r0, r9
   84a4c:	4621      	mov	r1, r4
   84a4e:	f7ff fd59 	bl	84504 <_fflush_r>
   84a52:	2800      	cmp	r0, #0
   84a54:	d059      	beq.n	84b0a <__sfvwrite_r+0x1ae>
   84a56:	89a3      	ldrh	r3, [r4, #12]
   84a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84a5c:	f04f 30ff 	mov.w	r0, #4294967295
   84a60:	81a3      	strh	r3, [r4, #12]
   84a62:	b003      	add	sp, #12
   84a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a68:	4692      	mov	sl, r2
   84a6a:	9201      	str	r2, [sp, #4]
   84a6c:	4693      	mov	fp, r2
   84a6e:	4690      	mov	r8, r2
   84a70:	f1b8 0f00 	cmp.w	r8, #0
   84a74:	d02b      	beq.n	84ace <__sfvwrite_r+0x172>
   84a76:	9f01      	ldr	r7, [sp, #4]
   84a78:	2f00      	cmp	r7, #0
   84a7a:	d064      	beq.n	84b46 <__sfvwrite_r+0x1ea>
   84a7c:	6820      	ldr	r0, [r4, #0]
   84a7e:	6921      	ldr	r1, [r4, #16]
   84a80:	45c2      	cmp	sl, r8
   84a82:	bf34      	ite	cc
   84a84:	4653      	movcc	r3, sl
   84a86:	4643      	movcs	r3, r8
   84a88:	4288      	cmp	r0, r1
   84a8a:	461f      	mov	r7, r3
   84a8c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   84a90:	6962      	ldr	r2, [r4, #20]
   84a92:	d903      	bls.n	84a9c <__sfvwrite_r+0x140>
   84a94:	4494      	add	ip, r2
   84a96:	4563      	cmp	r3, ip
   84a98:	f300 80ae 	bgt.w	84bf8 <__sfvwrite_r+0x29c>
   84a9c:	4293      	cmp	r3, r2
   84a9e:	db36      	blt.n	84b0e <__sfvwrite_r+0x1b2>
   84aa0:	4613      	mov	r3, r2
   84aa2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84aa4:	4648      	mov	r0, r9
   84aa6:	69e1      	ldr	r1, [r4, #28]
   84aa8:	465a      	mov	r2, fp
   84aaa:	47b8      	blx	r7
   84aac:	1e07      	subs	r7, r0, #0
   84aae:	ddd2      	ble.n	84a56 <__sfvwrite_r+0xfa>
   84ab0:	ebba 0a07 	subs.w	sl, sl, r7
   84ab4:	d03a      	beq.n	84b2c <__sfvwrite_r+0x1d0>
   84ab6:	68b3      	ldr	r3, [r6, #8]
   84ab8:	44bb      	add	fp, r7
   84aba:	1bdb      	subs	r3, r3, r7
   84abc:	ebc7 0808 	rsb	r8, r7, r8
   84ac0:	60b3      	str	r3, [r6, #8]
   84ac2:	2b00      	cmp	r3, #0
   84ac4:	f43f af78 	beq.w	849b8 <__sfvwrite_r+0x5c>
   84ac8:	f1b8 0f00 	cmp.w	r8, #0
   84acc:	d1d3      	bne.n	84a76 <__sfvwrite_r+0x11a>
   84ace:	2700      	movs	r7, #0
   84ad0:	f8d5 b000 	ldr.w	fp, [r5]
   84ad4:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84ad8:	9701      	str	r7, [sp, #4]
   84ada:	3508      	adds	r5, #8
   84adc:	e7c8      	b.n	84a70 <__sfvwrite_r+0x114>
   84ade:	6820      	ldr	r0, [r4, #0]
   84ae0:	6923      	ldr	r3, [r4, #16]
   84ae2:	4298      	cmp	r0, r3
   84ae4:	d802      	bhi.n	84aec <__sfvwrite_r+0x190>
   84ae6:	6963      	ldr	r3, [r4, #20]
   84ae8:	4598      	cmp	r8, r3
   84aea:	d272      	bcs.n	84bd2 <__sfvwrite_r+0x276>
   84aec:	45b8      	cmp	r8, r7
   84aee:	bf38      	it	cc
   84af0:	4647      	movcc	r7, r8
   84af2:	463a      	mov	r2, r7
   84af4:	4651      	mov	r1, sl
   84af6:	f000 fc49 	bl	8538c <memmove>
   84afa:	68a3      	ldr	r3, [r4, #8]
   84afc:	6822      	ldr	r2, [r4, #0]
   84afe:	1bdb      	subs	r3, r3, r7
   84b00:	443a      	add	r2, r7
   84b02:	60a3      	str	r3, [r4, #8]
   84b04:	6022      	str	r2, [r4, #0]
   84b06:	2b00      	cmp	r3, #0
   84b08:	d09f      	beq.n	84a4a <__sfvwrite_r+0xee>
   84b0a:	463a      	mov	r2, r7
   84b0c:	e785      	b.n	84a1a <__sfvwrite_r+0xbe>
   84b0e:	461a      	mov	r2, r3
   84b10:	4659      	mov	r1, fp
   84b12:	9300      	str	r3, [sp, #0]
   84b14:	f000 fc3a 	bl	8538c <memmove>
   84b18:	9b00      	ldr	r3, [sp, #0]
   84b1a:	68a1      	ldr	r1, [r4, #8]
   84b1c:	6822      	ldr	r2, [r4, #0]
   84b1e:	1ac9      	subs	r1, r1, r3
   84b20:	ebba 0a07 	subs.w	sl, sl, r7
   84b24:	4413      	add	r3, r2
   84b26:	60a1      	str	r1, [r4, #8]
   84b28:	6023      	str	r3, [r4, #0]
   84b2a:	d1c4      	bne.n	84ab6 <__sfvwrite_r+0x15a>
   84b2c:	4648      	mov	r0, r9
   84b2e:	4621      	mov	r1, r4
   84b30:	f7ff fce8 	bl	84504 <_fflush_r>
   84b34:	2800      	cmp	r0, #0
   84b36:	d18e      	bne.n	84a56 <__sfvwrite_r+0xfa>
   84b38:	f8cd a004 	str.w	sl, [sp, #4]
   84b3c:	e7bb      	b.n	84ab6 <__sfvwrite_r+0x15a>
   84b3e:	6820      	ldr	r0, [r4, #0]
   84b40:	4647      	mov	r7, r8
   84b42:	46c3      	mov	fp, r8
   84b44:	e75d      	b.n	84a02 <__sfvwrite_r+0xa6>
   84b46:	4658      	mov	r0, fp
   84b48:	210a      	movs	r1, #10
   84b4a:	4642      	mov	r2, r8
   84b4c:	f000 fbd4 	bl	852f8 <memchr>
   84b50:	2800      	cmp	r0, #0
   84b52:	d07f      	beq.n	84c54 <__sfvwrite_r+0x2f8>
   84b54:	f100 0a01 	add.w	sl, r0, #1
   84b58:	2701      	movs	r7, #1
   84b5a:	ebcb 0a0a 	rsb	sl, fp, sl
   84b5e:	9701      	str	r7, [sp, #4]
   84b60:	e78c      	b.n	84a7c <__sfvwrite_r+0x120>
   84b62:	6822      	ldr	r2, [r4, #0]
   84b64:	6921      	ldr	r1, [r4, #16]
   84b66:	6967      	ldr	r7, [r4, #20]
   84b68:	ebc1 0c02 	rsb	ip, r1, r2
   84b6c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   84b70:	f10c 0201 	add.w	r2, ip, #1
   84b74:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   84b78:	4442      	add	r2, r8
   84b7a:	107f      	asrs	r7, r7, #1
   84b7c:	4297      	cmp	r7, r2
   84b7e:	bf34      	ite	cc
   84b80:	4617      	movcc	r7, r2
   84b82:	463a      	movcs	r2, r7
   84b84:	055b      	lsls	r3, r3, #21
   84b86:	d54f      	bpl.n	84c28 <__sfvwrite_r+0x2cc>
   84b88:	4611      	mov	r1, r2
   84b8a:	4648      	mov	r0, r9
   84b8c:	f8cd c000 	str.w	ip, [sp]
   84b90:	f000 f916 	bl	84dc0 <_malloc_r>
   84b94:	f8dd c000 	ldr.w	ip, [sp]
   84b98:	4683      	mov	fp, r0
   84b9a:	2800      	cmp	r0, #0
   84b9c:	d062      	beq.n	84c64 <__sfvwrite_r+0x308>
   84b9e:	4662      	mov	r2, ip
   84ba0:	6921      	ldr	r1, [r4, #16]
   84ba2:	f8cd c000 	str.w	ip, [sp]
   84ba6:	f7fe fb49 	bl	8323c <memcpy>
   84baa:	89a2      	ldrh	r2, [r4, #12]
   84bac:	f8dd c000 	ldr.w	ip, [sp]
   84bb0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84bb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84bb8:	81a2      	strh	r2, [r4, #12]
   84bba:	eb0b 000c 	add.w	r0, fp, ip
   84bbe:	ebcc 0207 	rsb	r2, ip, r7
   84bc2:	f8c4 b010 	str.w	fp, [r4, #16]
   84bc6:	6167      	str	r7, [r4, #20]
   84bc8:	6020      	str	r0, [r4, #0]
   84bca:	60a2      	str	r2, [r4, #8]
   84bcc:	4647      	mov	r7, r8
   84bce:	46c3      	mov	fp, r8
   84bd0:	e717      	b.n	84a02 <__sfvwrite_r+0xa6>
   84bd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   84bd6:	4590      	cmp	r8, r2
   84bd8:	bf38      	it	cc
   84bda:	4642      	movcc	r2, r8
   84bdc:	fb92 f2f3 	sdiv	r2, r2, r3
   84be0:	fb02 f303 	mul.w	r3, r2, r3
   84be4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84be6:	4648      	mov	r0, r9
   84be8:	69e1      	ldr	r1, [r4, #28]
   84bea:	4652      	mov	r2, sl
   84bec:	47b8      	blx	r7
   84bee:	2800      	cmp	r0, #0
   84bf0:	f77f af31 	ble.w	84a56 <__sfvwrite_r+0xfa>
   84bf4:	4602      	mov	r2, r0
   84bf6:	e710      	b.n	84a1a <__sfvwrite_r+0xbe>
   84bf8:	4662      	mov	r2, ip
   84bfa:	4659      	mov	r1, fp
   84bfc:	f8cd c000 	str.w	ip, [sp]
   84c00:	f000 fbc4 	bl	8538c <memmove>
   84c04:	f8dd c000 	ldr.w	ip, [sp]
   84c08:	6823      	ldr	r3, [r4, #0]
   84c0a:	4648      	mov	r0, r9
   84c0c:	4463      	add	r3, ip
   84c0e:	6023      	str	r3, [r4, #0]
   84c10:	4621      	mov	r1, r4
   84c12:	f8cd c000 	str.w	ip, [sp]
   84c16:	f7ff fc75 	bl	84504 <_fflush_r>
   84c1a:	f8dd c000 	ldr.w	ip, [sp]
   84c1e:	2800      	cmp	r0, #0
   84c20:	f47f af19 	bne.w	84a56 <__sfvwrite_r+0xfa>
   84c24:	4667      	mov	r7, ip
   84c26:	e743      	b.n	84ab0 <__sfvwrite_r+0x154>
   84c28:	4648      	mov	r0, r9
   84c2a:	f8cd c000 	str.w	ip, [sp]
   84c2e:	f000 fc17 	bl	85460 <_realloc_r>
   84c32:	f8dd c000 	ldr.w	ip, [sp]
   84c36:	4683      	mov	fp, r0
   84c38:	2800      	cmp	r0, #0
   84c3a:	d1be      	bne.n	84bba <__sfvwrite_r+0x25e>
   84c3c:	4648      	mov	r0, r9
   84c3e:	6921      	ldr	r1, [r4, #16]
   84c40:	f7ff fdc0 	bl	847c4 <_free_r>
   84c44:	89a3      	ldrh	r3, [r4, #12]
   84c46:	220c      	movs	r2, #12
   84c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84c4c:	b29b      	uxth	r3, r3
   84c4e:	f8c9 2000 	str.w	r2, [r9]
   84c52:	e701      	b.n	84a58 <__sfvwrite_r+0xfc>
   84c54:	2701      	movs	r7, #1
   84c56:	f108 0a01 	add.w	sl, r8, #1
   84c5a:	9701      	str	r7, [sp, #4]
   84c5c:	e70e      	b.n	84a7c <__sfvwrite_r+0x120>
   84c5e:	f04f 30ff 	mov.w	r0, #4294967295
   84c62:	e6aa      	b.n	849ba <__sfvwrite_r+0x5e>
   84c64:	230c      	movs	r3, #12
   84c66:	f8c9 3000 	str.w	r3, [r9]
   84c6a:	89a3      	ldrh	r3, [r4, #12]
   84c6c:	e6f4      	b.n	84a58 <__sfvwrite_r+0xfc>
   84c6e:	bf00      	nop
   84c70:	7ffffc00 	.word	0x7ffffc00

00084c74 <_fwalk>:
   84c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c78:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   84c7c:	4688      	mov	r8, r1
   84c7e:	d019      	beq.n	84cb4 <_fwalk+0x40>
   84c80:	2600      	movs	r6, #0
   84c82:	687d      	ldr	r5, [r7, #4]
   84c84:	68bc      	ldr	r4, [r7, #8]
   84c86:	3d01      	subs	r5, #1
   84c88:	d40e      	bmi.n	84ca8 <_fwalk+0x34>
   84c8a:	89a3      	ldrh	r3, [r4, #12]
   84c8c:	3d01      	subs	r5, #1
   84c8e:	2b01      	cmp	r3, #1
   84c90:	d906      	bls.n	84ca0 <_fwalk+0x2c>
   84c92:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84c96:	4620      	mov	r0, r4
   84c98:	3301      	adds	r3, #1
   84c9a:	d001      	beq.n	84ca0 <_fwalk+0x2c>
   84c9c:	47c0      	blx	r8
   84c9e:	4306      	orrs	r6, r0
   84ca0:	1c6b      	adds	r3, r5, #1
   84ca2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84ca6:	d1f0      	bne.n	84c8a <_fwalk+0x16>
   84ca8:	683f      	ldr	r7, [r7, #0]
   84caa:	2f00      	cmp	r7, #0
   84cac:	d1e9      	bne.n	84c82 <_fwalk+0xe>
   84cae:	4630      	mov	r0, r6
   84cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84cb4:	463e      	mov	r6, r7
   84cb6:	4630      	mov	r0, r6
   84cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084cbc <__locale_charset>:
   84cbc:	4800      	ldr	r0, [pc, #0]	; (84cc0 <__locale_charset+0x4>)
   84cbe:	4770      	bx	lr
   84cc0:	2007043c 	.word	0x2007043c

00084cc4 <__locale_mb_cur_max>:
   84cc4:	4b01      	ldr	r3, [pc, #4]	; (84ccc <__locale_mb_cur_max+0x8>)
   84cc6:	6818      	ldr	r0, [r3, #0]
   84cc8:	4770      	bx	lr
   84cca:	bf00      	nop
   84ccc:	2007045c 	.word	0x2007045c

00084cd0 <__smakebuf_r>:
   84cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   84cd2:	898b      	ldrh	r3, [r1, #12]
   84cd4:	b091      	sub	sp, #68	; 0x44
   84cd6:	b29a      	uxth	r2, r3
   84cd8:	0796      	lsls	r6, r2, #30
   84cda:	460c      	mov	r4, r1
   84cdc:	4605      	mov	r5, r0
   84cde:	d437      	bmi.n	84d50 <__smakebuf_r+0x80>
   84ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ce4:	2900      	cmp	r1, #0
   84ce6:	db17      	blt.n	84d18 <__smakebuf_r+0x48>
   84ce8:	aa01      	add	r2, sp, #4
   84cea:	f000 ff39 	bl	85b60 <_fstat_r>
   84cee:	2800      	cmp	r0, #0
   84cf0:	db10      	blt.n	84d14 <__smakebuf_r+0x44>
   84cf2:	9b02      	ldr	r3, [sp, #8]
   84cf4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84cf8:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84cfc:	424f      	negs	r7, r1
   84cfe:	414f      	adcs	r7, r1
   84d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84d04:	d02c      	beq.n	84d60 <__smakebuf_r+0x90>
   84d06:	89a3      	ldrh	r3, [r4, #12]
   84d08:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84d10:	81a3      	strh	r3, [r4, #12]
   84d12:	e00b      	b.n	84d2c <__smakebuf_r+0x5c>
   84d14:	89a3      	ldrh	r3, [r4, #12]
   84d16:	b29a      	uxth	r2, r3
   84d18:	f012 0f80 	tst.w	r2, #128	; 0x80
   84d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84d20:	81a3      	strh	r3, [r4, #12]
   84d22:	bf14      	ite	ne
   84d24:	2640      	movne	r6, #64	; 0x40
   84d26:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   84d2a:	2700      	movs	r7, #0
   84d2c:	4628      	mov	r0, r5
   84d2e:	4631      	mov	r1, r6
   84d30:	f000 f846 	bl	84dc0 <_malloc_r>
   84d34:	89a3      	ldrh	r3, [r4, #12]
   84d36:	2800      	cmp	r0, #0
   84d38:	d029      	beq.n	84d8e <__smakebuf_r+0xbe>
   84d3a:	4a1b      	ldr	r2, [pc, #108]	; (84da8 <__smakebuf_r+0xd8>)
   84d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84d40:	63ea      	str	r2, [r5, #60]	; 0x3c
   84d42:	81a3      	strh	r3, [r4, #12]
   84d44:	6020      	str	r0, [r4, #0]
   84d46:	6120      	str	r0, [r4, #16]
   84d48:	6166      	str	r6, [r4, #20]
   84d4a:	b9a7      	cbnz	r7, 84d76 <__smakebuf_r+0xa6>
   84d4c:	b011      	add	sp, #68	; 0x44
   84d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84d50:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84d54:	2201      	movs	r2, #1
   84d56:	600b      	str	r3, [r1, #0]
   84d58:	610b      	str	r3, [r1, #16]
   84d5a:	614a      	str	r2, [r1, #20]
   84d5c:	b011      	add	sp, #68	; 0x44
   84d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84d60:	4a12      	ldr	r2, [pc, #72]	; (84dac <__smakebuf_r+0xdc>)
   84d62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84d64:	4293      	cmp	r3, r2
   84d66:	d1ce      	bne.n	84d06 <__smakebuf_r+0x36>
   84d68:	89a3      	ldrh	r3, [r4, #12]
   84d6a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84d6e:	4333      	orrs	r3, r6
   84d70:	81a3      	strh	r3, [r4, #12]
   84d72:	64e6      	str	r6, [r4, #76]	; 0x4c
   84d74:	e7da      	b.n	84d2c <__smakebuf_r+0x5c>
   84d76:	4628      	mov	r0, r5
   84d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84d7c:	f000 ff04 	bl	85b88 <_isatty_r>
   84d80:	2800      	cmp	r0, #0
   84d82:	d0e3      	beq.n	84d4c <__smakebuf_r+0x7c>
   84d84:	89a3      	ldrh	r3, [r4, #12]
   84d86:	f043 0301 	orr.w	r3, r3, #1
   84d8a:	81a3      	strh	r3, [r4, #12]
   84d8c:	e7de      	b.n	84d4c <__smakebuf_r+0x7c>
   84d8e:	059a      	lsls	r2, r3, #22
   84d90:	d4dc      	bmi.n	84d4c <__smakebuf_r+0x7c>
   84d92:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84d96:	f043 0302 	orr.w	r3, r3, #2
   84d9a:	2101      	movs	r1, #1
   84d9c:	81a3      	strh	r3, [r4, #12]
   84d9e:	6022      	str	r2, [r4, #0]
   84da0:	6122      	str	r2, [r4, #16]
   84da2:	6161      	str	r1, [r4, #20]
   84da4:	e7d2      	b.n	84d4c <__smakebuf_r+0x7c>
   84da6:	bf00      	nop
   84da8:	00084531 	.word	0x00084531
   84dac:	000858a1 	.word	0x000858a1

00084db0 <malloc>:
   84db0:	4b02      	ldr	r3, [pc, #8]	; (84dbc <malloc+0xc>)
   84db2:	4601      	mov	r1, r0
   84db4:	6818      	ldr	r0, [r3, #0]
   84db6:	f000 b803 	b.w	84dc0 <_malloc_r>
   84dba:	bf00      	nop
   84dbc:	20070438 	.word	0x20070438

00084dc0 <_malloc_r>:
   84dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84dc4:	f101 050b 	add.w	r5, r1, #11
   84dc8:	2d16      	cmp	r5, #22
   84dca:	b083      	sub	sp, #12
   84dcc:	4606      	mov	r6, r0
   84dce:	d927      	bls.n	84e20 <_malloc_r+0x60>
   84dd0:	f035 0507 	bics.w	r5, r5, #7
   84dd4:	d427      	bmi.n	84e26 <_malloc_r+0x66>
   84dd6:	42a9      	cmp	r1, r5
   84dd8:	d825      	bhi.n	84e26 <_malloc_r+0x66>
   84dda:	4630      	mov	r0, r6
   84ddc:	f000 fb3c 	bl	85458 <__malloc_lock>
   84de0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84de4:	d226      	bcs.n	84e34 <_malloc_r+0x74>
   84de6:	4fc1      	ldr	r7, [pc, #772]	; (850ec <_malloc_r+0x32c>)
   84de8:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84dec:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   84df0:	68dc      	ldr	r4, [r3, #12]
   84df2:	429c      	cmp	r4, r3
   84df4:	f000 81d2 	beq.w	8519c <_malloc_r+0x3dc>
   84df8:	6863      	ldr	r3, [r4, #4]
   84dfa:	68e2      	ldr	r2, [r4, #12]
   84dfc:	f023 0303 	bic.w	r3, r3, #3
   84e00:	4423      	add	r3, r4
   84e02:	6858      	ldr	r0, [r3, #4]
   84e04:	68a1      	ldr	r1, [r4, #8]
   84e06:	f040 0501 	orr.w	r5, r0, #1
   84e0a:	60ca      	str	r2, [r1, #12]
   84e0c:	4630      	mov	r0, r6
   84e0e:	6091      	str	r1, [r2, #8]
   84e10:	605d      	str	r5, [r3, #4]
   84e12:	f000 fb23 	bl	8545c <__malloc_unlock>
   84e16:	3408      	adds	r4, #8
   84e18:	4620      	mov	r0, r4
   84e1a:	b003      	add	sp, #12
   84e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84e20:	2510      	movs	r5, #16
   84e22:	42a9      	cmp	r1, r5
   84e24:	d9d9      	bls.n	84dda <_malloc_r+0x1a>
   84e26:	2400      	movs	r4, #0
   84e28:	230c      	movs	r3, #12
   84e2a:	4620      	mov	r0, r4
   84e2c:	6033      	str	r3, [r6, #0]
   84e2e:	b003      	add	sp, #12
   84e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84e34:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   84e38:	f000 8089 	beq.w	84f4e <_malloc_r+0x18e>
   84e3c:	f1bc 0f04 	cmp.w	ip, #4
   84e40:	f200 8160 	bhi.w	85104 <_malloc_r+0x344>
   84e44:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   84e48:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   84e4c:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84e50:	4fa6      	ldr	r7, [pc, #664]	; (850ec <_malloc_r+0x32c>)
   84e52:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84e56:	68cc      	ldr	r4, [r1, #12]
   84e58:	42a1      	cmp	r1, r4
   84e5a:	d105      	bne.n	84e68 <_malloc_r+0xa8>
   84e5c:	e00c      	b.n	84e78 <_malloc_r+0xb8>
   84e5e:	2b00      	cmp	r3, #0
   84e60:	da79      	bge.n	84f56 <_malloc_r+0x196>
   84e62:	68e4      	ldr	r4, [r4, #12]
   84e64:	42a1      	cmp	r1, r4
   84e66:	d007      	beq.n	84e78 <_malloc_r+0xb8>
   84e68:	6862      	ldr	r2, [r4, #4]
   84e6a:	f022 0203 	bic.w	r2, r2, #3
   84e6e:	1b53      	subs	r3, r2, r5
   84e70:	2b0f      	cmp	r3, #15
   84e72:	ddf4      	ble.n	84e5e <_malloc_r+0x9e>
   84e74:	f10c 3cff 	add.w	ip, ip, #4294967295
   84e78:	f10c 0c01 	add.w	ip, ip, #1
   84e7c:	4b9b      	ldr	r3, [pc, #620]	; (850ec <_malloc_r+0x32c>)
   84e7e:	693c      	ldr	r4, [r7, #16]
   84e80:	f103 0e08 	add.w	lr, r3, #8
   84e84:	4574      	cmp	r4, lr
   84e86:	f000 817e 	beq.w	85186 <_malloc_r+0x3c6>
   84e8a:	6861      	ldr	r1, [r4, #4]
   84e8c:	f021 0103 	bic.w	r1, r1, #3
   84e90:	1b4a      	subs	r2, r1, r5
   84e92:	2a0f      	cmp	r2, #15
   84e94:	f300 8164 	bgt.w	85160 <_malloc_r+0x3a0>
   84e98:	2a00      	cmp	r2, #0
   84e9a:	f8c3 e014 	str.w	lr, [r3, #20]
   84e9e:	f8c3 e010 	str.w	lr, [r3, #16]
   84ea2:	da69      	bge.n	84f78 <_malloc_r+0x1b8>
   84ea4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   84ea8:	f080 813a 	bcs.w	85120 <_malloc_r+0x360>
   84eac:	08c9      	lsrs	r1, r1, #3
   84eae:	108a      	asrs	r2, r1, #2
   84eb0:	f04f 0801 	mov.w	r8, #1
   84eb4:	fa08 f802 	lsl.w	r8, r8, r2
   84eb8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   84ebc:	685a      	ldr	r2, [r3, #4]
   84ebe:	6888      	ldr	r0, [r1, #8]
   84ec0:	ea48 0202 	orr.w	r2, r8, r2
   84ec4:	60a0      	str	r0, [r4, #8]
   84ec6:	60e1      	str	r1, [r4, #12]
   84ec8:	605a      	str	r2, [r3, #4]
   84eca:	608c      	str	r4, [r1, #8]
   84ecc:	60c4      	str	r4, [r0, #12]
   84ece:	ea4f 03ac 	mov.w	r3, ip, asr #2
   84ed2:	2001      	movs	r0, #1
   84ed4:	4098      	lsls	r0, r3
   84ed6:	4290      	cmp	r0, r2
   84ed8:	d85b      	bhi.n	84f92 <_malloc_r+0x1d2>
   84eda:	4202      	tst	r2, r0
   84edc:	d106      	bne.n	84eec <_malloc_r+0x12c>
   84ede:	f02c 0c03 	bic.w	ip, ip, #3
   84ee2:	0040      	lsls	r0, r0, #1
   84ee4:	4202      	tst	r2, r0
   84ee6:	f10c 0c04 	add.w	ip, ip, #4
   84eea:	d0fa      	beq.n	84ee2 <_malloc_r+0x122>
   84eec:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   84ef0:	4644      	mov	r4, r8
   84ef2:	46e1      	mov	r9, ip
   84ef4:	68e3      	ldr	r3, [r4, #12]
   84ef6:	429c      	cmp	r4, r3
   84ef8:	d107      	bne.n	84f0a <_malloc_r+0x14a>
   84efa:	e146      	b.n	8518a <_malloc_r+0x3ca>
   84efc:	2a00      	cmp	r2, #0
   84efe:	f280 8157 	bge.w	851b0 <_malloc_r+0x3f0>
   84f02:	68db      	ldr	r3, [r3, #12]
   84f04:	429c      	cmp	r4, r3
   84f06:	f000 8140 	beq.w	8518a <_malloc_r+0x3ca>
   84f0a:	6859      	ldr	r1, [r3, #4]
   84f0c:	f021 0103 	bic.w	r1, r1, #3
   84f10:	1b4a      	subs	r2, r1, r5
   84f12:	2a0f      	cmp	r2, #15
   84f14:	ddf2      	ble.n	84efc <_malloc_r+0x13c>
   84f16:	461c      	mov	r4, r3
   84f18:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84f1c:	68d9      	ldr	r1, [r3, #12]
   84f1e:	f045 0901 	orr.w	r9, r5, #1
   84f22:	f042 0801 	orr.w	r8, r2, #1
   84f26:	441d      	add	r5, r3
   84f28:	f8c3 9004 	str.w	r9, [r3, #4]
   84f2c:	4630      	mov	r0, r6
   84f2e:	f8cc 100c 	str.w	r1, [ip, #12]
   84f32:	f8c1 c008 	str.w	ip, [r1, #8]
   84f36:	617d      	str	r5, [r7, #20]
   84f38:	613d      	str	r5, [r7, #16]
   84f3a:	f8c5 e00c 	str.w	lr, [r5, #12]
   84f3e:	f8c5 e008 	str.w	lr, [r5, #8]
   84f42:	f8c5 8004 	str.w	r8, [r5, #4]
   84f46:	50aa      	str	r2, [r5, r2]
   84f48:	f000 fa88 	bl	8545c <__malloc_unlock>
   84f4c:	e764      	b.n	84e18 <_malloc_r+0x58>
   84f4e:	217e      	movs	r1, #126	; 0x7e
   84f50:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   84f54:	e77c      	b.n	84e50 <_malloc_r+0x90>
   84f56:	4422      	add	r2, r4
   84f58:	6850      	ldr	r0, [r2, #4]
   84f5a:	68e3      	ldr	r3, [r4, #12]
   84f5c:	68a1      	ldr	r1, [r4, #8]
   84f5e:	f040 0501 	orr.w	r5, r0, #1
   84f62:	60cb      	str	r3, [r1, #12]
   84f64:	4630      	mov	r0, r6
   84f66:	6099      	str	r1, [r3, #8]
   84f68:	6055      	str	r5, [r2, #4]
   84f6a:	f000 fa77 	bl	8545c <__malloc_unlock>
   84f6e:	3408      	adds	r4, #8
   84f70:	4620      	mov	r0, r4
   84f72:	b003      	add	sp, #12
   84f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f78:	4421      	add	r1, r4
   84f7a:	684b      	ldr	r3, [r1, #4]
   84f7c:	4630      	mov	r0, r6
   84f7e:	f043 0301 	orr.w	r3, r3, #1
   84f82:	604b      	str	r3, [r1, #4]
   84f84:	f000 fa6a 	bl	8545c <__malloc_unlock>
   84f88:	3408      	adds	r4, #8
   84f8a:	4620      	mov	r0, r4
   84f8c:	b003      	add	sp, #12
   84f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f92:	68bc      	ldr	r4, [r7, #8]
   84f94:	6863      	ldr	r3, [r4, #4]
   84f96:	f023 0903 	bic.w	r9, r3, #3
   84f9a:	45a9      	cmp	r9, r5
   84f9c:	d304      	bcc.n	84fa8 <_malloc_r+0x1e8>
   84f9e:	ebc5 0309 	rsb	r3, r5, r9
   84fa2:	2b0f      	cmp	r3, #15
   84fa4:	f300 8091 	bgt.w	850ca <_malloc_r+0x30a>
   84fa8:	4b51      	ldr	r3, [pc, #324]	; (850f0 <_malloc_r+0x330>)
   84faa:	4a52      	ldr	r2, [pc, #328]	; (850f4 <_malloc_r+0x334>)
   84fac:	6819      	ldr	r1, [r3, #0]
   84fae:	6813      	ldr	r3, [r2, #0]
   84fb0:	eb05 0a01 	add.w	sl, r5, r1
   84fb4:	3301      	adds	r3, #1
   84fb6:	eb04 0b09 	add.w	fp, r4, r9
   84fba:	f000 8161 	beq.w	85280 <_malloc_r+0x4c0>
   84fbe:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   84fc2:	f10a 0a0f 	add.w	sl, sl, #15
   84fc6:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   84fca:	f02a 0a0f 	bic.w	sl, sl, #15
   84fce:	4630      	mov	r0, r6
   84fd0:	4651      	mov	r1, sl
   84fd2:	9201      	str	r2, [sp, #4]
   84fd4:	f000 fc24 	bl	85820 <_sbrk_r>
   84fd8:	f1b0 3fff 	cmp.w	r0, #4294967295
   84fdc:	4680      	mov	r8, r0
   84fde:	9a01      	ldr	r2, [sp, #4]
   84fe0:	f000 8101 	beq.w	851e6 <_malloc_r+0x426>
   84fe4:	4583      	cmp	fp, r0
   84fe6:	f200 80fb 	bhi.w	851e0 <_malloc_r+0x420>
   84fea:	f8df c114 	ldr.w	ip, [pc, #276]	; 85100 <_malloc_r+0x340>
   84fee:	45c3      	cmp	fp, r8
   84ff0:	f8dc 3000 	ldr.w	r3, [ip]
   84ff4:	4453      	add	r3, sl
   84ff6:	f8cc 3000 	str.w	r3, [ip]
   84ffa:	f000 814a 	beq.w	85292 <_malloc_r+0x4d2>
   84ffe:	6812      	ldr	r2, [r2, #0]
   85000:	493c      	ldr	r1, [pc, #240]	; (850f4 <_malloc_r+0x334>)
   85002:	3201      	adds	r2, #1
   85004:	bf1b      	ittet	ne
   85006:	ebcb 0b08 	rsbne	fp, fp, r8
   8500a:	445b      	addne	r3, fp
   8500c:	f8c1 8000 	streq.w	r8, [r1]
   85010:	f8cc 3000 	strne.w	r3, [ip]
   85014:	f018 0307 	ands.w	r3, r8, #7
   85018:	f000 8114 	beq.w	85244 <_malloc_r+0x484>
   8501c:	f1c3 0208 	rsb	r2, r3, #8
   85020:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   85024:	4490      	add	r8, r2
   85026:	3308      	adds	r3, #8
   85028:	44c2      	add	sl, r8
   8502a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8502e:	ebca 0a03 	rsb	sl, sl, r3
   85032:	4651      	mov	r1, sl
   85034:	4630      	mov	r0, r6
   85036:	f8cd c004 	str.w	ip, [sp, #4]
   8503a:	f000 fbf1 	bl	85820 <_sbrk_r>
   8503e:	1c43      	adds	r3, r0, #1
   85040:	f8dd c004 	ldr.w	ip, [sp, #4]
   85044:	f000 8135 	beq.w	852b2 <_malloc_r+0x4f2>
   85048:	ebc8 0200 	rsb	r2, r8, r0
   8504c:	4452      	add	r2, sl
   8504e:	f042 0201 	orr.w	r2, r2, #1
   85052:	f8dc 3000 	ldr.w	r3, [ip]
   85056:	42bc      	cmp	r4, r7
   85058:	4453      	add	r3, sl
   8505a:	f8c7 8008 	str.w	r8, [r7, #8]
   8505e:	f8cc 3000 	str.w	r3, [ip]
   85062:	f8c8 2004 	str.w	r2, [r8, #4]
   85066:	f8df a098 	ldr.w	sl, [pc, #152]	; 85100 <_malloc_r+0x340>
   8506a:	d015      	beq.n	85098 <_malloc_r+0x2d8>
   8506c:	f1b9 0f0f 	cmp.w	r9, #15
   85070:	f240 80eb 	bls.w	8524a <_malloc_r+0x48a>
   85074:	6861      	ldr	r1, [r4, #4]
   85076:	f1a9 020c 	sub.w	r2, r9, #12
   8507a:	f022 0207 	bic.w	r2, r2, #7
   8507e:	f001 0101 	and.w	r1, r1, #1
   85082:	ea42 0e01 	orr.w	lr, r2, r1
   85086:	2005      	movs	r0, #5
   85088:	18a1      	adds	r1, r4, r2
   8508a:	2a0f      	cmp	r2, #15
   8508c:	f8c4 e004 	str.w	lr, [r4, #4]
   85090:	6048      	str	r0, [r1, #4]
   85092:	6088      	str	r0, [r1, #8]
   85094:	f200 8111 	bhi.w	852ba <_malloc_r+0x4fa>
   85098:	4a17      	ldr	r2, [pc, #92]	; (850f8 <_malloc_r+0x338>)
   8509a:	68bc      	ldr	r4, [r7, #8]
   8509c:	6811      	ldr	r1, [r2, #0]
   8509e:	428b      	cmp	r3, r1
   850a0:	bf88      	it	hi
   850a2:	6013      	strhi	r3, [r2, #0]
   850a4:	4a15      	ldr	r2, [pc, #84]	; (850fc <_malloc_r+0x33c>)
   850a6:	6811      	ldr	r1, [r2, #0]
   850a8:	428b      	cmp	r3, r1
   850aa:	bf88      	it	hi
   850ac:	6013      	strhi	r3, [r2, #0]
   850ae:	6862      	ldr	r2, [r4, #4]
   850b0:	f022 0203 	bic.w	r2, r2, #3
   850b4:	4295      	cmp	r5, r2
   850b6:	ebc5 0302 	rsb	r3, r5, r2
   850ba:	d801      	bhi.n	850c0 <_malloc_r+0x300>
   850bc:	2b0f      	cmp	r3, #15
   850be:	dc04      	bgt.n	850ca <_malloc_r+0x30a>
   850c0:	4630      	mov	r0, r6
   850c2:	f000 f9cb 	bl	8545c <__malloc_unlock>
   850c6:	2400      	movs	r4, #0
   850c8:	e6a6      	b.n	84e18 <_malloc_r+0x58>
   850ca:	f045 0201 	orr.w	r2, r5, #1
   850ce:	f043 0301 	orr.w	r3, r3, #1
   850d2:	4425      	add	r5, r4
   850d4:	6062      	str	r2, [r4, #4]
   850d6:	4630      	mov	r0, r6
   850d8:	60bd      	str	r5, [r7, #8]
   850da:	606b      	str	r3, [r5, #4]
   850dc:	f000 f9be 	bl	8545c <__malloc_unlock>
   850e0:	3408      	adds	r4, #8
   850e2:	4620      	mov	r0, r4
   850e4:	b003      	add	sp, #12
   850e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   850ea:	bf00      	nop
   850ec:	20070460 	.word	0x20070460
   850f0:	2007ab60 	.word	0x2007ab60
   850f4:	2007086c 	.word	0x2007086c
   850f8:	2007ab5c 	.word	0x2007ab5c
   850fc:	2007ab58 	.word	0x2007ab58
   85100:	2007ab64 	.word	0x2007ab64
   85104:	f1bc 0f14 	cmp.w	ip, #20
   85108:	d961      	bls.n	851ce <_malloc_r+0x40e>
   8510a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8510e:	f200 808f 	bhi.w	85230 <_malloc_r+0x470>
   85112:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   85116:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   8511a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8511e:	e697      	b.n	84e50 <_malloc_r+0x90>
   85120:	0a4b      	lsrs	r3, r1, #9
   85122:	2b04      	cmp	r3, #4
   85124:	d958      	bls.n	851d8 <_malloc_r+0x418>
   85126:	2b14      	cmp	r3, #20
   85128:	f200 80ad 	bhi.w	85286 <_malloc_r+0x4c6>
   8512c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   85130:	0050      	lsls	r0, r2, #1
   85132:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   85136:	6883      	ldr	r3, [r0, #8]
   85138:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 852f4 <_malloc_r+0x534>
   8513c:	4283      	cmp	r3, r0
   8513e:	f000 808a 	beq.w	85256 <_malloc_r+0x496>
   85142:	685a      	ldr	r2, [r3, #4]
   85144:	f022 0203 	bic.w	r2, r2, #3
   85148:	4291      	cmp	r1, r2
   8514a:	d202      	bcs.n	85152 <_malloc_r+0x392>
   8514c:	689b      	ldr	r3, [r3, #8]
   8514e:	4298      	cmp	r0, r3
   85150:	d1f7      	bne.n	85142 <_malloc_r+0x382>
   85152:	68d9      	ldr	r1, [r3, #12]
   85154:	687a      	ldr	r2, [r7, #4]
   85156:	60e1      	str	r1, [r4, #12]
   85158:	60a3      	str	r3, [r4, #8]
   8515a:	608c      	str	r4, [r1, #8]
   8515c:	60dc      	str	r4, [r3, #12]
   8515e:	e6b6      	b.n	84ece <_malloc_r+0x10e>
   85160:	f045 0701 	orr.w	r7, r5, #1
   85164:	f042 0101 	orr.w	r1, r2, #1
   85168:	4425      	add	r5, r4
   8516a:	6067      	str	r7, [r4, #4]
   8516c:	4630      	mov	r0, r6
   8516e:	615d      	str	r5, [r3, #20]
   85170:	611d      	str	r5, [r3, #16]
   85172:	f8c5 e00c 	str.w	lr, [r5, #12]
   85176:	f8c5 e008 	str.w	lr, [r5, #8]
   8517a:	6069      	str	r1, [r5, #4]
   8517c:	50aa      	str	r2, [r5, r2]
   8517e:	3408      	adds	r4, #8
   85180:	f000 f96c 	bl	8545c <__malloc_unlock>
   85184:	e648      	b.n	84e18 <_malloc_r+0x58>
   85186:	685a      	ldr	r2, [r3, #4]
   85188:	e6a1      	b.n	84ece <_malloc_r+0x10e>
   8518a:	f109 0901 	add.w	r9, r9, #1
   8518e:	f019 0f03 	tst.w	r9, #3
   85192:	f104 0408 	add.w	r4, r4, #8
   85196:	f47f aead 	bne.w	84ef4 <_malloc_r+0x134>
   8519a:	e02d      	b.n	851f8 <_malloc_r+0x438>
   8519c:	f104 0308 	add.w	r3, r4, #8
   851a0:	6964      	ldr	r4, [r4, #20]
   851a2:	42a3      	cmp	r3, r4
   851a4:	bf08      	it	eq
   851a6:	f10c 0c02 	addeq.w	ip, ip, #2
   851aa:	f43f ae67 	beq.w	84e7c <_malloc_r+0xbc>
   851ae:	e623      	b.n	84df8 <_malloc_r+0x38>
   851b0:	4419      	add	r1, r3
   851b2:	6848      	ldr	r0, [r1, #4]
   851b4:	461c      	mov	r4, r3
   851b6:	f854 2f08 	ldr.w	r2, [r4, #8]!
   851ba:	68db      	ldr	r3, [r3, #12]
   851bc:	f040 0501 	orr.w	r5, r0, #1
   851c0:	604d      	str	r5, [r1, #4]
   851c2:	4630      	mov	r0, r6
   851c4:	60d3      	str	r3, [r2, #12]
   851c6:	609a      	str	r2, [r3, #8]
   851c8:	f000 f948 	bl	8545c <__malloc_unlock>
   851cc:	e624      	b.n	84e18 <_malloc_r+0x58>
   851ce:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   851d2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   851d6:	e63b      	b.n	84e50 <_malloc_r+0x90>
   851d8:	098a      	lsrs	r2, r1, #6
   851da:	3238      	adds	r2, #56	; 0x38
   851dc:	0050      	lsls	r0, r2, #1
   851de:	e7a8      	b.n	85132 <_malloc_r+0x372>
   851e0:	42bc      	cmp	r4, r7
   851e2:	f43f af02 	beq.w	84fea <_malloc_r+0x22a>
   851e6:	68bc      	ldr	r4, [r7, #8]
   851e8:	6862      	ldr	r2, [r4, #4]
   851ea:	f022 0203 	bic.w	r2, r2, #3
   851ee:	e761      	b.n	850b4 <_malloc_r+0x2f4>
   851f0:	f8d8 8000 	ldr.w	r8, [r8]
   851f4:	4598      	cmp	r8, r3
   851f6:	d17a      	bne.n	852ee <_malloc_r+0x52e>
   851f8:	f01c 0f03 	tst.w	ip, #3
   851fc:	f1a8 0308 	sub.w	r3, r8, #8
   85200:	f10c 3cff 	add.w	ip, ip, #4294967295
   85204:	d1f4      	bne.n	851f0 <_malloc_r+0x430>
   85206:	687b      	ldr	r3, [r7, #4]
   85208:	ea23 0300 	bic.w	r3, r3, r0
   8520c:	607b      	str	r3, [r7, #4]
   8520e:	0040      	lsls	r0, r0, #1
   85210:	4298      	cmp	r0, r3
   85212:	f63f aebe 	bhi.w	84f92 <_malloc_r+0x1d2>
   85216:	2800      	cmp	r0, #0
   85218:	f43f aebb 	beq.w	84f92 <_malloc_r+0x1d2>
   8521c:	4203      	tst	r3, r0
   8521e:	46cc      	mov	ip, r9
   85220:	f47f ae64 	bne.w	84eec <_malloc_r+0x12c>
   85224:	0040      	lsls	r0, r0, #1
   85226:	4203      	tst	r3, r0
   85228:	f10c 0c04 	add.w	ip, ip, #4
   8522c:	d0fa      	beq.n	85224 <_malloc_r+0x464>
   8522e:	e65d      	b.n	84eec <_malloc_r+0x12c>
   85230:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   85234:	d819      	bhi.n	8526a <_malloc_r+0x4aa>
   85236:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8523a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   8523e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   85242:	e605      	b.n	84e50 <_malloc_r+0x90>
   85244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   85248:	e6ee      	b.n	85028 <_malloc_r+0x268>
   8524a:	2301      	movs	r3, #1
   8524c:	f8c8 3004 	str.w	r3, [r8, #4]
   85250:	4644      	mov	r4, r8
   85252:	2200      	movs	r2, #0
   85254:	e72e      	b.n	850b4 <_malloc_r+0x2f4>
   85256:	1092      	asrs	r2, r2, #2
   85258:	2001      	movs	r0, #1
   8525a:	4090      	lsls	r0, r2
   8525c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85260:	4619      	mov	r1, r3
   85262:	4302      	orrs	r2, r0
   85264:	f8c8 2004 	str.w	r2, [r8, #4]
   85268:	e775      	b.n	85156 <_malloc_r+0x396>
   8526a:	f240 5354 	movw	r3, #1364	; 0x554
   8526e:	459c      	cmp	ip, r3
   85270:	d81b      	bhi.n	852aa <_malloc_r+0x4ea>
   85272:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   85276:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   8527a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8527e:	e5e7      	b.n	84e50 <_malloc_r+0x90>
   85280:	f10a 0a10 	add.w	sl, sl, #16
   85284:	e6a3      	b.n	84fce <_malloc_r+0x20e>
   85286:	2b54      	cmp	r3, #84	; 0x54
   85288:	d81f      	bhi.n	852ca <_malloc_r+0x50a>
   8528a:	0b0a      	lsrs	r2, r1, #12
   8528c:	326e      	adds	r2, #110	; 0x6e
   8528e:	0050      	lsls	r0, r2, #1
   85290:	e74f      	b.n	85132 <_malloc_r+0x372>
   85292:	f3cb 010b 	ubfx	r1, fp, #0, #12
   85296:	2900      	cmp	r1, #0
   85298:	f47f aeb1 	bne.w	84ffe <_malloc_r+0x23e>
   8529c:	eb0a 0109 	add.w	r1, sl, r9
   852a0:	68ba      	ldr	r2, [r7, #8]
   852a2:	f041 0101 	orr.w	r1, r1, #1
   852a6:	6051      	str	r1, [r2, #4]
   852a8:	e6f6      	b.n	85098 <_malloc_r+0x2d8>
   852aa:	21fc      	movs	r1, #252	; 0xfc
   852ac:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   852b0:	e5ce      	b.n	84e50 <_malloc_r+0x90>
   852b2:	2201      	movs	r2, #1
   852b4:	f04f 0a00 	mov.w	sl, #0
   852b8:	e6cb      	b.n	85052 <_malloc_r+0x292>
   852ba:	f104 0108 	add.w	r1, r4, #8
   852be:	4630      	mov	r0, r6
   852c0:	f7ff fa80 	bl	847c4 <_free_r>
   852c4:	f8da 3000 	ldr.w	r3, [sl]
   852c8:	e6e6      	b.n	85098 <_malloc_r+0x2d8>
   852ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   852ce:	d803      	bhi.n	852d8 <_malloc_r+0x518>
   852d0:	0bca      	lsrs	r2, r1, #15
   852d2:	3277      	adds	r2, #119	; 0x77
   852d4:	0050      	lsls	r0, r2, #1
   852d6:	e72c      	b.n	85132 <_malloc_r+0x372>
   852d8:	f240 5254 	movw	r2, #1364	; 0x554
   852dc:	4293      	cmp	r3, r2
   852de:	d803      	bhi.n	852e8 <_malloc_r+0x528>
   852e0:	0c8a      	lsrs	r2, r1, #18
   852e2:	327c      	adds	r2, #124	; 0x7c
   852e4:	0050      	lsls	r0, r2, #1
   852e6:	e724      	b.n	85132 <_malloc_r+0x372>
   852e8:	20fc      	movs	r0, #252	; 0xfc
   852ea:	227e      	movs	r2, #126	; 0x7e
   852ec:	e721      	b.n	85132 <_malloc_r+0x372>
   852ee:	687b      	ldr	r3, [r7, #4]
   852f0:	e78d      	b.n	8520e <_malloc_r+0x44e>
   852f2:	bf00      	nop
   852f4:	20070460 	.word	0x20070460

000852f8 <memchr>:
   852f8:	0783      	lsls	r3, r0, #30
   852fa:	b470      	push	{r4, r5, r6}
   852fc:	b2c9      	uxtb	r1, r1
   852fe:	d040      	beq.n	85382 <memchr+0x8a>
   85300:	1e54      	subs	r4, r2, #1
   85302:	b32a      	cbz	r2, 85350 <memchr+0x58>
   85304:	7803      	ldrb	r3, [r0, #0]
   85306:	428b      	cmp	r3, r1
   85308:	d023      	beq.n	85352 <memchr+0x5a>
   8530a:	1c43      	adds	r3, r0, #1
   8530c:	e004      	b.n	85318 <memchr+0x20>
   8530e:	b1fc      	cbz	r4, 85350 <memchr+0x58>
   85310:	7805      	ldrb	r5, [r0, #0]
   85312:	4614      	mov	r4, r2
   85314:	428d      	cmp	r5, r1
   85316:	d01c      	beq.n	85352 <memchr+0x5a>
   85318:	f013 0f03 	tst.w	r3, #3
   8531c:	4618      	mov	r0, r3
   8531e:	f104 32ff 	add.w	r2, r4, #4294967295
   85322:	f103 0301 	add.w	r3, r3, #1
   85326:	d1f2      	bne.n	8530e <memchr+0x16>
   85328:	2c03      	cmp	r4, #3
   8532a:	d814      	bhi.n	85356 <memchr+0x5e>
   8532c:	1e65      	subs	r5, r4, #1
   8532e:	b354      	cbz	r4, 85386 <memchr+0x8e>
   85330:	7803      	ldrb	r3, [r0, #0]
   85332:	428b      	cmp	r3, r1
   85334:	d00d      	beq.n	85352 <memchr+0x5a>
   85336:	1c42      	adds	r2, r0, #1
   85338:	2300      	movs	r3, #0
   8533a:	e002      	b.n	85342 <memchr+0x4a>
   8533c:	7804      	ldrb	r4, [r0, #0]
   8533e:	428c      	cmp	r4, r1
   85340:	d007      	beq.n	85352 <memchr+0x5a>
   85342:	42ab      	cmp	r3, r5
   85344:	4610      	mov	r0, r2
   85346:	f103 0301 	add.w	r3, r3, #1
   8534a:	f102 0201 	add.w	r2, r2, #1
   8534e:	d1f5      	bne.n	8533c <memchr+0x44>
   85350:	2000      	movs	r0, #0
   85352:	bc70      	pop	{r4, r5, r6}
   85354:	4770      	bx	lr
   85356:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8535a:	4603      	mov	r3, r0
   8535c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85360:	681a      	ldr	r2, [r3, #0]
   85362:	4618      	mov	r0, r3
   85364:	4072      	eors	r2, r6
   85366:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   8536a:	ea25 0202 	bic.w	r2, r5, r2
   8536e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85372:	f103 0304 	add.w	r3, r3, #4
   85376:	d1d9      	bne.n	8532c <memchr+0x34>
   85378:	3c04      	subs	r4, #4
   8537a:	2c03      	cmp	r4, #3
   8537c:	4618      	mov	r0, r3
   8537e:	d8ef      	bhi.n	85360 <memchr+0x68>
   85380:	e7d4      	b.n	8532c <memchr+0x34>
   85382:	4614      	mov	r4, r2
   85384:	e7d0      	b.n	85328 <memchr+0x30>
   85386:	4620      	mov	r0, r4
   85388:	e7e3      	b.n	85352 <memchr+0x5a>
   8538a:	bf00      	nop

0008538c <memmove>:
   8538c:	4288      	cmp	r0, r1
   8538e:	b4f0      	push	{r4, r5, r6, r7}
   85390:	d910      	bls.n	853b4 <memmove+0x28>
   85392:	188c      	adds	r4, r1, r2
   85394:	42a0      	cmp	r0, r4
   85396:	d20d      	bcs.n	853b4 <memmove+0x28>
   85398:	1885      	adds	r5, r0, r2
   8539a:	1e53      	subs	r3, r2, #1
   8539c:	b142      	cbz	r2, 853b0 <memmove+0x24>
   8539e:	4621      	mov	r1, r4
   853a0:	462a      	mov	r2, r5
   853a2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   853a6:	3b01      	subs	r3, #1
   853a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   853ac:	1c5c      	adds	r4, r3, #1
   853ae:	d1f8      	bne.n	853a2 <memmove+0x16>
   853b0:	bcf0      	pop	{r4, r5, r6, r7}
   853b2:	4770      	bx	lr
   853b4:	2a0f      	cmp	r2, #15
   853b6:	d944      	bls.n	85442 <memmove+0xb6>
   853b8:	ea40 0301 	orr.w	r3, r0, r1
   853bc:	079b      	lsls	r3, r3, #30
   853be:	d144      	bne.n	8544a <memmove+0xbe>
   853c0:	f1a2 0710 	sub.w	r7, r2, #16
   853c4:	093f      	lsrs	r7, r7, #4
   853c6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   853ca:	3610      	adds	r6, #16
   853cc:	460c      	mov	r4, r1
   853ce:	4603      	mov	r3, r0
   853d0:	6825      	ldr	r5, [r4, #0]
   853d2:	3310      	adds	r3, #16
   853d4:	f843 5c10 	str.w	r5, [r3, #-16]
   853d8:	6865      	ldr	r5, [r4, #4]
   853da:	3410      	adds	r4, #16
   853dc:	f843 5c0c 	str.w	r5, [r3, #-12]
   853e0:	f854 5c08 	ldr.w	r5, [r4, #-8]
   853e4:	f843 5c08 	str.w	r5, [r3, #-8]
   853e8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   853ec:	f843 5c04 	str.w	r5, [r3, #-4]
   853f0:	42b3      	cmp	r3, r6
   853f2:	d1ed      	bne.n	853d0 <memmove+0x44>
   853f4:	1c7b      	adds	r3, r7, #1
   853f6:	f002 0c0f 	and.w	ip, r2, #15
   853fa:	011b      	lsls	r3, r3, #4
   853fc:	f1bc 0f03 	cmp.w	ip, #3
   85400:	4419      	add	r1, r3
   85402:	4403      	add	r3, r0
   85404:	d923      	bls.n	8544e <memmove+0xc2>
   85406:	460e      	mov	r6, r1
   85408:	461d      	mov	r5, r3
   8540a:	4664      	mov	r4, ip
   8540c:	f856 7b04 	ldr.w	r7, [r6], #4
   85410:	3c04      	subs	r4, #4
   85412:	2c03      	cmp	r4, #3
   85414:	f845 7b04 	str.w	r7, [r5], #4
   85418:	d8f8      	bhi.n	8540c <memmove+0x80>
   8541a:	f1ac 0404 	sub.w	r4, ip, #4
   8541e:	f024 0403 	bic.w	r4, r4, #3
   85422:	3404      	adds	r4, #4
   85424:	f002 0203 	and.w	r2, r2, #3
   85428:	4423      	add	r3, r4
   8542a:	4421      	add	r1, r4
   8542c:	2a00      	cmp	r2, #0
   8542e:	d0bf      	beq.n	853b0 <memmove+0x24>
   85430:	441a      	add	r2, r3
   85432:	f811 4b01 	ldrb.w	r4, [r1], #1
   85436:	f803 4b01 	strb.w	r4, [r3], #1
   8543a:	4293      	cmp	r3, r2
   8543c:	d1f9      	bne.n	85432 <memmove+0xa6>
   8543e:	bcf0      	pop	{r4, r5, r6, r7}
   85440:	4770      	bx	lr
   85442:	4603      	mov	r3, r0
   85444:	2a00      	cmp	r2, #0
   85446:	d1f3      	bne.n	85430 <memmove+0xa4>
   85448:	e7b2      	b.n	853b0 <memmove+0x24>
   8544a:	4603      	mov	r3, r0
   8544c:	e7f0      	b.n	85430 <memmove+0xa4>
   8544e:	4662      	mov	r2, ip
   85450:	2a00      	cmp	r2, #0
   85452:	d1ed      	bne.n	85430 <memmove+0xa4>
   85454:	e7ac      	b.n	853b0 <memmove+0x24>
   85456:	bf00      	nop

00085458 <__malloc_lock>:
   85458:	4770      	bx	lr
   8545a:	bf00      	nop

0008545c <__malloc_unlock>:
   8545c:	4770      	bx	lr
   8545e:	bf00      	nop

00085460 <_realloc_r>:
   85460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85464:	460c      	mov	r4, r1
   85466:	b083      	sub	sp, #12
   85468:	4690      	mov	r8, r2
   8546a:	4681      	mov	r9, r0
   8546c:	2900      	cmp	r1, #0
   8546e:	f000 80ba 	beq.w	855e6 <_realloc_r+0x186>
   85472:	f7ff fff1 	bl	85458 <__malloc_lock>
   85476:	f108 060b 	add.w	r6, r8, #11
   8547a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8547e:	2e16      	cmp	r6, #22
   85480:	f023 0503 	bic.w	r5, r3, #3
   85484:	f1a4 0708 	sub.w	r7, r4, #8
   85488:	d84b      	bhi.n	85522 <_realloc_r+0xc2>
   8548a:	2110      	movs	r1, #16
   8548c:	460e      	mov	r6, r1
   8548e:	45b0      	cmp	r8, r6
   85490:	d84c      	bhi.n	8552c <_realloc_r+0xcc>
   85492:	428d      	cmp	r5, r1
   85494:	da51      	bge.n	8553a <_realloc_r+0xda>
   85496:	f8df b384 	ldr.w	fp, [pc, #900]	; 8581c <_realloc_r+0x3bc>
   8549a:	1978      	adds	r0, r7, r5
   8549c:	f8db e008 	ldr.w	lr, [fp, #8]
   854a0:	4586      	cmp	lr, r0
   854a2:	f000 80a6 	beq.w	855f2 <_realloc_r+0x192>
   854a6:	6842      	ldr	r2, [r0, #4]
   854a8:	f022 0c01 	bic.w	ip, r2, #1
   854ac:	4484      	add	ip, r0
   854ae:	f8dc c004 	ldr.w	ip, [ip, #4]
   854b2:	f01c 0f01 	tst.w	ip, #1
   854b6:	d054      	beq.n	85562 <_realloc_r+0x102>
   854b8:	2200      	movs	r2, #0
   854ba:	4610      	mov	r0, r2
   854bc:	07db      	lsls	r3, r3, #31
   854be:	d46f      	bmi.n	855a0 <_realloc_r+0x140>
   854c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   854c4:	ebc3 0a07 	rsb	sl, r3, r7
   854c8:	f8da 3004 	ldr.w	r3, [sl, #4]
   854cc:	f023 0303 	bic.w	r3, r3, #3
   854d0:	442b      	add	r3, r5
   854d2:	2800      	cmp	r0, #0
   854d4:	d062      	beq.n	8559c <_realloc_r+0x13c>
   854d6:	4570      	cmp	r0, lr
   854d8:	f000 80e9 	beq.w	856ae <_realloc_r+0x24e>
   854dc:	eb02 0e03 	add.w	lr, r2, r3
   854e0:	458e      	cmp	lr, r1
   854e2:	db5b      	blt.n	8559c <_realloc_r+0x13c>
   854e4:	68c3      	ldr	r3, [r0, #12]
   854e6:	6882      	ldr	r2, [r0, #8]
   854e8:	46d0      	mov	r8, sl
   854ea:	60d3      	str	r3, [r2, #12]
   854ec:	609a      	str	r2, [r3, #8]
   854ee:	f858 1f08 	ldr.w	r1, [r8, #8]!
   854f2:	f8da 300c 	ldr.w	r3, [sl, #12]
   854f6:	1f2a      	subs	r2, r5, #4
   854f8:	2a24      	cmp	r2, #36	; 0x24
   854fa:	60cb      	str	r3, [r1, #12]
   854fc:	6099      	str	r1, [r3, #8]
   854fe:	f200 8123 	bhi.w	85748 <_realloc_r+0x2e8>
   85502:	2a13      	cmp	r2, #19
   85504:	f240 80b0 	bls.w	85668 <_realloc_r+0x208>
   85508:	6823      	ldr	r3, [r4, #0]
   8550a:	2a1b      	cmp	r2, #27
   8550c:	f8ca 3008 	str.w	r3, [sl, #8]
   85510:	6863      	ldr	r3, [r4, #4]
   85512:	f8ca 300c 	str.w	r3, [sl, #12]
   85516:	f200 812b 	bhi.w	85770 <_realloc_r+0x310>
   8551a:	3408      	adds	r4, #8
   8551c:	f10a 0310 	add.w	r3, sl, #16
   85520:	e0a3      	b.n	8566a <_realloc_r+0x20a>
   85522:	f026 0607 	bic.w	r6, r6, #7
   85526:	2e00      	cmp	r6, #0
   85528:	4631      	mov	r1, r6
   8552a:	dab0      	bge.n	8548e <_realloc_r+0x2e>
   8552c:	230c      	movs	r3, #12
   8552e:	2000      	movs	r0, #0
   85530:	f8c9 3000 	str.w	r3, [r9]
   85534:	b003      	add	sp, #12
   85536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8553a:	46a0      	mov	r8, r4
   8553c:	1baa      	subs	r2, r5, r6
   8553e:	2a0f      	cmp	r2, #15
   85540:	f003 0301 	and.w	r3, r3, #1
   85544:	d81a      	bhi.n	8557c <_realloc_r+0x11c>
   85546:	432b      	orrs	r3, r5
   85548:	607b      	str	r3, [r7, #4]
   8554a:	443d      	add	r5, r7
   8554c:	686b      	ldr	r3, [r5, #4]
   8554e:	f043 0301 	orr.w	r3, r3, #1
   85552:	606b      	str	r3, [r5, #4]
   85554:	4648      	mov	r0, r9
   85556:	f7ff ff81 	bl	8545c <__malloc_unlock>
   8555a:	4640      	mov	r0, r8
   8555c:	b003      	add	sp, #12
   8555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85562:	f022 0203 	bic.w	r2, r2, #3
   85566:	eb02 0c05 	add.w	ip, r2, r5
   8556a:	458c      	cmp	ip, r1
   8556c:	dba6      	blt.n	854bc <_realloc_r+0x5c>
   8556e:	68c2      	ldr	r2, [r0, #12]
   85570:	6881      	ldr	r1, [r0, #8]
   85572:	46a0      	mov	r8, r4
   85574:	60ca      	str	r2, [r1, #12]
   85576:	4665      	mov	r5, ip
   85578:	6091      	str	r1, [r2, #8]
   8557a:	e7df      	b.n	8553c <_realloc_r+0xdc>
   8557c:	19b9      	adds	r1, r7, r6
   8557e:	4333      	orrs	r3, r6
   85580:	f042 0001 	orr.w	r0, r2, #1
   85584:	607b      	str	r3, [r7, #4]
   85586:	440a      	add	r2, r1
   85588:	6048      	str	r0, [r1, #4]
   8558a:	6853      	ldr	r3, [r2, #4]
   8558c:	3108      	adds	r1, #8
   8558e:	f043 0301 	orr.w	r3, r3, #1
   85592:	6053      	str	r3, [r2, #4]
   85594:	4648      	mov	r0, r9
   85596:	f7ff f915 	bl	847c4 <_free_r>
   8559a:	e7db      	b.n	85554 <_realloc_r+0xf4>
   8559c:	428b      	cmp	r3, r1
   8559e:	da33      	bge.n	85608 <_realloc_r+0x1a8>
   855a0:	4641      	mov	r1, r8
   855a2:	4648      	mov	r0, r9
   855a4:	f7ff fc0c 	bl	84dc0 <_malloc_r>
   855a8:	4680      	mov	r8, r0
   855aa:	2800      	cmp	r0, #0
   855ac:	d0d2      	beq.n	85554 <_realloc_r+0xf4>
   855ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   855b2:	f1a0 0108 	sub.w	r1, r0, #8
   855b6:	f023 0201 	bic.w	r2, r3, #1
   855ba:	443a      	add	r2, r7
   855bc:	4291      	cmp	r1, r2
   855be:	f000 80bc 	beq.w	8573a <_realloc_r+0x2da>
   855c2:	1f2a      	subs	r2, r5, #4
   855c4:	2a24      	cmp	r2, #36	; 0x24
   855c6:	d86e      	bhi.n	856a6 <_realloc_r+0x246>
   855c8:	2a13      	cmp	r2, #19
   855ca:	d842      	bhi.n	85652 <_realloc_r+0x1f2>
   855cc:	4603      	mov	r3, r0
   855ce:	4622      	mov	r2, r4
   855d0:	6811      	ldr	r1, [r2, #0]
   855d2:	6019      	str	r1, [r3, #0]
   855d4:	6851      	ldr	r1, [r2, #4]
   855d6:	6059      	str	r1, [r3, #4]
   855d8:	6892      	ldr	r2, [r2, #8]
   855da:	609a      	str	r2, [r3, #8]
   855dc:	4621      	mov	r1, r4
   855de:	4648      	mov	r0, r9
   855e0:	f7ff f8f0 	bl	847c4 <_free_r>
   855e4:	e7b6      	b.n	85554 <_realloc_r+0xf4>
   855e6:	4611      	mov	r1, r2
   855e8:	b003      	add	sp, #12
   855ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855ee:	f7ff bbe7 	b.w	84dc0 <_malloc_r>
   855f2:	f8de 2004 	ldr.w	r2, [lr, #4]
   855f6:	f106 0c10 	add.w	ip, r6, #16
   855fa:	f022 0203 	bic.w	r2, r2, #3
   855fe:	1950      	adds	r0, r2, r5
   85600:	4560      	cmp	r0, ip
   85602:	da3d      	bge.n	85680 <_realloc_r+0x220>
   85604:	4670      	mov	r0, lr
   85606:	e759      	b.n	854bc <_realloc_r+0x5c>
   85608:	46d0      	mov	r8, sl
   8560a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8560e:	f8da 100c 	ldr.w	r1, [sl, #12]
   85612:	1f2a      	subs	r2, r5, #4
   85614:	2a24      	cmp	r2, #36	; 0x24
   85616:	60c1      	str	r1, [r0, #12]
   85618:	6088      	str	r0, [r1, #8]
   8561a:	f200 80a0 	bhi.w	8575e <_realloc_r+0x2fe>
   8561e:	2a13      	cmp	r2, #19
   85620:	f240 809b 	bls.w	8575a <_realloc_r+0x2fa>
   85624:	6821      	ldr	r1, [r4, #0]
   85626:	2a1b      	cmp	r2, #27
   85628:	f8ca 1008 	str.w	r1, [sl, #8]
   8562c:	6861      	ldr	r1, [r4, #4]
   8562e:	f8ca 100c 	str.w	r1, [sl, #12]
   85632:	f200 80b2 	bhi.w	8579a <_realloc_r+0x33a>
   85636:	3408      	adds	r4, #8
   85638:	f10a 0210 	add.w	r2, sl, #16
   8563c:	6821      	ldr	r1, [r4, #0]
   8563e:	461d      	mov	r5, r3
   85640:	6011      	str	r1, [r2, #0]
   85642:	6861      	ldr	r1, [r4, #4]
   85644:	4657      	mov	r7, sl
   85646:	6051      	str	r1, [r2, #4]
   85648:	68a3      	ldr	r3, [r4, #8]
   8564a:	6093      	str	r3, [r2, #8]
   8564c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85650:	e774      	b.n	8553c <_realloc_r+0xdc>
   85652:	6823      	ldr	r3, [r4, #0]
   85654:	2a1b      	cmp	r2, #27
   85656:	6003      	str	r3, [r0, #0]
   85658:	6863      	ldr	r3, [r4, #4]
   8565a:	6043      	str	r3, [r0, #4]
   8565c:	d862      	bhi.n	85724 <_realloc_r+0x2c4>
   8565e:	f100 0308 	add.w	r3, r0, #8
   85662:	f104 0208 	add.w	r2, r4, #8
   85666:	e7b3      	b.n	855d0 <_realloc_r+0x170>
   85668:	4643      	mov	r3, r8
   8566a:	6822      	ldr	r2, [r4, #0]
   8566c:	4675      	mov	r5, lr
   8566e:	601a      	str	r2, [r3, #0]
   85670:	6862      	ldr	r2, [r4, #4]
   85672:	4657      	mov	r7, sl
   85674:	605a      	str	r2, [r3, #4]
   85676:	68a2      	ldr	r2, [r4, #8]
   85678:	609a      	str	r2, [r3, #8]
   8567a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8567e:	e75d      	b.n	8553c <_realloc_r+0xdc>
   85680:	1b83      	subs	r3, r0, r6
   85682:	4437      	add	r7, r6
   85684:	f043 0301 	orr.w	r3, r3, #1
   85688:	f8cb 7008 	str.w	r7, [fp, #8]
   8568c:	607b      	str	r3, [r7, #4]
   8568e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85692:	4648      	mov	r0, r9
   85694:	f003 0301 	and.w	r3, r3, #1
   85698:	431e      	orrs	r6, r3
   8569a:	f844 6c04 	str.w	r6, [r4, #-4]
   8569e:	f7ff fedd 	bl	8545c <__malloc_unlock>
   856a2:	4620      	mov	r0, r4
   856a4:	e75a      	b.n	8555c <_realloc_r+0xfc>
   856a6:	4621      	mov	r1, r4
   856a8:	f7ff fe70 	bl	8538c <memmove>
   856ac:	e796      	b.n	855dc <_realloc_r+0x17c>
   856ae:	eb02 0c03 	add.w	ip, r2, r3
   856b2:	f106 0210 	add.w	r2, r6, #16
   856b6:	4594      	cmp	ip, r2
   856b8:	f6ff af70 	blt.w	8559c <_realloc_r+0x13c>
   856bc:	4657      	mov	r7, sl
   856be:	f857 1f08 	ldr.w	r1, [r7, #8]!
   856c2:	f8da 300c 	ldr.w	r3, [sl, #12]
   856c6:	1f2a      	subs	r2, r5, #4
   856c8:	2a24      	cmp	r2, #36	; 0x24
   856ca:	60cb      	str	r3, [r1, #12]
   856cc:	6099      	str	r1, [r3, #8]
   856ce:	f200 8086 	bhi.w	857de <_realloc_r+0x37e>
   856d2:	2a13      	cmp	r2, #19
   856d4:	d977      	bls.n	857c6 <_realloc_r+0x366>
   856d6:	6823      	ldr	r3, [r4, #0]
   856d8:	2a1b      	cmp	r2, #27
   856da:	f8ca 3008 	str.w	r3, [sl, #8]
   856de:	6863      	ldr	r3, [r4, #4]
   856e0:	f8ca 300c 	str.w	r3, [sl, #12]
   856e4:	f200 8084 	bhi.w	857f0 <_realloc_r+0x390>
   856e8:	3408      	adds	r4, #8
   856ea:	f10a 0310 	add.w	r3, sl, #16
   856ee:	6822      	ldr	r2, [r4, #0]
   856f0:	601a      	str	r2, [r3, #0]
   856f2:	6862      	ldr	r2, [r4, #4]
   856f4:	605a      	str	r2, [r3, #4]
   856f6:	68a2      	ldr	r2, [r4, #8]
   856f8:	609a      	str	r2, [r3, #8]
   856fa:	ebc6 020c 	rsb	r2, r6, ip
   856fe:	eb0a 0306 	add.w	r3, sl, r6
   85702:	f042 0201 	orr.w	r2, r2, #1
   85706:	f8cb 3008 	str.w	r3, [fp, #8]
   8570a:	605a      	str	r2, [r3, #4]
   8570c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85710:	4648      	mov	r0, r9
   85712:	f003 0301 	and.w	r3, r3, #1
   85716:	431e      	orrs	r6, r3
   85718:	f8ca 6004 	str.w	r6, [sl, #4]
   8571c:	f7ff fe9e 	bl	8545c <__malloc_unlock>
   85720:	4638      	mov	r0, r7
   85722:	e71b      	b.n	8555c <_realloc_r+0xfc>
   85724:	68a3      	ldr	r3, [r4, #8]
   85726:	2a24      	cmp	r2, #36	; 0x24
   85728:	6083      	str	r3, [r0, #8]
   8572a:	68e3      	ldr	r3, [r4, #12]
   8572c:	60c3      	str	r3, [r0, #12]
   8572e:	d02b      	beq.n	85788 <_realloc_r+0x328>
   85730:	f100 0310 	add.w	r3, r0, #16
   85734:	f104 0210 	add.w	r2, r4, #16
   85738:	e74a      	b.n	855d0 <_realloc_r+0x170>
   8573a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8573e:	46a0      	mov	r8, r4
   85740:	f022 0203 	bic.w	r2, r2, #3
   85744:	4415      	add	r5, r2
   85746:	e6f9      	b.n	8553c <_realloc_r+0xdc>
   85748:	4621      	mov	r1, r4
   8574a:	4640      	mov	r0, r8
   8574c:	4675      	mov	r5, lr
   8574e:	4657      	mov	r7, sl
   85750:	f7ff fe1c 	bl	8538c <memmove>
   85754:	f8da 3004 	ldr.w	r3, [sl, #4]
   85758:	e6f0      	b.n	8553c <_realloc_r+0xdc>
   8575a:	4642      	mov	r2, r8
   8575c:	e76e      	b.n	8563c <_realloc_r+0x1dc>
   8575e:	4621      	mov	r1, r4
   85760:	4640      	mov	r0, r8
   85762:	461d      	mov	r5, r3
   85764:	4657      	mov	r7, sl
   85766:	f7ff fe11 	bl	8538c <memmove>
   8576a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8576e:	e6e5      	b.n	8553c <_realloc_r+0xdc>
   85770:	68a3      	ldr	r3, [r4, #8]
   85772:	2a24      	cmp	r2, #36	; 0x24
   85774:	f8ca 3010 	str.w	r3, [sl, #16]
   85778:	68e3      	ldr	r3, [r4, #12]
   8577a:	f8ca 3014 	str.w	r3, [sl, #20]
   8577e:	d018      	beq.n	857b2 <_realloc_r+0x352>
   85780:	3410      	adds	r4, #16
   85782:	f10a 0318 	add.w	r3, sl, #24
   85786:	e770      	b.n	8566a <_realloc_r+0x20a>
   85788:	6922      	ldr	r2, [r4, #16]
   8578a:	f100 0318 	add.w	r3, r0, #24
   8578e:	6102      	str	r2, [r0, #16]
   85790:	6961      	ldr	r1, [r4, #20]
   85792:	f104 0218 	add.w	r2, r4, #24
   85796:	6141      	str	r1, [r0, #20]
   85798:	e71a      	b.n	855d0 <_realloc_r+0x170>
   8579a:	68a1      	ldr	r1, [r4, #8]
   8579c:	2a24      	cmp	r2, #36	; 0x24
   8579e:	f8ca 1010 	str.w	r1, [sl, #16]
   857a2:	68e1      	ldr	r1, [r4, #12]
   857a4:	f8ca 1014 	str.w	r1, [sl, #20]
   857a8:	d00f      	beq.n	857ca <_realloc_r+0x36a>
   857aa:	3410      	adds	r4, #16
   857ac:	f10a 0218 	add.w	r2, sl, #24
   857b0:	e744      	b.n	8563c <_realloc_r+0x1dc>
   857b2:	6922      	ldr	r2, [r4, #16]
   857b4:	f10a 0320 	add.w	r3, sl, #32
   857b8:	f8ca 2018 	str.w	r2, [sl, #24]
   857bc:	6962      	ldr	r2, [r4, #20]
   857be:	3418      	adds	r4, #24
   857c0:	f8ca 201c 	str.w	r2, [sl, #28]
   857c4:	e751      	b.n	8566a <_realloc_r+0x20a>
   857c6:	463b      	mov	r3, r7
   857c8:	e791      	b.n	856ee <_realloc_r+0x28e>
   857ca:	6921      	ldr	r1, [r4, #16]
   857cc:	f10a 0220 	add.w	r2, sl, #32
   857d0:	f8ca 1018 	str.w	r1, [sl, #24]
   857d4:	6961      	ldr	r1, [r4, #20]
   857d6:	3418      	adds	r4, #24
   857d8:	f8ca 101c 	str.w	r1, [sl, #28]
   857dc:	e72e      	b.n	8563c <_realloc_r+0x1dc>
   857de:	4621      	mov	r1, r4
   857e0:	4638      	mov	r0, r7
   857e2:	f8cd c004 	str.w	ip, [sp, #4]
   857e6:	f7ff fdd1 	bl	8538c <memmove>
   857ea:	f8dd c004 	ldr.w	ip, [sp, #4]
   857ee:	e784      	b.n	856fa <_realloc_r+0x29a>
   857f0:	68a3      	ldr	r3, [r4, #8]
   857f2:	2a24      	cmp	r2, #36	; 0x24
   857f4:	f8ca 3010 	str.w	r3, [sl, #16]
   857f8:	68e3      	ldr	r3, [r4, #12]
   857fa:	f8ca 3014 	str.w	r3, [sl, #20]
   857fe:	d003      	beq.n	85808 <_realloc_r+0x3a8>
   85800:	3410      	adds	r4, #16
   85802:	f10a 0318 	add.w	r3, sl, #24
   85806:	e772      	b.n	856ee <_realloc_r+0x28e>
   85808:	6922      	ldr	r2, [r4, #16]
   8580a:	f10a 0320 	add.w	r3, sl, #32
   8580e:	f8ca 2018 	str.w	r2, [sl, #24]
   85812:	6962      	ldr	r2, [r4, #20]
   85814:	3418      	adds	r4, #24
   85816:	f8ca 201c 	str.w	r2, [sl, #28]
   8581a:	e768      	b.n	856ee <_realloc_r+0x28e>
   8581c:	20070460 	.word	0x20070460

00085820 <_sbrk_r>:
   85820:	b538      	push	{r3, r4, r5, lr}
   85822:	4c07      	ldr	r4, [pc, #28]	; (85840 <_sbrk_r+0x20>)
   85824:	2300      	movs	r3, #0
   85826:	4605      	mov	r5, r0
   85828:	4608      	mov	r0, r1
   8582a:	6023      	str	r3, [r4, #0]
   8582c:	f7fc ff72 	bl	82714 <_sbrk>
   85830:	1c43      	adds	r3, r0, #1
   85832:	d000      	beq.n	85836 <_sbrk_r+0x16>
   85834:	bd38      	pop	{r3, r4, r5, pc}
   85836:	6823      	ldr	r3, [r4, #0]
   85838:	2b00      	cmp	r3, #0
   8583a:	d0fb      	beq.n	85834 <_sbrk_r+0x14>
   8583c:	602b      	str	r3, [r5, #0]
   8583e:	bd38      	pop	{r3, r4, r5, pc}
   85840:	2007abc0 	.word	0x2007abc0

00085844 <__sread>:
   85844:	b510      	push	{r4, lr}
   85846:	460c      	mov	r4, r1
   85848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8584c:	f000 f9c2 	bl	85bd4 <_read_r>
   85850:	2800      	cmp	r0, #0
   85852:	db03      	blt.n	8585c <__sread+0x18>
   85854:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85856:	4403      	add	r3, r0
   85858:	6523      	str	r3, [r4, #80]	; 0x50
   8585a:	bd10      	pop	{r4, pc}
   8585c:	89a3      	ldrh	r3, [r4, #12]
   8585e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85862:	81a3      	strh	r3, [r4, #12]
   85864:	bd10      	pop	{r4, pc}
   85866:	bf00      	nop

00085868 <__swrite>:
   85868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8586c:	460c      	mov	r4, r1
   8586e:	8989      	ldrh	r1, [r1, #12]
   85870:	461d      	mov	r5, r3
   85872:	05cb      	lsls	r3, r1, #23
   85874:	4616      	mov	r6, r2
   85876:	4607      	mov	r7, r0
   85878:	d506      	bpl.n	85888 <__swrite+0x20>
   8587a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8587e:	2200      	movs	r2, #0
   85880:	2302      	movs	r3, #2
   85882:	f000 f993 	bl	85bac <_lseek_r>
   85886:	89a1      	ldrh	r1, [r4, #12]
   85888:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8588c:	81a1      	strh	r1, [r4, #12]
   8588e:	4638      	mov	r0, r7
   85890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85894:	4632      	mov	r2, r6
   85896:	462b      	mov	r3, r5
   85898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8589c:	f000 b89e 	b.w	859dc <_write_r>

000858a0 <__sseek>:
   858a0:	b510      	push	{r4, lr}
   858a2:	460c      	mov	r4, r1
   858a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   858a8:	f000 f980 	bl	85bac <_lseek_r>
   858ac:	89a3      	ldrh	r3, [r4, #12]
   858ae:	1c42      	adds	r2, r0, #1
   858b0:	bf0e      	itee	eq
   858b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   858b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   858ba:	6520      	strne	r0, [r4, #80]	; 0x50
   858bc:	81a3      	strh	r3, [r4, #12]
   858be:	bd10      	pop	{r4, pc}

000858c0 <__sclose>:
   858c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   858c4:	f000 b8f2 	b.w	85aac <_close_r>

000858c8 <__swbuf_r>:
   858c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   858ca:	460d      	mov	r5, r1
   858cc:	4614      	mov	r4, r2
   858ce:	4607      	mov	r7, r0
   858d0:	b110      	cbz	r0, 858d8 <__swbuf_r+0x10>
   858d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   858d4:	2b00      	cmp	r3, #0
   858d6:	d048      	beq.n	8596a <__swbuf_r+0xa2>
   858d8:	89a2      	ldrh	r2, [r4, #12]
   858da:	69a0      	ldr	r0, [r4, #24]
   858dc:	b293      	uxth	r3, r2
   858de:	60a0      	str	r0, [r4, #8]
   858e0:	0718      	lsls	r0, r3, #28
   858e2:	d538      	bpl.n	85956 <__swbuf_r+0x8e>
   858e4:	6926      	ldr	r6, [r4, #16]
   858e6:	2e00      	cmp	r6, #0
   858e8:	d035      	beq.n	85956 <__swbuf_r+0x8e>
   858ea:	0499      	lsls	r1, r3, #18
   858ec:	b2ed      	uxtb	r5, r5
   858ee:	d515      	bpl.n	8591c <__swbuf_r+0x54>
   858f0:	6823      	ldr	r3, [r4, #0]
   858f2:	6962      	ldr	r2, [r4, #20]
   858f4:	1b9e      	subs	r6, r3, r6
   858f6:	4296      	cmp	r6, r2
   858f8:	da1c      	bge.n	85934 <__swbuf_r+0x6c>
   858fa:	3601      	adds	r6, #1
   858fc:	68a2      	ldr	r2, [r4, #8]
   858fe:	1c59      	adds	r1, r3, #1
   85900:	3a01      	subs	r2, #1
   85902:	60a2      	str	r2, [r4, #8]
   85904:	6021      	str	r1, [r4, #0]
   85906:	701d      	strb	r5, [r3, #0]
   85908:	6963      	ldr	r3, [r4, #20]
   8590a:	42b3      	cmp	r3, r6
   8590c:	d01a      	beq.n	85944 <__swbuf_r+0x7c>
   8590e:	89a3      	ldrh	r3, [r4, #12]
   85910:	07db      	lsls	r3, r3, #31
   85912:	d501      	bpl.n	85918 <__swbuf_r+0x50>
   85914:	2d0a      	cmp	r5, #10
   85916:	d015      	beq.n	85944 <__swbuf_r+0x7c>
   85918:	4628      	mov	r0, r5
   8591a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8591c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8591e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   85926:	6663      	str	r3, [r4, #100]	; 0x64
   85928:	6823      	ldr	r3, [r4, #0]
   8592a:	81a2      	strh	r2, [r4, #12]
   8592c:	6962      	ldr	r2, [r4, #20]
   8592e:	1b9e      	subs	r6, r3, r6
   85930:	4296      	cmp	r6, r2
   85932:	dbe2      	blt.n	858fa <__swbuf_r+0x32>
   85934:	4638      	mov	r0, r7
   85936:	4621      	mov	r1, r4
   85938:	f7fe fde4 	bl	84504 <_fflush_r>
   8593c:	b940      	cbnz	r0, 85950 <__swbuf_r+0x88>
   8593e:	6823      	ldr	r3, [r4, #0]
   85940:	2601      	movs	r6, #1
   85942:	e7db      	b.n	858fc <__swbuf_r+0x34>
   85944:	4638      	mov	r0, r7
   85946:	4621      	mov	r1, r4
   85948:	f7fe fddc 	bl	84504 <_fflush_r>
   8594c:	2800      	cmp	r0, #0
   8594e:	d0e3      	beq.n	85918 <__swbuf_r+0x50>
   85950:	f04f 30ff 	mov.w	r0, #4294967295
   85954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85956:	4638      	mov	r0, r7
   85958:	4621      	mov	r1, r4
   8595a:	f7fe fcbd 	bl	842d8 <__swsetup_r>
   8595e:	2800      	cmp	r0, #0
   85960:	d1f6      	bne.n	85950 <__swbuf_r+0x88>
   85962:	89a2      	ldrh	r2, [r4, #12]
   85964:	6926      	ldr	r6, [r4, #16]
   85966:	b293      	uxth	r3, r2
   85968:	e7bf      	b.n	858ea <__swbuf_r+0x22>
   8596a:	f7fe fde7 	bl	8453c <__sinit>
   8596e:	e7b3      	b.n	858d8 <__swbuf_r+0x10>

00085970 <_wcrtomb_r>:
   85970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85974:	461e      	mov	r6, r3
   85976:	b086      	sub	sp, #24
   85978:	460c      	mov	r4, r1
   8597a:	4605      	mov	r5, r0
   8597c:	4617      	mov	r7, r2
   8597e:	4b0f      	ldr	r3, [pc, #60]	; (859bc <_wcrtomb_r+0x4c>)
   85980:	b191      	cbz	r1, 859a8 <_wcrtomb_r+0x38>
   85982:	f8d3 8000 	ldr.w	r8, [r3]
   85986:	f7ff f999 	bl	84cbc <__locale_charset>
   8598a:	9600      	str	r6, [sp, #0]
   8598c:	4603      	mov	r3, r0
   8598e:	4621      	mov	r1, r4
   85990:	463a      	mov	r2, r7
   85992:	4628      	mov	r0, r5
   85994:	47c0      	blx	r8
   85996:	1c43      	adds	r3, r0, #1
   85998:	d103      	bne.n	859a2 <_wcrtomb_r+0x32>
   8599a:	2200      	movs	r2, #0
   8599c:	238a      	movs	r3, #138	; 0x8a
   8599e:	6032      	str	r2, [r6, #0]
   859a0:	602b      	str	r3, [r5, #0]
   859a2:	b006      	add	sp, #24
   859a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   859a8:	681f      	ldr	r7, [r3, #0]
   859aa:	f7ff f987 	bl	84cbc <__locale_charset>
   859ae:	9600      	str	r6, [sp, #0]
   859b0:	4603      	mov	r3, r0
   859b2:	4622      	mov	r2, r4
   859b4:	4628      	mov	r0, r5
   859b6:	a903      	add	r1, sp, #12
   859b8:	47b8      	blx	r7
   859ba:	e7ec      	b.n	85996 <_wcrtomb_r+0x26>
   859bc:	20070870 	.word	0x20070870

000859c0 <__ascii_wctomb>:
   859c0:	b121      	cbz	r1, 859cc <__ascii_wctomb+0xc>
   859c2:	2aff      	cmp	r2, #255	; 0xff
   859c4:	d804      	bhi.n	859d0 <__ascii_wctomb+0x10>
   859c6:	700a      	strb	r2, [r1, #0]
   859c8:	2001      	movs	r0, #1
   859ca:	4770      	bx	lr
   859cc:	4608      	mov	r0, r1
   859ce:	4770      	bx	lr
   859d0:	238a      	movs	r3, #138	; 0x8a
   859d2:	6003      	str	r3, [r0, #0]
   859d4:	f04f 30ff 	mov.w	r0, #4294967295
   859d8:	4770      	bx	lr
   859da:	bf00      	nop

000859dc <_write_r>:
   859dc:	b570      	push	{r4, r5, r6, lr}
   859de:	4c08      	ldr	r4, [pc, #32]	; (85a00 <_write_r+0x24>)
   859e0:	4606      	mov	r6, r0
   859e2:	2500      	movs	r5, #0
   859e4:	4608      	mov	r0, r1
   859e6:	4611      	mov	r1, r2
   859e8:	461a      	mov	r2, r3
   859ea:	6025      	str	r5, [r4, #0]
   859ec:	f7fc f95e 	bl	81cac <_write>
   859f0:	1c43      	adds	r3, r0, #1
   859f2:	d000      	beq.n	859f6 <_write_r+0x1a>
   859f4:	bd70      	pop	{r4, r5, r6, pc}
   859f6:	6823      	ldr	r3, [r4, #0]
   859f8:	2b00      	cmp	r3, #0
   859fa:	d0fb      	beq.n	859f4 <_write_r+0x18>
   859fc:	6033      	str	r3, [r6, #0]
   859fe:	bd70      	pop	{r4, r5, r6, pc}
   85a00:	2007abc0 	.word	0x2007abc0

00085a04 <__register_exitproc>:
   85a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   85a06:	4c27      	ldr	r4, [pc, #156]	; (85aa4 <__register_exitproc+0xa0>)
   85a08:	b085      	sub	sp, #20
   85a0a:	6826      	ldr	r6, [r4, #0]
   85a0c:	4607      	mov	r7, r0
   85a0e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85a12:	2c00      	cmp	r4, #0
   85a14:	d040      	beq.n	85a98 <__register_exitproc+0x94>
   85a16:	6865      	ldr	r5, [r4, #4]
   85a18:	2d1f      	cmp	r5, #31
   85a1a:	dd1e      	ble.n	85a5a <__register_exitproc+0x56>
   85a1c:	4822      	ldr	r0, [pc, #136]	; (85aa8 <__register_exitproc+0xa4>)
   85a1e:	b918      	cbnz	r0, 85a28 <__register_exitproc+0x24>
   85a20:	f04f 30ff 	mov.w	r0, #4294967295
   85a24:	b005      	add	sp, #20
   85a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85a28:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85a2c:	9103      	str	r1, [sp, #12]
   85a2e:	9202      	str	r2, [sp, #8]
   85a30:	9301      	str	r3, [sp, #4]
   85a32:	f7ff f9bd 	bl	84db0 <malloc>
   85a36:	9903      	ldr	r1, [sp, #12]
   85a38:	4604      	mov	r4, r0
   85a3a:	9a02      	ldr	r2, [sp, #8]
   85a3c:	9b01      	ldr	r3, [sp, #4]
   85a3e:	2800      	cmp	r0, #0
   85a40:	d0ee      	beq.n	85a20 <__register_exitproc+0x1c>
   85a42:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   85a46:	2000      	movs	r0, #0
   85a48:	6025      	str	r5, [r4, #0]
   85a4a:	6060      	str	r0, [r4, #4]
   85a4c:	4605      	mov	r5, r0
   85a4e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85a52:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85a56:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85a5a:	b93f      	cbnz	r7, 85a6c <__register_exitproc+0x68>
   85a5c:	1c6b      	adds	r3, r5, #1
   85a5e:	2000      	movs	r0, #0
   85a60:	3502      	adds	r5, #2
   85a62:	6063      	str	r3, [r4, #4]
   85a64:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85a68:	b005      	add	sp, #20
   85a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85a6c:	2601      	movs	r6, #1
   85a6e:	40ae      	lsls	r6, r5
   85a70:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   85a74:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   85a78:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   85a7c:	2f02      	cmp	r7, #2
   85a7e:	ea42 0206 	orr.w	r2, r2, r6
   85a82:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   85a86:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   85a8a:	d1e7      	bne.n	85a5c <__register_exitproc+0x58>
   85a8c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85a90:	431e      	orrs	r6, r3
   85a92:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   85a96:	e7e1      	b.n	85a5c <__register_exitproc+0x58>
   85a98:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85a9c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85aa0:	e7b9      	b.n	85a16 <__register_exitproc+0x12>
   85aa2:	bf00      	nop
   85aa4:	00086280 	.word	0x00086280
   85aa8:	00084db1 	.word	0x00084db1

00085aac <_close_r>:
   85aac:	b538      	push	{r3, r4, r5, lr}
   85aae:	4c07      	ldr	r4, [pc, #28]	; (85acc <_close_r+0x20>)
   85ab0:	2300      	movs	r3, #0
   85ab2:	4605      	mov	r5, r0
   85ab4:	4608      	mov	r0, r1
   85ab6:	6023      	str	r3, [r4, #0]
   85ab8:	f7fc fe46 	bl	82748 <_close>
   85abc:	1c43      	adds	r3, r0, #1
   85abe:	d000      	beq.n	85ac2 <_close_r+0x16>
   85ac0:	bd38      	pop	{r3, r4, r5, pc}
   85ac2:	6823      	ldr	r3, [r4, #0]
   85ac4:	2b00      	cmp	r3, #0
   85ac6:	d0fb      	beq.n	85ac0 <_close_r+0x14>
   85ac8:	602b      	str	r3, [r5, #0]
   85aca:	bd38      	pop	{r3, r4, r5, pc}
   85acc:	2007abc0 	.word	0x2007abc0

00085ad0 <_fclose_r>:
   85ad0:	b570      	push	{r4, r5, r6, lr}
   85ad2:	460c      	mov	r4, r1
   85ad4:	4605      	mov	r5, r0
   85ad6:	b131      	cbz	r1, 85ae6 <_fclose_r+0x16>
   85ad8:	b110      	cbz	r0, 85ae0 <_fclose_r+0x10>
   85ada:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85adc:	2b00      	cmp	r3, #0
   85ade:	d02f      	beq.n	85b40 <_fclose_r+0x70>
   85ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85ae4:	b90b      	cbnz	r3, 85aea <_fclose_r+0x1a>
   85ae6:	2000      	movs	r0, #0
   85ae8:	bd70      	pop	{r4, r5, r6, pc}
   85aea:	4628      	mov	r0, r5
   85aec:	4621      	mov	r1, r4
   85aee:	f7fe fd09 	bl	84504 <_fflush_r>
   85af2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85af4:	4606      	mov	r6, r0
   85af6:	b133      	cbz	r3, 85b06 <_fclose_r+0x36>
   85af8:	4628      	mov	r0, r5
   85afa:	69e1      	ldr	r1, [r4, #28]
   85afc:	4798      	blx	r3
   85afe:	2800      	cmp	r0, #0
   85b00:	bfb8      	it	lt
   85b02:	f04f 36ff 	movlt.w	r6, #4294967295
   85b06:	89a3      	ldrh	r3, [r4, #12]
   85b08:	061b      	lsls	r3, r3, #24
   85b0a:	d41c      	bmi.n	85b46 <_fclose_r+0x76>
   85b0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85b0e:	b141      	cbz	r1, 85b22 <_fclose_r+0x52>
   85b10:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85b14:	4299      	cmp	r1, r3
   85b16:	d002      	beq.n	85b1e <_fclose_r+0x4e>
   85b18:	4628      	mov	r0, r5
   85b1a:	f7fe fe53 	bl	847c4 <_free_r>
   85b1e:	2300      	movs	r3, #0
   85b20:	6323      	str	r3, [r4, #48]	; 0x30
   85b22:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85b24:	b121      	cbz	r1, 85b30 <_fclose_r+0x60>
   85b26:	4628      	mov	r0, r5
   85b28:	f7fe fe4c 	bl	847c4 <_free_r>
   85b2c:	2300      	movs	r3, #0
   85b2e:	6463      	str	r3, [r4, #68]	; 0x44
   85b30:	f7fe fd7e 	bl	84630 <__sfp_lock_acquire>
   85b34:	2300      	movs	r3, #0
   85b36:	81a3      	strh	r3, [r4, #12]
   85b38:	f7fe fd7c 	bl	84634 <__sfp_lock_release>
   85b3c:	4630      	mov	r0, r6
   85b3e:	bd70      	pop	{r4, r5, r6, pc}
   85b40:	f7fe fcfc 	bl	8453c <__sinit>
   85b44:	e7cc      	b.n	85ae0 <_fclose_r+0x10>
   85b46:	4628      	mov	r0, r5
   85b48:	6921      	ldr	r1, [r4, #16]
   85b4a:	f7fe fe3b 	bl	847c4 <_free_r>
   85b4e:	e7dd      	b.n	85b0c <_fclose_r+0x3c>

00085b50 <fclose>:
   85b50:	4b02      	ldr	r3, [pc, #8]	; (85b5c <fclose+0xc>)
   85b52:	4601      	mov	r1, r0
   85b54:	6818      	ldr	r0, [r3, #0]
   85b56:	f7ff bfbb 	b.w	85ad0 <_fclose_r>
   85b5a:	bf00      	nop
   85b5c:	20070438 	.word	0x20070438

00085b60 <_fstat_r>:
   85b60:	b538      	push	{r3, r4, r5, lr}
   85b62:	4c08      	ldr	r4, [pc, #32]	; (85b84 <_fstat_r+0x24>)
   85b64:	2300      	movs	r3, #0
   85b66:	4605      	mov	r5, r0
   85b68:	4608      	mov	r0, r1
   85b6a:	4611      	mov	r1, r2
   85b6c:	6023      	str	r3, [r4, #0]
   85b6e:	f7fc fdef 	bl	82750 <_fstat>
   85b72:	1c43      	adds	r3, r0, #1
   85b74:	d000      	beq.n	85b78 <_fstat_r+0x18>
   85b76:	bd38      	pop	{r3, r4, r5, pc}
   85b78:	6823      	ldr	r3, [r4, #0]
   85b7a:	2b00      	cmp	r3, #0
   85b7c:	d0fb      	beq.n	85b76 <_fstat_r+0x16>
   85b7e:	602b      	str	r3, [r5, #0]
   85b80:	bd38      	pop	{r3, r4, r5, pc}
   85b82:	bf00      	nop
   85b84:	2007abc0 	.word	0x2007abc0

00085b88 <_isatty_r>:
   85b88:	b538      	push	{r3, r4, r5, lr}
   85b8a:	4c07      	ldr	r4, [pc, #28]	; (85ba8 <_isatty_r+0x20>)
   85b8c:	2300      	movs	r3, #0
   85b8e:	4605      	mov	r5, r0
   85b90:	4608      	mov	r0, r1
   85b92:	6023      	str	r3, [r4, #0]
   85b94:	f7fc fde2 	bl	8275c <_isatty>
   85b98:	1c43      	adds	r3, r0, #1
   85b9a:	d000      	beq.n	85b9e <_isatty_r+0x16>
   85b9c:	bd38      	pop	{r3, r4, r5, pc}
   85b9e:	6823      	ldr	r3, [r4, #0]
   85ba0:	2b00      	cmp	r3, #0
   85ba2:	d0fb      	beq.n	85b9c <_isatty_r+0x14>
   85ba4:	602b      	str	r3, [r5, #0]
   85ba6:	bd38      	pop	{r3, r4, r5, pc}
   85ba8:	2007abc0 	.word	0x2007abc0

00085bac <_lseek_r>:
   85bac:	b570      	push	{r4, r5, r6, lr}
   85bae:	4c08      	ldr	r4, [pc, #32]	; (85bd0 <_lseek_r+0x24>)
   85bb0:	4606      	mov	r6, r0
   85bb2:	2500      	movs	r5, #0
   85bb4:	4608      	mov	r0, r1
   85bb6:	4611      	mov	r1, r2
   85bb8:	461a      	mov	r2, r3
   85bba:	6025      	str	r5, [r4, #0]
   85bbc:	f7fc fdd0 	bl	82760 <_lseek>
   85bc0:	1c43      	adds	r3, r0, #1
   85bc2:	d000      	beq.n	85bc6 <_lseek_r+0x1a>
   85bc4:	bd70      	pop	{r4, r5, r6, pc}
   85bc6:	6823      	ldr	r3, [r4, #0]
   85bc8:	2b00      	cmp	r3, #0
   85bca:	d0fb      	beq.n	85bc4 <_lseek_r+0x18>
   85bcc:	6033      	str	r3, [r6, #0]
   85bce:	bd70      	pop	{r4, r5, r6, pc}
   85bd0:	2007abc0 	.word	0x2007abc0

00085bd4 <_read_r>:
   85bd4:	b570      	push	{r4, r5, r6, lr}
   85bd6:	4c08      	ldr	r4, [pc, #32]	; (85bf8 <_read_r+0x24>)
   85bd8:	4606      	mov	r6, r0
   85bda:	2500      	movs	r5, #0
   85bdc:	4608      	mov	r0, r1
   85bde:	4611      	mov	r1, r2
   85be0:	461a      	mov	r2, r3
   85be2:	6025      	str	r5, [r4, #0]
   85be4:	f7fa faf2 	bl	801cc <_read>
   85be8:	1c43      	adds	r3, r0, #1
   85bea:	d000      	beq.n	85bee <_read_r+0x1a>
   85bec:	bd70      	pop	{r4, r5, r6, pc}
   85bee:	6823      	ldr	r3, [r4, #0]
   85bf0:	2b00      	cmp	r3, #0
   85bf2:	d0fb      	beq.n	85bec <_read_r+0x18>
   85bf4:	6033      	str	r3, [r6, #0]
   85bf6:	bd70      	pop	{r4, r5, r6, pc}
   85bf8:	2007abc0 	.word	0x2007abc0

00085bfc <__aeabi_uldivmod>:
   85bfc:	b94b      	cbnz	r3, 85c12 <__aeabi_uldivmod+0x16>
   85bfe:	b942      	cbnz	r2, 85c12 <__aeabi_uldivmod+0x16>
   85c00:	2900      	cmp	r1, #0
   85c02:	bf08      	it	eq
   85c04:	2800      	cmpeq	r0, #0
   85c06:	d002      	beq.n	85c0e <__aeabi_uldivmod+0x12>
   85c08:	f04f 31ff 	mov.w	r1, #4294967295
   85c0c:	4608      	mov	r0, r1
   85c0e:	f000 b83b 	b.w	85c88 <__aeabi_idiv0>
   85c12:	b082      	sub	sp, #8
   85c14:	46ec      	mov	ip, sp
   85c16:	e92d 5000 	stmdb	sp!, {ip, lr}
   85c1a:	f000 f81d 	bl	85c58 <__gnu_uldivmod_helper>
   85c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
   85c22:	b002      	add	sp, #8
   85c24:	bc0c      	pop	{r2, r3}
   85c26:	4770      	bx	lr

00085c28 <__gnu_ldivmod_helper>:
   85c28:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   85c2c:	9e08      	ldr	r6, [sp, #32]
   85c2e:	4614      	mov	r4, r2
   85c30:	461d      	mov	r5, r3
   85c32:	4680      	mov	r8, r0
   85c34:	4689      	mov	r9, r1
   85c36:	f000 f829 	bl	85c8c <__divdi3>
   85c3a:	fb04 f301 	mul.w	r3, r4, r1
   85c3e:	fba4 ab00 	umull	sl, fp, r4, r0
   85c42:	fb00 3205 	mla	r2, r0, r5, r3
   85c46:	4493      	add	fp, r2
   85c48:	ebb8 080a 	subs.w	r8, r8, sl
   85c4c:	eb69 090b 	sbc.w	r9, r9, fp
   85c50:	e9c6 8900 	strd	r8, r9, [r6]
   85c54:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085c58 <__gnu_uldivmod_helper>:
   85c58:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   85c5c:	9e08      	ldr	r6, [sp, #32]
   85c5e:	4614      	mov	r4, r2
   85c60:	461d      	mov	r5, r3
   85c62:	4680      	mov	r8, r0
   85c64:	4689      	mov	r9, r1
   85c66:	f000 f961 	bl	85f2c <__udivdi3>
   85c6a:	fb00 f505 	mul.w	r5, r0, r5
   85c6e:	fba0 ab04 	umull	sl, fp, r0, r4
   85c72:	fb04 5401 	mla	r4, r4, r1, r5
   85c76:	44a3      	add	fp, r4
   85c78:	ebb8 080a 	subs.w	r8, r8, sl
   85c7c:	eb69 090b 	sbc.w	r9, r9, fp
   85c80:	e9c6 8900 	strd	r8, r9, [r6]
   85c84:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085c88 <__aeabi_idiv0>:
   85c88:	4770      	bx	lr
   85c8a:	bf00      	nop

00085c8c <__divdi3>:
   85c8c:	2900      	cmp	r1, #0
   85c8e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85c92:	f2c0 80a1 	blt.w	85dd8 <__divdi3+0x14c>
   85c96:	2400      	movs	r4, #0
   85c98:	2b00      	cmp	r3, #0
   85c9a:	f2c0 8098 	blt.w	85dce <__divdi3+0x142>
   85c9e:	4615      	mov	r5, r2
   85ca0:	4606      	mov	r6, r0
   85ca2:	460f      	mov	r7, r1
   85ca4:	2b00      	cmp	r3, #0
   85ca6:	d13f      	bne.n	85d28 <__divdi3+0x9c>
   85ca8:	428a      	cmp	r2, r1
   85caa:	d958      	bls.n	85d5e <__divdi3+0xd2>
   85cac:	fab2 f382 	clz	r3, r2
   85cb0:	b14b      	cbz	r3, 85cc6 <__divdi3+0x3a>
   85cb2:	f1c3 0220 	rsb	r2, r3, #32
   85cb6:	fa01 f703 	lsl.w	r7, r1, r3
   85cba:	fa20 f202 	lsr.w	r2, r0, r2
   85cbe:	409d      	lsls	r5, r3
   85cc0:	fa00 f603 	lsl.w	r6, r0, r3
   85cc4:	4317      	orrs	r7, r2
   85cc6:	0c29      	lsrs	r1, r5, #16
   85cc8:	fbb7 f2f1 	udiv	r2, r7, r1
   85ccc:	fb01 7712 	mls	r7, r1, r2, r7
   85cd0:	b2a8      	uxth	r0, r5
   85cd2:	fb00 f302 	mul.w	r3, r0, r2
   85cd6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   85cda:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   85cde:	42bb      	cmp	r3, r7
   85ce0:	d909      	bls.n	85cf6 <__divdi3+0x6a>
   85ce2:	197f      	adds	r7, r7, r5
   85ce4:	f102 3cff 	add.w	ip, r2, #4294967295
   85ce8:	f080 8105 	bcs.w	85ef6 <__divdi3+0x26a>
   85cec:	42bb      	cmp	r3, r7
   85cee:	f240 8102 	bls.w	85ef6 <__divdi3+0x26a>
   85cf2:	3a02      	subs	r2, #2
   85cf4:	442f      	add	r7, r5
   85cf6:	1aff      	subs	r7, r7, r3
   85cf8:	fbb7 f3f1 	udiv	r3, r7, r1
   85cfc:	fb01 7113 	mls	r1, r1, r3, r7
   85d00:	fb00 f003 	mul.w	r0, r0, r3
   85d04:	b2b6      	uxth	r6, r6
   85d06:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   85d0a:	4288      	cmp	r0, r1
   85d0c:	d908      	bls.n	85d20 <__divdi3+0x94>
   85d0e:	1949      	adds	r1, r1, r5
   85d10:	f103 37ff 	add.w	r7, r3, #4294967295
   85d14:	f080 80f1 	bcs.w	85efa <__divdi3+0x26e>
   85d18:	4288      	cmp	r0, r1
   85d1a:	f240 80ee 	bls.w	85efa <__divdi3+0x26e>
   85d1e:	3b02      	subs	r3, #2
   85d20:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85d24:	2300      	movs	r3, #0
   85d26:	e003      	b.n	85d30 <__divdi3+0xa4>
   85d28:	428b      	cmp	r3, r1
   85d2a:	d90a      	bls.n	85d42 <__divdi3+0xb6>
   85d2c:	2300      	movs	r3, #0
   85d2e:	461a      	mov	r2, r3
   85d30:	4610      	mov	r0, r2
   85d32:	4619      	mov	r1, r3
   85d34:	b114      	cbz	r4, 85d3c <__divdi3+0xb0>
   85d36:	4240      	negs	r0, r0
   85d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85d3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85d40:	4770      	bx	lr
   85d42:	fab3 f883 	clz	r8, r3
   85d46:	f1b8 0f00 	cmp.w	r8, #0
   85d4a:	f040 8088 	bne.w	85e5e <__divdi3+0x1d2>
   85d4e:	428b      	cmp	r3, r1
   85d50:	d302      	bcc.n	85d58 <__divdi3+0xcc>
   85d52:	4282      	cmp	r2, r0
   85d54:	f200 80e2 	bhi.w	85f1c <__divdi3+0x290>
   85d58:	2300      	movs	r3, #0
   85d5a:	2201      	movs	r2, #1
   85d5c:	e7e8      	b.n	85d30 <__divdi3+0xa4>
   85d5e:	b912      	cbnz	r2, 85d66 <__divdi3+0xda>
   85d60:	2301      	movs	r3, #1
   85d62:	fbb3 f5f2 	udiv	r5, r3, r2
   85d66:	fab5 f285 	clz	r2, r5
   85d6a:	2a00      	cmp	r2, #0
   85d6c:	d13a      	bne.n	85de4 <__divdi3+0x158>
   85d6e:	1b7f      	subs	r7, r7, r5
   85d70:	0c28      	lsrs	r0, r5, #16
   85d72:	fa1f fc85 	uxth.w	ip, r5
   85d76:	2301      	movs	r3, #1
   85d78:	fbb7 f1f0 	udiv	r1, r7, r0
   85d7c:	fb00 7711 	mls	r7, r0, r1, r7
   85d80:	fb0c f201 	mul.w	r2, ip, r1
   85d84:	ea4f 4816 	mov.w	r8, r6, lsr #16
   85d88:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85d8c:	42ba      	cmp	r2, r7
   85d8e:	d907      	bls.n	85da0 <__divdi3+0x114>
   85d90:	197f      	adds	r7, r7, r5
   85d92:	f101 38ff 	add.w	r8, r1, #4294967295
   85d96:	d202      	bcs.n	85d9e <__divdi3+0x112>
   85d98:	42ba      	cmp	r2, r7
   85d9a:	f200 80c4 	bhi.w	85f26 <__divdi3+0x29a>
   85d9e:	4641      	mov	r1, r8
   85da0:	1abf      	subs	r7, r7, r2
   85da2:	fbb7 f2f0 	udiv	r2, r7, r0
   85da6:	fb00 7012 	mls	r0, r0, r2, r7
   85daa:	fb0c fc02 	mul.w	ip, ip, r2
   85dae:	b2b6      	uxth	r6, r6
   85db0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85db4:	4584      	cmp	ip, r0
   85db6:	d907      	bls.n	85dc8 <__divdi3+0x13c>
   85db8:	1940      	adds	r0, r0, r5
   85dba:	f102 37ff 	add.w	r7, r2, #4294967295
   85dbe:	d202      	bcs.n	85dc6 <__divdi3+0x13a>
   85dc0:	4584      	cmp	ip, r0
   85dc2:	f200 80ae 	bhi.w	85f22 <__divdi3+0x296>
   85dc6:	463a      	mov	r2, r7
   85dc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   85dcc:	e7b0      	b.n	85d30 <__divdi3+0xa4>
   85dce:	43e4      	mvns	r4, r4
   85dd0:	4252      	negs	r2, r2
   85dd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85dd6:	e762      	b.n	85c9e <__divdi3+0x12>
   85dd8:	4240      	negs	r0, r0
   85dda:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85dde:	f04f 34ff 	mov.w	r4, #4294967295
   85de2:	e759      	b.n	85c98 <__divdi3+0xc>
   85de4:	4095      	lsls	r5, r2
   85de6:	f1c2 0920 	rsb	r9, r2, #32
   85dea:	fa27 f109 	lsr.w	r1, r7, r9
   85dee:	fa26 f909 	lsr.w	r9, r6, r9
   85df2:	4097      	lsls	r7, r2
   85df4:	0c28      	lsrs	r0, r5, #16
   85df6:	fbb1 f8f0 	udiv	r8, r1, r0
   85dfa:	fb00 1118 	mls	r1, r0, r8, r1
   85dfe:	fa1f fc85 	uxth.w	ip, r5
   85e02:	fb0c f308 	mul.w	r3, ip, r8
   85e06:	ea49 0907 	orr.w	r9, r9, r7
   85e0a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   85e0e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85e12:	428b      	cmp	r3, r1
   85e14:	fa06 f602 	lsl.w	r6, r6, r2
   85e18:	d908      	bls.n	85e2c <__divdi3+0x1a0>
   85e1a:	1949      	adds	r1, r1, r5
   85e1c:	f108 32ff 	add.w	r2, r8, #4294967295
   85e20:	d27a      	bcs.n	85f18 <__divdi3+0x28c>
   85e22:	428b      	cmp	r3, r1
   85e24:	d978      	bls.n	85f18 <__divdi3+0x28c>
   85e26:	f1a8 0802 	sub.w	r8, r8, #2
   85e2a:	4429      	add	r1, r5
   85e2c:	1ac9      	subs	r1, r1, r3
   85e2e:	fbb1 f3f0 	udiv	r3, r1, r0
   85e32:	fb00 1713 	mls	r7, r0, r3, r1
   85e36:	fb0c f203 	mul.w	r2, ip, r3
   85e3a:	fa1f f989 	uxth.w	r9, r9
   85e3e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   85e42:	42ba      	cmp	r2, r7
   85e44:	d907      	bls.n	85e56 <__divdi3+0x1ca>
   85e46:	197f      	adds	r7, r7, r5
   85e48:	f103 31ff 	add.w	r1, r3, #4294967295
   85e4c:	d260      	bcs.n	85f10 <__divdi3+0x284>
   85e4e:	42ba      	cmp	r2, r7
   85e50:	d95e      	bls.n	85f10 <__divdi3+0x284>
   85e52:	3b02      	subs	r3, #2
   85e54:	442f      	add	r7, r5
   85e56:	1abf      	subs	r7, r7, r2
   85e58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   85e5c:	e78c      	b.n	85d78 <__divdi3+0xec>
   85e5e:	f1c8 0220 	rsb	r2, r8, #32
   85e62:	fa25 f102 	lsr.w	r1, r5, r2
   85e66:	fa03 fc08 	lsl.w	ip, r3, r8
   85e6a:	fa27 f302 	lsr.w	r3, r7, r2
   85e6e:	fa20 f202 	lsr.w	r2, r0, r2
   85e72:	fa07 f708 	lsl.w	r7, r7, r8
   85e76:	ea41 0c0c 	orr.w	ip, r1, ip
   85e7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   85e7e:	fbb3 f1f9 	udiv	r1, r3, r9
   85e82:	fb09 3311 	mls	r3, r9, r1, r3
   85e86:	fa1f fa8c 	uxth.w	sl, ip
   85e8a:	fb0a fb01 	mul.w	fp, sl, r1
   85e8e:	4317      	orrs	r7, r2
   85e90:	0c3a      	lsrs	r2, r7, #16
   85e92:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85e96:	459b      	cmp	fp, r3
   85e98:	fa05 f008 	lsl.w	r0, r5, r8
   85e9c:	d908      	bls.n	85eb0 <__divdi3+0x224>
   85e9e:	eb13 030c 	adds.w	r3, r3, ip
   85ea2:	f101 32ff 	add.w	r2, r1, #4294967295
   85ea6:	d235      	bcs.n	85f14 <__divdi3+0x288>
   85ea8:	459b      	cmp	fp, r3
   85eaa:	d933      	bls.n	85f14 <__divdi3+0x288>
   85eac:	3902      	subs	r1, #2
   85eae:	4463      	add	r3, ip
   85eb0:	ebcb 0303 	rsb	r3, fp, r3
   85eb4:	fbb3 f2f9 	udiv	r2, r3, r9
   85eb8:	fb09 3312 	mls	r3, r9, r2, r3
   85ebc:	fb0a fa02 	mul.w	sl, sl, r2
   85ec0:	b2bf      	uxth	r7, r7
   85ec2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   85ec6:	45ba      	cmp	sl, r7
   85ec8:	d908      	bls.n	85edc <__divdi3+0x250>
   85eca:	eb17 070c 	adds.w	r7, r7, ip
   85ece:	f102 33ff 	add.w	r3, r2, #4294967295
   85ed2:	d21b      	bcs.n	85f0c <__divdi3+0x280>
   85ed4:	45ba      	cmp	sl, r7
   85ed6:	d919      	bls.n	85f0c <__divdi3+0x280>
   85ed8:	3a02      	subs	r2, #2
   85eda:	4467      	add	r7, ip
   85edc:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   85ee0:	fba5 0100 	umull	r0, r1, r5, r0
   85ee4:	ebca 0707 	rsb	r7, sl, r7
   85ee8:	428f      	cmp	r7, r1
   85eea:	f04f 0300 	mov.w	r3, #0
   85eee:	d30a      	bcc.n	85f06 <__divdi3+0x27a>
   85ef0:	d005      	beq.n	85efe <__divdi3+0x272>
   85ef2:	462a      	mov	r2, r5
   85ef4:	e71c      	b.n	85d30 <__divdi3+0xa4>
   85ef6:	4662      	mov	r2, ip
   85ef8:	e6fd      	b.n	85cf6 <__divdi3+0x6a>
   85efa:	463b      	mov	r3, r7
   85efc:	e710      	b.n	85d20 <__divdi3+0x94>
   85efe:	fa06 f608 	lsl.w	r6, r6, r8
   85f02:	4286      	cmp	r6, r0
   85f04:	d2f5      	bcs.n	85ef2 <__divdi3+0x266>
   85f06:	1e6a      	subs	r2, r5, #1
   85f08:	2300      	movs	r3, #0
   85f0a:	e711      	b.n	85d30 <__divdi3+0xa4>
   85f0c:	461a      	mov	r2, r3
   85f0e:	e7e5      	b.n	85edc <__divdi3+0x250>
   85f10:	460b      	mov	r3, r1
   85f12:	e7a0      	b.n	85e56 <__divdi3+0x1ca>
   85f14:	4611      	mov	r1, r2
   85f16:	e7cb      	b.n	85eb0 <__divdi3+0x224>
   85f18:	4690      	mov	r8, r2
   85f1a:	e787      	b.n	85e2c <__divdi3+0x1a0>
   85f1c:	4643      	mov	r3, r8
   85f1e:	4642      	mov	r2, r8
   85f20:	e706      	b.n	85d30 <__divdi3+0xa4>
   85f22:	3a02      	subs	r2, #2
   85f24:	e750      	b.n	85dc8 <__divdi3+0x13c>
   85f26:	3902      	subs	r1, #2
   85f28:	442f      	add	r7, r5
   85f2a:	e739      	b.n	85da0 <__divdi3+0x114>

00085f2c <__udivdi3>:
   85f2c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85f30:	4614      	mov	r4, r2
   85f32:	4605      	mov	r5, r0
   85f34:	460e      	mov	r6, r1
   85f36:	2b00      	cmp	r3, #0
   85f38:	d143      	bne.n	85fc2 <__udivdi3+0x96>
   85f3a:	428a      	cmp	r2, r1
   85f3c:	d953      	bls.n	85fe6 <__udivdi3+0xba>
   85f3e:	fab2 f782 	clz	r7, r2
   85f42:	b157      	cbz	r7, 85f5a <__udivdi3+0x2e>
   85f44:	f1c7 0620 	rsb	r6, r7, #32
   85f48:	fa20 f606 	lsr.w	r6, r0, r6
   85f4c:	fa01 f307 	lsl.w	r3, r1, r7
   85f50:	fa02 f407 	lsl.w	r4, r2, r7
   85f54:	fa00 f507 	lsl.w	r5, r0, r7
   85f58:	431e      	orrs	r6, r3
   85f5a:	0c21      	lsrs	r1, r4, #16
   85f5c:	fbb6 f2f1 	udiv	r2, r6, r1
   85f60:	fb01 6612 	mls	r6, r1, r2, r6
   85f64:	b2a0      	uxth	r0, r4
   85f66:	fb00 f302 	mul.w	r3, r0, r2
   85f6a:	0c2f      	lsrs	r7, r5, #16
   85f6c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   85f70:	42b3      	cmp	r3, r6
   85f72:	d909      	bls.n	85f88 <__udivdi3+0x5c>
   85f74:	1936      	adds	r6, r6, r4
   85f76:	f102 37ff 	add.w	r7, r2, #4294967295
   85f7a:	f080 80fd 	bcs.w	86178 <__udivdi3+0x24c>
   85f7e:	42b3      	cmp	r3, r6
   85f80:	f240 80fa 	bls.w	86178 <__udivdi3+0x24c>
   85f84:	3a02      	subs	r2, #2
   85f86:	4426      	add	r6, r4
   85f88:	1af6      	subs	r6, r6, r3
   85f8a:	fbb6 f3f1 	udiv	r3, r6, r1
   85f8e:	fb01 6113 	mls	r1, r1, r3, r6
   85f92:	fb00 f003 	mul.w	r0, r0, r3
   85f96:	b2ad      	uxth	r5, r5
   85f98:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   85f9c:	4288      	cmp	r0, r1
   85f9e:	d908      	bls.n	85fb2 <__udivdi3+0x86>
   85fa0:	1909      	adds	r1, r1, r4
   85fa2:	f103 36ff 	add.w	r6, r3, #4294967295
   85fa6:	f080 80e9 	bcs.w	8617c <__udivdi3+0x250>
   85faa:	4288      	cmp	r0, r1
   85fac:	f240 80e6 	bls.w	8617c <__udivdi3+0x250>
   85fb0:	3b02      	subs	r3, #2
   85fb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85fb6:	2300      	movs	r3, #0
   85fb8:	4610      	mov	r0, r2
   85fba:	4619      	mov	r1, r3
   85fbc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85fc0:	4770      	bx	lr
   85fc2:	428b      	cmp	r3, r1
   85fc4:	d84c      	bhi.n	86060 <__udivdi3+0x134>
   85fc6:	fab3 f683 	clz	r6, r3
   85fca:	2e00      	cmp	r6, #0
   85fcc:	d14f      	bne.n	8606e <__udivdi3+0x142>
   85fce:	428b      	cmp	r3, r1
   85fd0:	d302      	bcc.n	85fd8 <__udivdi3+0xac>
   85fd2:	4282      	cmp	r2, r0
   85fd4:	f200 80dd 	bhi.w	86192 <__udivdi3+0x266>
   85fd8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85fdc:	2300      	movs	r3, #0
   85fde:	2201      	movs	r2, #1
   85fe0:	4610      	mov	r0, r2
   85fe2:	4619      	mov	r1, r3
   85fe4:	4770      	bx	lr
   85fe6:	b912      	cbnz	r2, 85fee <__udivdi3+0xc2>
   85fe8:	2401      	movs	r4, #1
   85fea:	fbb4 f4f2 	udiv	r4, r4, r2
   85fee:	fab4 f284 	clz	r2, r4
   85ff2:	2a00      	cmp	r2, #0
   85ff4:	f040 8082 	bne.w	860fc <__udivdi3+0x1d0>
   85ff8:	1b09      	subs	r1, r1, r4
   85ffa:	0c26      	lsrs	r6, r4, #16
   85ffc:	b2a7      	uxth	r7, r4
   85ffe:	2301      	movs	r3, #1
   86000:	fbb1 f0f6 	udiv	r0, r1, r6
   86004:	fb06 1110 	mls	r1, r6, r0, r1
   86008:	fb07 f200 	mul.w	r2, r7, r0
   8600c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86010:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   86014:	428a      	cmp	r2, r1
   86016:	d907      	bls.n	86028 <__udivdi3+0xfc>
   86018:	1909      	adds	r1, r1, r4
   8601a:	f100 3cff 	add.w	ip, r0, #4294967295
   8601e:	d202      	bcs.n	86026 <__udivdi3+0xfa>
   86020:	428a      	cmp	r2, r1
   86022:	f200 80c8 	bhi.w	861b6 <__udivdi3+0x28a>
   86026:	4660      	mov	r0, ip
   86028:	1a89      	subs	r1, r1, r2
   8602a:	fbb1 f2f6 	udiv	r2, r1, r6
   8602e:	fb06 1112 	mls	r1, r6, r2, r1
   86032:	fb07 f702 	mul.w	r7, r7, r2
   86036:	b2ad      	uxth	r5, r5
   86038:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8603c:	42af      	cmp	r7, r5
   8603e:	d908      	bls.n	86052 <__udivdi3+0x126>
   86040:	192c      	adds	r4, r5, r4
   86042:	f102 31ff 	add.w	r1, r2, #4294967295
   86046:	f080 809b 	bcs.w	86180 <__udivdi3+0x254>
   8604a:	42a7      	cmp	r7, r4
   8604c:	f240 8098 	bls.w	86180 <__udivdi3+0x254>
   86050:	3a02      	subs	r2, #2
   86052:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   86056:	4610      	mov	r0, r2
   86058:	4619      	mov	r1, r3
   8605a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8605e:	4770      	bx	lr
   86060:	2300      	movs	r3, #0
   86062:	461a      	mov	r2, r3
   86064:	4610      	mov	r0, r2
   86066:	4619      	mov	r1, r3
   86068:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8606c:	4770      	bx	lr
   8606e:	f1c6 0520 	rsb	r5, r6, #32
   86072:	fa22 f705 	lsr.w	r7, r2, r5
   86076:	fa03 f406 	lsl.w	r4, r3, r6
   8607a:	fa21 f305 	lsr.w	r3, r1, r5
   8607e:	fa01 fb06 	lsl.w	fp, r1, r6
   86082:	fa20 f505 	lsr.w	r5, r0, r5
   86086:	433c      	orrs	r4, r7
   86088:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8608c:	fbb3 fcf8 	udiv	ip, r3, r8
   86090:	fb08 331c 	mls	r3, r8, ip, r3
   86094:	fa1f f984 	uxth.w	r9, r4
   86098:	fb09 fa0c 	mul.w	sl, r9, ip
   8609c:	ea45 0b0b 	orr.w	fp, r5, fp
   860a0:	ea4f 451b 	mov.w	r5, fp, lsr #16
   860a4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   860a8:	459a      	cmp	sl, r3
   860aa:	fa02 f206 	lsl.w	r2, r2, r6
   860ae:	d904      	bls.n	860ba <__udivdi3+0x18e>
   860b0:	191b      	adds	r3, r3, r4
   860b2:	f10c 35ff 	add.w	r5, ip, #4294967295
   860b6:	d36f      	bcc.n	86198 <__udivdi3+0x26c>
   860b8:	46ac      	mov	ip, r5
   860ba:	ebca 0303 	rsb	r3, sl, r3
   860be:	fbb3 f5f8 	udiv	r5, r3, r8
   860c2:	fb08 3315 	mls	r3, r8, r5, r3
   860c6:	fb09 f905 	mul.w	r9, r9, r5
   860ca:	fa1f fb8b 	uxth.w	fp, fp
   860ce:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   860d2:	45b9      	cmp	r9, r7
   860d4:	d904      	bls.n	860e0 <__udivdi3+0x1b4>
   860d6:	193f      	adds	r7, r7, r4
   860d8:	f105 33ff 	add.w	r3, r5, #4294967295
   860dc:	d362      	bcc.n	861a4 <__udivdi3+0x278>
   860de:	461d      	mov	r5, r3
   860e0:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   860e4:	fbac 2302 	umull	r2, r3, ip, r2
   860e8:	ebc9 0707 	rsb	r7, r9, r7
   860ec:	429f      	cmp	r7, r3
   860ee:	f04f 0500 	mov.w	r5, #0
   860f2:	d34a      	bcc.n	8618a <__udivdi3+0x25e>
   860f4:	d046      	beq.n	86184 <__udivdi3+0x258>
   860f6:	4662      	mov	r2, ip
   860f8:	462b      	mov	r3, r5
   860fa:	e75d      	b.n	85fb8 <__udivdi3+0x8c>
   860fc:	4094      	lsls	r4, r2
   860fe:	f1c2 0920 	rsb	r9, r2, #32
   86102:	fa21 fc09 	lsr.w	ip, r1, r9
   86106:	4091      	lsls	r1, r2
   86108:	fa20 f909 	lsr.w	r9, r0, r9
   8610c:	0c26      	lsrs	r6, r4, #16
   8610e:	fbbc f8f6 	udiv	r8, ip, r6
   86112:	fb06 cc18 	mls	ip, r6, r8, ip
   86116:	b2a7      	uxth	r7, r4
   86118:	fb07 f308 	mul.w	r3, r7, r8
   8611c:	ea49 0901 	orr.w	r9, r9, r1
   86120:	ea4f 4119 	mov.w	r1, r9, lsr #16
   86124:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   86128:	4563      	cmp	r3, ip
   8612a:	fa00 f502 	lsl.w	r5, r0, r2
   8612e:	d909      	bls.n	86144 <__udivdi3+0x218>
   86130:	eb1c 0c04 	adds.w	ip, ip, r4
   86134:	f108 32ff 	add.w	r2, r8, #4294967295
   86138:	d23b      	bcs.n	861b2 <__udivdi3+0x286>
   8613a:	4563      	cmp	r3, ip
   8613c:	d939      	bls.n	861b2 <__udivdi3+0x286>
   8613e:	f1a8 0802 	sub.w	r8, r8, #2
   86142:	44a4      	add	ip, r4
   86144:	ebc3 0c0c 	rsb	ip, r3, ip
   86148:	fbbc f3f6 	udiv	r3, ip, r6
   8614c:	fb06 c113 	mls	r1, r6, r3, ip
   86150:	fb07 f203 	mul.w	r2, r7, r3
   86154:	fa1f f989 	uxth.w	r9, r9
   86158:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   8615c:	428a      	cmp	r2, r1
   8615e:	d907      	bls.n	86170 <__udivdi3+0x244>
   86160:	1909      	adds	r1, r1, r4
   86162:	f103 30ff 	add.w	r0, r3, #4294967295
   86166:	d222      	bcs.n	861ae <__udivdi3+0x282>
   86168:	428a      	cmp	r2, r1
   8616a:	d920      	bls.n	861ae <__udivdi3+0x282>
   8616c:	3b02      	subs	r3, #2
   8616e:	4421      	add	r1, r4
   86170:	1a89      	subs	r1, r1, r2
   86172:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   86176:	e743      	b.n	86000 <__udivdi3+0xd4>
   86178:	463a      	mov	r2, r7
   8617a:	e705      	b.n	85f88 <__udivdi3+0x5c>
   8617c:	4633      	mov	r3, r6
   8617e:	e718      	b.n	85fb2 <__udivdi3+0x86>
   86180:	460a      	mov	r2, r1
   86182:	e766      	b.n	86052 <__udivdi3+0x126>
   86184:	40b0      	lsls	r0, r6
   86186:	4290      	cmp	r0, r2
   86188:	d2b5      	bcs.n	860f6 <__udivdi3+0x1ca>
   8618a:	f10c 32ff 	add.w	r2, ip, #4294967295
   8618e:	2300      	movs	r3, #0
   86190:	e712      	b.n	85fb8 <__udivdi3+0x8c>
   86192:	4633      	mov	r3, r6
   86194:	4632      	mov	r2, r6
   86196:	e70f      	b.n	85fb8 <__udivdi3+0x8c>
   86198:	459a      	cmp	sl, r3
   8619a:	d98d      	bls.n	860b8 <__udivdi3+0x18c>
   8619c:	f1ac 0c02 	sub.w	ip, ip, #2
   861a0:	4423      	add	r3, r4
   861a2:	e78a      	b.n	860ba <__udivdi3+0x18e>
   861a4:	45b9      	cmp	r9, r7
   861a6:	d99a      	bls.n	860de <__udivdi3+0x1b2>
   861a8:	3d02      	subs	r5, #2
   861aa:	4427      	add	r7, r4
   861ac:	e798      	b.n	860e0 <__udivdi3+0x1b4>
   861ae:	4603      	mov	r3, r0
   861b0:	e7de      	b.n	86170 <__udivdi3+0x244>
   861b2:	4690      	mov	r8, r2
   861b4:	e7c6      	b.n	86144 <__udivdi3+0x218>
   861b6:	3802      	subs	r0, #2
   861b8:	4421      	add	r1, r4
   861ba:	e735      	b.n	86028 <__udivdi3+0xfc>
   861bc:	000a6425 	.word	0x000a6425
   861c0:	09097325 	.word	0x09097325
   861c4:	25096325 	.word	0x25096325
   861c8:	75250975 	.word	0x75250975
   861cc:	0d752509 	.word	0x0d752509
   861d0:	0000000a 	.word	0x0000000a
   861d4:	454c4449 	.word	0x454c4449
   861d8:	00000000 	.word	0x00000000
   861dc:	00000a0d 	.word	0x00000a0d
   861e0:	20726d54 	.word	0x20726d54
   861e4:	00637653 	.word	0x00637653
   861e8:	00000001 	.word	0x00000001
   861ec:	00000002 	.word	0x00000002
   861f0:	00000004 	.word	0x00000004
   861f4:	00000008 	.word	0x00000008
   861f8:	00000010 	.word	0x00000010
   861fc:	00000020 	.word	0x00000020
   86200:	00000040 	.word	0x00000040
   86204:	00000080 	.word	0x00000080
   86208:	00000100 	.word	0x00000100
   8620c:	00000200 	.word	0x00000200
   86210:	00000400 	.word	0x00000400
   86214:	6b736174 	.word	0x6b736174
   86218:	75646f4d 	.word	0x75646f4d
   8621c:	6574616c 	.word	0x6574616c
   86220:	00000000 	.word	0x00000000
   86224:	6c696146 	.word	0x6c696146
   86228:	74206465 	.word	0x74206465
   8622c:	7263206f 	.word	0x7263206f
   86230:	65746165 	.word	0x65746165
   86234:	73617420 	.word	0x73617420
   86238:	646f4d6b 	.word	0x646f4d6b
   8623c:	74616c75 	.word	0x74616c75
   86240:	00000a65 	.word	0x00000a65
   86244:	6b736174 	.word	0x6b736174
   86248:	646e6553 	.word	0x646e6553
   8624c:	614d6f54 	.word	0x614d6f54
   86250:	62616c74 	.word	0x62616c74
   86254:	00000000 	.word	0x00000000
   86258:	6c696146 	.word	0x6c696146
   8625c:	74206465 	.word	0x74206465
   86260:	7263206f 	.word	0x7263206f
   86264:	65746165 	.word	0x65746165
   86268:	73617420 	.word	0x73617420
   8626c:	6e65536b 	.word	0x6e65536b
   86270:	4d6f5464 	.word	0x4d6f5464
   86274:	616c7461 	.word	0x616c7461
   86278:	00000a62 	.word	0x00000a62
   8627c:	00000043 	.word	0x00000043

00086280 <_global_impure_ptr>:
   86280:	20070010 33323130 37363534 42413938     ... 0123456789AB
   86290:	46454443 00000000 33323130 37363534     CDEF....01234567
   862a0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   862b0:	0000296c                                l)..

000862b4 <zeroes.6721>:
   862b4:	30303030 30303030 30303030 30303030     0000000000000000

000862c4 <blanks.6720>:
   862c4:	20202020 20202020 20202020 20202020                     

000862d4 <_init>:
   862d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   862d6:	bf00      	nop
   862d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   862da:	bc08      	pop	{r3}
   862dc:	469e      	mov	lr, r3
   862de:	4770      	bx	lr

000862e0 <__init_array_start>:
   862e0:	0008439d 	.word	0x0008439d

000862e4 <__frame_dummy_init_array_entry>:
   862e4:	00080119                                ....

000862e8 <_fini>:
   862e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   862ea:	bf00      	nop
   862ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   862ee:	bc08      	pop	{r3}
   862f0:	469e      	mov	lr, r3
   862f2:	4770      	bx	lr

000862f4 <__fini_array_start>:
   862f4:	000800f5 	.word	0x000800f5
